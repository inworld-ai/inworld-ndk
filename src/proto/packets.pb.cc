// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "ProtoDisableWarning.h"

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace packets {
PROTOBUF_CONSTEXPR Actor::Actor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorDefaultTypeInternal() {}
  union {
    Actor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorDefaultTypeInternal _Actor_default_instance_;
PROTOBUF_CONSTEXPR Routing::Routing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingDefaultTypeInternal() {}
  union {
    Routing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingDefaultTypeInternal _Routing_default_instance_;
PROTOBUF_CONSTEXPR PacketId::PacketId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utterance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.correlation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketIdDefaultTypeInternal() {}
  union {
    PacketId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketIdDefaultTypeInternal _PacketId_default_instance_;
PROTOBUF_CONSTEXPR InworldPacket::InworldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.routing_)*/nullptr
  , /*decltype(_impl_.packet_id_)*/nullptr
  , /*decltype(_impl_.packet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct InworldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InworldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InworldPacketDefaultTypeInternal() {}
  union {
    InworldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InworldPacketDefaultTypeInternal _InworldPacket_default_instance_;
PROTOBUF_CONSTEXPR TextEvent::TextEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_type_)*/0
  , /*decltype(_impl_.final_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextEventDefaultTypeInternal() {}
  union {
    TextEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextEventDefaultTypeInternal _TextEvent_default_instance_;
PROTOBUF_CONSTEXPR ControlEvent::ControlEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlEventDefaultTypeInternal() {}
  union {
    ControlEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlEventDefaultTypeInternal _ControlEvent_default_instance_;
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
PROTOBUF_CONSTEXPR CustomEvent_Parameter::CustomEvent_Parameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomEvent_ParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomEvent_ParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomEvent_ParameterDefaultTypeInternal() {}
  union {
    CustomEvent_Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomEvent_ParameterDefaultTypeInternal _CustomEvent_Parameter_default_instance_;
PROTOBUF_CONSTEXPR CustomEvent::CustomEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playback_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomEventDefaultTypeInternal() {}
  union {
    CustomEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomEventDefaultTypeInternal _CustomEvent_default_instance_;
PROTOBUF_CONSTEXPR CancelResponsesEvent::CancelResponsesEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.utterance_id_)*/{}
  , /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelResponsesEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelResponsesEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelResponsesEventDefaultTypeInternal() {}
  union {
    CancelResponsesEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelResponsesEventDefaultTypeInternal _CancelResponsesEvent_default_instance_;
PROTOBUF_CONSTEXPR EmotionEvent::EmotionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.joy_)*/0
  , /*decltype(_impl_.fear_)*/0
  , /*decltype(_impl_.trust_)*/0
  , /*decltype(_impl_.surprise_)*/0
  , /*decltype(_impl_.behavior_)*/0
  , /*decltype(_impl_.strength_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmotionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmotionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmotionEventDefaultTypeInternal() {}
  union {
    EmotionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmotionEventDefaultTypeInternal _EmotionEvent_default_instance_;
PROTOBUF_CONSTEXPR DataChunk::DataChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_phoneme_info_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChunkDefaultTypeInternal() {}
  union {
    DataChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChunkDefaultTypeInternal _DataChunk_default_instance_;
PROTOBUF_CONSTEXPR AdditionalPhonemeInfo::AdditionalPhonemeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phoneme_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_offset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdditionalPhonemeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdditionalPhonemeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdditionalPhonemeInfoDefaultTypeInternal() {}
  union {
    AdditionalPhonemeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdditionalPhonemeInfoDefaultTypeInternal _AdditionalPhonemeInfo_default_instance_;
PROTOBUF_CONSTEXPR ActionEvent::ActionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playback_)*/0
  , /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ActionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionEventDefaultTypeInternal() {}
  union {
    ActionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionEventDefaultTypeInternal _ActionEvent_default_instance_;
PROTOBUF_CONSTEXPR NarratedAction::NarratedAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NarratedActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NarratedActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NarratedActionDefaultTypeInternal() {}
  union {
    NarratedAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NarratedActionDefaultTypeInternal _NarratedAction_default_instance_;
PROTOBUF_CONSTEXPR RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trust_)*/0
  , /*decltype(_impl_.respect_)*/0
  , /*decltype(_impl_.familiar_)*/0
  , /*decltype(_impl_.flirtatious_)*/0
  , /*decltype(_impl_.attraction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelationInfo_RelationAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationInfo_RelationAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationInfo_RelationAttributesDefaultTypeInternal() {}
  union {
    RelationInfo_RelationAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationInfo_RelationAttributesDefaultTypeInternal _RelationInfo_RelationAttributes_default_instance_;
PROTOBUF_CONSTEXPR RelationInfo::RelationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relation_state_)*/nullptr
  , /*decltype(_impl_.relation_update_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationInfoDefaultTypeInternal() {}
  union {
    RelationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationInfoDefaultTypeInternal _RelationInfo_default_instance_;
PROTOBUF_CONSTEXPR MutationEvent::MutationEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mutation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MutationEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MutationEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MutationEventDefaultTypeInternal() {}
  union {
    MutationEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MutationEventDefaultTypeInternal _MutationEvent_default_instance_;
PROTOBUF_CONSTEXPR CancelResponses::CancelResponses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.utterance_id_)*/{}
  , /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelResponsesDefaultTypeInternal() {}
  union {
    CancelResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelResponsesDefaultTypeInternal _CancelResponses_default_instance_;
PROTOBUF_CONSTEXPR RegenerateResponse::RegenerateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegenerateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegenerateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegenerateResponseDefaultTypeInternal() {}
  union {
    RegenerateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegenerateResponseDefaultTypeInternal _RegenerateResponse_default_instance_;
PROTOBUF_CONSTEXPR ApplyResponse::ApplyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApplyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyResponseDefaultTypeInternal() {}
  union {
    ApplyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyResponseDefaultTypeInternal _ApplyResponse_default_instance_;
PROTOBUF_CONSTEXPR LoadScene::LoadScene(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadSceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadSceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadSceneDefaultTypeInternal() {}
  union {
    LoadScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadSceneDefaultTypeInternal _LoadScene_default_instance_;
PROTOBUF_CONSTEXPR ModifyExactResponse::ModifyExactResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exact_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModifyExactResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyExactResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyExactResponseDefaultTypeInternal() {}
  union {
    ModifyExactResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyExactResponseDefaultTypeInternal _ModifyExactResponse_default_instance_;
PROTOBUF_CONSTEXPR LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agent_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.brain_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.given_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadSceneOutputEvent_AgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadSceneOutputEvent_AgentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadSceneOutputEvent_AgentDefaultTypeInternal() {}
  union {
    LoadSceneOutputEvent_Agent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadSceneOutputEvent_AgentDefaultTypeInternal _LoadSceneOutputEvent_Agent_default_instance_;
PROTOBUF_CONSTEXPR LoadSceneOutputEvent::LoadSceneOutputEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agents_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadSceneOutputEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadSceneOutputEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadSceneOutputEventDefaultTypeInternal() {}
  union {
    LoadSceneOutputEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadSceneOutputEventDefaultTypeInternal _LoadSceneOutputEvent_default_instance_;
PROTOBUF_CONSTEXPR DebugInfoEvent::DebugInfoEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DebugInfoEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugInfoEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugInfoEventDefaultTypeInternal() {}
  union {
    DebugInfoEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugInfoEventDefaultTypeInternal _DebugInfoEvent_default_instance_;
}  // namespace packets
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_packets_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_packets_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const uint32_t TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.utterance_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.routing_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.packet_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _impl_.source_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _impl_.final_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, _impl_.chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _impl_.playback_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _impl_.parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _impl_.interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _impl_.utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.joy_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.fear_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.surprise_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.behavior_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_.additional_phoneme_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _impl_.phoneme_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _impl_.start_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _impl_.playback_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::NarratedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::NarratedAction, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _impl_.trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _impl_.respect_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _impl_.familiar_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _impl_.flirtatious_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _impl_.attraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, _impl_.relation_state_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, _impl_.relation_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _impl_.mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, _impl_.interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, _impl_.utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RegenerateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RegenerateResponse, _impl_.interaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, _impl_.packet_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, _impl_.interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, _impl_.exact_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, _impl_.agent_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, _impl_.brain_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, _impl_.given_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent, _impl_.agents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _impl_.info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::packets::Actor)},
  { 8, -1, -1, sizeof(::ai::inworld::packets::Routing)},
  { 16, -1, -1, sizeof(::ai::inworld::packets::PacketId)},
  { 26, -1, -1, sizeof(::ai::inworld::packets::InworldPacket)},
  { 47, -1, -1, sizeof(::ai::inworld::packets::TextEvent)},
  { 56, -1, -1, sizeof(::ai::inworld::packets::ControlEvent)},
  { 65, -1, -1, sizeof(::ai::inworld::packets::AudioChunk)},
  { 72, -1, -1, sizeof(::ai::inworld::packets::CustomEvent_Parameter)},
  { 80, -1, -1, sizeof(::ai::inworld::packets::CustomEvent)},
  { 89, -1, -1, sizeof(::ai::inworld::packets::CancelResponsesEvent)},
  { 97, -1, -1, sizeof(::ai::inworld::packets::EmotionEvent)},
  { 109, -1, -1, sizeof(::ai::inworld::packets::DataChunk)},
  { 120, -1, -1, sizeof(::ai::inworld::packets::AdditionalPhonemeInfo)},
  { 128, -1, -1, sizeof(::ai::inworld::packets::ActionEvent)},
  { 137, -1, -1, sizeof(::ai::inworld::packets::NarratedAction)},
  { 144, -1, -1, sizeof(::ai::inworld::packets::RelationInfo_RelationAttributes)},
  { 155, -1, -1, sizeof(::ai::inworld::packets::RelationInfo)},
  { 163, -1, -1, sizeof(::ai::inworld::packets::MutationEvent)},
  { 175, -1, -1, sizeof(::ai::inworld::packets::CancelResponses)},
  { 183, -1, -1, sizeof(::ai::inworld::packets::RegenerateResponse)},
  { 190, -1, -1, sizeof(::ai::inworld::packets::ApplyResponse)},
  { 197, -1, -1, sizeof(::ai::inworld::packets::LoadScene)},
  { 204, -1, -1, sizeof(::ai::inworld::packets::ModifyExactResponse)},
  { 212, -1, -1, sizeof(::ai::inworld::packets::LoadSceneOutputEvent_Agent)},
  { 221, -1, -1, sizeof(::ai::inworld::packets::LoadSceneOutputEvent)},
  { 228, -1, -1, sizeof(::ai::inworld::packets::DebugInfoEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::packets::_Actor_default_instance_._instance,
  &::ai::inworld::packets::_Routing_default_instance_._instance,
  &::ai::inworld::packets::_PacketId_default_instance_._instance,
  &::ai::inworld::packets::_InworldPacket_default_instance_._instance,
  &::ai::inworld::packets::_TextEvent_default_instance_._instance,
  &::ai::inworld::packets::_ControlEvent_default_instance_._instance,
  &::ai::inworld::packets::_AudioChunk_default_instance_._instance,
  &::ai::inworld::packets::_CustomEvent_Parameter_default_instance_._instance,
  &::ai::inworld::packets::_CustomEvent_default_instance_._instance,
  &::ai::inworld::packets::_CancelResponsesEvent_default_instance_._instance,
  &::ai::inworld::packets::_EmotionEvent_default_instance_._instance,
  &::ai::inworld::packets::_DataChunk_default_instance_._instance,
  &::ai::inworld::packets::_AdditionalPhonemeInfo_default_instance_._instance,
  &::ai::inworld::packets::_ActionEvent_default_instance_._instance,
  &::ai::inworld::packets::_NarratedAction_default_instance_._instance,
  &::ai::inworld::packets::_RelationInfo_RelationAttributes_default_instance_._instance,
  &::ai::inworld::packets::_RelationInfo_default_instance_._instance,
  &::ai::inworld::packets::_MutationEvent_default_instance_._instance,
  &::ai::inworld::packets::_CancelResponses_default_instance_._instance,
  &::ai::inworld::packets::_RegenerateResponse_default_instance_._instance,
  &::ai::inworld::packets::_ApplyResponse_default_instance_._instance,
  &::ai::inworld::packets::_LoadScene_default_instance_._instance,
  &::ai::inworld::packets::_ModifyExactResponse_default_instance_._instance,
  &::ai::inworld::packets::_LoadSceneOutputEvent_Agent_default_instance_._instance,
  &::ai::inworld::packets::_LoadSceneOutputEvent_default_instance_._instance,
  &::ai::inworld::packets::_DebugInfoEvent_default_instance_._instance,
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\022\022ai.inworld.packets\032\036goo"
  "gle/protobuf/duration.proto\032\034google/prot"
  "obuf/struct.proto\032\037google/protobuf/times"
  "tamp.proto\"o\n\005Actor\022,\n\004type\030\001 \001(\0162\036.ai.i"
  "nworld.packets.Actor.Type\022\014\n\004name\030\002 \001(\t\""
  "*\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006PLAYER\020\001\022\t\n\005AGEN"
  "T\020\002\"_\n\007Routing\022)\n\006source\030\001 \001(\0132\031.ai.inwo"
  "rld.packets.Actor\022)\n\006target\030\002 \001(\0132\031.ai.i"
  "nworld.packets.Actor\"c\n\010PacketId\022\021\n\tpack"
  "et_id\030\001 \001(\t\022\024\n\014utterance_id\030\002 \001(\t\022\026\n\016int"
  "eraction_id\030\003 \001(\t\022\026\n\016correlation_id\030\004 \001("
  "\t\"\257\006\n\rInworldPacket\022-\n\ttimestamp\030\001 \001(\0132\032"
  ".google.protobuf.Timestamp\022,\n\007routing\030\006 "
  "\001(\0132\033.ai.inworld.packets.Routing\022/\n\tpack"
  "et_id\030\t \001(\0132\034.ai.inworld.packets.PacketI"
  "d\022-\n\004text\030\002 \001(\0132\035.ai.inworld.packets.Tex"
  "tEventH\000\0223\n\007control\030\003 \001(\0132 .ai.inworld.p"
  "ackets.ControlEventH\000\0229\n\013audio_chunk\030\004 \001"
  "(\0132\036.ai.inworld.packets.AudioChunkB\002\030\001H\000"
  "\0221\n\006custom\030\010 \001(\0132\037.ai.inworld.packets.Cu"
  "stomEventH\000\022G\n\017cancelResponses\030\n \001(\0132(.a"
  "i.inworld.packets.CancelResponsesEventB\002"
  "\030\001H\000\0223\n\007emotion\030\013 \001(\0132 .ai.inworld.packe"
  "ts.EmotionEventH\000\0223\n\ndata_chunk\030\014 \001(\0132\035."
  "ai.inworld.packets.DataChunkH\000\0221\n\006action"
  "\030\r \001(\0132\037.ai.inworld.packets.ActionEventH"
  "\000\0225\n\010mutation\030\017 \001(\0132!.ai.inworld.packets"
  ".MutationEventH\000\022E\n\021load_scene_output\030\020 "
  "\001(\0132(.ai.inworld.packets.LoadSceneOutput"
  "EventH\000\0228\n\ndebug_info\030\022 \001(\0132\".ai.inworld"
  ".packets.DebugInfoEventH\000B\010\n\006packetJ\004\010\005\020"
  "\006J\004\010\007\020\010J\004\010\016\020\017J\004\010\021\020\022\"\277\001\n\tTextEvent\022\014\n\004tex"
  "t\030\001 \001(\t\022=\n\013source_type\030\002 \001(\0162(.ai.inworl"
  "d.packets.TextEvent.SourceType\022\r\n\005final\030"
  "\003 \001(\010\"V\n\nSourceType\022\013\n\007UNKNOWN\020\000\022\022\n\016SPEE"
  "CH_TO_TEXT\020\001\022\014\n\010TYPED_IN\020\002\022\r\n\tGENERATED\020"
  "\003\022\n\n\006FILLER\020\004\"\337\002\n\014ControlEvent\0227\n\006action"
  "\030\001 \001(\0162\'.ai.inworld.packets.ControlEvent"
  ".Action\022\023\n\013description\030\002 \001(\t\022(\n\007payload\030"
  "\003 \001(\0132\027.google.protobuf.Struct\"\326\001\n\006Actio"
  "n\022\013\n\007UNKNOWN\020\000\022\027\n\023AUDIO_SESSION_START\020\001\022"
  "\025\n\021AUDIO_SESSION_END\020\002\022\023\n\017INTERACTION_EN"
  "D\020\003\022\026\n\022TTS_PLAYBACK_START\020\004\022\024\n\020TTS_PLAYB"
  "ACK_END\020\005\022\025\n\021TTS_PLAYBACK_MUTE\020\006\022\027\n\023TTS_"
  "PLAYBACK_UNMUTE\020\007\022\013\n\007WARNING\020\010\022\017\n\013SESSIO"
  "N_END\020\t\"\037\n\nAudioChunk\022\r\n\005chunk\030\001 \001(\014:\002\030\001"
  "\"\264\001\n\013CustomEvent\022\014\n\004name\030\001 \001(\t\022.\n\010playba"
  "ck\030\002 \001(\0162\034.ai.inworld.packets.Playback\022="
  "\n\nparameters\030\003 \003(\0132).ai.inworld.packets."
  "CustomEvent.Parameter\032(\n\tParameter\022\014\n\004na"
  "me\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"H\n\024CancelRespons"
  "esEvent\022\026\n\016interaction_id\030\001 \001(\t\022\024\n\014utter"
  "ance_id\030\002 \003(\t:\002\030\001\"\243\004\n\014EmotionEvent\022\013\n\003jo"
  "y\030\001 \001(\002\022\014\n\004fear\030\002 \001(\002\022\r\n\005trust\030\003 \001(\002\022\020\n\010"
  "surprise\030\004 \001(\002\022<\n\010behavior\030\005 \001(\0162*.ai.in"
  "world.packets.EmotionEvent.SpaffCode\022;\n\010"
  "strength\030\006 \001(\0162).ai.inworld.packets.Emot"
  "ionEvent.Strength\"\234\002\n\tSpaffCode\022\013\n\007NEUTR"
  "AL\020\000\022\013\n\007DISGUST\020\001\022\014\n\010CONTEMPT\020\002\022\020\n\014BELLI"
  "GERENCE\020\003\022\017\n\013DOMINEERING\020\004\022\r\n\tCRITICISM\020"
  "\005\022\t\n\005ANGER\020\006\022\013\n\007TENSION\020\007\022\017\n\013TENSE_HUMOR"
  "\020\010\022\021\n\rDEFENSIVENESS\020\t\022\013\n\007WHINING\020\n\022\013\n\007SA"
  "DNESS\020\013\022\020\n\014STONEWALLING\020\014\022\014\n\010INTEREST\020\r\022"
  "\016\n\nVALIDATION\020\016\022\r\n\tAFFECTION\020\017\022\t\n\005HUMOR\020"
  "\020\022\014\n\010SURPRISE\020\021\022\007\n\003JOY\020\022\"=\n\010Strength\022\017\n\013"
  "UNSPECIFIED\020\000\022\010\n\004WEAK\020\001\022\n\n\006STRONG\020\002\022\n\n\006N"
  "ORMAL\020\003\"\214\002\n\tDataChunk\022\017\n\005chunk\030\001 \001(\014H\000\022\025"
  "\n\013duration_ms\030\003 \001(\003H\000\0224\n\004type\030\002 \001(\0162&.ai"
  ".inworld.packets.DataChunk.DataType\022J\n\027a"
  "dditional_phoneme_info\030\004 \003(\0132).ai.inworl"
  "d.packets.AdditionalPhonemeInfo\"M\n\010DataT"
  "ype\022\017\n\013UNSPECIFIED\020\000\022\t\n\005AUDIO\020\001\022\r\n\tANIMA"
  "TION\020\002\022\013\n\007SILENCE\020\003\022\t\n\005STATE\020\004B\006\n\004data\"Y"
  "\n\025AdditionalPhonemeInfo\022\017\n\007phoneme\030\001 \001(\t"
  "\022/\n\014start_offset\030\002 \001(\0132\031.google.protobuf"
  ".Duration\"\206\001\n\013ActionEvent\022=\n\017narrated_ac"
  "tion\030\001 \001(\0132\".ai.inworld.packets.Narrated"
  "ActionH\000\022.\n\010playback\030\002 \001(\0162\034.ai.inworld."
  "packets.PlaybackB\010\n\006action\"!\n\016NarratedAc"
  "tion\022\017\n\007content\030\001 \001(\t\"\232\002\n\014RelationInfo\022K"
  "\n\016relation_state\030\001 \001(\01323.ai.inworld.pack"
  "ets.RelationInfo.RelationAttributes\022L\n\017r"
  "elation_update\030\002 \001(\01323.ai.inworld.packet"
  "s.RelationInfo.RelationAttributes\032o\n\022Rel"
  "ationAttributes\022\r\n\005trust\030\001 \001(\005\022\017\n\007respec"
  "t\030\002 \001(\005\022\020\n\010familiar\030\003 \001(\005\022\023\n\013flirtatious"
  "\030\004 \001(\005\022\022\n\nattraction\030\005 \001(\005\"\337\002\n\rMutationE"
  "vent\022\?\n\020cancel_responses\030\001 \001(\0132#.ai.inwo"
  "rld.packets.CancelResponsesH\000\022E\n\023regener"
  "ate_response\030\002 \001(\0132&.ai.inworld.packets."
  "RegenerateResponseH\000\022;\n\016apply_response\030\003"
  " \001(\0132!.ai.inworld.packets.ApplyResponseH"
  "\000\0223\n\nload_scene\030\004 \001(\0132\035.ai.inworld.packe"
  "ts.LoadSceneH\000\022H\n\025modify_exact_response\030"
  "\005 \001(\0132\'.ai.inworld.packets.ModifyExactRe"
  "sponseH\000B\n\n\010mutation\"\?\n\017CancelResponses\022"
  "\026\n\016interaction_id\030\001 \001(\t\022\024\n\014utterance_id\030"
  "\002 \003(\t\",\n\022RegenerateResponse\022\026\n\016interacti"
  "on_id\030\001 \001(\t\"@\n\rApplyResponse\022/\n\tpacket_i"
  "d\030\001 \001(\0132\034.ai.inworld.packets.PacketId\"\031\n"
  "\tLoadScene\022\014\n\004name\030\001 \001(\t\"A\n\023ModifyExactR"
  "esponse\022\026\n\016interaction_id\030\001 \001(\t\022\022\n\nexact"
  "_text\030\002 \001(\t\"\231\001\n\024LoadSceneOutputEvent\022>\n\006"
  "agents\030\001 \003(\0132..ai.inworld.packets.LoadSc"
  "eneOutputEvent.Agent\032A\n\005Agent\022\020\n\010agent_i"
  "d\030\001 \001(\t\022\022\n\nbrain_name\030\002 \001(\t\022\022\n\ngiven_nam"
  "e\030\003 \001(\t\"N\n\016DebugInfoEvent\0224\n\010relation\030\001 "
  "\001(\0132 .ai.inworld.packets.RelationInfoH\000B"
  "\006\n\004info*P\n\010Playback\022\017\n\013UNSPECIFIED\020\000\022\017\n\013"
  "INTERACTION\020\001\022\023\n\017INTERACTION_END\020\002\022\r\n\tUT"
  "TERANCE\020\003B\212\001\n\022ai.inworld.packetsB\026Inworl"
  "dPacketsProtocolZMgithub.com/inworld-ai/"
  "inworld/serving/grpc-gateway/build/proto"
  "/engine/v1alpha\252\002\014Inworld.Grpcb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_packets_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_packets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_packets_2eproto = {
    false, false, 4558, descriptor_table_protodef_packets_2eproto,
    "packets.proto",
    &descriptor_table_packets_2eproto_once, descriptor_table_packets_2eproto_deps, 3, 26,
    schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
    file_level_metadata_packets_2eproto, file_level_enum_descriptors_packets_2eproto,
    file_level_service_descriptors_packets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_packets_2eproto_getter() {
  return &descriptor_table_packets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_packets_2eproto(&descriptor_table_packets_2eproto);
namespace ai {
namespace inworld {
namespace packets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Actor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[0];
}
bool Actor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Actor_Type Actor::UNKNOWN;
constexpr Actor_Type Actor::PLAYER;
constexpr Actor_Type Actor::AGENT;
constexpr Actor_Type Actor::Type_MIN;
constexpr Actor_Type Actor::Type_MAX;
constexpr int Actor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextEvent_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[1];
}
bool TextEvent_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TextEvent_SourceType TextEvent::UNKNOWN;
constexpr TextEvent_SourceType TextEvent::SPEECH_TO_TEXT;
constexpr TextEvent_SourceType TextEvent::TYPED_IN;
constexpr TextEvent_SourceType TextEvent::GENERATED;
constexpr TextEvent_SourceType TextEvent::FILLER;
constexpr TextEvent_SourceType TextEvent::SourceType_MIN;
constexpr TextEvent_SourceType TextEvent::SourceType_MAX;
constexpr int TextEvent::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlEvent_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[2];
}
bool ControlEvent_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlEvent_Action ControlEvent::UNKNOWN;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_START;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_END;
constexpr ControlEvent_Action ControlEvent::INTERACTION_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_START;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_MUTE;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_UNMUTE;
constexpr ControlEvent_Action ControlEvent::WARNING;
constexpr ControlEvent_Action ControlEvent::SESSION_END;
constexpr ControlEvent_Action ControlEvent::Action_MIN;
constexpr ControlEvent_Action ControlEvent::Action_MAX;
constexpr int ControlEvent::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_SpaffCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[3];
}
bool EmotionEvent_SpaffCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EmotionEvent_SpaffCode EmotionEvent::NEUTRAL;
constexpr EmotionEvent_SpaffCode EmotionEvent::DISGUST;
constexpr EmotionEvent_SpaffCode EmotionEvent::CONTEMPT;
constexpr EmotionEvent_SpaffCode EmotionEvent::BELLIGERENCE;
constexpr EmotionEvent_SpaffCode EmotionEvent::DOMINEERING;
constexpr EmotionEvent_SpaffCode EmotionEvent::CRITICISM;
constexpr EmotionEvent_SpaffCode EmotionEvent::ANGER;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSION;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSE_HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::DEFENSIVENESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::WHINING;
constexpr EmotionEvent_SpaffCode EmotionEvent::SADNESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::STONEWALLING;
constexpr EmotionEvent_SpaffCode EmotionEvent::INTEREST;
constexpr EmotionEvent_SpaffCode EmotionEvent::VALIDATION;
constexpr EmotionEvent_SpaffCode EmotionEvent::AFFECTION;
constexpr EmotionEvent_SpaffCode EmotionEvent::HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::SURPRISE;
constexpr EmotionEvent_SpaffCode EmotionEvent::JOY;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MIN;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MAX;
constexpr int EmotionEvent::SpaffCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_Strength_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[4];
}
bool EmotionEvent_Strength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EmotionEvent_Strength EmotionEvent::UNSPECIFIED;
constexpr EmotionEvent_Strength EmotionEvent::WEAK;
constexpr EmotionEvent_Strength EmotionEvent::STRONG;
constexpr EmotionEvent_Strength EmotionEvent::NORMAL;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MIN;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MAX;
constexpr int EmotionEvent::Strength_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChunk_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[5];
}
bool DataChunk_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataChunk_DataType DataChunk::UNSPECIFIED;
constexpr DataChunk_DataType DataChunk::AUDIO;
constexpr DataChunk_DataType DataChunk::ANIMATION;
constexpr DataChunk_DataType DataChunk::SILENCE;
constexpr DataChunk_DataType DataChunk::STATE;
constexpr DataChunk_DataType DataChunk::DataType_MIN;
constexpr DataChunk_DataType DataChunk::DataType_MAX;
constexpr int DataChunk::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Playback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[6];
}
bool Playback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Actor::_Internal {
 public:
};

Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Actor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Actor)
}

inline void Actor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Actor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Actor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Actor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Actor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::Actor_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.Actor.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Actor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Actor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Actor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Actor)
  return target;
}

size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Actor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Actor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Actor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Actor::GetClassData() const { return &_class_data_; }


void Actor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Actor*>(&to_msg);
  auto& from = static_cast<const Actor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Actor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[0]);
}

// ===================================================================

class Routing::_Internal {
 public:
  static const ::ai::inworld::packets::Actor& source(const Routing* msg);
  static const ::ai::inworld::packets::Actor& target(const Routing* msg);
};

const ::ai::inworld::packets::Actor&
Routing::_Internal::source(const Routing* msg) {
  return *msg->_impl_.source_;
}
const ::ai::inworld::packets::Actor&
Routing::_Internal::target(const Routing* msg) {
  return *msg->_impl_.target_;
}
Routing::Routing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Routing)
}
Routing::Routing(const Routing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Routing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::ai::inworld::packets::Actor(*from._impl_.source_);
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::ai::inworld::packets::Actor(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Routing)
}

inline void Routing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Routing::~Routing() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Routing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.target_;
}

void Routing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Routing::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Routing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Actor target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Routing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Routing)
  return target;
}

size_t Routing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Routing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Routing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routing::GetClassData() const { return &_class_data_; }


void Routing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Routing*>(&to_msg);
  auto& from = static_cast<const Routing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Routing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::ai::inworld::packets::Actor::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::ai::inworld::packets::Actor::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routing::CopyFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routing::IsInitialized() const {
  return true;
}

void Routing::InternalSwap(Routing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Routing, _impl_.target_)
      + sizeof(Routing::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(Routing, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Routing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[1]);
}

// ===================================================================

class PacketId::_Internal {
 public:
};

PacketId::PacketId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.PacketId)
}
PacketId::PacketId(const PacketId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_id_){}
    , decltype(_impl_.utterance_id_){}
    , decltype(_impl_.interaction_id_){}
    , decltype(_impl_.correlation_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packet_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packet_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packet_id().empty()) {
    _this->_impl_.packet_id_.Set(from._internal_packet_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utterance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utterance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_utterance_id().empty()) {
    _this->_impl_.utterance_id_.Set(from._internal_utterance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_correlation_id().empty()) {
    _this->_impl_.correlation_id_.Set(from._internal_correlation_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.PacketId)
}

inline void PacketId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_id_){}
    , decltype(_impl_.utterance_id_){}
    , decltype(_impl_.interaction_id_){}
    , decltype(_impl_.correlation_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packet_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packet_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utterance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utterance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketId::~PacketId() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.PacketId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_id_.Destroy();
  _impl_.utterance_id_.Destroy();
  _impl_.interaction_id_.Destroy();
  _impl_.correlation_id_.Destroy();
}

void PacketId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketId::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.PacketId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packet_id_.ClearToEmpty();
  _impl_.utterance_id_.ClearToEmpty();
  _impl_.interaction_id_.ClearToEmpty();
  _impl_.correlation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packet_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.packet_id"));
        } else
          goto handle_unusual;
        continue;
      // string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_utterance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.utterance_id"));
        } else
          goto handle_unusual;
        continue;
      // string interaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      // string correlation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.correlation_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.PacketId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_id = 1;
  if (!this->_internal_packet_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packet_id().data(), static_cast<int>(this->_internal_packet_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.packet_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packet_id(), target);
  }

  // string utterance_id = 2;
  if (!this->_internal_utterance_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utterance_id().data(), static_cast<int>(this->_internal_utterance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.utterance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utterance_id(), target);
  }

  // string interaction_id = 3;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.interaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interaction_id(), target);
  }

  // string correlation_id = 4;
  if (!this->_internal_correlation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.correlation_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.PacketId)
  return target;
}

size_t PacketId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.PacketId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packet_id = 1;
  if (!this->_internal_packet_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packet_id());
  }

  // string utterance_id = 2;
  if (!this->_internal_utterance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utterance_id());
  }

  // string interaction_id = 3;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string correlation_id = 4;
  if (!this->_internal_correlation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketId::GetClassData() const { return &_class_data_; }


void PacketId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketId*>(&to_msg);
  auto& from = static_cast<const PacketId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.PacketId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packet_id().empty()) {
    _this->_internal_set_packet_id(from._internal_packet_id());
  }
  if (!from._internal_utterance_id().empty()) {
    _this->_internal_set_utterance_id(from._internal_utterance_id());
  }
  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  if (!from._internal_correlation_id().empty()) {
    _this->_internal_set_correlation_id(from._internal_correlation_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketId::CopyFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketId::IsInitialized() const {
  return true;
}

void PacketId::InternalSwap(PacketId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packet_id_, lhs_arena,
      &other->_impl_.packet_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utterance_id_, lhs_arena,
      &other->_impl_.utterance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.correlation_id_, lhs_arena,
      &other->_impl_.correlation_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[2]);
}

// ===================================================================

class InworldPacket::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const InworldPacket* msg);
  static const ::ai::inworld::packets::Routing& routing(const InworldPacket* msg);
  static const ::ai::inworld::packets::PacketId& packet_id(const InworldPacket* msg);
  static const ::ai::inworld::packets::TextEvent& text(const InworldPacket* msg);
  static const ::ai::inworld::packets::ControlEvent& control(const InworldPacket* msg);
  static const ::ai::inworld::packets::AudioChunk& audio_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::CustomEvent& custom(const InworldPacket* msg);
  static const ::ai::inworld::packets::CancelResponsesEvent& cancelresponses(const InworldPacket* msg);
  static const ::ai::inworld::packets::EmotionEvent& emotion(const InworldPacket* msg);
  static const ::ai::inworld::packets::DataChunk& data_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::ActionEvent& action(const InworldPacket* msg);
  static const ::ai::inworld::packets::MutationEvent& mutation(const InworldPacket* msg);
  static const ::ai::inworld::packets::LoadSceneOutputEvent& load_scene_output(const InworldPacket* msg);
  static const ::ai::inworld::packets::DebugInfoEvent& debug_info(const InworldPacket* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InworldPacket::_Internal::timestamp(const InworldPacket* msg) {
  return *msg->_impl_.timestamp_;
}
const ::ai::inworld::packets::Routing&
InworldPacket::_Internal::routing(const InworldPacket* msg) {
  return *msg->_impl_.routing_;
}
const ::ai::inworld::packets::PacketId&
InworldPacket::_Internal::packet_id(const InworldPacket* msg) {
  return *msg->_impl_.packet_id_;
}
const ::ai::inworld::packets::TextEvent&
InworldPacket::_Internal::text(const InworldPacket* msg) {
  return *msg->_impl_.packet_.text_;
}
const ::ai::inworld::packets::ControlEvent&
InworldPacket::_Internal::control(const InworldPacket* msg) {
  return *msg->_impl_.packet_.control_;
}
const ::ai::inworld::packets::AudioChunk&
InworldPacket::_Internal::audio_chunk(const InworldPacket* msg) {
  return *msg->_impl_.packet_.audio_chunk_;
}
const ::ai::inworld::packets::CustomEvent&
InworldPacket::_Internal::custom(const InworldPacket* msg) {
  return *msg->_impl_.packet_.custom_;
}
const ::ai::inworld::packets::CancelResponsesEvent&
InworldPacket::_Internal::cancelresponses(const InworldPacket* msg) {
  return *msg->_impl_.packet_.cancelresponses_;
}
const ::ai::inworld::packets::EmotionEvent&
InworldPacket::_Internal::emotion(const InworldPacket* msg) {
  return *msg->_impl_.packet_.emotion_;
}
const ::ai::inworld::packets::DataChunk&
InworldPacket::_Internal::data_chunk(const InworldPacket* msg) {
  return *msg->_impl_.packet_.data_chunk_;
}
const ::ai::inworld::packets::ActionEvent&
InworldPacket::_Internal::action(const InworldPacket* msg) {
  return *msg->_impl_.packet_.action_;
}
const ::ai::inworld::packets::MutationEvent&
InworldPacket::_Internal::mutation(const InworldPacket* msg) {
  return *msg->_impl_.packet_.mutation_;
}
const ::ai::inworld::packets::LoadSceneOutputEvent&
InworldPacket::_Internal::load_scene_output(const InworldPacket* msg) {
  return *msg->_impl_.packet_.load_scene_output_;
}
const ::ai::inworld::packets::DebugInfoEvent&
InworldPacket::_Internal::debug_info(const InworldPacket* msg) {
  return *msg->_impl_.packet_.debug_info_;
}
void InworldPacket::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void InworldPacket::set_allocated_text(::ai::inworld::packets::TextEvent* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    _impl_.packet_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.text)
}
void InworldPacket::set_allocated_control(::ai::inworld::packets::ControlEvent* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    set_has_control();
    _impl_.packet_.control_ = control;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.control)
}
void InworldPacket::set_allocated_audio_chunk(::ai::inworld::packets::AudioChunk* audio_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (audio_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio_chunk);
    if (message_arena != submessage_arena) {
      audio_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_chunk, submessage_arena);
    }
    set_has_audio_chunk();
    _impl_.packet_.audio_chunk_ = audio_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.audio_chunk)
}
void InworldPacket::set_allocated_custom(::ai::inworld::packets::CustomEvent* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    _impl_.packet_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.custom)
}
void InworldPacket::set_allocated_cancelresponses(::ai::inworld::packets::CancelResponsesEvent* cancelresponses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (cancelresponses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cancelresponses);
    if (message_arena != submessage_arena) {
      cancelresponses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelresponses, submessage_arena);
    }
    set_has_cancelresponses();
    _impl_.packet_.cancelresponses_ = cancelresponses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.cancelResponses)
}
void InworldPacket::set_allocated_emotion(::ai::inworld::packets::EmotionEvent* emotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (emotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emotion);
    if (message_arena != submessage_arena) {
      emotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotion, submessage_arena);
    }
    set_has_emotion();
    _impl_.packet_.emotion_ = emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.emotion)
}
void InworldPacket::set_allocated_data_chunk(::ai::inworld::packets::DataChunk* data_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (data_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_chunk);
    if (message_arena != submessage_arena) {
      data_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_chunk, submessage_arena);
    }
    set_has_data_chunk();
    _impl_.packet_.data_chunk_ = data_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.data_chunk)
}
void InworldPacket::set_allocated_action(::ai::inworld::packets::ActionEvent* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    _impl_.packet_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.action)
}
void InworldPacket::set_allocated_mutation(::ai::inworld::packets::MutationEvent* mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mutation);
    if (message_arena != submessage_arena) {
      mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation, submessage_arena);
    }
    set_has_mutation();
    _impl_.packet_.mutation_ = mutation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.mutation)
}
void InworldPacket::set_allocated_load_scene_output(::ai::inworld::packets::LoadSceneOutputEvent* load_scene_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (load_scene_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load_scene_output);
    if (message_arena != submessage_arena) {
      load_scene_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_scene_output, submessage_arena);
    }
    set_has_load_scene_output();
    _impl_.packet_.load_scene_output_ = load_scene_output;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.load_scene_output)
}
void InworldPacket::set_allocated_debug_info(::ai::inworld::packets::DebugInfoEvent* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug_info);
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    set_has_debug_info();
    _impl_.packet_.debug_info_ = debug_info;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.debug_info)
}
InworldPacket::InworldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.InworldPacket)
}
InworldPacket::InworldPacket(const InworldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InworldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_routing()) {
    _this->_impl_.routing_ = new ::ai::inworld::packets::Routing(*from._impl_.routing_);
  }
  if (from._internal_has_packet_id()) {
    _this->_impl_.packet_id_ = new ::ai::inworld::packets::PacketId(*from._impl_.packet_id_);
  }
  clear_has_packet();
  switch (from.packet_case()) {
    case kText: {
      _this->_internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(
          from._internal_text());
      break;
    }
    case kControl: {
      _this->_internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(
          from._internal_control());
      break;
    }
    case kAudioChunk: {
      _this->_internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(
          from._internal_audio_chunk());
      break;
    }
    case kCustom: {
      _this->_internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(
          from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _this->_internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(
          from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _this->_internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(
          from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _this->_internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(
          from._internal_data_chunk());
      break;
    }
    case kAction: {
      _this->_internal_mutable_action()->::ai::inworld::packets::ActionEvent::MergeFrom(
          from._internal_action());
      break;
    }
    case kMutation: {
      _this->_internal_mutable_mutation()->::ai::inworld::packets::MutationEvent::MergeFrom(
          from._internal_mutation());
      break;
    }
    case kLoadSceneOutput: {
      _this->_internal_mutable_load_scene_output()->::ai::inworld::packets::LoadSceneOutputEvent::MergeFrom(
          from._internal_load_scene_output());
      break;
    }
    case kDebugInfo: {
      _this->_internal_mutable_debug_info()->::ai::inworld::packets::DebugInfoEvent::MergeFrom(
          from._internal_debug_info());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.InworldPacket)
}

inline void InworldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_packet();
}

InworldPacket::~InworldPacket() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.InworldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InworldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.routing_;
  if (this != internal_default_instance()) delete _impl_.packet_id_;
  if (has_packet()) {
    clear_packet();
  }
}

void InworldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InworldPacket::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.InworldPacket)
  switch (packet_case()) {
    case kText: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.text_;
      }
      break;
    }
    case kControl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.control_;
      }
      break;
    }
    case kAudioChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.audio_chunk_;
      }
      break;
    }
    case kCustom: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.custom_;
      }
      break;
    }
    case kCancelResponses: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.cancelresponses_;
      }
      break;
    }
    case kEmotion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.emotion_;
      }
      break;
    }
    case kDataChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.data_chunk_;
      }
      break;
    }
    case kAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.action_;
      }
      break;
    }
    case kMutation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.mutation_;
      }
      break;
    }
    case kLoadSceneOutput: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.load_scene_output_;
      }
      break;
    }
    case kDebugInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.debug_info_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}


void InworldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.InworldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.routing_ != nullptr) {
    delete _impl_.routing_;
  }
  _impl_.routing_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.packet_id_ != nullptr) {
    delete _impl_.packet_id_;
  }
  _impl_.packet_id_ = nullptr;
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InworldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.ControlEvent control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Routing routing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.CustomEvent custom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.PacketId packet_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelresponses(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent emotion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk data_chunk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.ActionEvent action = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.MutationEvent mutation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_scene_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InworldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.InworldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.TextEvent text = 2;
  if (_internal_has_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.ControlEvent control = 3;
  if (_internal_has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
  if (_internal_has_audio_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::audio_chunk(this),
        _Internal::audio_chunk(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->_internal_has_routing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.CustomEvent custom = 8;
  if (_internal_has_custom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::custom(this),
        _Internal::custom(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->_internal_has_packet_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
  if (_internal_has_cancelresponses()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cancelresponses(this),
        _Internal::cancelresponses(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.EmotionEvent emotion = 11;
  if (_internal_has_emotion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::emotion(this),
        _Internal::emotion(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.DataChunk data_chunk = 12;
  if (_internal_has_data_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::data_chunk(this),
        _Internal::data_chunk(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.ActionEvent action = 13;
  if (_internal_has_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::action(this),
        _Internal::action(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.MutationEvent mutation = 15;
  if (_internal_has_mutation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::mutation(this),
        _Internal::mutation(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16;
  if (_internal_has_load_scene_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::load_scene_output(this),
        _Internal::load_scene_output(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
  if (_internal_has_debug_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::debug_info(this),
        _Internal::debug_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.InworldPacket)
  return target;
}

size_t InworldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.InworldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->_internal_has_routing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->_internal_has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  switch (packet_case()) {
    // .ai.inworld.packets.TextEvent text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.text_);
      break;
    }
    // .ai.inworld.packets.ControlEvent control = 3;
    case kControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.control_);
      break;
    }
    // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
    case kAudioChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.audio_chunk_);
      break;
    }
    // .ai.inworld.packets.CustomEvent custom = 8;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.custom_);
      break;
    }
    // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.cancelresponses_);
      break;
    }
    // .ai.inworld.packets.EmotionEvent emotion = 11;
    case kEmotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.emotion_);
      break;
    }
    // .ai.inworld.packets.DataChunk data_chunk = 12;
    case kDataChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.data_chunk_);
      break;
    }
    // .ai.inworld.packets.ActionEvent action = 13;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.action_);
      break;
    }
    // .ai.inworld.packets.MutationEvent mutation = 15;
    case kMutation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.mutation_);
      break;
    }
    // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16;
    case kLoadSceneOutput: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.load_scene_output_);
      break;
    }
    // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
    case kDebugInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.debug_info_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InworldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InworldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InworldPacket::GetClassData() const { return &_class_data_; }


void InworldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InworldPacket*>(&to_msg);
  auto& from = static_cast<const InworldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.InworldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_routing()) {
    _this->_internal_mutable_routing()->::ai::inworld::packets::Routing::MergeFrom(
        from._internal_routing());
  }
  if (from._internal_has_packet_id()) {
    _this->_internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  switch (from.packet_case()) {
    case kText: {
      _this->_internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(
          from._internal_text());
      break;
    }
    case kControl: {
      _this->_internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(
          from._internal_control());
      break;
    }
    case kAudioChunk: {
      _this->_internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(
          from._internal_audio_chunk());
      break;
    }
    case kCustom: {
      _this->_internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(
          from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _this->_internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(
          from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _this->_internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(
          from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _this->_internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(
          from._internal_data_chunk());
      break;
    }
    case kAction: {
      _this->_internal_mutable_action()->::ai::inworld::packets::ActionEvent::MergeFrom(
          from._internal_action());
      break;
    }
    case kMutation: {
      _this->_internal_mutable_mutation()->::ai::inworld::packets::MutationEvent::MergeFrom(
          from._internal_mutation());
      break;
    }
    case kLoadSceneOutput: {
      _this->_internal_mutable_load_scene_output()->::ai::inworld::packets::LoadSceneOutputEvent::MergeFrom(
          from._internal_load_scene_output());
      break;
    }
    case kDebugInfo: {
      _this->_internal_mutable_debug_info()->::ai::inworld::packets::DebugInfoEvent::MergeFrom(
          from._internal_debug_info());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InworldPacket::CopyFrom(const InworldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.InworldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InworldPacket::IsInitialized() const {
  return true;
}

void InworldPacket::InternalSwap(InworldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InworldPacket, _impl_.packet_id_)
      + sizeof(InworldPacket::_impl_.packet_id_)
      - PROTOBUF_FIELD_OFFSET(InworldPacket, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.packet_, other->_impl_.packet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InworldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[3]);
}

// ===================================================================

class TextEvent::_Internal {
 public:
};

TextEvent::TextEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.TextEvent)
}
TextEvent::TextEvent(const TextEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.source_type_){}
    , decltype(_impl_.final_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.source_type_, &from._impl_.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_) -
    reinterpret_cast<char*>(&_impl_.source_type_)) + sizeof(_impl_.final_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.TextEvent)
}

inline void TextEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.source_type_){0}
    , decltype(_impl_.final_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextEvent::~TextEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.TextEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void TextEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.TextEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.source_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.final_) -
      reinterpret_cast<char*>(&_impl_.source_type_)) + sizeof(_impl_.final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.TextEvent.text"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::ai::inworld::packets::TextEvent_SourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.TextEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->_internal_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source_type(), target);
  }

  // bool final = 3;
  if (this->_internal_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_final(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.TextEvent)
  return target;
}

size_t TextEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.TextEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->_internal_source_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  // bool final = 3;
  if (this->_internal_final() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextEvent::GetClassData() const { return &_class_data_; }


void TextEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextEvent*>(&to_msg);
  auto& from = static_cast<const TextEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.TextEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_source_type() != 0) {
    _this->_internal_set_source_type(from._internal_source_type());
  }
  if (from._internal_final() != 0) {
    _this->_internal_set_final(from._internal_final());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextEvent::CopyFrom(const TextEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.TextEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent::IsInitialized() const {
  return true;
}

void TextEvent::InternalSwap(TextEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextEvent, _impl_.final_)
      + sizeof(TextEvent::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TextEvent, _impl_.source_type_)>(
          reinterpret_cast<char*>(&_impl_.source_type_),
          reinterpret_cast<char*>(&other->_impl_.source_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[4]);
}

// ===================================================================

class ControlEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& payload(const ControlEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ControlEvent::_Internal::payload(const ControlEvent* msg) {
  return *msg->_impl_.payload_;
}
void ControlEvent::clear_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
}
ControlEvent::ControlEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ControlEvent)
}
ControlEvent::ControlEvent(const ControlEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.payload_);
  }
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ControlEvent)
}

inline void ControlEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlEvent::~ControlEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ControlEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void ControlEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ControlEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.ControlEvent.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::ai::inworld::packets::ControlEvent_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.ControlEvent.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ControlEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ControlEvent.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Struct payload = 3;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ControlEvent)
  return target;
}

size_t ControlEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ControlEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Struct payload = 3;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlEvent::GetClassData() const { return &_class_data_; }


void ControlEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlEvent*>(&to_msg);
  auto& from = static_cast<const ControlEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ControlEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_payload());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlEvent::CopyFrom(const ControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlEvent::IsInitialized() const {
  return true;
}

void ControlEvent::InternalSwap(ControlEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlEvent, _impl_.action_)
      + sizeof(ControlEvent::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(ControlEvent, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[5]);
}

// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AudioChunk)
}

inline void AudioChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AudioChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_.Destroy();
}

void AudioChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AudioChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AudioChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AudioChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunk::GetClassData() const { return &_class_data_; }


void AudioChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioChunk*>(&to_msg);
  auto& from = static_cast<const AudioChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AudioChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chunk_, lhs_arena,
      &other->_impl_.chunk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[6]);
}

// ===================================================================

class CustomEvent_Parameter::_Internal {
 public:
};

CustomEvent_Parameter::CustomEvent_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent.Parameter)
}
CustomEvent_Parameter::CustomEvent_Parameter(const CustomEvent_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomEvent_Parameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent.Parameter)
}

inline void CustomEvent_Parameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomEvent_Parameter::~CustomEvent_Parameter() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent.Parameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomEvent_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CustomEvent_Parameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomEvent_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent.Parameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent_Parameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.Parameter.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.Parameter.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomEvent_Parameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent.Parameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.Parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.Parameter.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent.Parameter)
  return target;
}

size_t CustomEvent_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent.Parameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomEvent_Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomEvent_Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomEvent_Parameter::GetClassData() const { return &_class_data_; }


void CustomEvent_Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomEvent_Parameter*>(&to_msg);
  auto& from = static_cast<const CustomEvent_Parameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent.Parameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomEvent_Parameter::CopyFrom(const CustomEvent_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent_Parameter::IsInitialized() const {
  return true;
}

void CustomEvent_Parameter::InternalSwap(CustomEvent_Parameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent_Parameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[7]);
}

// ===================================================================

class CustomEvent::_Internal {
 public:
};

CustomEvent::CustomEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent)
}
CustomEvent::CustomEvent(const CustomEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.playback_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playback_ = from._impl_.playback_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent)
}

inline void CustomEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.playback_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomEvent::~CustomEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void CustomEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.playback_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.name"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent)
  return target;
}

size_t CustomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_impl_.parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomEvent::GetClassData() const { return &_class_data_; }


void CustomEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomEvent*>(&to_msg);
  auto& from = static_cast<const CustomEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_playback() != 0) {
    _this->_internal_set_playback(from._internal_playback());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomEvent::CopyFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent::IsInitialized() const {
  return true;
}

void CustomEvent::InternalSwap(CustomEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.playback_, other->_impl_.playback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[8]);
}

// ===================================================================

class CancelResponsesEvent::_Internal {
 public:
};

CancelResponsesEvent::CancelResponsesEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponsesEvent)
}
CancelResponsesEvent::CancelResponsesEvent(const CancelResponsesEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelResponsesEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.utterance_id_){from._impl_.utterance_id_}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponsesEvent)
}

inline void CancelResponsesEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.utterance_id_){arena}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelResponsesEvent::~CancelResponsesEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponsesEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelResponsesEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.utterance_id_.~RepeatedPtrField();
  _impl_.interaction_id_.Destroy();
}

void CancelResponsesEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelResponsesEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponsesEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.utterance_id_.Clear();
  _impl_.interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponsesEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.utterance_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelResponsesEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponsesEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponsesEvent)
  return target;
}

size_t CancelResponsesEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponsesEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.utterance_id_.size());
  for (int i = 0, n = _impl_.utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelResponsesEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelResponsesEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelResponsesEvent::GetClassData() const { return &_class_data_; }


void CancelResponsesEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelResponsesEvent*>(&to_msg);
  auto& from = static_cast<const CancelResponsesEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponsesEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.utterance_id_.MergeFrom(from._impl_.utterance_id_);
  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelResponsesEvent::CopyFrom(const CancelResponsesEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponsesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponsesEvent::IsInitialized() const {
  return true;
}

void CancelResponsesEvent::InternalSwap(CancelResponsesEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.utterance_id_.InternalSwap(&other->_impl_.utterance_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponsesEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[9]);
}

// ===================================================================

class EmotionEvent::_Internal {
 public:
};

EmotionEvent::EmotionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.EmotionEvent)
}
EmotionEvent::EmotionEvent(const EmotionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmotionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joy_){}
    , decltype(_impl_.fear_){}
    , decltype(_impl_.trust_){}
    , decltype(_impl_.surprise_){}
    , decltype(_impl_.behavior_){}
    , decltype(_impl_.strength_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.joy_, &from._impl_.joy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.strength_) -
    reinterpret_cast<char*>(&_impl_.joy_)) + sizeof(_impl_.strength_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.EmotionEvent)
}

inline void EmotionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.joy_){0}
    , decltype(_impl_.fear_){0}
    , decltype(_impl_.trust_){0}
    , decltype(_impl_.surprise_){0}
    , decltype(_impl_.behavior_){0}
    , decltype(_impl_.strength_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EmotionEvent::~EmotionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.EmotionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmotionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmotionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmotionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.EmotionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.joy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.strength_) -
      reinterpret_cast<char*>(&_impl_.joy_)) + sizeof(_impl_.strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmotionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float joy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.joy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.fear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float trust = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.trust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float surprise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.surprise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::ai::inworld::packets::EmotionEvent_SpaffCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strength(static_cast<::ai::inworld::packets::EmotionEvent_Strength>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmotionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.EmotionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float joy = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_joy = this->_internal_joy();
  uint32_t raw_joy;
  memcpy(&raw_joy, &tmp_joy, sizeof(tmp_joy));
  if (raw_joy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_joy(), target);
  }

  // float fear = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fear = this->_internal_fear();
  uint32_t raw_fear;
  memcpy(&raw_fear, &tmp_fear, sizeof(tmp_fear));
  if (raw_fear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_fear(), target);
  }

  // float trust = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trust = this->_internal_trust();
  uint32_t raw_trust;
  memcpy(&raw_trust, &tmp_trust, sizeof(tmp_trust));
  if (raw_trust != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_trust(), target);
  }

  // float surprise = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surprise = this->_internal_surprise();
  uint32_t raw_surprise;
  memcpy(&raw_surprise, &tmp_surprise, sizeof(tmp_surprise));
  if (raw_surprise != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_surprise(), target);
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->_internal_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_behavior(), target);
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->_internal_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.EmotionEvent)
  return target;
}

size_t EmotionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.EmotionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float joy = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_joy = this->_internal_joy();
  uint32_t raw_joy;
  memcpy(&raw_joy, &tmp_joy, sizeof(tmp_joy));
  if (raw_joy != 0) {
    total_size += 1 + 4;
  }

  // float fear = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fear = this->_internal_fear();
  uint32_t raw_fear;
  memcpy(&raw_fear, &tmp_fear, sizeof(tmp_fear));
  if (raw_fear != 0) {
    total_size += 1 + 4;
  }

  // float trust = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trust = this->_internal_trust();
  uint32_t raw_trust;
  memcpy(&raw_trust, &tmp_trust, sizeof(tmp_trust));
  if (raw_trust != 0) {
    total_size += 1 + 4;
  }

  // float surprise = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surprise = this->_internal_surprise();
  uint32_t raw_surprise;
  memcpy(&raw_surprise, &tmp_surprise, sizeof(tmp_surprise));
  if (raw_surprise != 0) {
    total_size += 1 + 4;
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->_internal_behavior() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->_internal_strength() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmotionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmotionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmotionEvent::GetClassData() const { return &_class_data_; }


void EmotionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmotionEvent*>(&to_msg);
  auto& from = static_cast<const EmotionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.EmotionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_joy = from._internal_joy();
  uint32_t raw_joy;
  memcpy(&raw_joy, &tmp_joy, sizeof(tmp_joy));
  if (raw_joy != 0) {
    _this->_internal_set_joy(from._internal_joy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fear = from._internal_fear();
  uint32_t raw_fear;
  memcpy(&raw_fear, &tmp_fear, sizeof(tmp_fear));
  if (raw_fear != 0) {
    _this->_internal_set_fear(from._internal_fear());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trust = from._internal_trust();
  uint32_t raw_trust;
  memcpy(&raw_trust, &tmp_trust, sizeof(tmp_trust));
  if (raw_trust != 0) {
    _this->_internal_set_trust(from._internal_trust());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surprise = from._internal_surprise();
  uint32_t raw_surprise;
  memcpy(&raw_surprise, &tmp_surprise, sizeof(tmp_surprise));
  if (raw_surprise != 0) {
    _this->_internal_set_surprise(from._internal_surprise());
  }
  if (from._internal_behavior() != 0) {
    _this->_internal_set_behavior(from._internal_behavior());
  }
  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmotionEvent::CopyFrom(const EmotionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.EmotionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionEvent::IsInitialized() const {
  return true;
}

void EmotionEvent::InternalSwap(EmotionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmotionEvent, _impl_.strength_)
      + sizeof(EmotionEvent::_impl_.strength_)
      - PROTOBUF_FIELD_OFFSET(EmotionEvent, _impl_.joy_)>(
          reinterpret_cast<char*>(&_impl_.joy_),
          reinterpret_cast<char*>(&other->_impl_.joy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmotionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[10]);
}

// ===================================================================

class DataChunk::_Internal {
 public:
};

DataChunk::DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DataChunk)
}
DataChunk::DataChunk(const DataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_phoneme_info_){from._impl_.additional_phoneme_info_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_data();
  switch (from.data_case()) {
    case kChunk: {
      _this->_internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _this->_internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DataChunk)
}

inline void DataChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_phoneme_info_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DataChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_phoneme_info_.~RepeatedPtrField();
  if (has_data()) {
    clear_data();
  }
}

void DataChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataChunk::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DataChunk)
  switch (data_case()) {
    case kChunk: {
      _impl_.data_.chunk_.Destroy();
      break;
    }
    case kDurationMs: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DataChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_phoneme_info_.Clear();
  _impl_.type_ = 0;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::DataChunk_DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_phoneme_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DataChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int64 duration_ms = 3;
  if (_internal_has_duration_ms()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_phoneme_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_phoneme_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DataChunk)
  return target;
}

size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DataChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  total_size += 1UL * this->_internal_additional_phoneme_info_size();
  for (const auto& msg : this->_impl_.additional_phoneme_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (data_case()) {
    // bytes chunk = 1;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    // int64 duration_ms = 3;
    case kDurationMs: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChunk::GetClassData() const { return &_class_data_; }


void DataChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataChunk*>(&to_msg);
  auto& from = static_cast<const DataChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DataChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_phoneme_info_.MergeFrom(from._impl_.additional_phoneme_info_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.data_case()) {
    case kChunk: {
      _this->_internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _this->_internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunk::IsInitialized() const {
  return true;
}

void DataChunk::InternalSwap(DataChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_phoneme_info_.InternalSwap(&other->_impl_.additional_phoneme_info_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[11]);
}

// ===================================================================

class AdditionalPhonemeInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& start_offset(const AdditionalPhonemeInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AdditionalPhonemeInfo::_Internal::start_offset(const AdditionalPhonemeInfo* msg) {
  return *msg->_impl_.start_offset_;
}
void AdditionalPhonemeInfo::clear_start_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_offset_ != nullptr) {
    delete _impl_.start_offset_;
  }
  _impl_.start_offset_ = nullptr;
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(const AdditionalPhonemeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdditionalPhonemeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phoneme_){}
    , decltype(_impl_.start_offset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.phoneme_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneme_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phoneme().empty()) {
    _this->_impl_.phoneme_.Set(from._internal_phoneme(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_offset()) {
    _this->_impl_.start_offset_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.start_offset_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}

inline void AdditionalPhonemeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phoneme_){}
    , decltype(_impl_.start_offset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.phoneme_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneme_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdditionalPhonemeInfo::~AdditionalPhonemeInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AdditionalPhonemeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdditionalPhonemeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phoneme_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_offset_;
}

void AdditionalPhonemeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdditionalPhonemeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AdditionalPhonemeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phoneme_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_offset_ != nullptr) {
    delete _impl_.start_offset_;
  }
  _impl_.start_offset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalPhonemeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string phoneme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_phoneme();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.AdditionalPhonemeInfo.phoneme"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdditionalPhonemeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AdditionalPhonemeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string phoneme = 1;
  if (!this->_internal_phoneme().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phoneme().data(), static_cast<int>(this->_internal_phoneme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.AdditionalPhonemeInfo.phoneme");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phoneme(), target);
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->_internal_has_start_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_offset(this),
        _Internal::start_offset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AdditionalPhonemeInfo)
  return target;
}

size_t AdditionalPhonemeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AdditionalPhonemeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phoneme = 1;
  if (!this->_internal_phoneme().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phoneme());
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->_internal_has_start_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_offset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdditionalPhonemeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdditionalPhonemeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdditionalPhonemeInfo::GetClassData() const { return &_class_data_; }


void AdditionalPhonemeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdditionalPhonemeInfo*>(&to_msg);
  auto& from = static_cast<const AdditionalPhonemeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_phoneme().empty()) {
    _this->_internal_set_phoneme(from._internal_phoneme());
  }
  if (from._internal_has_start_offset()) {
    _this->_internal_mutable_start_offset()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_start_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdditionalPhonemeInfo::CopyFrom(const AdditionalPhonemeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalPhonemeInfo::IsInitialized() const {
  return true;
}

void AdditionalPhonemeInfo::InternalSwap(AdditionalPhonemeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phoneme_, lhs_arena,
      &other->_impl_.phoneme_, rhs_arena
  );
  swap(_impl_.start_offset_, other->_impl_.start_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalPhonemeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[12]);
}

// ===================================================================

class ActionEvent::_Internal {
 public:
  static const ::ai::inworld::packets::NarratedAction& narrated_action(const ActionEvent* msg);
};

const ::ai::inworld::packets::NarratedAction&
ActionEvent::_Internal::narrated_action(const ActionEvent* msg) {
  return *msg->_impl_.action_.narrated_action_;
}
void ActionEvent::set_allocated_narrated_action(::ai::inworld::packets::NarratedAction* narrated_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (narrated_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(narrated_action);
    if (message_arena != submessage_arena) {
      narrated_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, narrated_action, submessage_arena);
    }
    set_has_narrated_action();
    _impl_.action_.narrated_action_ = narrated_action;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ActionEvent.narrated_action)
}
ActionEvent::ActionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ActionEvent)
}
ActionEvent::ActionEvent(const ActionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playback_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playback_ = from._impl_.playback_;
  clear_has_action();
  switch (from.action_case()) {
    case kNarratedAction: {
      _this->_internal_mutable_narrated_action()->::ai::inworld::packets::NarratedAction::MergeFrom(
          from._internal_narrated_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ActionEvent)
}

inline void ActionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playback_){0}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action();
}

ActionEvent::~ActionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ActionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ActionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.ActionEvent)
  switch (action_case()) {
    case kNarratedAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.narrated_action_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void ActionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ActionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playback_ = 0;
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.NarratedAction narrated_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_narrated_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ActionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.NarratedAction narrated_action = 1;
  if (_internal_has_narrated_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::narrated_action(this),
        _Internal::narrated_action(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ActionEvent)
  return target;
}

size_t ActionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ActionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playback());
  }

  switch (action_case()) {
    // .ai.inworld.packets.NarratedAction narrated_action = 1;
    case kNarratedAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.narrated_action_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionEvent::GetClassData() const { return &_class_data_; }


void ActionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionEvent*>(&to_msg);
  auto& from = static_cast<const ActionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ActionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playback() != 0) {
    _this->_internal_set_playback(from._internal_playback());
  }
  switch (from.action_case()) {
    case kNarratedAction: {
      _this->_internal_mutable_narrated_action()->::ai::inworld::packets::NarratedAction::MergeFrom(
          from._internal_narrated_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionEvent::CopyFrom(const ActionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ActionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionEvent::IsInitialized() const {
  return true;
}

void ActionEvent::InternalSwap(ActionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playback_, other->_impl_.playback_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[13]);
}

// ===================================================================

class NarratedAction::_Internal {
 public:
};

NarratedAction::NarratedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.NarratedAction)
}
NarratedAction::NarratedAction(const NarratedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NarratedAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.NarratedAction)
}

inline void NarratedAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NarratedAction::~NarratedAction() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.NarratedAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NarratedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void NarratedAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NarratedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.NarratedAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NarratedAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.NarratedAction.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NarratedAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.NarratedAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.NarratedAction.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.NarratedAction)
  return target;
}

size_t NarratedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.NarratedAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NarratedAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NarratedAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NarratedAction::GetClassData() const { return &_class_data_; }


void NarratedAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NarratedAction*>(&to_msg);
  auto& from = static_cast<const NarratedAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.NarratedAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NarratedAction::CopyFrom(const NarratedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.NarratedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NarratedAction::IsInitialized() const {
  return true;
}

void NarratedAction::InternalSwap(NarratedAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NarratedAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[14]);
}

// ===================================================================

class RelationInfo_RelationAttributes::_Internal {
 public:
};

RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RelationInfo.RelationAttributes)
}
RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(const RelationInfo_RelationAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelationInfo_RelationAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trust_){}
    , decltype(_impl_.respect_){}
    , decltype(_impl_.familiar_){}
    , decltype(_impl_.flirtatious_){}
    , decltype(_impl_.attraction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.trust_, &from._impl_.trust_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attraction_) -
    reinterpret_cast<char*>(&_impl_.trust_)) + sizeof(_impl_.attraction_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RelationInfo.RelationAttributes)
}

inline void RelationInfo_RelationAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trust_){0}
    , decltype(_impl_.respect_){0}
    , decltype(_impl_.familiar_){0}
    , decltype(_impl_.flirtatious_){0}
    , decltype(_impl_.attraction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelationInfo_RelationAttributes::~RelationInfo_RelationAttributes() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RelationInfo.RelationAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelationInfo_RelationAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RelationInfo_RelationAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelationInfo_RelationAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.trust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attraction_) -
      reinterpret_cast<char*>(&_impl_.trust_)) + sizeof(_impl_.attraction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfo_RelationAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 trust = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.trust_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 respect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.respect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 familiar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.familiar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flirtatious = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flirtatious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.attraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelationInfo_RelationAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trust = 1;
  if (this->_internal_trust() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_trust(), target);
  }

  // int32 respect = 2;
  if (this->_internal_respect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_respect(), target);
  }

  // int32 familiar = 3;
  if (this->_internal_familiar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_familiar(), target);
  }

  // int32 flirtatious = 4;
  if (this->_internal_flirtatious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_flirtatious(), target);
  }

  // int32 attraction = 5;
  if (this->_internal_attraction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_attraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RelationInfo.RelationAttributes)
  return target;
}

size_t RelationInfo_RelationAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trust = 1;
  if (this->_internal_trust() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trust());
  }

  // int32 respect = 2;
  if (this->_internal_respect() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_respect());
  }

  // int32 familiar = 3;
  if (this->_internal_familiar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_familiar());
  }

  // int32 flirtatious = 4;
  if (this->_internal_flirtatious() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flirtatious());
  }

  // int32 attraction = 5;
  if (this->_internal_attraction() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attraction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelationInfo_RelationAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelationInfo_RelationAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelationInfo_RelationAttributes::GetClassData() const { return &_class_data_; }


void RelationInfo_RelationAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelationInfo_RelationAttributes*>(&to_msg);
  auto& from = static_cast<const RelationInfo_RelationAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trust() != 0) {
    _this->_internal_set_trust(from._internal_trust());
  }
  if (from._internal_respect() != 0) {
    _this->_internal_set_respect(from._internal_respect());
  }
  if (from._internal_familiar() != 0) {
    _this->_internal_set_familiar(from._internal_familiar());
  }
  if (from._internal_flirtatious() != 0) {
    _this->_internal_set_flirtatious(from._internal_flirtatious());
  }
  if (from._internal_attraction() != 0) {
    _this->_internal_set_attraction(from._internal_attraction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelationInfo_RelationAttributes::CopyFrom(const RelationInfo_RelationAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo_RelationAttributes::IsInitialized() const {
  return true;
}

void RelationInfo_RelationAttributes::InternalSwap(RelationInfo_RelationAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfo_RelationAttributes, _impl_.attraction_)
      + sizeof(RelationInfo_RelationAttributes::_impl_.attraction_)
      - PROTOBUF_FIELD_OFFSET(RelationInfo_RelationAttributes, _impl_.trust_)>(
          reinterpret_cast<char*>(&_impl_.trust_),
          reinterpret_cast<char*>(&other->_impl_.trust_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfo_RelationAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[15]);
}

// ===================================================================

class RelationInfo::_Internal {
 public:
  static const ::ai::inworld::packets::RelationInfo_RelationAttributes& relation_state(const RelationInfo* msg);
  static const ::ai::inworld::packets::RelationInfo_RelationAttributes& relation_update(const RelationInfo* msg);
};

const ::ai::inworld::packets::RelationInfo_RelationAttributes&
RelationInfo::_Internal::relation_state(const RelationInfo* msg) {
  return *msg->_impl_.relation_state_;
}
const ::ai::inworld::packets::RelationInfo_RelationAttributes&
RelationInfo::_Internal::relation_update(const RelationInfo* msg) {
  return *msg->_impl_.relation_update_;
}
RelationInfo::RelationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RelationInfo)
}
RelationInfo::RelationInfo(const RelationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relation_state_){nullptr}
    , decltype(_impl_.relation_update_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relation_state()) {
    _this->_impl_.relation_state_ = new ::ai::inworld::packets::RelationInfo_RelationAttributes(*from._impl_.relation_state_);
  }
  if (from._internal_has_relation_update()) {
    _this->_impl_.relation_update_ = new ::ai::inworld::packets::RelationInfo_RelationAttributes(*from._impl_.relation_update_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RelationInfo)
}

inline void RelationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relation_state_){nullptr}
    , decltype(_impl_.relation_update_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelationInfo::~RelationInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RelationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.relation_state_;
  if (this != internal_default_instance()) delete _impl_.relation_update_;
}

void RelationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RelationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.relation_state_ != nullptr) {
    delete _impl_.relation_state_;
  }
  _impl_.relation_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relation_update_ != nullptr) {
    delete _impl_.relation_update_;
  }
  _impl_.relation_update_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RelationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
  if (this->_internal_has_relation_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::relation_state(this),
        _Internal::relation_state(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
  if (this->_internal_has_relation_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relation_update(this),
        _Internal::relation_update(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RelationInfo)
  return target;
}

size_t RelationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RelationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
  if (this->_internal_has_relation_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relation_state_);
  }

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
  if (this->_internal_has_relation_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relation_update_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelationInfo::GetClassData() const { return &_class_data_; }


void RelationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelationInfo*>(&to_msg);
  auto& from = static_cast<const RelationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RelationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relation_state()) {
    _this->_internal_mutable_relation_state()->::ai::inworld::packets::RelationInfo_RelationAttributes::MergeFrom(
        from._internal_relation_state());
  }
  if (from._internal_has_relation_update()) {
    _this->_internal_mutable_relation_update()->::ai::inworld::packets::RelationInfo_RelationAttributes::MergeFrom(
        from._internal_relation_update());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelationInfo::CopyFrom(const RelationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RelationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo::IsInitialized() const {
  return true;
}

void RelationInfo::InternalSwap(RelationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfo, _impl_.relation_update_)
      + sizeof(RelationInfo::_impl_.relation_update_)
      - PROTOBUF_FIELD_OFFSET(RelationInfo, _impl_.relation_state_)>(
          reinterpret_cast<char*>(&_impl_.relation_state_),
          reinterpret_cast<char*>(&other->_impl_.relation_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[16]);
}

// ===================================================================

class MutationEvent::_Internal {
 public:
  static const ::ai::inworld::packets::CancelResponses& cancel_responses(const MutationEvent* msg);
  static const ::ai::inworld::packets::RegenerateResponse& regenerate_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::ApplyResponse& apply_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::LoadScene& load_scene(const MutationEvent* msg);
  static const ::ai::inworld::packets::ModifyExactResponse& modify_exact_response(const MutationEvent* msg);
};

const ::ai::inworld::packets::CancelResponses&
MutationEvent::_Internal::cancel_responses(const MutationEvent* msg) {
  return *msg->_impl_.mutation_.cancel_responses_;
}
const ::ai::inworld::packets::RegenerateResponse&
MutationEvent::_Internal::regenerate_response(const MutationEvent* msg) {
  return *msg->_impl_.mutation_.regenerate_response_;
}
const ::ai::inworld::packets::ApplyResponse&
MutationEvent::_Internal::apply_response(const MutationEvent* msg) {
  return *msg->_impl_.mutation_.apply_response_;
}
const ::ai::inworld::packets::LoadScene&
MutationEvent::_Internal::load_scene(const MutationEvent* msg) {
  return *msg->_impl_.mutation_.load_scene_;
}
const ::ai::inworld::packets::ModifyExactResponse&
MutationEvent::_Internal::modify_exact_response(const MutationEvent* msg) {
  return *msg->_impl_.mutation_.modify_exact_response_;
}
void MutationEvent::set_allocated_cancel_responses(::ai::inworld::packets::CancelResponses* cancel_responses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mutation();
  if (cancel_responses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cancel_responses);
    if (message_arena != submessage_arena) {
      cancel_responses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_responses, submessage_arena);
    }
    set_has_cancel_responses();
    _impl_.mutation_.cancel_responses_ = cancel_responses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.cancel_responses)
}
void MutationEvent::set_allocated_regenerate_response(::ai::inworld::packets::RegenerateResponse* regenerate_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mutation();
  if (regenerate_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(regenerate_response);
    if (message_arena != submessage_arena) {
      regenerate_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regenerate_response, submessage_arena);
    }
    set_has_regenerate_response();
    _impl_.mutation_.regenerate_response_ = regenerate_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.regenerate_response)
}
void MutationEvent::set_allocated_apply_response(::ai::inworld::packets::ApplyResponse* apply_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mutation();
  if (apply_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(apply_response);
    if (message_arena != submessage_arena) {
      apply_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_response, submessage_arena);
    }
    set_has_apply_response();
    _impl_.mutation_.apply_response_ = apply_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.apply_response)
}
void MutationEvent::set_allocated_load_scene(::ai::inworld::packets::LoadScene* load_scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mutation();
  if (load_scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load_scene);
    if (message_arena != submessage_arena) {
      load_scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_scene, submessage_arena);
    }
    set_has_load_scene();
    _impl_.mutation_.load_scene_ = load_scene;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.load_scene)
}
void MutationEvent::set_allocated_modify_exact_response(::ai::inworld::packets::ModifyExactResponse* modify_exact_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mutation();
  if (modify_exact_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modify_exact_response);
    if (message_arena != submessage_arena) {
      modify_exact_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify_exact_response, submessage_arena);
    }
    set_has_modify_exact_response();
    _impl_.mutation_.modify_exact_response_ = modify_exact_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.modify_exact_response)
}
MutationEvent::MutationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.MutationEvent)
}
MutationEvent::MutationEvent(const MutationEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MutationEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mutation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mutation();
  switch (from.mutation_case()) {
    case kCancelResponses: {
      _this->_internal_mutable_cancel_responses()->::ai::inworld::packets::CancelResponses::MergeFrom(
          from._internal_cancel_responses());
      break;
    }
    case kRegenerateResponse: {
      _this->_internal_mutable_regenerate_response()->::ai::inworld::packets::RegenerateResponse::MergeFrom(
          from._internal_regenerate_response());
      break;
    }
    case kApplyResponse: {
      _this->_internal_mutable_apply_response()->::ai::inworld::packets::ApplyResponse::MergeFrom(
          from._internal_apply_response());
      break;
    }
    case kLoadScene: {
      _this->_internal_mutable_load_scene()->::ai::inworld::packets::LoadScene::MergeFrom(
          from._internal_load_scene());
      break;
    }
    case kModifyExactResponse: {
      _this->_internal_mutable_modify_exact_response()->::ai::inworld::packets::ModifyExactResponse::MergeFrom(
          from._internal_modify_exact_response());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.MutationEvent)
}

inline void MutationEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mutation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_mutation();
}

MutationEvent::~MutationEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.MutationEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MutationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_mutation()) {
    clear_mutation();
  }
}

void MutationEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MutationEvent::clear_mutation() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.MutationEvent)
  switch (mutation_case()) {
    case kCancelResponses: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.mutation_.cancel_responses_;
      }
      break;
    }
    case kRegenerateResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.mutation_.regenerate_response_;
      }
      break;
    }
    case kApplyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.mutation_.apply_response_;
      }
      break;
    }
    case kLoadScene: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.mutation_.load_scene_;
      }
      break;
    }
    case kModifyExactResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.mutation_.modify_exact_response_;
      }
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MUTATION_NOT_SET;
}


void MutationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.MutationEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mutation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutationEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.CancelResponses cancel_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_responses(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regenerate_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.ApplyResponse apply_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadScene load_scene = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_scene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modify_exact_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MutationEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.MutationEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.CancelResponses cancel_responses = 1;
  if (_internal_has_cancel_responses()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cancel_responses(this),
        _Internal::cancel_responses(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
  if (_internal_has_regenerate_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regenerate_response(this),
        _Internal::regenerate_response(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.ApplyResponse apply_response = 3;
  if (_internal_has_apply_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::apply_response(this),
        _Internal::apply_response(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.LoadScene load_scene = 4;
  if (_internal_has_load_scene()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::load_scene(this),
        _Internal::load_scene(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
  if (_internal_has_modify_exact_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::modify_exact_response(this),
        _Internal::modify_exact_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.MutationEvent)
  return target;
}

size_t MutationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.MutationEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mutation_case()) {
    // .ai.inworld.packets.CancelResponses cancel_responses = 1;
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mutation_.cancel_responses_);
      break;
    }
    // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
    case kRegenerateResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mutation_.regenerate_response_);
      break;
    }
    // .ai.inworld.packets.ApplyResponse apply_response = 3;
    case kApplyResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mutation_.apply_response_);
      break;
    }
    // .ai.inworld.packets.LoadScene load_scene = 4;
    case kLoadScene: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mutation_.load_scene_);
      break;
    }
    // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
    case kModifyExactResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mutation_.modify_exact_response_);
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MutationEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MutationEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MutationEvent::GetClassData() const { return &_class_data_; }


void MutationEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MutationEvent*>(&to_msg);
  auto& from = static_cast<const MutationEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.MutationEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mutation_case()) {
    case kCancelResponses: {
      _this->_internal_mutable_cancel_responses()->::ai::inworld::packets::CancelResponses::MergeFrom(
          from._internal_cancel_responses());
      break;
    }
    case kRegenerateResponse: {
      _this->_internal_mutable_regenerate_response()->::ai::inworld::packets::RegenerateResponse::MergeFrom(
          from._internal_regenerate_response());
      break;
    }
    case kApplyResponse: {
      _this->_internal_mutable_apply_response()->::ai::inworld::packets::ApplyResponse::MergeFrom(
          from._internal_apply_response());
      break;
    }
    case kLoadScene: {
      _this->_internal_mutable_load_scene()->::ai::inworld::packets::LoadScene::MergeFrom(
          from._internal_load_scene());
      break;
    }
    case kModifyExactResponse: {
      _this->_internal_mutable_modify_exact_response()->::ai::inworld::packets::ModifyExactResponse::MergeFrom(
          from._internal_modify_exact_response());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MutationEvent::CopyFrom(const MutationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.MutationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationEvent::IsInitialized() const {
  return true;
}

void MutationEvent::InternalSwap(MutationEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mutation_, other->_impl_.mutation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[17]);
}

// ===================================================================

class CancelResponses::_Internal {
 public:
};

CancelResponses::CancelResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponses)
}
CancelResponses::CancelResponses(const CancelResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelResponses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.utterance_id_){from._impl_.utterance_id_}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponses)
}

inline void CancelResponses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.utterance_id_){arena}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelResponses::~CancelResponses() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.utterance_id_.~RepeatedPtrField();
  _impl_.interaction_id_.Destroy();
}

void CancelResponses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.utterance_id_.Clear();
  _impl_.interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CancelResponses.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CancelResponses.utterance_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponses.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponses.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponses)
  return target;
}

size_t CancelResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.utterance_id_.size());
  for (int i = 0, n = _impl_.utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelResponses::GetClassData() const { return &_class_data_; }


void CancelResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelResponses*>(&to_msg);
  auto& from = static_cast<const CancelResponses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.utterance_id_.MergeFrom(from._impl_.utterance_id_);
  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelResponses::CopyFrom(const CancelResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponses::IsInitialized() const {
  return true;
}

void CancelResponses::InternalSwap(CancelResponses* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.utterance_id_.InternalSwap(&other->_impl_.utterance_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[18]);
}

// ===================================================================

class RegenerateResponse::_Internal {
 public:
};

RegenerateResponse::RegenerateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RegenerateResponse)
}
RegenerateResponse::RegenerateResponse(const RegenerateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegenerateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RegenerateResponse)
}

inline void RegenerateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegenerateResponse::~RegenerateResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RegenerateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegenerateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interaction_id_.Destroy();
}

void RegenerateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegenerateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RegenerateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegenerateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.RegenerateResponse.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegenerateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RegenerateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.RegenerateResponse.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RegenerateResponse)
  return target;
}

size_t RegenerateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RegenerateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegenerateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegenerateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegenerateResponse::GetClassData() const { return &_class_data_; }


void RegenerateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegenerateResponse*>(&to_msg);
  auto& from = static_cast<const RegenerateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RegenerateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegenerateResponse::CopyFrom(const RegenerateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RegenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegenerateResponse::IsInitialized() const {
  return true;
}

void RegenerateResponse::InternalSwap(RegenerateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegenerateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[19]);
}

// ===================================================================

class ApplyResponse::_Internal {
 public:
  static const ::ai::inworld::packets::PacketId& packet_id(const ApplyResponse* msg);
};

const ::ai::inworld::packets::PacketId&
ApplyResponse::_Internal::packet_id(const ApplyResponse* msg) {
  return *msg->_impl_.packet_id_;
}
ApplyResponse::ApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ApplyResponse)
}
ApplyResponse::ApplyResponse(const ApplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_id()) {
    _this->_impl_.packet_id_ = new ::ai::inworld::packets::PacketId(*from._impl_.packet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ApplyResponse)
}

inline void ApplyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ApplyResponse::~ApplyResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ApplyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void ApplyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ApplyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.packet_id_ != nullptr) {
    delete _impl_.packet_id_;
  }
  _impl_.packet_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.PacketId packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ApplyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId packet_id = 1;
  if (this->_internal_has_packet_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ApplyResponse)
  return target;
}

size_t ApplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ApplyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId packet_id = 1;
  if (this->_internal_has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyResponse::GetClassData() const { return &_class_data_; }


void ApplyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyResponse*>(&to_msg);
  auto& from = static_cast<const ApplyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ApplyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_packet_id()) {
    _this->_internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyResponse::CopyFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ApplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyResponse::IsInitialized() const {
  return true;
}

void ApplyResponse::InternalSwap(ApplyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.packet_id_, other->_impl_.packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[20]);
}

// ===================================================================

class LoadScene::_Internal {
 public:
};

LoadScene::LoadScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadScene)
}
LoadScene::LoadScene(const LoadScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadScene* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadScene)
}

inline void LoadScene::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadScene::~LoadScene() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void LoadScene::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadScene::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.LoadScene.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadScene.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadScene)
  return target;
}

size_t LoadScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadScene::GetClassData() const { return &_class_data_; }


void LoadScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadScene*>(&to_msg);
  auto& from = static_cast<const LoadScene&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadScene)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadScene::CopyFrom(const LoadScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadScene::IsInitialized() const {
  return true;
}

void LoadScene::InternalSwap(LoadScene* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[21]);
}

// ===================================================================

class ModifyExactResponse::_Internal {
 public:
};

ModifyExactResponse::ModifyExactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ModifyExactResponse)
}
ModifyExactResponse::ModifyExactResponse(const ModifyExactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModifyExactResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interaction_id_){}
    , decltype(_impl_.exact_text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exact_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exact_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exact_text().empty()) {
    _this->_impl_.exact_text_.Set(from._internal_exact_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ModifyExactResponse)
}

inline void ModifyExactResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interaction_id_){}
    , decltype(_impl_.exact_text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exact_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exact_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModifyExactResponse::~ModifyExactResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ModifyExactResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyExactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interaction_id_.Destroy();
  _impl_.exact_text_.Destroy();
}

void ModifyExactResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModifyExactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ModifyExactResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interaction_id_.ClearToEmpty();
  _impl_.exact_text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyExactResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.ModifyExactResponse.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      // string exact_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_exact_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.ModifyExactResponse.exact_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyExactResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ModifyExactResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ModifyExactResponse.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // string exact_text = 2;
  if (!this->_internal_exact_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exact_text().data(), static_cast<int>(this->_internal_exact_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ModifyExactResponse.exact_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exact_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ModifyExactResponse)
  return target;
}

size_t ModifyExactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ModifyExactResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string exact_text = 2;
  if (!this->_internal_exact_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exact_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyExactResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModifyExactResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyExactResponse::GetClassData() const { return &_class_data_; }


void ModifyExactResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModifyExactResponse*>(&to_msg);
  auto& from = static_cast<const ModifyExactResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ModifyExactResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  if (!from._internal_exact_text().empty()) {
    _this->_internal_set_exact_text(from._internal_exact_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyExactResponse::CopyFrom(const ModifyExactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ModifyExactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyExactResponse::IsInitialized() const {
  return true;
}

void ModifyExactResponse::InternalSwap(ModifyExactResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exact_text_, lhs_arena,
      &other->_impl_.exact_text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyExactResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[22]);
}

// ===================================================================

class LoadSceneOutputEvent_Agent::_Internal {
 public:
};

LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
}
LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(const LoadSceneOutputEvent_Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadSceneOutputEvent_Agent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_id_){}
    , decltype(_impl_.brain_name_){}
    , decltype(_impl_.given_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_id().empty()) {
    _this->_impl_.agent_id_.Set(from._internal_agent_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.brain_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.brain_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_brain_name().empty()) {
    _this->_impl_.brain_name_.Set(from._internal_brain_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.given_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.given_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_given_name().empty()) {
    _this->_impl_.given_name_.Set(from._internal_given_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
}

inline void LoadSceneOutputEvent_Agent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_id_){}
    , decltype(_impl_.brain_name_){}
    , decltype(_impl_.given_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.brain_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.brain_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.given_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.given_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadSceneOutputEvent_Agent::~LoadSceneOutputEvent_Agent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadSceneOutputEvent_Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agent_id_.Destroy();
  _impl_.brain_name_.Destroy();
  _impl_.given_name_.Destroy();
}

void LoadSceneOutputEvent_Agent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadSceneOutputEvent_Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_id_.ClearToEmpty();
  _impl_.brain_name_.ClearToEmpty();
  _impl_.given_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneOutputEvent_Agent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.agent_id"));
        } else
          goto handle_unusual;
        continue;
      // string brain_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_brain_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.brain_name"));
        } else
          goto handle_unusual;
        continue;
      // string given_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_given_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.given_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadSceneOutputEvent_Agent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1;
  if (!this->_internal_agent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string brain_name = 2;
  if (!this->_internal_brain_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brain_name().data(), static_cast<int>(this->_internal_brain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.brain_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brain_name(), target);
  }

  // string given_name = 3;
  if (!this->_internal_given_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_given_name().data(), static_cast<int>(this->_internal_given_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.given_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_given_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  return target;
}

size_t LoadSceneOutputEvent_Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 1;
  if (!this->_internal_agent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string brain_name = 2;
  if (!this->_internal_brain_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brain_name());
  }

  // string given_name = 3;
  if (!this->_internal_given_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_given_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadSceneOutputEvent_Agent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadSceneOutputEvent_Agent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadSceneOutputEvent_Agent::GetClassData() const { return &_class_data_; }


void LoadSceneOutputEvent_Agent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadSceneOutputEvent_Agent*>(&to_msg);
  auto& from = static_cast<const LoadSceneOutputEvent_Agent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agent_id().empty()) {
    _this->_internal_set_agent_id(from._internal_agent_id());
  }
  if (!from._internal_brain_name().empty()) {
    _this->_internal_set_brain_name(from._internal_brain_name());
  }
  if (!from._internal_given_name().empty()) {
    _this->_internal_set_given_name(from._internal_given_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadSceneOutputEvent_Agent::CopyFrom(const LoadSceneOutputEvent_Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneOutputEvent_Agent::IsInitialized() const {
  return true;
}

void LoadSceneOutputEvent_Agent::InternalSwap(LoadSceneOutputEvent_Agent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_id_, lhs_arena,
      &other->_impl_.agent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.brain_name_, lhs_arena,
      &other->_impl_.brain_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.given_name_, lhs_arena,
      &other->_impl_.given_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneOutputEvent_Agent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[23]);
}

// ===================================================================

class LoadSceneOutputEvent::_Internal {
 public:
};

LoadSceneOutputEvent::LoadSceneOutputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadSceneOutputEvent)
}
LoadSceneOutputEvent::LoadSceneOutputEvent(const LoadSceneOutputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadSceneOutputEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agents_){from._impl_.agents_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadSceneOutputEvent)
}

inline void LoadSceneOutputEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agents_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoadSceneOutputEvent::~LoadSceneOutputEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadSceneOutputEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadSceneOutputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agents_.~RepeatedPtrField();
}

void LoadSceneOutputEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadSceneOutputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadSceneOutputEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneOutputEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadSceneOutputEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadSceneOutputEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agents_size()); i < n; i++) {
    const auto& repfield = this->_internal_agents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadSceneOutputEvent)
  return target;
}

size_t LoadSceneOutputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadSceneOutputEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->_impl_.agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadSceneOutputEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadSceneOutputEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadSceneOutputEvent::GetClassData() const { return &_class_data_; }


void LoadSceneOutputEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadSceneOutputEvent*>(&to_msg);
  auto& from = static_cast<const LoadSceneOutputEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agents_.MergeFrom(from._impl_.agents_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadSceneOutputEvent::CopyFrom(const LoadSceneOutputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneOutputEvent::IsInitialized() const {
  return true;
}

void LoadSceneOutputEvent::InternalSwap(LoadSceneOutputEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneOutputEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[24]);
}

// ===================================================================

class DebugInfoEvent::_Internal {
 public:
  static const ::ai::inworld::packets::RelationInfo& relation(const DebugInfoEvent* msg);
};

const ::ai::inworld::packets::RelationInfo&
DebugInfoEvent::_Internal::relation(const DebugInfoEvent* msg) {
  return *msg->_impl_.info_.relation_;
}
void DebugInfoEvent::set_allocated_relation(::ai::inworld::packets::RelationInfo* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_info();
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relation);
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    set_has_relation();
    _impl_.info_.relation_ = relation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.DebugInfoEvent.relation)
}
DebugInfoEvent::DebugInfoEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DebugInfoEvent)
}
DebugInfoEvent::DebugInfoEvent(const DebugInfoEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugInfoEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_info();
  switch (from.info_case()) {
    case kRelation: {
      _this->_internal_mutable_relation()->::ai::inworld::packets::RelationInfo::MergeFrom(
          from._internal_relation());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DebugInfoEvent)
}

inline void DebugInfoEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_info();
}

DebugInfoEvent::~DebugInfoEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DebugInfoEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugInfoEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_info()) {
    clear_info();
  }
}

void DebugInfoEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugInfoEvent::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DebugInfoEvent)
  switch (info_case()) {
    case kRelation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.info_.relation_;
      }
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INFO_NOT_SET;
}


void DebugInfoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DebugInfoEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugInfoEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.RelationInfo relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugInfoEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DebugInfoEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo relation = 1;
  if (_internal_has_relation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::relation(this),
        _Internal::relation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DebugInfoEvent)
  return target;
}

size_t DebugInfoEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DebugInfoEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (info_case()) {
    // .ai.inworld.packets.RelationInfo relation = 1;
    case kRelation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_.relation_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugInfoEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugInfoEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugInfoEvent::GetClassData() const { return &_class_data_; }


void DebugInfoEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugInfoEvent*>(&to_msg);
  auto& from = static_cast<const DebugInfoEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DebugInfoEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.info_case()) {
    case kRelation: {
      _this->_internal_mutable_relation()->::ai::inworld::packets::RelationInfo::MergeFrom(
          from._internal_relation());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugInfoEvent::CopyFrom(const DebugInfoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DebugInfoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfoEvent::IsInitialized() const {
  return true;
}

void DebugInfoEvent::InternalSwap(DebugInfoEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugInfoEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace packets
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Actor*
Arena::CreateMaybeMessage< ::ai::inworld::packets::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Actor >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Routing*
Arena::CreateMaybeMessage< ::ai::inworld::packets::Routing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Routing >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::PacketId*
Arena::CreateMaybeMessage< ::ai::inworld::packets::PacketId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::PacketId >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::InworldPacket*
Arena::CreateMaybeMessage< ::ai::inworld::packets::InworldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::InworldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::TextEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::TextEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::TextEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ControlEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::ControlEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ControlEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AudioChunk*
Arena::CreateMaybeMessage< ::ai::inworld::packets::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent_Parameter*
Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponsesEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponsesEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponsesEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::EmotionEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::EmotionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::EmotionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DataChunk*
Arena::CreateMaybeMessage< ::ai::inworld::packets::DataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AdditionalPhonemeInfo*
Arena::CreateMaybeMessage< ::ai::inworld::packets::AdditionalPhonemeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AdditionalPhonemeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ActionEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::ActionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ActionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::NarratedAction*
Arena::CreateMaybeMessage< ::ai::inworld::packets::NarratedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::NarratedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RelationInfo_RelationAttributes*
Arena::CreateMaybeMessage< ::ai::inworld::packets::RelationInfo_RelationAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RelationInfo_RelationAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RelationInfo*
Arena::CreateMaybeMessage< ::ai::inworld::packets::RelationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RelationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::MutationEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::MutationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::MutationEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponses*
Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RegenerateResponse*
Arena::CreateMaybeMessage< ::ai::inworld::packets::RegenerateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RegenerateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ApplyResponse*
Arena::CreateMaybeMessage< ::ai::inworld::packets::ApplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ApplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadScene*
Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadScene >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ModifyExactResponse*
Arena::CreateMaybeMessage< ::ai::inworld::packets::ModifyExactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ModifyExactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadSceneOutputEvent_Agent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadSceneOutputEvent_Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadSceneOutputEvent_Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadSceneOutputEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadSceneOutputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadSceneOutputEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DebugInfoEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::DebugInfoEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DebugInfoEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
