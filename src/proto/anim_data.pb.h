// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anim_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_anim_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_anim_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_anim_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_anim_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_anim_5fdata_2eproto;
namespace nvidia {
namespace ace {
namespace animation {
class AnimData;
class AnimDataDefaultTypeInternal;
extern AnimDataDefaultTypeInternal _AnimData_default_instance_;
class AnimDataHeader;
class AnimDataHeaderDefaultTypeInternal;
extern AnimDataHeaderDefaultTypeInternal _AnimDataHeader_default_instance_;
class AnimDataRequest;
class AnimDataRequestDefaultTypeInternal;
extern AnimDataRequestDefaultTypeInternal _AnimDataRequest_default_instance_;
class AnimDataResponse;
class AnimDataResponseDefaultTypeInternal;
extern AnimDataResponseDefaultTypeInternal _AnimDataResponse_default_instance_;
class AnimData_FilesEntry_DoNotUse;
class AnimData_FilesEntry_DoNotUseDefaultTypeInternal;
extern AnimData_FilesEntry_DoNotUseDefaultTypeInternal _AnimData_FilesEntry_DoNotUse_default_instance_;
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> ::nvidia::ace::animation::AnimData* Arena::CreateMaybeMessage<::nvidia::ace::animation::AnimData>(Arena*);
template<> ::nvidia::ace::animation::AnimDataHeader* Arena::CreateMaybeMessage<::nvidia::ace::animation::AnimDataHeader>(Arena*);
template<> ::nvidia::ace::animation::AnimDataRequest* Arena::CreateMaybeMessage<::nvidia::ace::animation::AnimDataRequest>(Arena*);
template<> ::nvidia::ace::animation::AnimDataResponse* Arena::CreateMaybeMessage<::nvidia::ace::animation::AnimDataResponse>(Arena*);
template<> ::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nvidia {
namespace ace {
namespace animation {

// ===================================================================

class AnimDataHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AnimDataHeader) */ {
 public:
  inline AnimDataHeader() : AnimDataHeader(nullptr) {}
  virtual ~AnimDataHeader();

  AnimDataHeader(const AnimDataHeader& from);
  AnimDataHeader(AnimDataHeader&& from) noexcept
    : AnimDataHeader() {
    *this = ::std::move(from);
  }

  inline AnimDataHeader& operator=(const AnimDataHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimDataHeader& operator=(AnimDataHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimDataHeader& default_instance();

  static inline const AnimDataHeader* internal_default_instance() {
    return reinterpret_cast<const AnimDataHeader*>(
               &_AnimDataHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnimDataHeader& a, AnimDataHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimDataHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimDataHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimDataHeader* New() const final {
    return CreateMaybeMessage<AnimDataHeader>(nullptr);
  }

  AnimDataHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimDataHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimDataHeader& from);
  void MergeFrom(const AnimDataHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimDataHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AnimDataHeader";
  }
  protected:
  explicit AnimDataHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fdata_2eproto);
    return ::descriptor_table_anim_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarModelFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
    kUserIdFieldNumber = 5,
  };
  // string avatar_model = 1;
  void clear_avatar_model();
  const std::string& avatar_model() const;
  void set_avatar_model(const std::string& value);
  void set_avatar_model(std::string&& value);
  void set_avatar_model(const char* value);
  void set_avatar_model(const char* value, size_t size);
  std::string* mutable_avatar_model();
  std::string* release_avatar_model();
  void set_allocated_avatar_model(std::string* avatar_model);
  private:
  const std::string& _internal_avatar_model() const;
  void _internal_set_avatar_model(const std::string& value);
  std::string* _internal_mutable_avatar_model();
  public:

  // string request_id = 2;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string stream_id = 4;
  void clear_stream_id();
  const std::string& stream_id() const;
  void set_stream_id(const std::string& value);
  void set_stream_id(std::string&& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  std::string* mutable_stream_id();
  std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AnimDataHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_anim_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AnimData_FilesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnimData_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnimData_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  AnimData_FilesEntry_DoNotUse();
  explicit AnimData_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AnimData_FilesEntry_DoNotUse& other);
  static const AnimData_FilesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AnimData_FilesEntry_DoNotUse*>(&_AnimData_FilesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia.ace.animation.AnimData.FilesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fdata_2eproto);
    return ::descriptor_table_anim_5fdata_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class AnimData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AnimData) */ {
 public:
  inline AnimData() : AnimData(nullptr) {}
  virtual ~AnimData();

  AnimData(const AnimData& from);
  AnimData(AnimData&& from) noexcept
    : AnimData() {
    *this = ::std::move(from);
  }

  inline AnimData& operator=(const AnimData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimData& operator=(AnimData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimData& default_instance();

  static inline const AnimData* internal_default_instance() {
    return reinterpret_cast<const AnimData*>(
               &_AnimData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnimData& a, AnimData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimData* New() const final {
    return CreateMaybeMessage<AnimData>(nullptr);
  }

  AnimData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimData& from);
  void MergeFrom(const AnimData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AnimData";
  }
  protected:
  explicit AnimData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fdata_2eproto);
    return ::descriptor_table_anim_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kUsdaFieldNumber = 1,
  };
  // map<string, bytes> files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_files();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_files();

  // string usda = 1;
  void clear_usda();
  const std::string& usda() const;
  void set_usda(const std::string& value);
  void set_usda(std::string&& value);
  void set_usda(const char* value);
  void set_usda(const char* value, size_t size);
  std::string* mutable_usda();
  std::string* release_usda();
  void set_allocated_usda(std::string* usda);
  private:
  const std::string& _internal_usda() const;
  void _internal_set_usda(const std::string& value);
  std::string* _internal_mutable_usda();
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AnimData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AnimData_FilesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usda_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_anim_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AnimDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AnimDataRequest) */ {
 public:
  inline AnimDataRequest() : AnimDataRequest(nullptr) {}
  virtual ~AnimDataRequest();

  AnimDataRequest(const AnimDataRequest& from);
  AnimDataRequest(AnimDataRequest&& from) noexcept
    : AnimDataRequest() {
    *this = ::std::move(from);
  }

  inline AnimDataRequest& operator=(const AnimDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimDataRequest& operator=(AnimDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimDataRequest& default_instance();

  enum StreamingRequestCase {
    kHeader = 1,
    kAnimData = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const AnimDataRequest* internal_default_instance() {
    return reinterpret_cast<const AnimDataRequest*>(
               &_AnimDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnimDataRequest& a, AnimDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimDataRequest* New() const final {
    return CreateMaybeMessage<AnimDataRequest>(nullptr);
  }

  AnimDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimDataRequest& from);
  void MergeFrom(const AnimDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AnimDataRequest";
  }
  protected:
  explicit AnimDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fdata_2eproto);
    return ::descriptor_table_anim_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAnimDataFieldNumber = 2,
  };
  // .nvidia.ace.animation.AnimDataHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::nvidia::ace::animation::AnimDataHeader& header() const;
  ::nvidia::ace::animation::AnimDataHeader* release_header();
  ::nvidia::ace::animation::AnimDataHeader* mutable_header();
  void set_allocated_header(::nvidia::ace::animation::AnimDataHeader* header);
  private:
  const ::nvidia::ace::animation::AnimDataHeader& _internal_header() const;
  ::nvidia::ace::animation::AnimDataHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::nvidia::ace::animation::AnimDataHeader* header);
  ::nvidia::ace::animation::AnimDataHeader* unsafe_arena_release_header();

  // .nvidia.ace.animation.AnimData anim_data = 2;
  bool has_anim_data() const;
  private:
  bool _internal_has_anim_data() const;
  public:
  void clear_anim_data();
  const ::nvidia::ace::animation::AnimData& anim_data() const;
  ::nvidia::ace::animation::AnimData* release_anim_data();
  ::nvidia::ace::animation::AnimData* mutable_anim_data();
  void set_allocated_anim_data(::nvidia::ace::animation::AnimData* anim_data);
  private:
  const ::nvidia::ace::animation::AnimData& _internal_anim_data() const;
  ::nvidia::ace::animation::AnimData* _internal_mutable_anim_data();
  public:
  void unsafe_arena_set_allocated_anim_data(
      ::nvidia::ace::animation::AnimData* anim_data);
  ::nvidia::ace::animation::AnimData* unsafe_arena_release_anim_data();

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AnimDataRequest)
 private:
  class _Internal;
  void set_has_header();
  void set_has_anim_data();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamingRequestUnion {
    StreamingRequestUnion() {}
    ::nvidia::ace::animation::AnimDataHeader* header_;
    ::nvidia::ace::animation::AnimData* anim_data_;
  } streaming_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_anim_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AnimDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AnimDataResponse) */ {
 public:
  inline AnimDataResponse() : AnimDataResponse(nullptr) {}
  virtual ~AnimDataResponse();

  AnimDataResponse(const AnimDataResponse& from);
  AnimDataResponse(AnimDataResponse&& from) noexcept
    : AnimDataResponse() {
    *this = ::std::move(from);
  }

  inline AnimDataResponse& operator=(const AnimDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimDataResponse& operator=(AnimDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimDataResponse& default_instance();

  static inline const AnimDataResponse* internal_default_instance() {
    return reinterpret_cast<const AnimDataResponse*>(
               &_AnimDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnimDataResponse& a, AnimDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimDataResponse* New() const final {
    return CreateMaybeMessage<AnimDataResponse>(nullptr);
  }

  AnimDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimDataResponse& from);
  void MergeFrom(const AnimDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AnimDataResponse";
  }
  protected:
  explicit AnimDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fdata_2eproto);
    return ::descriptor_table_anim_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AnimDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_anim_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnimDataHeader

// string avatar_model = 1;
inline void AnimDataHeader::clear_avatar_model() {
  avatar_model_.ClearToEmpty();
}
inline const std::string& AnimDataHeader::avatar_model() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataHeader.avatar_model)
  return _internal_avatar_model();
}
inline void AnimDataHeader::set_avatar_model(const std::string& value) {
  _internal_set_avatar_model(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataHeader.avatar_model)
}
inline std::string* AnimDataHeader::mutable_avatar_model() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataHeader.avatar_model)
  return _internal_mutable_avatar_model();
}
inline const std::string& AnimDataHeader::_internal_avatar_model() const {
  return avatar_model_.Get();
}
inline void AnimDataHeader::_internal_set_avatar_model(const std::string& value) {
  
  avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimDataHeader::set_avatar_model(std::string&& value) {
  
  avatar_model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimDataHeader.avatar_model)
}
inline void AnimDataHeader::set_avatar_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimDataHeader.avatar_model)
}
inline void AnimDataHeader::set_avatar_model(const char* value,
    size_t size) {
  
  avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimDataHeader.avatar_model)
}
inline std::string* AnimDataHeader::_internal_mutable_avatar_model() {
  
  return avatar_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimDataHeader::release_avatar_model() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataHeader.avatar_model)
  return avatar_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimDataHeader::set_allocated_avatar_model(std::string* avatar_model) {
  if (avatar_model != nullptr) {
    
  } else {
    
  }
  avatar_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataHeader.avatar_model)
}

// string request_id = 2;
inline void AnimDataHeader::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& AnimDataHeader::request_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataHeader.request_id)
  return _internal_request_id();
}
inline void AnimDataHeader::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataHeader.request_id)
}
inline std::string* AnimDataHeader::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataHeader.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& AnimDataHeader::_internal_request_id() const {
  return request_id_.Get();
}
inline void AnimDataHeader::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimDataHeader::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimDataHeader.request_id)
}
inline void AnimDataHeader::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimDataHeader.request_id)
}
inline void AnimDataHeader::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimDataHeader.request_id)
}
inline std::string* AnimDataHeader::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimDataHeader::release_request_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataHeader.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimDataHeader::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataHeader.request_id)
}

// string session_id = 3;
inline void AnimDataHeader::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AnimDataHeader::session_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataHeader.session_id)
  return _internal_session_id();
}
inline void AnimDataHeader::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataHeader.session_id)
}
inline std::string* AnimDataHeader::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataHeader.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& AnimDataHeader::_internal_session_id() const {
  return session_id_.Get();
}
inline void AnimDataHeader::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimDataHeader::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimDataHeader.session_id)
}
inline void AnimDataHeader::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimDataHeader.session_id)
}
inline void AnimDataHeader::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimDataHeader.session_id)
}
inline std::string* AnimDataHeader::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimDataHeader::release_session_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataHeader.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimDataHeader::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataHeader.session_id)
}

// string stream_id = 4;
inline void AnimDataHeader::clear_stream_id() {
  stream_id_.ClearToEmpty();
}
inline const std::string& AnimDataHeader::stream_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataHeader.stream_id)
  return _internal_stream_id();
}
inline void AnimDataHeader::set_stream_id(const std::string& value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataHeader.stream_id)
}
inline std::string* AnimDataHeader::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataHeader.stream_id)
  return _internal_mutable_stream_id();
}
inline const std::string& AnimDataHeader::_internal_stream_id() const {
  return stream_id_.Get();
}
inline void AnimDataHeader::_internal_set_stream_id(const std::string& value) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimDataHeader::set_stream_id(std::string&& value) {
  
  stream_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimDataHeader.stream_id)
}
inline void AnimDataHeader::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimDataHeader.stream_id)
}
inline void AnimDataHeader::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimDataHeader.stream_id)
}
inline std::string* AnimDataHeader::_internal_mutable_stream_id() {
  
  return stream_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimDataHeader::release_stream_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataHeader.stream_id)
  return stream_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimDataHeader::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataHeader.stream_id)
}

// string user_id = 5;
inline void AnimDataHeader::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& AnimDataHeader::user_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataHeader.user_id)
  return _internal_user_id();
}
inline void AnimDataHeader::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataHeader.user_id)
}
inline std::string* AnimDataHeader::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataHeader.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AnimDataHeader::_internal_user_id() const {
  return user_id_.Get();
}
inline void AnimDataHeader::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimDataHeader::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimDataHeader.user_id)
}
inline void AnimDataHeader::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimDataHeader.user_id)
}
inline void AnimDataHeader::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimDataHeader.user_id)
}
inline std::string* AnimDataHeader::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimDataHeader::release_user_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataHeader.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimDataHeader::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataHeader.user_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnimData

// string usda = 1;
inline void AnimData::clear_usda() {
  usda_.ClearToEmpty();
}
inline const std::string& AnimData::usda() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimData.usda)
  return _internal_usda();
}
inline void AnimData::set_usda(const std::string& value) {
  _internal_set_usda(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimData.usda)
}
inline std::string* AnimData::mutable_usda() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimData.usda)
  return _internal_mutable_usda();
}
inline const std::string& AnimData::_internal_usda() const {
  return usda_.Get();
}
inline void AnimData::_internal_set_usda(const std::string& value) {
  
  usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimData::set_usda(std::string&& value) {
  
  usda_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimData.usda)
}
inline void AnimData::set_usda(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimData.usda)
}
inline void AnimData::set_usda(const char* value,
    size_t size) {
  
  usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimData.usda)
}
inline std::string* AnimData::_internal_mutable_usda() {
  
  return usda_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimData::release_usda() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimData.usda)
  return usda_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimData::set_allocated_usda(std::string* usda) {
  if (usda != nullptr) {
    
  } else {
    
  }
  usda_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usda,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimData.usda)
}

// map<string, bytes> files = 2;
inline int AnimData::_internal_files_size() const {
  return files_.size();
}
inline int AnimData::files_size() const {
  return _internal_files_size();
}
inline void AnimData::clear_files() {
  files_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AnimData::_internal_files() const {
  return files_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AnimData::files() const {
  // @@protoc_insertion_point(field_map:nvidia.ace.animation.AnimData.files)
  return _internal_files();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AnimData::_internal_mutable_files() {
  return files_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AnimData::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:nvidia.ace.animation.AnimData.files)
  return _internal_mutable_files();
}

// -------------------------------------------------------------------

// AnimDataRequest

// .nvidia.ace.animation.AnimDataHeader header = 1;
inline bool AnimDataRequest::_internal_has_header() const {
  return streaming_request_case() == kHeader;
}
inline bool AnimDataRequest::has_header() const {
  return _internal_has_header();
}
inline void AnimDataRequest::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void AnimDataRequest::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete streaming_request_.header_;
    }
    clear_has_streaming_request();
  }
}
inline ::nvidia::ace::animation::AnimDataHeader* AnimDataRequest::release_header() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataRequest.header)
  if (_internal_has_header()) {
    clear_has_streaming_request();
      ::nvidia::ace::animation::AnimDataHeader* temp = streaming_request_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia::ace::animation::AnimDataHeader& AnimDataRequest::_internal_header() const {
  return _internal_has_header()
      ? *streaming_request_.header_
      : reinterpret_cast< ::nvidia::ace::animation::AnimDataHeader&>(::nvidia::ace::animation::_AnimDataHeader_default_instance_);
}
inline const ::nvidia::ace::animation::AnimDataHeader& AnimDataRequest::header() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataRequest.header)
  return _internal_header();
}
inline ::nvidia::ace::animation::AnimDataHeader* AnimDataRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia.ace.animation.AnimDataRequest.header)
  if (_internal_has_header()) {
    clear_has_streaming_request();
    ::nvidia::ace::animation::AnimDataHeader* temp = streaming_request_.header_;
    streaming_request_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimDataRequest::unsafe_arena_set_allocated_header(::nvidia::ace::animation::AnimDataHeader* header) {
  clear_streaming_request();
  if (header) {
    set_has_header();
    streaming_request_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia.ace.animation.AnimDataRequest.header)
}
inline ::nvidia::ace::animation::AnimDataHeader* AnimDataRequest::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_streaming_request();
    set_has_header();
    streaming_request_.header_ = CreateMaybeMessage< ::nvidia::ace::animation::AnimDataHeader >(GetArena());
  }
  return streaming_request_.header_;
}
inline ::nvidia::ace::animation::AnimDataHeader* AnimDataRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataRequest.header)
  return _internal_mutable_header();
}

// .nvidia.ace.animation.AnimData anim_data = 2;
inline bool AnimDataRequest::_internal_has_anim_data() const {
  return streaming_request_case() == kAnimData;
}
inline bool AnimDataRequest::has_anim_data() const {
  return _internal_has_anim_data();
}
inline void AnimDataRequest::set_has_anim_data() {
  _oneof_case_[0] = kAnimData;
}
inline void AnimDataRequest::clear_anim_data() {
  if (_internal_has_anim_data()) {
    if (GetArena() == nullptr) {
      delete streaming_request_.anim_data_;
    }
    clear_has_streaming_request();
  }
}
inline ::nvidia::ace::animation::AnimData* AnimDataRequest::release_anim_data() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataRequest.anim_data)
  if (_internal_has_anim_data()) {
    clear_has_streaming_request();
      ::nvidia::ace::animation::AnimData* temp = streaming_request_.anim_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.anim_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia::ace::animation::AnimData& AnimDataRequest::_internal_anim_data() const {
  return _internal_has_anim_data()
      ? *streaming_request_.anim_data_
      : reinterpret_cast< ::nvidia::ace::animation::AnimData&>(::nvidia::ace::animation::_AnimData_default_instance_);
}
inline const ::nvidia::ace::animation::AnimData& AnimDataRequest::anim_data() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataRequest.anim_data)
  return _internal_anim_data();
}
inline ::nvidia::ace::animation::AnimData* AnimDataRequest::unsafe_arena_release_anim_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia.ace.animation.AnimDataRequest.anim_data)
  if (_internal_has_anim_data()) {
    clear_has_streaming_request();
    ::nvidia::ace::animation::AnimData* temp = streaming_request_.anim_data_;
    streaming_request_.anim_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimDataRequest::unsafe_arena_set_allocated_anim_data(::nvidia::ace::animation::AnimData* anim_data) {
  clear_streaming_request();
  if (anim_data) {
    set_has_anim_data();
    streaming_request_.anim_data_ = anim_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia.ace.animation.AnimDataRequest.anim_data)
}
inline ::nvidia::ace::animation::AnimData* AnimDataRequest::_internal_mutable_anim_data() {
  if (!_internal_has_anim_data()) {
    clear_streaming_request();
    set_has_anim_data();
    streaming_request_.anim_data_ = CreateMaybeMessage< ::nvidia::ace::animation::AnimData >(GetArena());
  }
  return streaming_request_.anim_data_;
}
inline ::nvidia::ace::animation::AnimData* AnimDataRequest::mutable_anim_data() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataRequest.anim_data)
  return _internal_mutable_anim_data();
}

inline bool AnimDataRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void AnimDataRequest::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline AnimDataRequest::StreamingRequestCase AnimDataRequest::streaming_request_case() const {
  return AnimDataRequest::StreamingRequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnimDataResponse

// bool success = 1;
inline void AnimDataResponse::clear_success() {
  success_ = false;
}
inline bool AnimDataResponse::_internal_success() const {
  return success_;
}
inline bool AnimDataResponse::success() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataResponse.success)
  return _internal_success();
}
inline void AnimDataResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AnimDataResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataResponse.success)
}

// string message = 2;
inline void AnimDataResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AnimDataResponse::message() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AnimDataResponse.message)
  return _internal_message();
}
inline void AnimDataResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AnimDataResponse.message)
}
inline std::string* AnimDataResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AnimDataResponse.message)
  return _internal_mutable_message();
}
inline const std::string& AnimDataResponse::_internal_message() const {
  return message_.Get();
}
inline void AnimDataResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimDataResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AnimDataResponse.message)
}
inline void AnimDataResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AnimDataResponse.message)
}
inline void AnimDataResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AnimDataResponse.message)
}
inline std::string* AnimDataResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimDataResponse::release_message() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AnimDataResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimDataResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace animation
}  // namespace ace
}  // namespace nvidia

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_anim_5fdata_2eproto
