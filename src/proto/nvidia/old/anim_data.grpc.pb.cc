#include "ProtoDisableWarning.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia/old/anim_data.proto

#include "nvidia/old/anim_data.pb.h"
#include "nvidia/old/anim_data.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nvidia {
namespace ace {
namespace animation {

static const char* AnimDataService_method_names[] = {
  "/nvidia.ace.animation.AnimDataService/PushAnimDataStream",
};

std::unique_ptr< AnimDataService::Stub> AnimDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnimDataService::Stub> stub(new AnimDataService::Stub(channel));
  return stub;
}

AnimDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushAnimDataStream_(AnimDataService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::nvidia::ace::animation::AnimDataRequest>* AnimDataService::Stub::PushAnimDataStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AnimDataResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::nvidia::ace::animation::AnimDataRequest>::Create(channel_.get(), rpcmethod_PushAnimDataStream_, context, response);
}

void AnimDataService::Stub::experimental_async::PushAnimDataStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AnimDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::nvidia::ace::animation::AnimDataRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::nvidia::ace::animation::AnimDataRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_PushAnimDataStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AnimDataRequest>* AnimDataService::Stub::AsyncPushAnimDataStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AnimDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia::ace::animation::AnimDataRequest>::Create(channel_.get(), cq, rpcmethod_PushAnimDataStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AnimDataRequest>* AnimDataService::Stub::PrepareAsyncPushAnimDataStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AnimDataResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia::ace::animation::AnimDataRequest>::Create(channel_.get(), cq, rpcmethod_PushAnimDataStream_, context, response, false, nullptr);
}

AnimDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnimDataService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< AnimDataService::Service, ::nvidia::ace::animation::AnimDataRequest, ::nvidia::ace::animation::AnimDataResponse>(
          [](AnimDataService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::nvidia::ace::animation::AnimDataRequest>* reader,
             ::nvidia::ace::animation::AnimDataResponse* resp) {
               return service->PushAnimDataStream(ctx, reader, resp);
             }, this)));
}

AnimDataService::Service::~Service() {
}

::grpc::Status AnimDataService::Service::PushAnimDataStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia::ace::animation::AnimDataRequest>* reader, ::nvidia::ace::animation::AnimDataResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvidia
}  // namespace ace
}  // namespace animation

