#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/old/audio_data.proto

#include "nvidia/old/audio_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fold_2faudio_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fold_2faudio_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStreamData_EmotionMapEntry_DoNotUse_nvidia_2fold_2faudio_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fold_2faudio_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto;
namespace nvidia {
namespace ace {
namespace animation {
class StatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class DotFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DotFileResponse> _instance;
} _DotFileResponse_default_instance_;
class AudioStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamRequest> _instance;
} _AudioStreamRequest_default_instance_;
class AudioStreamData_EmotionMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamData_EmotionMapEntry_DoNotUse> _instance;
} _AudioStreamData_EmotionMapEntry_DoNotUse_default_instance_;
class AudioStreamDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamData> _instance;
} _AudioStreamData_default_instance_;
class AudioStreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamHeader> _instance;
} _AudioStreamHeader_default_instance_;
class AudioStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamResponse> _instance;
} _AudioStreamResponse_default_instance_;
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
static void InitDefaultsscc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AudioStreamData_default_instance_;
    new (ptr) ::nvidia::ace::animation::AudioStreamData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto}, {
      &scc_info_AudioStreamData_EmotionMapEntry_DoNotUse_nvidia_2fold_2faudio_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_AudioStreamData_EmotionMapEntry_DoNotUse_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AudioStreamData_EmotionMapEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStreamData_EmotionMapEntry_DoNotUse_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioStreamData_EmotionMapEntry_DoNotUse_nvidia_2fold_2faudio_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AudioStreamHeader_default_instance_;
    new (ptr) ::nvidia::ace::animation::AudioStreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_AudioStreamRequest_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AudioStreamRequest_default_instance_;
    new (ptr) ::nvidia::ace::animation::AudioStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AudioStreamRequest_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AudioStreamRequest_nvidia_2fold_2faudio_5fdata_2eproto}, {
      &scc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto.base,
      &scc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_AudioStreamResponse_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AudioStreamResponse_default_instance_;
    new (ptr) ::nvidia::ace::animation::AudioStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStreamResponse_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioStreamResponse_nvidia_2fold_2faudio_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_DotFileResponse_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_DotFileResponse_default_instance_;
    new (ptr) ::nvidia::ace::animation::DotFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DotFileResponse_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DotFileResponse_nvidia_2fold_2faudio_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_StatusResponse_nvidia_2fold_2faudio_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_StatusResponse_default_instance_;
    new (ptr) ::nvidia::ace::animation::StatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusResponse_nvidia_2fold_2faudio_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusResponse_nvidia_2fold_2faudio_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvidia_2fold_2faudio_5fdata_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nvidia_2fold_2faudio_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvidia_2fold_2faudio_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvidia_2fold_2faudio_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::StatusResponse, total_stream_number_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::StatusResponse, current_free_stream_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::DotFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::DotFileResponse, success_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::DotFileResponse, dot_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamRequest, streaming_request_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData, audio_chunk_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamData, emotion_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, avatar_model_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, samplerate_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, request_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, session_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, stream_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, user_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, channel_number_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamHeader, audio_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamResponse, success_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AudioStreamResponse, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nvidia::ace::animation::StatusResponse)},
  { 7, -1, sizeof(::nvidia::ace::animation::DotFileResponse)},
  { 14, -1, sizeof(::nvidia::ace::animation::AudioStreamRequest)},
  { 22, 29, sizeof(::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse)},
  { 31, -1, sizeof(::nvidia::ace::animation::AudioStreamData)},
  { 38, -1, sizeof(::nvidia::ace::animation::AudioStreamHeader)},
  { 51, -1, sizeof(::nvidia::ace::animation::AudioStreamResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_DotFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AudioStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AudioStreamData_EmotionMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AudioStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AudioStreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AudioStreamResponse_default_instance_),
};

const char descriptor_table_protodef_nvidia_2fold_2faudio_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033nvidia/old/audio_data.proto\022\024nvidia.ac"
  "e.animation\032\033google/protobuf/empty.proto"
  "\"Q\n\016StatusResponse\022\033\n\023total_stream_numbe"
  "r\030\001 \001(\005\022\"\n\032current_free_stream_number\030\002 "
  "\001(\005\"4\n\017DotFileResponse\022\017\n\007success\030\001 \001(\010\022"
  "\020\n\010dot_file\030\002 \001(\014\"\233\001\n\022AudioStreamRequest"
  "\0229\n\006header\030\001 \001(\0132\'.nvidia.ace.animation."
  "AudioStreamHeaderH\000\0225\n\004data\030\002 \001(\0132%.nvid"
  "ia.ace.animation.AudioStreamDataH\000B\023\n\021st"
  "reaming_request\"\245\001\n\017AudioStreamData\022\023\n\013a"
  "udio_chunk\030\001 \001(\014\022J\n\013emotion_map\030\002 \003(\01325."
  "nvidia.ace.animation.AudioStreamData.Emo"
  "tionMapEntry\0321\n\017EmotionMapEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\336\001\n\021AudioStreamH"
  "eader\022\024\n\014avatar_model\030\001 \001(\t\022\022\n\nsamplerat"
  "e\030\002 \001(\005\022\022\n\nrequest_id\030\003 \001(\t\022\022\n\nsession_i"
  "d\030\004 \001(\t\022\021\n\tstream_id\030\005 \001(\t\022\017\n\007user_id\030\006 "
  "\001(\t\022\026\n\016channel_number\030\007 \001(\005\022;\n\014audio_for"
  "mat\030\010 \001(\0162%.nvidia.ace.animation.WaveAud"
  "ioFormat\"7\n\023AudioStreamResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\022\017\n\007message\030\002 \001(\t**\n\017WaveAudioFo"
  "rmat\022\016\n\nIEEE_FLOAT\020\000\022\007\n\003PCM\020\0012\240\002\n\016Audio2"
  "XService\022K\n\tGetStatus\022\026.google.protobuf."
  "Empty\032$.nvidia.ace.animation.StatusRespo"
  "nse\"\000\022U\n\022GetPipelineDotFile\022\026.google.pro"
  "tobuf.Empty\032%.nvidia.ace.animation.DotFi"
  "leResponse\"\000\022j\n\017PushAudioStream\022(.nvidia"
  ".ace.animation.AudioStreamRequest\032).nvid"
  "ia.ace.animation.AudioStreamResponse\"\000(\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto_sccs[7] = {
  &scc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto.base,
  &scc_info_AudioStreamData_EmotionMapEntry_DoNotUse_nvidia_2fold_2faudio_5fdata_2eproto.base,
  &scc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto.base,
  &scc_info_AudioStreamRequest_nvidia_2fold_2faudio_5fdata_2eproto.base,
  &scc_info_AudioStreamResponse_nvidia_2fold_2faudio_5fdata_2eproto.base,
  &scc_info_DotFileResponse_nvidia_2fold_2faudio_5fdata_2eproto.base,
  &scc_info_StatusResponse_nvidia_2fold_2faudio_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto = {
  false, false, descriptor_table_protodef_nvidia_2fold_2faudio_5fdata_2eproto, "nvidia/old/audio_data.proto", 1168,
  &descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto_once, descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto_sccs, descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_nvidia_2fold_2faudio_5fdata_2eproto::offsets,
  file_level_metadata_nvidia_2fold_2faudio_5fdata_2eproto, 7, file_level_enum_descriptors_nvidia_2fold_2faudio_5fdata_2eproto, file_level_service_descriptors_nvidia_2fold_2faudio_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvidia_2fold_2faudio_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto)), true);
namespace nvidia {
namespace ace {
namespace animation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaveAudioFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
  return file_level_enum_descriptors_nvidia_2fold_2faudio_5fdata_2eproto[0];
}
bool WaveAudioFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_stream_number_, &from.total_stream_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_free_stream_number_) -
    reinterpret_cast<char*>(&total_stream_number_)) + sizeof(current_free_stream_number_));
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_stream_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&current_free_stream_number_) -
      reinterpret_cast<char*>(&total_stream_number_)) + sizeof(current_free_stream_number_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.StatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusResponse_nvidia_2fold_2faudio_5fdata_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_stream_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_free_stream_number_) -
      reinterpret_cast<char*>(&total_stream_number_)) + sizeof(current_free_stream_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_stream_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_stream_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_free_stream_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_free_stream_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_stream_number = 1;
  if (this->total_stream_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_stream_number(), target);
  }

  // int32 current_free_stream_number = 2;
  if (this->current_free_stream_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_free_stream_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_stream_number = 1;
  if (this->total_stream_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_stream_number());
  }

  // int32 current_free_stream_number = 2;
  if (this->current_free_stream_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_free_stream_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_stream_number() != 0) {
    _internal_set_total_stream_number(from._internal_total_stream_number());
  }
  if (from.current_free_stream_number() != 0) {
    _internal_set_current_free_stream_number(from._internal_current_free_stream_number());
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, current_free_stream_number_)
      + sizeof(StatusResponse::current_free_stream_number_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, total_stream_number_)>(
          reinterpret_cast<char*>(&total_stream_number_),
          reinterpret_cast<char*>(&other->total_stream_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DotFileResponse::_Internal {
 public:
};

DotFileResponse::DotFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.DotFileResponse)
}
DotFileResponse::DotFileResponse(const DotFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dot_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dot_file().empty()) {
    dot_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dot_file(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.DotFileResponse)
}

void DotFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DotFileResponse_nvidia_2fold_2faudio_5fdata_2eproto.base);
  dot_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

DotFileResponse::~DotFileResponse() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.DotFileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DotFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dot_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DotFileResponse::ArenaDtor(void* object) {
  DotFileResponse* _this = reinterpret_cast< DotFileResponse* >(object);
  (void)_this;
}
void DotFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DotFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DotFileResponse& DotFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DotFileResponse_nvidia_2fold_2faudio_5fdata_2eproto.base);
  return *internal_default_instance();
}


void DotFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.DotFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dot_file_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DotFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dot_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dot_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DotFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.DotFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bytes dot_file = 2;
  if (this->dot_file().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_dot_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.DotFileResponse)
  return target;
}

size_t DotFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.DotFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dot_file = 2;
  if (this->dot_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dot_file());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DotFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.DotFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DotFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DotFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.DotFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.DotFileResponse)
    MergeFrom(*source);
  }
}

void DotFileResponse::MergeFrom(const DotFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.DotFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dot_file().size() > 0) {
    _internal_set_dot_file(from._internal_dot_file());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void DotFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.DotFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotFileResponse::CopyFrom(const DotFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.DotFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotFileResponse::IsInitialized() const {
  return true;
}

void DotFileResponse::InternalSwap(DotFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dot_file_.Swap(&other->dot_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DotFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioStreamRequest::_Internal {
 public:
  static const ::nvidia::ace::animation::AudioStreamHeader& header(const AudioStreamRequest* msg);
  static const ::nvidia::ace::animation::AudioStreamData& data(const AudioStreamRequest* msg);
};

const ::nvidia::ace::animation::AudioStreamHeader&
AudioStreamRequest::_Internal::header(const AudioStreamRequest* msg) {
  return *msg->streaming_request_.header_;
}
const ::nvidia::ace::animation::AudioStreamData&
AudioStreamRequest::_Internal::data(const AudioStreamRequest* msg) {
  return *msg->streaming_request_.data_;
}
void AudioStreamRequest::set_allocated_header(::nvidia::ace::animation::AudioStreamHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    streaming_request_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamRequest.header)
}
void AudioStreamRequest::set_allocated_data(::nvidia::ace::animation::AudioStreamData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    streaming_request_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamRequest.data)
}
AudioStreamRequest::AudioStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AudioStreamRequest)
}
AudioStreamRequest::AudioStreamRequest(const AudioStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kHeader: {
      _internal_mutable_header()->::nvidia::ace::animation::AudioStreamHeader::MergeFrom(from._internal_header());
      break;
    }
    case kData: {
      _internal_mutable_data()->::nvidia::ace::animation::AudioStreamData::MergeFrom(from._internal_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AudioStreamRequest)
}

void AudioStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStreamRequest_nvidia_2fold_2faudio_5fdata_2eproto.base);
  clear_has_streaming_request();
}

AudioStreamRequest::~AudioStreamRequest() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AudioStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void AudioStreamRequest::ArenaDtor(void* object) {
  AudioStreamRequest* _this = reinterpret_cast< AudioStreamRequest* >(object);
  (void)_this;
}
void AudioStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStreamRequest& AudioStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStreamRequest_nvidia_2fold_2faudio_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AudioStreamRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:nvidia.ace.animation.AudioStreamRequest)
  switch (streaming_request_case()) {
    case kHeader: {
      if (GetArena() == nullptr) {
        delete streaming_request_.header_;
      }
      break;
    }
    case kData: {
      if (GetArena() == nullptr) {
        delete streaming_request_.data_;
      }
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void AudioStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AudioStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia.ace.animation.AudioStreamHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia.ace.animation.AudioStreamData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AudioStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia.ace.animation.AudioStreamHeader header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .nvidia.ace.animation.AudioStreamData data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AudioStreamRequest)
  return target;
}

size_t AudioStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AudioStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .nvidia.ace.animation.AudioStreamHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.header_);
      break;
    }
    // .nvidia.ace.animation.AudioStreamData data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.data_);
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AudioStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AudioStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AudioStreamRequest)
    MergeFrom(*source);
  }
}

void AudioStreamRequest::MergeFrom(const AudioStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AudioStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kHeader: {
      _internal_mutable_header()->::nvidia::ace::animation::AudioStreamHeader::MergeFrom(from._internal_header());
      break;
    }
    case kData: {
      _internal_mutable_data()->::nvidia::ace::animation::AudioStreamData::MergeFrom(from._internal_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void AudioStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AudioStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStreamRequest::CopyFrom(const AudioStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AudioStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStreamRequest::IsInitialized() const {
  return true;
}

void AudioStreamRequest::InternalSwap(AudioStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AudioStreamData_EmotionMapEntry_DoNotUse::AudioStreamData_EmotionMapEntry_DoNotUse() {}
AudioStreamData_EmotionMapEntry_DoNotUse::AudioStreamData_EmotionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AudioStreamData_EmotionMapEntry_DoNotUse::MergeFrom(const AudioStreamData_EmotionMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamData_EmotionMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AudioStreamData_EmotionMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AudioStreamData::_Internal {
 public:
};

AudioStreamData::AudioStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emotion_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AudioStreamData)
}
AudioStreamData::AudioStreamData(const AudioStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  emotion_map_.MergeFrom(from.emotion_map_);
  audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_chunk().empty()) {
    audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_chunk(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AudioStreamData)
}

void AudioStreamData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto.base);
  audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioStreamData::~AudioStreamData() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AudioStreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audio_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioStreamData::ArenaDtor(void* object) {
  AudioStreamData* _this = reinterpret_cast< AudioStreamData* >(object);
  (void)_this;
}
void AudioStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStreamData& AudioStreamData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStreamData_nvidia_2fold_2faudio_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AudioStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AudioStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emotion_map_.Clear();
  audio_chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audio_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> emotion_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&emotion_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AudioStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_chunk = 1;
  if (this->audio_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio_chunk(), target);
  }

  // map<string, float> emotion_map = 2;
  if (!this->_internal_emotion_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia.ace.animation.AudioStreamData.EmotionMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_emotion_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_emotion_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_emotion_map().begin();
          it != this->_internal_emotion_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AudioStreamData_EmotionMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_emotion_map().begin();
          it != this->_internal_emotion_map().end(); ++it) {
        target = AudioStreamData_EmotionMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AudioStreamData)
  return target;
}

size_t AudioStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AudioStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> emotion_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_emotion_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_emotion_map().begin();
      it != this->_internal_emotion_map().end(); ++it) {
    total_size += AudioStreamData_EmotionMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes audio_chunk = 1;
  if (this->audio_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AudioStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AudioStreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AudioStreamData)
    MergeFrom(*source);
  }
}

void AudioStreamData::MergeFrom(const AudioStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AudioStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotion_map_.MergeFrom(from.emotion_map_);
  if (from.audio_chunk().size() > 0) {
    _internal_set_audio_chunk(from._internal_audio_chunk());
  }
}

void AudioStreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AudioStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStreamData::CopyFrom(const AudioStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AudioStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStreamData::IsInitialized() const {
  return true;
}

void AudioStreamData::InternalSwap(AudioStreamData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emotion_map_.Swap(&other->emotion_map_);
  audio_chunk_.Swap(&other->audio_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioStreamHeader::_Internal {
 public:
};

AudioStreamHeader::AudioStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AudioStreamHeader)
}
AudioStreamHeader::AudioStreamHeader(const AudioStreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_model().empty()) {
    avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_model(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stream_id().empty()) {
    stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_id(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  ::memcpy(&samplerate_, &from.samplerate_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_format_) -
    reinterpret_cast<char*>(&samplerate_)) + sizeof(audio_format_));
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AudioStreamHeader)
}

void AudioStreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto.base);
  avatar_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&samplerate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&audio_format_) -
      reinterpret_cast<char*>(&samplerate_)) + sizeof(audio_format_));
}

AudioStreamHeader::~AudioStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AudioStreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioStreamHeader::ArenaDtor(void* object) {
  AudioStreamHeader* _this = reinterpret_cast< AudioStreamHeader* >(object);
  (void)_this;
}
void AudioStreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStreamHeader& AudioStreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStreamHeader_nvidia_2fold_2faudio_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AudioStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AudioStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_model_.ClearToEmpty();
  request_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  stream_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  ::memset(&samplerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_format_) -
      reinterpret_cast<char*>(&samplerate_)) + sizeof(audio_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string avatar_model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_avatar_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AudioStreamHeader.avatar_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 samplerate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AudioStreamHeader.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AudioStreamHeader.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stream_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AudioStreamHeader.stream_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AudioStreamHeader.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          channel_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia.ace.animation.WaveAudioFormat audio_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audio_format(static_cast<::nvidia::ace::animation::WaveAudioFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AudioStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string avatar_model = 1;
  if (this->avatar_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_model().data(), static_cast<int>(this->_internal_avatar_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AudioStreamHeader.avatar_model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_avatar_model(), target);
  }

  // int32 samplerate = 2;
  if (this->samplerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_samplerate(), target);
  }

  // string request_id = 3;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AudioStreamHeader.request_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_request_id(), target);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AudioStreamHeader.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  // string stream_id = 5;
  if (this->stream_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AudioStreamHeader.stream_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_id(), target);
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AudioStreamHeader.user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id(), target);
  }

  // int32 channel_number = 7;
  if (this->channel_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_channel_number(), target);
  }

  // .nvidia.ace.animation.WaveAudioFormat audio_format = 8;
  if (this->audio_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_audio_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AudioStreamHeader)
  return target;
}

size_t AudioStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AudioStreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatar_model = 1;
  if (this->avatar_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_model());
  }

  // string request_id = 3;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string stream_id = 5;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // int32 samplerate = 2;
  if (this->samplerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_samplerate());
  }

  // int32 channel_number = 7;
  if (this->channel_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_number());
  }

  // .nvidia.ace.animation.WaveAudioFormat audio_format = 8;
  if (this->audio_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audio_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AudioStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AudioStreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AudioStreamHeader)
    MergeFrom(*source);
  }
}

void AudioStreamHeader::MergeFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AudioStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_model().size() > 0) {
    _internal_set_avatar_model(from._internal_avatar_model());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.stream_id().size() > 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.samplerate() != 0) {
    _internal_set_samplerate(from._internal_samplerate());
  }
  if (from.channel_number() != 0) {
    _internal_set_channel_number(from._internal_channel_number());
  }
  if (from.audio_format() != 0) {
    _internal_set_audio_format(from._internal_audio_format());
  }
}

void AudioStreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStreamHeader::CopyFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStreamHeader::IsInitialized() const {
  return true;
}

void AudioStreamHeader::InternalSwap(AudioStreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatar_model_.Swap(&other->avatar_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stream_id_.Swap(&other->stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioStreamHeader, audio_format_)
      + sizeof(AudioStreamHeader::audio_format_)
      - PROTOBUF_FIELD_OFFSET(AudioStreamHeader, samplerate_)>(
          reinterpret_cast<char*>(&samplerate_),
          reinterpret_cast<char*>(&other->samplerate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioStreamResponse::_Internal {
 public:
};

AudioStreamResponse::AudioStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AudioStreamResponse)
}
AudioStreamResponse::AudioStreamResponse(const AudioStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AudioStreamResponse)
}

void AudioStreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStreamResponse_nvidia_2fold_2faudio_5fdata_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

AudioStreamResponse::~AudioStreamResponse() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AudioStreamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioStreamResponse::ArenaDtor(void* object) {
  AudioStreamResponse* _this = reinterpret_cast< AudioStreamResponse* >(object);
  (void)_this;
}
void AudioStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStreamResponse& AudioStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStreamResponse_nvidia_2fold_2faudio_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AudioStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AudioStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AudioStreamResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AudioStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AudioStreamResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AudioStreamResponse)
  return target;
}

size_t AudioStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AudioStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AudioStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AudioStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AudioStreamResponse)
    MergeFrom(*source);
  }
}

void AudioStreamResponse::MergeFrom(const AudioStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AudioStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AudioStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AudioStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStreamResponse::CopyFrom(const AudioStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AudioStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStreamResponse::IsInitialized() const {
  return true;
}

void AudioStreamResponse::InternalSwap(AudioStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::StatusResponse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::DotFileResponse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::DotFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::DotFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AudioStreamRequest* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AudioStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AudioStreamData* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AudioStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AudioStreamHeader* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AudioStreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AudioStreamResponse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AudioStreamResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
