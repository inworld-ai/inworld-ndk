// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/old/audio_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_2fold_2faudio_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_2fold_2faudio_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nvidia_2fold_2faudio_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_2fold_2faudio_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto;
namespace nvidia {
namespace ace {
namespace animation {
class AudioStreamData;
class AudioStreamDataDefaultTypeInternal;
extern AudioStreamDataDefaultTypeInternal _AudioStreamData_default_instance_;
class AudioStreamData_EmotionMapEntry_DoNotUse;
class AudioStreamData_EmotionMapEntry_DoNotUseDefaultTypeInternal;
extern AudioStreamData_EmotionMapEntry_DoNotUseDefaultTypeInternal _AudioStreamData_EmotionMapEntry_DoNotUse_default_instance_;
class AudioStreamHeader;
class AudioStreamHeaderDefaultTypeInternal;
extern AudioStreamHeaderDefaultTypeInternal _AudioStreamHeader_default_instance_;
class AudioStreamRequest;
class AudioStreamRequestDefaultTypeInternal;
extern AudioStreamRequestDefaultTypeInternal _AudioStreamRequest_default_instance_;
class AudioStreamResponse;
class AudioStreamResponseDefaultTypeInternal;
extern AudioStreamResponseDefaultTypeInternal _AudioStreamResponse_default_instance_;
class DotFileResponse;
class DotFileResponseDefaultTypeInternal;
extern DotFileResponseDefaultTypeInternal _DotFileResponse_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> ::nvidia::ace::animation::AudioStreamData* Arena::CreateMaybeMessage<::nvidia::ace::animation::AudioStreamData>(Arena*);
template<> ::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia::ace::animation::AudioStreamData_EmotionMapEntry_DoNotUse>(Arena*);
template<> ::nvidia::ace::animation::AudioStreamHeader* Arena::CreateMaybeMessage<::nvidia::ace::animation::AudioStreamHeader>(Arena*);
template<> ::nvidia::ace::animation::AudioStreamRequest* Arena::CreateMaybeMessage<::nvidia::ace::animation::AudioStreamRequest>(Arena*);
template<> ::nvidia::ace::animation::AudioStreamResponse* Arena::CreateMaybeMessage<::nvidia::ace::animation::AudioStreamResponse>(Arena*);
template<> ::nvidia::ace::animation::DotFileResponse* Arena::CreateMaybeMessage<::nvidia::ace::animation::DotFileResponse>(Arena*);
template<> ::nvidia::ace::animation::StatusResponse* Arena::CreateMaybeMessage<::nvidia::ace::animation::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nvidia {
namespace ace {
namespace animation {

enum WaveAudioFormat : int {
  IEEE_FLOAT = 0,
  PCM = 1,
  WaveAudioFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WaveAudioFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WaveAudioFormat_IsValid(int value);
constexpr WaveAudioFormat WaveAudioFormat_MIN = IEEE_FLOAT;
constexpr WaveAudioFormat WaveAudioFormat_MAX = PCM;
constexpr int WaveAudioFormat_ARRAYSIZE = WaveAudioFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaveAudioFormat_descriptor();
template<typename T>
inline const std::string& WaveAudioFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WaveAudioFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WaveAudioFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WaveAudioFormat_descriptor(), enum_t_value);
}
inline bool WaveAudioFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WaveAudioFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WaveAudioFormat>(
    WaveAudioFormat_descriptor(), name, value);
}
// ===================================================================

class StatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusResponse& default_instance();

  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalStreamNumberFieldNumber = 1,
    kCurrentFreeStreamNumberFieldNumber = 2,
  };
  // int32 total_stream_number = 1;
  void clear_total_stream_number();
  ::PROTOBUF_NAMESPACE_ID::int32 total_stream_number() const;
  void set_total_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_stream_number() const;
  void _internal_set_total_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_free_stream_number = 2;
  void clear_current_free_stream_number();
  ::PROTOBUF_NAMESPACE_ID::int32 current_free_stream_number() const;
  void set_current_free_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_free_stream_number() const;
  void _internal_set_current_free_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_stream_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_free_stream_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fold_2faudio_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DotFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.DotFileResponse) */ {
 public:
  inline DotFileResponse() : DotFileResponse(nullptr) {}
  virtual ~DotFileResponse();

  DotFileResponse(const DotFileResponse& from);
  DotFileResponse(DotFileResponse&& from) noexcept
    : DotFileResponse() {
    *this = ::std::move(from);
  }

  inline DotFileResponse& operator=(const DotFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DotFileResponse& operator=(DotFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DotFileResponse& default_instance();

  static inline const DotFileResponse* internal_default_instance() {
    return reinterpret_cast<const DotFileResponse*>(
               &_DotFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DotFileResponse& a, DotFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DotFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DotFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DotFileResponse* New() const final {
    return CreateMaybeMessage<DotFileResponse>(nullptr);
  }

  DotFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DotFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DotFileResponse& from);
  void MergeFrom(const DotFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DotFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.DotFileResponse";
  }
  protected:
  explicit DotFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDotFileFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes dot_file = 2;
  void clear_dot_file();
  const std::string& dot_file() const;
  void set_dot_file(const std::string& value);
  void set_dot_file(std::string&& value);
  void set_dot_file(const char* value);
  void set_dot_file(const void* value, size_t size);
  std::string* mutable_dot_file();
  std::string* release_dot_file();
  void set_allocated_dot_file(std::string* dot_file);
  private:
  const std::string& _internal_dot_file() const;
  void _internal_set_dot_file(const std::string& value);
  std::string* _internal_mutable_dot_file();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.DotFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dot_file_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fold_2faudio_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AudioStreamRequest) */ {
 public:
  inline AudioStreamRequest() : AudioStreamRequest(nullptr) {}
  virtual ~AudioStreamRequest();

  AudioStreamRequest(const AudioStreamRequest& from);
  AudioStreamRequest(AudioStreamRequest&& from) noexcept
    : AudioStreamRequest() {
    *this = ::std::move(from);
  }

  inline AudioStreamRequest& operator=(const AudioStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamRequest& operator=(AudioStreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStreamRequest& default_instance();

  enum StreamingRequestCase {
    kHeader = 1,
    kData = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const AudioStreamRequest* internal_default_instance() {
    return reinterpret_cast<const AudioStreamRequest*>(
               &_AudioStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioStreamRequest& a, AudioStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStreamRequest* New() const final {
    return CreateMaybeMessage<AudioStreamRequest>(nullptr);
  }

  AudioStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStreamRequest& from);
  void MergeFrom(const AudioStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AudioStreamRequest";
  }
  protected:
  explicit AudioStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .nvidia.ace.animation.AudioStreamHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::nvidia::ace::animation::AudioStreamHeader& header() const;
  ::nvidia::ace::animation::AudioStreamHeader* release_header();
  ::nvidia::ace::animation::AudioStreamHeader* mutable_header();
  void set_allocated_header(::nvidia::ace::animation::AudioStreamHeader* header);
  private:
  const ::nvidia::ace::animation::AudioStreamHeader& _internal_header() const;
  ::nvidia::ace::animation::AudioStreamHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::nvidia::ace::animation::AudioStreamHeader* header);
  ::nvidia::ace::animation::AudioStreamHeader* unsafe_arena_release_header();

  // .nvidia.ace.animation.AudioStreamData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::nvidia::ace::animation::AudioStreamData& data() const;
  ::nvidia::ace::animation::AudioStreamData* release_data();
  ::nvidia::ace::animation::AudioStreamData* mutable_data();
  void set_allocated_data(::nvidia::ace::animation::AudioStreamData* data);
  private:
  const ::nvidia::ace::animation::AudioStreamData& _internal_data() const;
  ::nvidia::ace::animation::AudioStreamData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::nvidia::ace::animation::AudioStreamData* data);
  ::nvidia::ace::animation::AudioStreamData* unsafe_arena_release_data();

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AudioStreamRequest)
 private:
  class _Internal;
  void set_has_header();
  void set_has_data();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamingRequestUnion {
    StreamingRequestUnion() {}
    ::nvidia::ace::animation::AudioStreamHeader* header_;
    ::nvidia::ace::animation::AudioStreamData* data_;
  } streaming_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nvidia_2fold_2faudio_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamData_EmotionMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AudioStreamData_EmotionMapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AudioStreamData_EmotionMapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  AudioStreamData_EmotionMapEntry_DoNotUse();
  explicit AudioStreamData_EmotionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AudioStreamData_EmotionMapEntry_DoNotUse& other);
  static const AudioStreamData_EmotionMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AudioStreamData_EmotionMapEntry_DoNotUse*>(&_AudioStreamData_EmotionMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia.ace.animation.AudioStreamData.EmotionMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class AudioStreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AudioStreamData) */ {
 public:
  inline AudioStreamData() : AudioStreamData(nullptr) {}
  virtual ~AudioStreamData();

  AudioStreamData(const AudioStreamData& from);
  AudioStreamData(AudioStreamData&& from) noexcept
    : AudioStreamData() {
    *this = ::std::move(from);
  }

  inline AudioStreamData& operator=(const AudioStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamData& operator=(AudioStreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStreamData& default_instance();

  static inline const AudioStreamData* internal_default_instance() {
    return reinterpret_cast<const AudioStreamData*>(
               &_AudioStreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioStreamData& a, AudioStreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStreamData* New() const final {
    return CreateMaybeMessage<AudioStreamData>(nullptr);
  }

  AudioStreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStreamData& from);
  void MergeFrom(const AudioStreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AudioStreamData";
  }
  protected:
  explicit AudioStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEmotionMapFieldNumber = 2,
    kAudioChunkFieldNumber = 1,
  };
  // map<string, float> emotion_map = 2;
  int emotion_map_size() const;
  private:
  int _internal_emotion_map_size() const;
  public:
  void clear_emotion_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_emotion_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_emotion_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      emotion_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_emotion_map();

  // bytes audio_chunk = 1;
  void clear_audio_chunk();
  const std::string& audio_chunk() const;
  void set_audio_chunk(const std::string& value);
  void set_audio_chunk(std::string&& value);
  void set_audio_chunk(const char* value);
  void set_audio_chunk(const void* value, size_t size);
  std::string* mutable_audio_chunk();
  std::string* release_audio_chunk();
  void set_allocated_audio_chunk(std::string* audio_chunk);
  private:
  const std::string& _internal_audio_chunk() const;
  void _internal_set_audio_chunk(const std::string& value);
  std::string* _internal_mutable_audio_chunk();
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AudioStreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AudioStreamData_EmotionMapEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> emotion_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fold_2faudio_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AudioStreamHeader) */ {
 public:
  inline AudioStreamHeader() : AudioStreamHeader(nullptr) {}
  virtual ~AudioStreamHeader();

  AudioStreamHeader(const AudioStreamHeader& from);
  AudioStreamHeader(AudioStreamHeader&& from) noexcept
    : AudioStreamHeader() {
    *this = ::std::move(from);
  }

  inline AudioStreamHeader& operator=(const AudioStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamHeader& operator=(AudioStreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStreamHeader& default_instance();

  static inline const AudioStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AudioStreamHeader*>(
               &_AudioStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AudioStreamHeader& a, AudioStreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStreamHeader* New() const final {
    return CreateMaybeMessage<AudioStreamHeader>(nullptr);
  }

  AudioStreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStreamHeader& from);
  void MergeFrom(const AudioStreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AudioStreamHeader";
  }
  protected:
  explicit AudioStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarModelFieldNumber = 1,
    kRequestIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
    kStreamIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kSamplerateFieldNumber = 2,
    kChannelNumberFieldNumber = 7,
    kAudioFormatFieldNumber = 8,
  };
  // string avatar_model = 1;
  void clear_avatar_model();
  const std::string& avatar_model() const;
  void set_avatar_model(const std::string& value);
  void set_avatar_model(std::string&& value);
  void set_avatar_model(const char* value);
  void set_avatar_model(const char* value, size_t size);
  std::string* mutable_avatar_model();
  std::string* release_avatar_model();
  void set_allocated_avatar_model(std::string* avatar_model);
  private:
  const std::string& _internal_avatar_model() const;
  void _internal_set_avatar_model(const std::string& value);
  std::string* _internal_mutable_avatar_model();
  public:

  // string request_id = 3;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 4;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string stream_id = 5;
  void clear_stream_id();
  const std::string& stream_id() const;
  void set_stream_id(const std::string& value);
  void set_stream_id(std::string&& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  std::string* mutable_stream_id();
  std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // string user_id = 6;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 samplerate = 2;
  void clear_samplerate();
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate() const;
  void set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_samplerate() const;
  void _internal_set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel_number = 7;
  void clear_channel_number();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_number() const;
  void set_channel_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_number() const;
  void _internal_set_channel_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .nvidia.ace.animation.WaveAudioFormat audio_format = 8;
  void clear_audio_format();
  ::nvidia::ace::animation::WaveAudioFormat audio_format() const;
  void set_audio_format(::nvidia::ace::animation::WaveAudioFormat value);
  private:
  ::nvidia::ace::animation::WaveAudioFormat _internal_audio_format() const;
  void _internal_set_audio_format(::nvidia::ace::animation::WaveAudioFormat value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AudioStreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_number_;
  int audio_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fold_2faudio_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.AudioStreamResponse) */ {
 public:
  inline AudioStreamResponse() : AudioStreamResponse(nullptr) {}
  virtual ~AudioStreamResponse();

  AudioStreamResponse(const AudioStreamResponse& from);
  AudioStreamResponse(AudioStreamResponse&& from) noexcept
    : AudioStreamResponse() {
    *this = ::std::move(from);
  }

  inline AudioStreamResponse& operator=(const AudioStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamResponse& operator=(AudioStreamResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStreamResponse& default_instance();

  static inline const AudioStreamResponse* internal_default_instance() {
    return reinterpret_cast<const AudioStreamResponse*>(
               &_AudioStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AudioStreamResponse& a, AudioStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStreamResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStreamResponse* New() const final {
    return CreateMaybeMessage<AudioStreamResponse>(nullptr);
  }

  AudioStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStreamResponse& from);
  void MergeFrom(const AudioStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.AudioStreamResponse";
  }
  protected:
  explicit AudioStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto);
    return ::descriptor_table_nvidia_2fold_2faudio_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.AudioStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fold_2faudio_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusResponse

// int32 total_stream_number = 1;
inline void StatusResponse::clear_total_stream_number() {
  total_stream_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::_internal_total_stream_number() const {
  return total_stream_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::total_stream_number() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.StatusResponse.total_stream_number)
  return _internal_total_stream_number();
}
inline void StatusResponse::_internal_set_total_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_stream_number_ = value;
}
inline void StatusResponse::set_total_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_stream_number(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.StatusResponse.total_stream_number)
}

// int32 current_free_stream_number = 2;
inline void StatusResponse::clear_current_free_stream_number() {
  current_free_stream_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::_internal_current_free_stream_number() const {
  return current_free_stream_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::current_free_stream_number() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.StatusResponse.current_free_stream_number)
  return _internal_current_free_stream_number();
}
inline void StatusResponse::_internal_set_current_free_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_free_stream_number_ = value;
}
inline void StatusResponse::set_current_free_stream_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_free_stream_number(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.StatusResponse.current_free_stream_number)
}

// -------------------------------------------------------------------

// DotFileResponse

// bool success = 1;
inline void DotFileResponse::clear_success() {
  success_ = false;
}
inline bool DotFileResponse::_internal_success() const {
  return success_;
}
inline bool DotFileResponse::success() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.DotFileResponse.success)
  return _internal_success();
}
inline void DotFileResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DotFileResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.DotFileResponse.success)
}

// bytes dot_file = 2;
inline void DotFileResponse::clear_dot_file() {
  dot_file_.ClearToEmpty();
}
inline const std::string& DotFileResponse::dot_file() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.DotFileResponse.dot_file)
  return _internal_dot_file();
}
inline void DotFileResponse::set_dot_file(const std::string& value) {
  _internal_set_dot_file(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.DotFileResponse.dot_file)
}
inline std::string* DotFileResponse::mutable_dot_file() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.DotFileResponse.dot_file)
  return _internal_mutable_dot_file();
}
inline const std::string& DotFileResponse::_internal_dot_file() const {
  return dot_file_.Get();
}
inline void DotFileResponse::_internal_set_dot_file(const std::string& value) {
  
  dot_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DotFileResponse::set_dot_file(std::string&& value) {
  
  dot_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.DotFileResponse.dot_file)
}
inline void DotFileResponse::set_dot_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dot_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.DotFileResponse.dot_file)
}
inline void DotFileResponse::set_dot_file(const void* value,
    size_t size) {
  
  dot_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.DotFileResponse.dot_file)
}
inline std::string* DotFileResponse::_internal_mutable_dot_file() {
  
  return dot_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DotFileResponse::release_dot_file() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.DotFileResponse.dot_file)
  return dot_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DotFileResponse::set_allocated_dot_file(std::string* dot_file) {
  if (dot_file != nullptr) {
    
  } else {
    
  }
  dot_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dot_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.DotFileResponse.dot_file)
}

// -------------------------------------------------------------------

// AudioStreamRequest

// .nvidia.ace.animation.AudioStreamHeader header = 1;
inline bool AudioStreamRequest::_internal_has_header() const {
  return streaming_request_case() == kHeader;
}
inline bool AudioStreamRequest::has_header() const {
  return _internal_has_header();
}
inline void AudioStreamRequest::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void AudioStreamRequest::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete streaming_request_.header_;
    }
    clear_has_streaming_request();
  }
}
inline ::nvidia::ace::animation::AudioStreamHeader* AudioStreamRequest::release_header() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamRequest.header)
  if (_internal_has_header()) {
    clear_has_streaming_request();
      ::nvidia::ace::animation::AudioStreamHeader* temp = streaming_request_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia::ace::animation::AudioStreamHeader& AudioStreamRequest::_internal_header() const {
  return _internal_has_header()
      ? *streaming_request_.header_
      : reinterpret_cast< ::nvidia::ace::animation::AudioStreamHeader&>(::nvidia::ace::animation::_AudioStreamHeader_default_instance_);
}
inline const ::nvidia::ace::animation::AudioStreamHeader& AudioStreamRequest::header() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamRequest.header)
  return _internal_header();
}
inline ::nvidia::ace::animation::AudioStreamHeader* AudioStreamRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia.ace.animation.AudioStreamRequest.header)
  if (_internal_has_header()) {
    clear_has_streaming_request();
    ::nvidia::ace::animation::AudioStreamHeader* temp = streaming_request_.header_;
    streaming_request_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStreamRequest::unsafe_arena_set_allocated_header(::nvidia::ace::animation::AudioStreamHeader* header) {
  clear_streaming_request();
  if (header) {
    set_has_header();
    streaming_request_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia.ace.animation.AudioStreamRequest.header)
}
inline ::nvidia::ace::animation::AudioStreamHeader* AudioStreamRequest::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_streaming_request();
    set_has_header();
    streaming_request_.header_ = CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamHeader >(GetArena());
  }
  return streaming_request_.header_;
}
inline ::nvidia::ace::animation::AudioStreamHeader* AudioStreamRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamRequest.header)
  return _internal_mutable_header();
}

// .nvidia.ace.animation.AudioStreamData data = 2;
inline bool AudioStreamRequest::_internal_has_data() const {
  return streaming_request_case() == kData;
}
inline bool AudioStreamRequest::has_data() const {
  return _internal_has_data();
}
inline void AudioStreamRequest::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void AudioStreamRequest::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete streaming_request_.data_;
    }
    clear_has_streaming_request();
  }
}
inline ::nvidia::ace::animation::AudioStreamData* AudioStreamRequest::release_data() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamRequest.data)
  if (_internal_has_data()) {
    clear_has_streaming_request();
      ::nvidia::ace::animation::AudioStreamData* temp = streaming_request_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia::ace::animation::AudioStreamData& AudioStreamRequest::_internal_data() const {
  return _internal_has_data()
      ? *streaming_request_.data_
      : reinterpret_cast< ::nvidia::ace::animation::AudioStreamData&>(::nvidia::ace::animation::_AudioStreamData_default_instance_);
}
inline const ::nvidia::ace::animation::AudioStreamData& AudioStreamRequest::data() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamRequest.data)
  return _internal_data();
}
inline ::nvidia::ace::animation::AudioStreamData* AudioStreamRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia.ace.animation.AudioStreamRequest.data)
  if (_internal_has_data()) {
    clear_has_streaming_request();
    ::nvidia::ace::animation::AudioStreamData* temp = streaming_request_.data_;
    streaming_request_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStreamRequest::unsafe_arena_set_allocated_data(::nvidia::ace::animation::AudioStreamData* data) {
  clear_streaming_request();
  if (data) {
    set_has_data();
    streaming_request_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia.ace.animation.AudioStreamRequest.data)
}
inline ::nvidia::ace::animation::AudioStreamData* AudioStreamRequest::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_streaming_request();
    set_has_data();
    streaming_request_.data_ = CreateMaybeMessage< ::nvidia::ace::animation::AudioStreamData >(GetArena());
  }
  return streaming_request_.data_;
}
inline ::nvidia::ace::animation::AudioStreamData* AudioStreamRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamRequest.data)
  return _internal_mutable_data();
}

inline bool AudioStreamRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void AudioStreamRequest::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline AudioStreamRequest::StreamingRequestCase AudioStreamRequest::streaming_request_case() const {
  return AudioStreamRequest::StreamingRequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AudioStreamData

// bytes audio_chunk = 1;
inline void AudioStreamData::clear_audio_chunk() {
  audio_chunk_.ClearToEmpty();
}
inline const std::string& AudioStreamData::audio_chunk() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamData.audio_chunk)
  return _internal_audio_chunk();
}
inline void AudioStreamData::set_audio_chunk(const std::string& value) {
  _internal_set_audio_chunk(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamData.audio_chunk)
}
inline std::string* AudioStreamData::mutable_audio_chunk() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamData.audio_chunk)
  return _internal_mutable_audio_chunk();
}
inline const std::string& AudioStreamData::_internal_audio_chunk() const {
  return audio_chunk_.Get();
}
inline void AudioStreamData::_internal_set_audio_chunk(const std::string& value) {
  
  audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamData::set_audio_chunk(std::string&& value) {
  
  audio_chunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamData.audio_chunk)
}
inline void AudioStreamData::set_audio_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamData.audio_chunk)
}
inline void AudioStreamData::set_audio_chunk(const void* value,
    size_t size) {
  
  audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamData.audio_chunk)
}
inline std::string* AudioStreamData::_internal_mutable_audio_chunk() {
  
  return audio_chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamData::release_audio_chunk() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamData.audio_chunk)
  return audio_chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamData::set_allocated_audio_chunk(std::string* audio_chunk) {
  if (audio_chunk != nullptr) {
    
  } else {
    
  }
  audio_chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_chunk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamData.audio_chunk)
}

// map<string, float> emotion_map = 2;
inline int AudioStreamData::_internal_emotion_map_size() const {
  return emotion_map_.size();
}
inline int AudioStreamData::emotion_map_size() const {
  return _internal_emotion_map_size();
}
inline void AudioStreamData::clear_emotion_map() {
  emotion_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
AudioStreamData::_internal_emotion_map() const {
  return emotion_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
AudioStreamData::emotion_map() const {
  // @@protoc_insertion_point(field_map:nvidia.ace.animation.AudioStreamData.emotion_map)
  return _internal_emotion_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
AudioStreamData::_internal_mutable_emotion_map() {
  return emotion_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
AudioStreamData::mutable_emotion_map() {
  // @@protoc_insertion_point(field_mutable_map:nvidia.ace.animation.AudioStreamData.emotion_map)
  return _internal_mutable_emotion_map();
}

// -------------------------------------------------------------------

// AudioStreamHeader

// string avatar_model = 1;
inline void AudioStreamHeader::clear_avatar_model() {
  avatar_model_.ClearToEmpty();
}
inline const std::string& AudioStreamHeader::avatar_model() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.avatar_model)
  return _internal_avatar_model();
}
inline void AudioStreamHeader::set_avatar_model(const std::string& value) {
  _internal_set_avatar_model(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.avatar_model)
}
inline std::string* AudioStreamHeader::mutable_avatar_model() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamHeader.avatar_model)
  return _internal_mutable_avatar_model();
}
inline const std::string& AudioStreamHeader::_internal_avatar_model() const {
  return avatar_model_.Get();
}
inline void AudioStreamHeader::_internal_set_avatar_model(const std::string& value) {
  
  avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamHeader::set_avatar_model(std::string&& value) {
  
  avatar_model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamHeader.avatar_model)
}
inline void AudioStreamHeader::set_avatar_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamHeader.avatar_model)
}
inline void AudioStreamHeader::set_avatar_model(const char* value,
    size_t size) {
  
  avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamHeader.avatar_model)
}
inline std::string* AudioStreamHeader::_internal_mutable_avatar_model() {
  
  return avatar_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamHeader::release_avatar_model() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamHeader.avatar_model)
  return avatar_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamHeader::set_allocated_avatar_model(std::string* avatar_model) {
  if (avatar_model != nullptr) {
    
  } else {
    
  }
  avatar_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamHeader.avatar_model)
}

// int32 samplerate = 2;
inline void AudioStreamHeader::clear_samplerate() {
  samplerate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioStreamHeader::_internal_samplerate() const {
  return samplerate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioStreamHeader::samplerate() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.samplerate)
  return _internal_samplerate();
}
inline void AudioStreamHeader::_internal_set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  samplerate_ = value;
}
inline void AudioStreamHeader::set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_samplerate(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.samplerate)
}

// string request_id = 3;
inline void AudioStreamHeader::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& AudioStreamHeader::request_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.request_id)
  return _internal_request_id();
}
inline void AudioStreamHeader::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.request_id)
}
inline std::string* AudioStreamHeader::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamHeader.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& AudioStreamHeader::_internal_request_id() const {
  return request_id_.Get();
}
inline void AudioStreamHeader::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamHeader::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamHeader.request_id)
}
inline void AudioStreamHeader::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamHeader.request_id)
}
inline void AudioStreamHeader::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamHeader.request_id)
}
inline std::string* AudioStreamHeader::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamHeader::release_request_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamHeader.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamHeader::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamHeader.request_id)
}

// string session_id = 4;
inline void AudioStreamHeader::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AudioStreamHeader::session_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.session_id)
  return _internal_session_id();
}
inline void AudioStreamHeader::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.session_id)
}
inline std::string* AudioStreamHeader::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamHeader.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& AudioStreamHeader::_internal_session_id() const {
  return session_id_.Get();
}
inline void AudioStreamHeader::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamHeader::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamHeader.session_id)
}
inline void AudioStreamHeader::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamHeader.session_id)
}
inline void AudioStreamHeader::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamHeader.session_id)
}
inline std::string* AudioStreamHeader::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamHeader::release_session_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamHeader.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamHeader::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamHeader.session_id)
}

// string stream_id = 5;
inline void AudioStreamHeader::clear_stream_id() {
  stream_id_.ClearToEmpty();
}
inline const std::string& AudioStreamHeader::stream_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.stream_id)
  return _internal_stream_id();
}
inline void AudioStreamHeader::set_stream_id(const std::string& value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.stream_id)
}
inline std::string* AudioStreamHeader::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamHeader.stream_id)
  return _internal_mutable_stream_id();
}
inline const std::string& AudioStreamHeader::_internal_stream_id() const {
  return stream_id_.Get();
}
inline void AudioStreamHeader::_internal_set_stream_id(const std::string& value) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamHeader::set_stream_id(std::string&& value) {
  
  stream_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamHeader.stream_id)
}
inline void AudioStreamHeader::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamHeader.stream_id)
}
inline void AudioStreamHeader::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamHeader.stream_id)
}
inline std::string* AudioStreamHeader::_internal_mutable_stream_id() {
  
  return stream_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamHeader::release_stream_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamHeader.stream_id)
  return stream_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamHeader::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamHeader.stream_id)
}

// string user_id = 6;
inline void AudioStreamHeader::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& AudioStreamHeader::user_id() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.user_id)
  return _internal_user_id();
}
inline void AudioStreamHeader::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.user_id)
}
inline std::string* AudioStreamHeader::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamHeader.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AudioStreamHeader::_internal_user_id() const {
  return user_id_.Get();
}
inline void AudioStreamHeader::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamHeader::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamHeader.user_id)
}
inline void AudioStreamHeader::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamHeader.user_id)
}
inline void AudioStreamHeader::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamHeader.user_id)
}
inline std::string* AudioStreamHeader::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamHeader::release_user_id() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamHeader.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamHeader::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamHeader.user_id)
}

// int32 channel_number = 7;
inline void AudioStreamHeader::clear_channel_number() {
  channel_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioStreamHeader::_internal_channel_number() const {
  return channel_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioStreamHeader::channel_number() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.channel_number)
  return _internal_channel_number();
}
inline void AudioStreamHeader::_internal_set_channel_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_number_ = value;
}
inline void AudioStreamHeader::set_channel_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_number(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.channel_number)
}

// .nvidia.ace.animation.WaveAudioFormat audio_format = 8;
inline void AudioStreamHeader::clear_audio_format() {
  audio_format_ = 0;
}
inline ::nvidia::ace::animation::WaveAudioFormat AudioStreamHeader::_internal_audio_format() const {
  return static_cast< ::nvidia::ace::animation::WaveAudioFormat >(audio_format_);
}
inline ::nvidia::ace::animation::WaveAudioFormat AudioStreamHeader::audio_format() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamHeader.audio_format)
  return _internal_audio_format();
}
inline void AudioStreamHeader::_internal_set_audio_format(::nvidia::ace::animation::WaveAudioFormat value) {
  
  audio_format_ = value;
}
inline void AudioStreamHeader::set_audio_format(::nvidia::ace::animation::WaveAudioFormat value) {
  _internal_set_audio_format(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamHeader.audio_format)
}

// -------------------------------------------------------------------

// AudioStreamResponse

// bool success = 1;
inline void AudioStreamResponse::clear_success() {
  success_ = false;
}
inline bool AudioStreamResponse::_internal_success() const {
  return success_;
}
inline bool AudioStreamResponse::success() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamResponse.success)
  return _internal_success();
}
inline void AudioStreamResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AudioStreamResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamResponse.success)
}

// string message = 2;
inline void AudioStreamResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AudioStreamResponse::message() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.AudioStreamResponse.message)
  return _internal_message();
}
inline void AudioStreamResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.AudioStreamResponse.message)
}
inline std::string* AudioStreamResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.AudioStreamResponse.message)
  return _internal_mutable_message();
}
inline const std::string& AudioStreamResponse::_internal_message() const {
  return message_.Get();
}
inline void AudioStreamResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioStreamResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.AudioStreamResponse.message)
}
inline void AudioStreamResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.AudioStreamResponse.message)
}
inline void AudioStreamResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.AudioStreamResponse.message)
}
inline std::string* AudioStreamResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioStreamResponse::release_message() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.AudioStreamResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioStreamResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AudioStreamResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace animation
}  // namespace ace
}  // namespace nvidia

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nvidia::ace::animation::WaveAudioFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nvidia::ace::animation::WaveAudioFormat>() {
  return ::nvidia::ace::animation::WaveAudioFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nvidia_2fold_2faudio_5fdata_2eproto
