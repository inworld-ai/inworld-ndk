// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia/old/audio_data.proto
#ifndef GRPC_nvidia_2fold_2faudio_5fdata_2eproto__INCLUDED
#define GRPC_nvidia_2fold_2faudio_5fdata_2eproto__INCLUDED

#include "nvidia/old/audio_data.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace nvidia {
namespace ace {
namespace animation {

class Audio2XService final {
 public:
  static constexpr char const* service_full_name() {
    return "nvidia.ace.animation.Audio2XService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // to be ignored
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::nvidia::ace::animation::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::StatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::StatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::StatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::StatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    // to be ignored
    virtual ::grpc::Status GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::nvidia::ace::animation::DotFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::DotFileResponse>> AsyncGetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::DotFileResponse>>(AsyncGetPipelineDotFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::DotFileResponse>> PrepareAsyncGetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::DotFileResponse>>(PrepareAsyncGetPipelineDotFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>> PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>>(PushAudioStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>> AsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>>(AsyncPushAudioStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>> PrepareAsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>>(PrepareAsyncPushAudioStreamRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // to be ignored
      virtual void GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // to be ignored
      virtual void GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::ClientWriteReactor< ::nvidia::ace::animation::AudioStreamRequest>* reactor) = 0;
      #else
      virtual void PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::experimental::ClientWriteReactor< ::nvidia::ace::animation::AudioStreamRequest>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::StatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::StatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::DotFileResponse>* AsyncGetPipelineDotFileRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::ace::animation::DotFileResponse>* PrepareAsyncGetPipelineDotFileRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>* PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>* AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia::ace::animation::AudioStreamRequest>* PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::nvidia::ace::animation::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::nvidia::ace::animation::DotFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>> AsyncGetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>>(AsyncGetPipelineDotFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>> PrepareAsyncGetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>>(PrepareAsyncGetPipelineDotFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::nvidia::ace::animation::AudioStreamRequest>> PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::nvidia::ace::animation::AudioStreamRequest>>(PushAudioStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>> AsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>>(AsyncPushAudioStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>> PrepareAsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>>(PrepareAsyncPushAudioStreamRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::ClientWriteReactor< ::nvidia::ace::animation::AudioStreamRequest>* reactor) override;
      #else
      void PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::experimental::ClientWriteReactor< ::nvidia::ace::animation::AudioStreamRequest>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>* AsyncGetPipelineDotFileRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>* PrepareAsyncGetPipelineDotFileRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::nvidia::ace::animation::AudioStreamRequest>* PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response) override;
    ::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>* AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>* PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPipelineDotFile_;
    const ::grpc::internal::RpcMethod rpcmethod_PushAudioStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // to be ignored
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response);
    // to be ignored
    virtual ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response);
    virtual ::grpc::Status PushAudioStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* reader, ::nvidia::ace::animation::AudioStreamResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::google::protobuf_inworld::Empty* request, ::grpc::ServerAsyncResponseWriter< ::nvidia::ace::animation::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPipelineDotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPipelineDotFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPipelineDotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPipelineDotFile(::grpc::ServerContext* context, ::google::protobuf_inworld::Empty* request, ::grpc::ServerAsyncResponseWriter< ::nvidia::ace::animation::DotFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* /*reader*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudioStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::nvidia::ace::animation::AudioStreamResponse, ::nvidia::ace::animation::AudioStreamRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatus<WithAsyncMethod_GetPipelineDotFile<WithAsyncMethod_PushAudioStream<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response) { return this->GetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::experimental::MessageAllocator< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPipelineDotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPipelineDotFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response) { return this->GetPipelineDotFile(context, request, response); }));}
    void SetMessageAllocatorFor_GetPipelineDotFile(
        ::grpc::experimental::MessageAllocator< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPipelineDotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPipelineDotFile(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPipelineDotFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushAudioStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::nvidia::ace::animation::AudioStreamRequest, ::nvidia::ace::animation::AudioStreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::nvidia::ace::animation::AudioStreamResponse* response) { return this->PushAudioStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* /*reader*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::nvidia::ace::animation::AudioStreamRequest>* PushAudioStream(
      ::grpc::CallbackServerContext* /*context*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::nvidia::ace::animation::AudioStreamRequest>* PushAudioStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_GetPipelineDotFile<ExperimentalWithCallbackMethod_PushAudioStream<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_GetPipelineDotFile<ExperimentalWithCallbackMethod_PushAudioStream<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPipelineDotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPipelineDotFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPipelineDotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* /*reader*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPipelineDotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPipelineDotFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPipelineDotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPipelineDotFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* /*reader*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudioStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPipelineDotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPipelineDotFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPipelineDotFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPipelineDotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPipelineDotFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPipelineDotFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushAudioStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->PushAudioStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* /*reader*/, ::nvidia::ace::animation::AudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* PushAudioStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* PushAudioStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse>* streamer) {
                       return this->StreamedGetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf_inworld::Empty,::nvidia::ace::animation::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPipelineDotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPipelineDotFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse>* streamer) {
                       return this->StreamedGetPipelineDotFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPipelineDotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPipelineDotFile(::grpc::ServerContext* /*context*/, const ::google::protobuf_inworld::Empty* /*request*/, ::nvidia::ace::animation::DotFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPipelineDotFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf_inworld::Empty,::nvidia::ace::animation::DotFileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GetPipelineDotFile<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GetPipelineDotFile<Service > > StreamedService;
};

}  // namespace animation
}  // namespace ace
}  // namespace nvidia


#endif  // GRPC_nvidia_2fold_2faudio_5fdata_2eproto__INCLUDED
