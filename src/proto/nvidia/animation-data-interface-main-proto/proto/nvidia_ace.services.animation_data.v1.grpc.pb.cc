#include "ProtoDisableWarning.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia/animation-data-interface-main-proto/proto/nvidia_ace.services.animation_data.v1.proto

#include "nvidia/animation-data-interface-main-proto/proto/nvidia_ace.services.animation_data.v1.pb.h"
#include "nvidia/animation-data-interface-main-proto/proto/nvidia_ace.services.animation_data.v1.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nvidia_ace {
namespace services {
namespace animation_data {
namespace v1 {

static const char* AnimationDataService_method_names[] = {
  "/nvidia_ace.services.animation_data.v1.AnimationDataService/PushAnimationDataStream",
  "/nvidia_ace.services.animation_data.v1.AnimationDataService/PullAnimationDataStream",
};

std::unique_ptr< AnimationDataService::Stub> AnimationDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnimationDataService::Stub> stub(new AnimationDataService::Stub(channel));
  return stub;
}

AnimationDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushAnimationDataStream_(AnimationDataService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_PullAnimationDataStream_(AnimationDataService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AnimationDataService::Stub::PushAnimationDataStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) {
  return ::grpc::internal::ClientWriterFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(channel_.get(), rpcmethod_PushAnimationDataStream_, context, response);
}

void AnimationDataService::Stub::experimental_async::PushAnimationDataStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::experimental::ClientWriteReactor< ::nvidia_ace::animation_data::v1::AnimationDataStream>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(stub_->channel_.get(), stub_->rpcmethod_PushAnimationDataStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AnimationDataService::Stub::AsyncPushAnimationDataStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(channel_.get(), cq, rpcmethod_PushAnimationDataStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AnimationDataService::Stub::PrepareAsyncPushAnimationDataStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(channel_.get(), cq, rpcmethod_PushAnimationDataStream_, context, response, false, nullptr);
}

::grpc::ClientReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AnimationDataService::Stub::PullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request) {
  return ::grpc::internal::ClientReaderFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(channel_.get(), rpcmethod_PullAnimationDataStream_, context, request);
}

void AnimationDataService::Stub::experimental_async::PullAnimationDataStream(::grpc::ClientContext* context, ::nvidia_ace::animation_id::v1::AnimationIds* request, ::grpc::experimental::ClientReadReactor< ::nvidia_ace::animation_data::v1::AnimationDataStream>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(stub_->channel_.get(), stub_->rpcmethod_PullAnimationDataStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AnimationDataService::Stub::AsyncPullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(channel_.get(), cq, rpcmethod_PullAnimationDataStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AnimationDataService::Stub::PrepareAsyncPullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::nvidia_ace::animation_data::v1::AnimationDataStream>::Create(channel_.get(), cq, rpcmethod_PullAnimationDataStream_, context, request, false, nullptr);
}

AnimationDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnimationDataService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< AnimationDataService::Service, ::nvidia_ace::animation_data::v1::AnimationDataStream, ::nvidia_ace::status::v1::Status>(
          [](AnimationDataService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::nvidia_ace::animation_data::v1::AnimationDataStream>* reader,
             ::nvidia_ace::status::v1::Status* resp) {
               return service->PushAnimationDataStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnimationDataService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AnimationDataService::Service, ::nvidia_ace::animation_id::v1::AnimationIds, ::nvidia_ace::animation_data::v1::AnimationDataStream>(
          [](AnimationDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::nvidia_ace::animation_id::v1::AnimationIds* req,
             ::grpc::ServerWriter<::nvidia_ace::animation_data::v1::AnimationDataStream>* writer) {
               return service->PullAnimationDataStream(ctx, req, writer);
             }, this)));
}

AnimationDataService::Service::~Service() {
}

::grpc::Status AnimationDataService::Service::PushAnimationDataStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* reader, ::nvidia_ace::status::v1::Status* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnimationDataService::Service::PullAnimationDataStream(::grpc::ServerContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds* request, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvidia_ace
}  // namespace services
}  // namespace animation_data
}  // namespace v1

