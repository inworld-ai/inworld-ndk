#include "ProtoDisableWarning.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia/ace/animation/a2x_service.proto

#include "nvidia/ace/animation/a2x_service.pb.h"
#include "nvidia/ace/animation/a2x_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nvidia {
namespace ace {
namespace animation {

static const char* A2XServiceInterface_method_names[] = {
  "/nvidia.ace.animation.A2XServiceInterface/ConvertAudioToAnimData",
};

std::unique_ptr< A2XServiceInterface::Stub> A2XServiceInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< A2XServiceInterface::Stub> stub(new A2XServiceInterface::Stub(channel));
  return stub;
}

A2XServiceInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ConvertAudioToAnimData_(A2XServiceInterface_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>* A2XServiceInterface::Stub::ConvertAudioToAnimDataRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>::Create(channel_.get(), rpcmethod_ConvertAudioToAnimData_, context);
}

void A2XServiceInterface::Stub::experimental_async::ConvertAudioToAnimData(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::nvidia::ace::animation::A2XAudioStream,::nvidia::ace::animation::A2XAnimDataStream>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::nvidia::ace::animation::A2XAudioStream,::nvidia::ace::animation::A2XAnimDataStream>::Create(stub_->channel_.get(), stub_->rpcmethod_ConvertAudioToAnimData_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>* A2XServiceInterface::Stub::AsyncConvertAudioToAnimDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>::Create(channel_.get(), cq, rpcmethod_ConvertAudioToAnimData_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>* A2XServiceInterface::Stub::PrepareAsyncConvertAudioToAnimDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>::Create(channel_.get(), cq, rpcmethod_ConvertAudioToAnimData_, context, false, nullptr);
}

A2XServiceInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      A2XServiceInterface_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< A2XServiceInterface::Service, ::nvidia::ace::animation::A2XAudioStream, ::nvidia::ace::animation::A2XAnimDataStream>(
          [](A2XServiceInterface::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::nvidia::ace::animation::A2XAnimDataStream,
             ::nvidia::ace::animation::A2XAudioStream>* stream) {
               return service->ConvertAudioToAnimData(ctx, stream);
             }, this)));
}

A2XServiceInterface::Service::~Service() {
}

::grpc::Status A2XServiceInterface::Service::ConvertAudioToAnimData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nvidia::ace::animation::A2XAnimDataStream, ::nvidia::ace::animation::A2XAudioStream>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvidia
}  // namespace ace
}  // namespace animation

