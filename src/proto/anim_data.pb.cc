#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anim_data.proto

#include "anim_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_anim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnimData_anim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_anim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimData_FilesEntry_DoNotUse_anim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_anim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimDataHeader_anim_5fdata_2eproto;
namespace nvidia {
namespace ace {
namespace animation {
class AnimDataHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimDataHeader> _instance;
} _AnimDataHeader_default_instance_;
class AnimData_FilesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimData_FilesEntry_DoNotUse> _instance;
} _AnimData_FilesEntry_DoNotUse_default_instance_;
class AnimDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimData> _instance;
} _AnimData_default_instance_;
class AnimDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimDataRequest> _instance;
} _AnimDataRequest_default_instance_;
class AnimDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimDataResponse> _instance;
} _AnimDataResponse_default_instance_;
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
static void InitDefaultsscc_info_AnimData_anim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AnimData_default_instance_;
    new (ptr) ::nvidia::ace::animation::AnimData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnimData_anim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnimData_anim_5fdata_2eproto}, {
      &scc_info_AnimData_FilesEntry_DoNotUse_anim_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_AnimData_FilesEntry_DoNotUse_anim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AnimData_FilesEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimData_FilesEntry_DoNotUse_anim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnimData_FilesEntry_DoNotUse_anim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_AnimDataHeader_anim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AnimDataHeader_default_instance_;
    new (ptr) ::nvidia::ace::animation::AnimDataHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimDataHeader_anim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnimDataHeader_anim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_AnimDataRequest_anim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AnimDataRequest_default_instance_;
    new (ptr) ::nvidia::ace::animation::AnimDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimDataRequest_anim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnimDataRequest_anim_5fdata_2eproto}, {
      &scc_info_AnimDataHeader_anim_5fdata_2eproto.base,
      &scc_info_AnimData_anim_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_AnimDataResponse_anim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_AnimDataResponse_default_instance_;
    new (ptr) ::nvidia::ace::animation::AnimDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimDataResponse_anim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnimDataResponse_anim_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_anim_5fdata_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_anim_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_anim_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_anim_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataHeader, avatar_model_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataHeader, request_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataHeader, session_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataHeader, stream_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataHeader, user_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData, usda_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimData, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataRequest, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataResponse, success_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::AnimDataResponse, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nvidia::ace::animation::AnimDataHeader)},
  { 10, 17, sizeof(::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse)},
  { 19, -1, sizeof(::nvidia::ace::animation::AnimData)},
  { 26, -1, sizeof(::nvidia::ace::animation::AnimDataRequest)},
  { 34, -1, sizeof(::nvidia::ace::animation::AnimDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AnimDataHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AnimData_FilesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AnimData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AnimDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_AnimDataResponse_default_instance_),
};

const char descriptor_table_protodef_anim_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017anim_data.proto\022\024nvidia.ace.animation\032"
  "\033google/protobuf/empty.proto\"r\n\016AnimData"
  "Header\022\024\n\014avatar_model\030\001 \001(\t\022\022\n\nrequest_"
  "id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t\022\021\n\tstream_i"
  "d\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\"\200\001\n\010AnimData\022\014\n"
  "\004usda\030\001 \001(\t\0228\n\005files\030\002 \003(\0132).nvidia.ace."
  "animation.AnimData.FilesEntry\032,\n\nFilesEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\223\001\n\017"
  "AnimDataRequest\0226\n\006header\030\001 \001(\0132$.nvidia"
  ".ace.animation.AnimDataHeaderH\000\0223\n\tanim_"
  "data\030\002 \001(\0132\036.nvidia.ace.animation.AnimDa"
  "taH\000B\023\n\021streaming_request\"4\n\020AnimDataRes"
  "ponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t2"
  "z\n\017AnimDataService\022g\n\022PushAnimDataStream"
  "\022%.nvidia.ace.animation.AnimDataRequest\032"
  "&.nvidia.ace.animation.AnimDataResponse\""
  "\000(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_anim_5fdata_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_anim_5fdata_2eproto_sccs[5] = {
  &scc_info_AnimData_anim_5fdata_2eproto.base,
  &scc_info_AnimData_FilesEntry_DoNotUse_anim_5fdata_2eproto.base,
  &scc_info_AnimDataHeader_anim_5fdata_2eproto.base,
  &scc_info_AnimDataRequest_anim_5fdata_2eproto.base,
  &scc_info_AnimDataResponse_anim_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_anim_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_anim_5fdata_2eproto = {
  false, false, descriptor_table_protodef_anim_5fdata_2eproto, "anim_data.proto", 651,
  &descriptor_table_anim_5fdata_2eproto_once, descriptor_table_anim_5fdata_2eproto_sccs, descriptor_table_anim_5fdata_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_anim_5fdata_2eproto::offsets,
  file_level_metadata_anim_5fdata_2eproto, 5, file_level_enum_descriptors_anim_5fdata_2eproto, file_level_service_descriptors_anim_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_anim_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_anim_5fdata_2eproto)), true);
namespace nvidia {
namespace ace {
namespace animation {

// ===================================================================

class AnimDataHeader::_Internal {
 public:
};

AnimDataHeader::AnimDataHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AnimDataHeader)
}
AnimDataHeader::AnimDataHeader(const AnimDataHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_model().empty()) {
    avatar_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_model(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stream_id().empty()) {
    stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_id(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AnimDataHeader)
}

void AnimDataHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimDataHeader_anim_5fdata_2eproto.base);
  avatar_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AnimDataHeader::~AnimDataHeader() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AnimDataHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimDataHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnimDataHeader::ArenaDtor(void* object) {
  AnimDataHeader* _this = reinterpret_cast< AnimDataHeader* >(object);
  (void)_this;
}
void AnimDataHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimDataHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimDataHeader& AnimDataHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimDataHeader_anim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AnimDataHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AnimDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_model_.ClearToEmpty();
  request_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  stream_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimDataHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string avatar_model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_avatar_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimDataHeader.avatar_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimDataHeader.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimDataHeader.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimDataHeader.stream_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimDataHeader.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimDataHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AnimDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string avatar_model = 1;
  if (this->avatar_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_model().data(), static_cast<int>(this->_internal_avatar_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimDataHeader.avatar_model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_avatar_model(), target);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimDataHeader.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimDataHeader.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string stream_id = 4;
  if (this->stream_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimDataHeader.stream_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream_id(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimDataHeader.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AnimDataHeader)
  return target;
}

size_t AnimDataHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AnimDataHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatar_model = 1;
  if (this->avatar_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_model());
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string stream_id = 4;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimDataHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AnimDataHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimDataHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimDataHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AnimDataHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AnimDataHeader)
    MergeFrom(*source);
  }
}

void AnimDataHeader::MergeFrom(const AnimDataHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AnimDataHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_model().size() > 0) {
    _internal_set_avatar_model(from._internal_avatar_model());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.stream_id().size() > 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void AnimDataHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AnimDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimDataHeader::CopyFrom(const AnimDataHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AnimDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimDataHeader::IsInitialized() const {
  return true;
}

void AnimDataHeader::InternalSwap(AnimDataHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatar_model_.Swap(&other->avatar_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stream_id_.Swap(&other->stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimDataHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AnimData_FilesEntry_DoNotUse::AnimData_FilesEntry_DoNotUse() {}
AnimData_FilesEntry_DoNotUse::AnimData_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnimData_FilesEntry_DoNotUse::MergeFrom(const AnimData_FilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnimData_FilesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AnimData_FilesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AnimData::_Internal {
 public:
};

AnimData::AnimData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AnimData)
}
AnimData::AnimData(const AnimData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  files_.MergeFrom(from.files_);
  usda_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usda().empty()) {
    usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usda(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AnimData)
}

void AnimData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimData_anim_5fdata_2eproto.base);
  usda_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AnimData::~AnimData() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AnimData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  usda_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnimData::ArenaDtor(void* object) {
  AnimData* _this = reinterpret_cast< AnimData* >(object);
  (void)_this;
}
void AnimData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimData& AnimData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimData_anim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AnimData::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AnimData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  usda_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string usda = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_usda();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimData.usda"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&files_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AnimData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usda = 1;
  if (this->usda().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usda().data(), static_cast<int>(this->_internal_usda().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimData.usda");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usda(), target);
  }

  // map<string, bytes> files = 2;
  if (!this->_internal_files().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia.ace.animation.AnimData.FilesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_files().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_files().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_files().begin();
          it != this->_internal_files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AnimData_FilesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_files().begin();
          it != this->_internal_files().end(); ++it) {
        target = AnimData_FilesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AnimData)
  return target;
}

size_t AnimData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AnimData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> files = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_files_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_files().begin();
      it != this->_internal_files().end(); ++it) {
    total_size += AnimData_FilesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string usda = 1;
  if (this->usda().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usda());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AnimData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AnimData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AnimData)
    MergeFrom(*source);
  }
}

void AnimData::MergeFrom(const AnimData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AnimData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.usda().size() > 0) {
    _internal_set_usda(from._internal_usda());
  }
}

void AnimData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AnimData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimData::CopyFrom(const AnimData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AnimData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimData::IsInitialized() const {
  return true;
}

void AnimData::InternalSwap(AnimData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.Swap(&other->files_);
  usda_.Swap(&other->usda_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnimDataRequest::_Internal {
 public:
  static const ::nvidia::ace::animation::AnimDataHeader& header(const AnimDataRequest* msg);
  static const ::nvidia::ace::animation::AnimData& anim_data(const AnimDataRequest* msg);
};

const ::nvidia::ace::animation::AnimDataHeader&
AnimDataRequest::_Internal::header(const AnimDataRequest* msg) {
  return *msg->streaming_request_.header_;
}
const ::nvidia::ace::animation::AnimData&
AnimDataRequest::_Internal::anim_data(const AnimDataRequest* msg) {
  return *msg->streaming_request_.anim_data_;
}
void AnimDataRequest::set_allocated_header(::nvidia::ace::animation::AnimDataHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    streaming_request_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataRequest.header)
}
void AnimDataRequest::set_allocated_anim_data(::nvidia::ace::animation::AnimData* anim_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (anim_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anim_data);
    if (message_arena != submessage_arena) {
      anim_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anim_data, submessage_arena);
    }
    set_has_anim_data();
    streaming_request_.anim_data_ = anim_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.AnimDataRequest.anim_data)
}
AnimDataRequest::AnimDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AnimDataRequest)
}
AnimDataRequest::AnimDataRequest(const AnimDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kHeader: {
      _internal_mutable_header()->::nvidia::ace::animation::AnimDataHeader::MergeFrom(from._internal_header());
      break;
    }
    case kAnimData: {
      _internal_mutable_anim_data()->::nvidia::ace::animation::AnimData::MergeFrom(from._internal_anim_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AnimDataRequest)
}

void AnimDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimDataRequest_anim_5fdata_2eproto.base);
  clear_has_streaming_request();
}

AnimDataRequest::~AnimDataRequest() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AnimDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void AnimDataRequest::ArenaDtor(void* object) {
  AnimDataRequest* _this = reinterpret_cast< AnimDataRequest* >(object);
  (void)_this;
}
void AnimDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimDataRequest& AnimDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimDataRequest_anim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AnimDataRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:nvidia.ace.animation.AnimDataRequest)
  switch (streaming_request_case()) {
    case kHeader: {
      if (GetArena() == nullptr) {
        delete streaming_request_.header_;
      }
      break;
    }
    case kAnimData: {
      if (GetArena() == nullptr) {
        delete streaming_request_.anim_data_;
      }
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void AnimDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AnimDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia.ace.animation.AnimDataHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia.ace.animation.AnimData anim_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anim_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AnimDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia.ace.animation.AnimDataHeader header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .nvidia.ace.animation.AnimData anim_data = 2;
  if (_internal_has_anim_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::anim_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AnimDataRequest)
  return target;
}

size_t AnimDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AnimDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .nvidia.ace.animation.AnimDataHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.header_);
      break;
    }
    // .nvidia.ace.animation.AnimData anim_data = 2;
    case kAnimData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.anim_data_);
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AnimDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AnimDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AnimDataRequest)
    MergeFrom(*source);
  }
}

void AnimDataRequest::MergeFrom(const AnimDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AnimDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kHeader: {
      _internal_mutable_header()->::nvidia::ace::animation::AnimDataHeader::MergeFrom(from._internal_header());
      break;
    }
    case kAnimData: {
      _internal_mutable_anim_data()->::nvidia::ace::animation::AnimData::MergeFrom(from._internal_anim_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void AnimDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AnimDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimDataRequest::CopyFrom(const AnimDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AnimDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimDataRequest::IsInitialized() const {
  return true;
}

void AnimDataRequest::InternalSwap(AnimDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnimDataResponse::_Internal {
 public:
};

AnimDataResponse::AnimDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.AnimDataResponse)
}
AnimDataResponse::AnimDataResponse(const AnimDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.AnimDataResponse)
}

void AnimDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimDataResponse_anim_5fdata_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

AnimDataResponse::~AnimDataResponse() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.AnimDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnimDataResponse::ArenaDtor(void* object) {
  AnimDataResponse* _this = reinterpret_cast< AnimDataResponse* >(object);
  (void)_this;
}
void AnimDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimDataResponse& AnimDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimDataResponse_anim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AnimDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.AnimDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.AnimDataResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.AnimDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.AnimDataResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.AnimDataResponse)
  return target;
}

size_t AnimDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.AnimDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.AnimDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.AnimDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.AnimDataResponse)
    MergeFrom(*source);
  }
}

void AnimDataResponse::MergeFrom(const AnimDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.AnimDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AnimDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.AnimDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimDataResponse::CopyFrom(const AnimDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.AnimDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimDataResponse::IsInitialized() const {
  return true;
}

void AnimDataResponse::InternalSwap(AnimDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AnimDataHeader* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AnimDataHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AnimDataHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AnimData_FilesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AnimData* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AnimData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AnimData >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AnimDataRequest* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AnimDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AnimDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::AnimDataResponse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::AnimDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::AnimDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
