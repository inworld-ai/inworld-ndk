// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/apikeys.proto
#ifndef GRPC_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto__INCLUDED
#define GRPC_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto__INCLUDED

#include "ai/inworld/studio/v1alpha/apikeys.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// Service to manage API keys for world-engine APIs
class ApiKeys final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.ApiKeys";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return list of API keys.
    virtual ::grpc::Status ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>> AsyncListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>>(AsyncListApiKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>> PrepareAsyncListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>>(PrepareAsyncListApiKeysRaw(context, request, cq));
    }
    // Suspends one specified API key.
    // (-- api-linter: core::0136::http-name-variable=disabled
    //     aip.dev/not-precedent: Linter false detects a violation here --)
    virtual ::grpc::Status SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>> AsyncSuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>>(AsyncSuspendApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>> PrepareAsyncSuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>>(PrepareAsyncSuspendApiKeyRaw(context, request, cq));
    }
    // Activates one specified API key.
    // (-- api-linter: core::0136::http-name-variable=disabled
    //     aip.dev/not-precedent: Linter false detects a violation here --)
    virtual ::grpc::Status ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>> AsyncActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>>(AsyncActivateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>> PrepareAsyncActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>>(PrepareAsyncActivateApiKeyRaw(context, request, cq));
    }
    // Deletes one specified API key.
    virtual ::grpc::Status DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteApiKeyRaw(context, request, cq));
    }
    // Generates an new API key with random secret and default parameters.
    // (-- api-linter: core::0136::http-parent-variable=disabled
    //     aip.dev/not-precedent: Linter false detects a violation here --)
    virtual ::grpc::Status GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>> AsyncGenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>>(AsyncGenerateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>> PrepareAsyncGenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>>(PrepareAsyncGenerateApiKeyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return list of API keys.
      virtual void ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Suspends one specified API key.
      // (-- api-linter: core::0136::http-name-variable=disabled
      //     aip.dev/not-precedent: Linter false detects a violation here --)
      virtual void SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Activates one specified API key.
      // (-- api-linter: core::0136::http-name-variable=disabled
      //     aip.dev/not-precedent: Linter false detects a violation here --)
      virtual void ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes one specified API key.
      virtual void DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Generates an new API key with random secret and default parameters.
      // (-- api-linter: core::0136::http-parent-variable=disabled
      //     aip.dev/not-precedent: Linter false detects a violation here --)
      virtual void GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* AsyncListApiKeysRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* PrepareAsyncListApiKeysRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>* AsyncSuspendApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>* PrepareAsyncSuspendApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>* AsyncActivateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>* PrepareAsyncActivateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>* AsyncGenerateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ApiKey>* PrepareAsyncGenerateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>> AsyncListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>>(AsyncListApiKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>> PrepareAsyncListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>>(PrepareAsyncListApiKeysRaw(context, request, cq));
    }
    ::grpc::Status SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>> AsyncSuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>>(AsyncSuspendApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>> PrepareAsyncSuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>>(PrepareAsyncSuspendApiKeyRaw(context, request, cq));
    }
    ::grpc::Status ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>> AsyncActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>>(AsyncActivateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>> PrepareAsyncActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>>(PrepareAsyncActivateApiKeyRaw(context, request, cq));
    }
    ::grpc::Status DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteApiKeyRaw(context, request, cq));
    }
    ::grpc::Status GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>> AsyncGenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>>(AsyncGenerateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>> PrepareAsyncGenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>>(PrepareAsyncGenerateApiKeyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response, std::function<void(::grpc::Status)>) override;
      void ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)>) override;
      void SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)>) override;
      void ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)>) override;
      void GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* AsyncListApiKeysRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* PrepareAsyncListApiKeysRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* AsyncSuspendApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* PrepareAsyncSuspendApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* AsyncActivateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* PrepareAsyncActivateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* AsyncGenerateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* PrepareAsyncGenerateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListApiKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_SuspendApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_ActivateApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateApiKey_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return list of API keys.
    virtual ::grpc::Status ListApiKeys(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response);
    // Suspends one specified API key.
    // (-- api-linter: core::0136::http-name-variable=disabled
    //     aip.dev/not-precedent: Linter false detects a violation here --)
    virtual ::grpc::Status SuspendApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response);
    // Activates one specified API key.
    // (-- api-linter: core::0136::http-name-variable=disabled
    //     aip.dev/not-precedent: Linter false detects a violation here --)
    virtual ::grpc::Status ActivateApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response);
    // Deletes one specified API key.
    virtual ::grpc::Status DeleteApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response);
    // Generates an new API key with random secret and default parameters.
    // (-- api-linter: core::0136::http-parent-variable=disabled
    //     aip.dev/not-precedent: Linter false detects a violation here --)
    virtual ::grpc::Status GenerateApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListApiKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListApiKeys() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListApiKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKeys(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApiKeys(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SuspendApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SuspendApiKey() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SuspendApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuspendApiKey(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ApiKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActivateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActivateApiKey() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ActivateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateApiKey(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ApiKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApiKey(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateApiKey() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GenerateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateApiKey(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ApiKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListApiKeys<WithAsyncMethod_SuspendApiKey<WithAsyncMethod_ActivateApiKey<WithAsyncMethod_DeleteApiKey<WithAsyncMethod_GenerateApiKey<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListApiKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListApiKeys() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response) { return this->ListApiKeys(context, request, response); }));}
    void SetMessageAllocatorFor_ListApiKeys(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListApiKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKeys(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListApiKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SuspendApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SuspendApiKey() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response) { return this->SuspendApiKey(context, request, response); }));}
    void SetMessageAllocatorFor_SuspendApiKey(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SuspendApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuspendApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ActivateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ActivateApiKey() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response) { return this->ActivateApiKey(context, request, response); }));}
    void SetMessageAllocatorFor_ActivateApiKey(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ActivateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivateApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response) { return this->DeleteApiKey(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteApiKey(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateApiKey() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response) { return this->GenerateApiKey(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateApiKey(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenerateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListApiKeys<WithCallbackMethod_SuspendApiKey<WithCallbackMethod_ActivateApiKey<WithCallbackMethod_DeleteApiKey<WithCallbackMethod_GenerateApiKey<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListApiKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListApiKeys() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListApiKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKeys(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SuspendApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SuspendApiKey() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SuspendApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActivateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActivateApiKey() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ActivateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateApiKey() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GenerateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListApiKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListApiKeys() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListApiKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKeys(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApiKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SuspendApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SuspendApiKey() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SuspendApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuspendApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActivateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActivateApiKey() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ActivateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateApiKey() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GenerateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListApiKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListApiKeys() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListApiKeys(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListApiKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKeys(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListApiKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SuspendApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SuspendApiKey() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SuspendApiKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_SuspendApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuspendApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuspendApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ActivateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ActivateApiKey() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ActivateApiKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_ActivateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivateApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteApiKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateApiKey() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateApiKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenerateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateApiKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListApiKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListApiKeys() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* streamer) {
                       return this->StreamedListApiKeys(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListApiKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListApiKeys(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListApiKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ListApiKeysRequest,::ai::inworld::studio::v1alpha::ListApiKeysResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SuspendApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SuspendApiKey() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>* streamer) {
                       return this->StreamedSuspendApiKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SuspendApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SuspendApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSuspendApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest,::ai::inworld::studio::v1alpha::ApiKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActivateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ActivateApiKey() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>* streamer) {
                       return this->StreamedActivateApiKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ActivateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActivateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActivateApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest,::ai::inworld::studio::v1alpha::ApiKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteApiKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateApiKey() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey>* streamer) {
                       return this->StreamedGenerateApiKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateApiKey(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* /*request*/, ::ai::inworld::studio::v1alpha::ApiKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest,::ai::inworld::studio::v1alpha::ApiKey>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListApiKeys<WithStreamedUnaryMethod_SuspendApiKey<WithStreamedUnaryMethod_ActivateApiKey<WithStreamedUnaryMethod_DeleteApiKey<WithStreamedUnaryMethod_GenerateApiKey<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListApiKeys<WithStreamedUnaryMethod_SuspendApiKey<WithStreamedUnaryMethod_ActivateApiKey<WithStreamedUnaryMethod_DeleteApiKey<WithStreamedUnaryMethod_GenerateApiKey<Service > > > > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto__INCLUDED
