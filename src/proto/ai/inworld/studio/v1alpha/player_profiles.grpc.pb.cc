// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player_profiles.proto

#include "ProtoDisableWarning.h"

#include "player_profiles.pb.h"
#include "player_profiles.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* PlayerProfileService_method_names[] = {
  "/ai.inworld.studio.v1alpha.PlayerProfileService/UpdatePlayerProfile",
  "/ai.inworld.studio.v1alpha.PlayerProfileService/GetPlayerProfile",
};

std::unique_ptr< PlayerProfileService::Stub> PlayerProfileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerProfileService::Stub> stub(new PlayerProfileService::Stub(channel));
  return stub;
}

PlayerProfileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UpdatePlayerProfile_(PlayerProfileService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayerProfile_(PlayerProfileService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerProfileService::Stub::UpdatePlayerProfile(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest& request, ::ai::inworld::studio::v1alpha::PlayerProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, ::ai::inworld::studio::v1alpha::PlayerProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdatePlayerProfile_, context, request, response);
}

void PlayerProfileService::Stub::experimental_async::UpdatePlayerProfile(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest* request, ::ai::inworld::studio::v1alpha::PlayerProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, ::ai::inworld::studio::v1alpha::PlayerProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePlayerProfile_, context, request, response, std::move(f));
}

void PlayerProfileService::Stub::experimental_async::UpdatePlayerProfile(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest* request, ::ai::inworld::studio::v1alpha::PlayerProfile* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePlayerProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::PlayerProfile>* PlayerProfileService::Stub::PrepareAsyncUpdatePlayerProfileRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::PlayerProfile, ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdatePlayerProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::PlayerProfile>* PlayerProfileService::Stub::AsyncUpdatePlayerProfileRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdatePlayerProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerProfileService::Stub::GetPlayerProfile(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest& request, ::ai::inworld::studio::v1alpha::PlayerProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest, ::ai::inworld::studio::v1alpha::PlayerProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlayerProfile_, context, request, response);
}

void PlayerProfileService::Stub::experimental_async::GetPlayerProfile(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest* request, ::ai::inworld::studio::v1alpha::PlayerProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest, ::ai::inworld::studio::v1alpha::PlayerProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayerProfile_, context, request, response, std::move(f));
}

void PlayerProfileService::Stub::experimental_async::GetPlayerProfile(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest* request, ::ai::inworld::studio::v1alpha::PlayerProfile* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayerProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::PlayerProfile>* PlayerProfileService::Stub::PrepareAsyncGetPlayerProfileRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::PlayerProfile, ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlayerProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::PlayerProfile>* PlayerProfileService::Stub::AsyncGetPlayerProfileRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlayerProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

PlayerProfileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerProfileService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerProfileService::Service, ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, ::ai::inworld::studio::v1alpha::PlayerProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerProfileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest* req,
             ::ai::inworld::studio::v1alpha::PlayerProfile* resp) {
               return service->UpdatePlayerProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerProfileService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerProfileService::Service, ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest, ::ai::inworld::studio::v1alpha::PlayerProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerProfileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest* req,
             ::ai::inworld::studio::v1alpha::PlayerProfile* resp) {
               return service->GetPlayerProfile(ctx, req, resp);
             }, this)));
}

PlayerProfileService::Service::~Service() {
}

::grpc::Status PlayerProfileService::Service::UpdatePlayerProfile(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest* request, ::ai::inworld::studio::v1alpha::PlayerProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerProfileService::Service::GetPlayerProfile(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest* request, ::ai::inworld::studio::v1alpha::PlayerProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

