// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/users.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "ai/inworld/options/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class AcceptTosRequest;
struct AcceptTosRequestDefaultTypeInternal;
extern AcceptTosRequestDefaultTypeInternal _AcceptTosRequest_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class GenerateTokenUserRequest;
struct GenerateTokenUserRequestDefaultTypeInternal;
extern GenerateTokenUserRequestDefaultTypeInternal _GenerateTokenUserRequest_default_instance_;
class GenerateTokenUserResponse;
struct GenerateTokenUserResponseDefaultTypeInternal;
extern GenerateTokenUserResponseDefaultTypeInternal _GenerateTokenUserResponse_default_instance_;
class GetUserRequest;
struct GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class LinkAccountRequest;
struct LinkAccountRequestDefaultTypeInternal;
extern LinkAccountRequestDefaultTypeInternal _LinkAccountRequest_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
enum MarketingConsent : int {
  MARKETING_CONSENT_UNSPECIFIED = 0,
  MARKETING_CONSENT_DECLINED = 1,
  MARKETING_CONSENT_GRANTED = 2,
  MarketingConsent_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MarketingConsent_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MarketingConsent_IsValid(int value);
extern const uint32_t MarketingConsent_internal_data_[];
constexpr MarketingConsent MarketingConsent_MIN = static_cast<MarketingConsent>(0);
constexpr MarketingConsent MarketingConsent_MAX = static_cast<MarketingConsent>(2);
constexpr int MarketingConsent_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MarketingConsent_descriptor();
template <typename T>
const std::string& MarketingConsent_Name(T value) {
  static_assert(std::is_same<T, MarketingConsent>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MarketingConsent_Name().");
  return MarketingConsent_Name(static_cast<MarketingConsent>(value));
}
template <>
inline const std::string& MarketingConsent_Name(MarketingConsent value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MarketingConsent_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MarketingConsent_Parse(absl::string_view name, MarketingConsent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketingConsent>(
      MarketingConsent_descriptor(), name, value);
}
enum MarketingPlatformPurpose : int {
  MARKETING_PLATFORM_PURPOSE_UNSPECIFIED = 0,
  MARKETING_PLATFORM_PURPOSE_GAME_AND_METAVERSE = 1,
  MARKETING_PLATFORM_PURPOSE_ENTERTAINMENT = 2,
  MARKETING_PLATFORM_PURPOSE_SALES_AND_MARKETING = 3,
  MARKETING_PLATFORM_PURPOSE_TRAINING_AND_EDUCATION = 4,
  MARKETING_PLATFORM_PURPOSE_OTHER = 5,
  MarketingPlatformPurpose_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MarketingPlatformPurpose_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MarketingPlatformPurpose_IsValid(int value);
extern const uint32_t MarketingPlatformPurpose_internal_data_[];
constexpr MarketingPlatformPurpose MarketingPlatformPurpose_MIN = static_cast<MarketingPlatformPurpose>(0);
constexpr MarketingPlatformPurpose MarketingPlatformPurpose_MAX = static_cast<MarketingPlatformPurpose>(5);
constexpr int MarketingPlatformPurpose_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MarketingPlatformPurpose_descriptor();
template <typename T>
const std::string& MarketingPlatformPurpose_Name(T value) {
  static_assert(std::is_same<T, MarketingPlatformPurpose>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MarketingPlatformPurpose_Name().");
  return MarketingPlatformPurpose_Name(static_cast<MarketingPlatformPurpose>(value));
}
template <>
inline const std::string& MarketingPlatformPurpose_Name(MarketingPlatformPurpose value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MarketingPlatformPurpose_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MarketingPlatformPurpose_Parse(absl::string_view name, MarketingPlatformPurpose* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketingPlatformPurpose>(
      MarketingPlatformPurpose_descriptor(), name, value);
}
enum AuthType : int {
  AUTH_TYPE_UNSPECIFIED = 0,
  AUTH_TYPE_OCULUS_NONCE = 2,
  AUTH_TYPE_FIREBASE = 3,
  AuthType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthType_IsValid(int value);
extern const uint32_t AuthType_internal_data_[];
constexpr AuthType AuthType_MIN = static_cast<AuthType>(0);
constexpr AuthType AuthType_MAX = static_cast<AuthType>(3);
constexpr int AuthType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AuthType_descriptor();
template <typename T>
const std::string& AuthType_Name(T value) {
  static_assert(std::is_same<T, AuthType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthType_Name().");
  return AuthType_Name(static_cast<AuthType>(value));
}
template <>
inline const std::string& AuthType_Name(AuthType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AuthType_Parse(absl::string_view name, AuthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthType>(
      AuthType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User(::google::protobuf::internal::ConstantInitialized);

  inline User(const User& from)
      : User(nullptr, from) {}
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(User* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.User";
  }
  protected:
  explicit User(::google::protobuf::Arena* arena);
  User(::google::protobuf::Arena* arena, const User& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOculusIdFieldNumber = 3,
    kFirebaseIdFieldNumber = 4,
    kDisplayNameFieldNumber = 8,
    kRoleFieldNumber = 9,
    kApplicationFieldNumber = 10,
    kTosAcceptanceVersionFieldNumber = 5,
    kMarketingConsentFieldNumber = 6,
    kMarketingPlatformPurposeFieldNumber = 7,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_oculus_id() ;
  const std::string& oculus_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oculus_id(Arg_&& arg, Args_... args);
  std::string* mutable_oculus_id();
  PROTOBUF_NODISCARD std::string* release_oculus_id();
  void set_allocated_oculus_id(std::string* value);

  private:
  const std::string& _internal_oculus_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oculus_id(
      const std::string& value);
  std::string* _internal_mutable_oculus_id();

  public:
  // string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_firebase_id() ;
  const std::string& firebase_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firebase_id(Arg_&& arg, Args_... args);
  std::string* mutable_firebase_id();
  PROTOBUF_NODISCARD std::string* release_firebase_id();
  void set_allocated_firebase_id(std::string* value);

  private:
  const std::string& _internal_firebase_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firebase_id(
      const std::string& value);
  std::string* _internal_mutable_firebase_id();

  public:
  // string display_name = 8 [(.ai.inworld.options.examples) = {
  void clear_display_name() ;
  const std::string& display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* value);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // string role = 9;
  void clear_role() ;
  const std::string& role() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* value);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // string application = 10;
  void clear_application() ;
  const std::string& application() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application(Arg_&& arg, Args_... args);
  std::string* mutable_application();
  PROTOBUF_NODISCARD std::string* release_application();
  void set_allocated_application(std::string* value);

  private:
  const std::string& _internal_application() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application(
      const std::string& value);
  std::string* _internal_mutable_application();

  public:
  // int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_tos_acceptance_version() ;
  ::int32_t tos_acceptance_version() const;
  void set_tos_acceptance_version(::int32_t value);

  private:
  ::int32_t _internal_tos_acceptance_version() const;
  void _internal_set_tos_acceptance_version(::int32_t value);

  public:
  // .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
  void clear_marketing_consent() ;
  ::ai::inworld::studio::v1alpha::MarketingConsent marketing_consent() const;
  void set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value);

  private:
  ::ai::inworld::studio::v1alpha::MarketingConsent _internal_marketing_consent() const;
  void _internal_set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value);

  public:
  // .ai.inworld.studio.v1alpha.MarketingPlatformPurpose marketing_platform_purpose = 7;
  void clear_marketing_platform_purpose() ;
  ::ai::inworld::studio::v1alpha::MarketingPlatformPurpose marketing_platform_purpose() const;
  void set_marketing_platform_purpose(::ai::inworld::studio::v1alpha::MarketingPlatformPurpose value);

  private:
  ::ai::inworld::studio::v1alpha::MarketingPlatformPurpose _internal_marketing_platform_purpose() const;
  void _internal_set_marketing_platform_purpose(::ai::inworld::studio::v1alpha::MarketingPlatformPurpose value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.User)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      98, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr oculus_id_;
    ::google::protobuf::internal::ArenaStringPtr firebase_id_;
    ::google::protobuf::internal::ArenaStringPtr display_name_;
    ::google::protobuf::internal::ArenaStringPtr role_;
    ::google::protobuf::internal::ArenaStringPtr application_;
    ::int32_t tos_acceptance_version_;
    int marketing_consent_;
    int marketing_platform_purpose_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class LinkAccountRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.LinkAccountRequest) */ {
 public:
  inline LinkAccountRequest() : LinkAccountRequest(nullptr) {}
  ~LinkAccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinkAccountRequest(::google::protobuf::internal::ConstantInitialized);

  inline LinkAccountRequest(const LinkAccountRequest& from)
      : LinkAccountRequest(nullptr, from) {}
  LinkAccountRequest(LinkAccountRequest&& from) noexcept
    : LinkAccountRequest() {
    *this = ::std::move(from);
  }

  inline LinkAccountRequest& operator=(const LinkAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkAccountRequest& operator=(LinkAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkAccountRequest* internal_default_instance() {
    return reinterpret_cast<const LinkAccountRequest*>(
               &_LinkAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LinkAccountRequest& a, LinkAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkAccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkAccountRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkAccountRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinkAccountRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinkAccountRequest& from) {
    LinkAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinkAccountRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.LinkAccountRequest";
  }
  protected:
  explicit LinkAccountRequest(::google::protobuf::Arena* arena);
  LinkAccountRequest(::google::protobuf::Arena* arena, const LinkAccountRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOculusOauthTokenFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string oculus_oauth_token = 2;
  void clear_oculus_oauth_token() ;
  const std::string& oculus_oauth_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oculus_oauth_token(Arg_&& arg, Args_... args);
  std::string* mutable_oculus_oauth_token();
  PROTOBUF_NODISCARD std::string* release_oculus_oauth_token();
  void set_allocated_oculus_oauth_token(std::string* value);

  private:
  const std::string& _internal_oculus_oauth_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oculus_oauth_token(
      const std::string& value);
  std::string* _internal_mutable_oculus_oauth_token();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.LinkAccountRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr oculus_oauth_token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class GetUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  ~GetUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetUserRequest(const GetUserRequest& from)
      : GetUserRequest(nullptr, from) {}
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetUserRequest& from) {
    GetUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetUserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::google::protobuf::Arena* arena);
  GetUserRequest(::google::protobuf::Arena* arena, const GetUserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetUserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class GenerateTokenUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateTokenUserRequest) */ {
 public:
  inline GenerateTokenUserRequest() : GenerateTokenUserRequest(nullptr) {}
  ~GenerateTokenUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenerateTokenUserRequest(::google::protobuf::internal::ConstantInitialized);

  inline GenerateTokenUserRequest(const GenerateTokenUserRequest& from)
      : GenerateTokenUserRequest(nullptr, from) {}
  GenerateTokenUserRequest(GenerateTokenUserRequest&& from) noexcept
    : GenerateTokenUserRequest() {
    *this = ::std::move(from);
  }

  inline GenerateTokenUserRequest& operator=(const GenerateTokenUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenUserRequest& operator=(GenerateTokenUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateTokenUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateTokenUserRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenUserRequest*>(
               &_GenerateTokenUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenerateTokenUserRequest& a, GenerateTokenUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateTokenUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateTokenUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenerateTokenUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GenerateTokenUserRequest& from) {
    GenerateTokenUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GenerateTokenUserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateTokenUserRequest";
  }
  protected:
  explicit GenerateTokenUserRequest(::google::protobuf::Arena* arena);
  GenerateTokenUserRequest(::google::protobuf::Arena* arena, const GenerateTokenUserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_type() ;
  ::ai::inworld::studio::v1alpha::AuthType type() const;
  void set_type(::ai::inworld::studio::v1alpha::AuthType value);

  private:
  ::ai::inworld::studio::v1alpha::AuthType _internal_type() const;
  void _internal_set_type(::ai::inworld::studio::v1alpha::AuthType value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr token_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class DeleteUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  ~DeleteUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteUserRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteUserRequest(const DeleteUserRequest& from)
      : DeleteUserRequest(nullptr, from) {}
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteUserRequest& from) {
    DeleteUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteUserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::google::protobuf::Arena* arena);
  DeleteUserRequest(::google::protobuf::Arena* arena, const DeleteUserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteUserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class AcceptTosRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.AcceptTosRequest) */ {
 public:
  inline AcceptTosRequest() : AcceptTosRequest(nullptr) {}
  ~AcceptTosRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AcceptTosRequest(::google::protobuf::internal::ConstantInitialized);

  inline AcceptTosRequest(const AcceptTosRequest& from)
      : AcceptTosRequest(nullptr, from) {}
  AcceptTosRequest(AcceptTosRequest&& from) noexcept
    : AcceptTosRequest() {
    *this = ::std::move(from);
  }

  inline AcceptTosRequest& operator=(const AcceptTosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptTosRequest& operator=(AcceptTosRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptTosRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptTosRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptTosRequest*>(
               &_AcceptTosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AcceptTosRequest& a, AcceptTosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptTosRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptTosRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptTosRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptTosRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AcceptTosRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AcceptTosRequest& from) {
    AcceptTosRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AcceptTosRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.AcceptTosRequest";
  }
  protected:
  explicit AcceptTosRequest(::google::protobuf::Arena* arena);
  AcceptTosRequest(::google::protobuf::Arena* arena, const AcceptTosRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* value);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.AcceptTosRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr user_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserRequest(const UpdateUserRequest& from)
      : UpdateUserRequest(nullptr, from) {}
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateUserRequest& from) {
    UpdateUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::google::protobuf::Arena* arena);
  UpdateUserRequest(::google::protobuf::Arena* arena, const UpdateUserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_user() const;
  void clear_user() ;
  const ::ai::inworld::studio::v1alpha::User& user() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::User* release_user();
  ::ai::inworld::studio::v1alpha::User* mutable_user();
  void set_allocated_user(::ai::inworld::studio::v1alpha::User* value);
  void unsafe_arena_set_allocated_user(::ai::inworld::studio::v1alpha::User* value);
  ::ai::inworld::studio::v1alpha::User* unsafe_arena_release_user();

  private:
  const ::ai::inworld::studio::v1alpha::User& _internal_user() const;
  ::ai::inworld::studio::v1alpha::User* _internal_mutable_user();

  public:
  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask() ;
  const ::google::protobuf::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* value);
  void unsafe_arena_set_allocated_update_mask(::google::protobuf::FieldMask* value);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  ::google::protobuf::FieldMask* _internal_mutable_update_mask();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateUserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::ai::inworld::studio::v1alpha::User* user_;
    ::google::protobuf::FieldMask* update_mask_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};// -------------------------------------------------------------------

class GenerateTokenUserResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateTokenUserResponse) */ {
 public:
  inline GenerateTokenUserResponse() : GenerateTokenUserResponse(nullptr) {}
  ~GenerateTokenUserResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenerateTokenUserResponse(::google::protobuf::internal::ConstantInitialized);

  inline GenerateTokenUserResponse(const GenerateTokenUserResponse& from)
      : GenerateTokenUserResponse(nullptr, from) {}
  GenerateTokenUserResponse(GenerateTokenUserResponse&& from) noexcept
    : GenerateTokenUserResponse() {
    *this = ::std::move(from);
  }

  inline GenerateTokenUserResponse& operator=(const GenerateTokenUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenUserResponse& operator=(GenerateTokenUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateTokenUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateTokenUserResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenUserResponse*>(
               &_GenerateTokenUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateTokenUserResponse& a, GenerateTokenUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenUserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateTokenUserResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateTokenUserResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenerateTokenUserResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GenerateTokenUserResponse& from) {
    GenerateTokenUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GenerateTokenUserResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateTokenUserResponse";
  }
  protected:
  explicit GenerateTokenUserResponse(::google::protobuf::Arena* arena);
  GenerateTokenUserResponse(::google::protobuf::Arena* arena, const GenerateTokenUserResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kExpirationTimeFieldNumber = 3,
    kIsCreatedFieldNumber = 4,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  void clear_expiration_time() ;
  const ::google::protobuf::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiration_time();
  ::google::protobuf::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiration_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration_time();

  private:
  const ::google::protobuf::Timestamp& _internal_expiration_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiration_time();

  public:
  // bool is_created = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_is_created() ;
  bool is_created() const;
  void set_is_created(bool value);

  private:
  bool _internal_is_created() const;
  void _internal_set_is_created(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::Timestamp* expiration_time_;
    bool is_created_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenerateTokenUserRequest

// .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GenerateTokenUserRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::ai::inworld::studio::v1alpha::AuthType GenerateTokenUserRequest::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.type)
  return _internal_type();
}
inline void GenerateTokenUserRequest::set_type(::ai::inworld::studio::v1alpha::AuthType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.type)
}
inline ::ai::inworld::studio::v1alpha::AuthType GenerateTokenUserRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::AuthType>(_impl_.type_);
}
inline void GenerateTokenUserRequest::_internal_set_type(::ai::inworld::studio::v1alpha::AuthType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string token = 2;
inline void GenerateTokenUserRequest::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& GenerateTokenUserRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateTokenUserRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}
inline std::string* GenerateTokenUserRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
  return _s;
}
inline const std::string& GenerateTokenUserRequest::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void GenerateTokenUserRequest::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* GenerateTokenUserRequest::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* GenerateTokenUserRequest::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
  return _impl_.token_.Release();
}
inline void GenerateTokenUserRequest::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}

// -------------------------------------------------------------------

// GenerateTokenUserResponse

// string token = 1;
inline void GenerateTokenUserResponse::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& GenerateTokenUserResponse::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateTokenUserResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}
inline std::string* GenerateTokenUserResponse::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
  return _s;
}
inline const std::string& GenerateTokenUserResponse::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void GenerateTokenUserResponse::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* GenerateTokenUserResponse::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* GenerateTokenUserResponse::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
  return _impl_.token_.Release();
}
inline void GenerateTokenUserResponse::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}

// string type = 2;
inline void GenerateTokenUserResponse::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& GenerateTokenUserResponse::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateTokenUserResponse::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}
inline std::string* GenerateTokenUserResponse::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
  return _s;
}
inline const std::string& GenerateTokenUserResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void GenerateTokenUserResponse::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* GenerateTokenUserResponse::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* GenerateTokenUserResponse::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
  return _impl_.type_.Release();
}
inline void GenerateTokenUserResponse::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool GenerateTokenUserResponse::has_expiration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GenerateTokenUserResponse::_internal_expiration_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GenerateTokenUserResponse::expiration_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
  return _internal_expiration_time();
}
inline void GenerateTokenUserResponse::unsafe_arena_set_allocated_expiration_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
}
inline ::google::protobuf::Timestamp* GenerateTokenUserResponse::release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GenerateTokenUserResponse::unsafe_arena_release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GenerateTokenUserResponse::_internal_mutable_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiration_time_;
}
inline ::google::protobuf::Timestamp* GenerateTokenUserResponse::mutable_expiration_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
  return _msg;
}
inline void GenerateTokenUserResponse::set_allocated_expiration_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
}

// bool is_created = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GenerateTokenUserResponse::clear_is_created() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_created_ = false;
}
inline bool GenerateTokenUserResponse::is_created() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.is_created)
  return _internal_is_created();
}
inline void GenerateTokenUserResponse::set_is_created(bool value) {
  _internal_set_is_created(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.is_created)
}
inline bool GenerateTokenUserResponse::_internal_is_created() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_created_;
}
inline void GenerateTokenUserResponse::_internal_set_is_created(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_created_ = value;
}

// -------------------------------------------------------------------

// LinkAccountRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void LinkAccountRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LinkAccountRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LinkAccountRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}
inline std::string* LinkAccountRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
  return _s;
}
inline const std::string& LinkAccountRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void LinkAccountRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LinkAccountRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LinkAccountRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
  return _impl_.name_.Release();
}
inline void LinkAccountRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}

// string oculus_oauth_token = 2;
inline void LinkAccountRequest::clear_oculus_oauth_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.oculus_oauth_token_.ClearToEmpty();
}
inline const std::string& LinkAccountRequest::oculus_oauth_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
  return _internal_oculus_oauth_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LinkAccountRequest::set_oculus_oauth_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.oculus_oauth_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}
inline std::string* LinkAccountRequest::mutable_oculus_oauth_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_oculus_oauth_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
  return _s;
}
inline const std::string& LinkAccountRequest::_internal_oculus_oauth_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.oculus_oauth_token_.Get();
}
inline void LinkAccountRequest::_internal_set_oculus_oauth_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.oculus_oauth_token_.Set(value, GetArena());
}
inline std::string* LinkAccountRequest::_internal_mutable_oculus_oauth_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.oculus_oauth_token_.Mutable( GetArena());
}
inline std::string* LinkAccountRequest::release_oculus_oauth_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
  return _impl_.oculus_oauth_token_.Release();
}
inline void LinkAccountRequest::set_allocated_oculus_oauth_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.oculus_oauth_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oculus_oauth_token_.IsDefault()) {
          _impl_.oculus_oauth_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}

// -------------------------------------------------------------------

// GetUserRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetUserRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetUserRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetUserRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetUserRequest.name)
}
inline std::string* GetUserRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetUserRequest.name)
  return _s;
}
inline const std::string& GetUserRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetUserRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetUserRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetUserRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetUserRequest.name)
  return _impl_.name_.Release();
}
inline void GetUserRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetUserRequest.name)
}

// -------------------------------------------------------------------

// AcceptTosRequest

// string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void AcceptTosRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_.ClearToEmpty();
}
inline const std::string& AcceptTosRequest::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AcceptTosRequest::set_user(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}
inline std::string* AcceptTosRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
  return _s;
}
inline const std::string& AcceptTosRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_.Get();
}
inline void AcceptTosRequest::_internal_set_user(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_.Set(value, GetArena());
}
inline std::string* AcceptTosRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_.Mutable( GetArena());
}
inline std::string* AcceptTosRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
  return _impl_.user_.Release();
}
inline void AcceptTosRequest::set_allocated_user(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateUserRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void UpdateUserRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::User& UpdateUserRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::User&>(::ai::inworld::studio::v1alpha::_User_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::User& UpdateUserRequest::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
  return _internal_user();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_user(::ai::inworld::studio::v1alpha::User* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::ai::inworld::studio::v1alpha::User*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::User* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateUserRequest.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::User>(GetArena());
    _impl_.user_ = reinterpret_cast<::ai::inworld::studio::v1alpha::User*>(p);
  }
  return _impl_.user_;
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_user(::ai::inworld::studio::v1alpha::User* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::User*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::User*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::ai::inworld::studio::v1alpha::User*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateUserRequest::has_update_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_mask_ != nullptr);
  return value;
}
inline const ::google::protobuf::FieldMask& UpdateUserRequest::_internal_update_mask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::FieldMask&>(::google::protobuf::_FieldMask_default_instance_);
}
inline const ::google::protobuf::FieldMask& UpdateUserRequest::update_mask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_update_mask(::google::protobuf::FieldMask* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = reinterpret_cast<::google::protobuf::FieldMask*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
}
inline ::google::protobuf::FieldMask* UpdateUserRequest::release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::FieldMask* released = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::FieldMask* UpdateUserRequest::unsafe_arena_release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateUserRequest::_internal_mutable_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArena());
    _impl_.update_mask_ = reinterpret_cast<::google::protobuf::FieldMask*>(p);
  }
  return _impl_.update_mask_;
}
inline ::google::protobuf::FieldMask* UpdateUserRequest::mutable_update_mask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_update_mask(::google::protobuf::FieldMask* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_mask_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.update_mask_ = reinterpret_cast<::google::protobuf::FieldMask*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
}

// -------------------------------------------------------------------

// User

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void User::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.name)
}
inline std::string* User::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* User::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.name)
}

// string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_oculus_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.oculus_id_.ClearToEmpty();
}
inline const std::string& User::oculus_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.oculus_id)
  return _internal_oculus_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_oculus_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.oculus_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.oculus_id)
}
inline std::string* User::mutable_oculus_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_oculus_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.oculus_id)
  return _s;
}
inline const std::string& User::_internal_oculus_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.oculus_id_.Get();
}
inline void User::_internal_set_oculus_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.oculus_id_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_oculus_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.oculus_id_.Mutable( GetArena());
}
inline std::string* User::release_oculus_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.oculus_id)
  return _impl_.oculus_id_.Release();
}
inline void User::set_allocated_oculus_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.oculus_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oculus_id_.IsDefault()) {
          _impl_.oculus_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.oculus_id)
}

// string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_firebase_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.firebase_id_.ClearToEmpty();
}
inline const std::string& User::firebase_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.firebase_id)
  return _internal_firebase_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_firebase_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.firebase_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.firebase_id)
}
inline std::string* User::mutable_firebase_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_firebase_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.firebase_id)
  return _s;
}
inline const std::string& User::_internal_firebase_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.firebase_id_.Get();
}
inline void User::_internal_set_firebase_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.firebase_id_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_firebase_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.firebase_id_.Mutable( GetArena());
}
inline std::string* User::release_firebase_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.firebase_id)
  return _impl_.firebase_id_.Release();
}
inline void User::set_allocated_firebase_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.firebase_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firebase_id_.IsDefault()) {
          _impl_.firebase_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.firebase_id)
}

// int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_tos_acceptance_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tos_acceptance_version_ = 0;
}
inline ::int32_t User::tos_acceptance_version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.tos_acceptance_version)
  return _internal_tos_acceptance_version();
}
inline void User::set_tos_acceptance_version(::int32_t value) {
  _internal_set_tos_acceptance_version(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.tos_acceptance_version)
}
inline ::int32_t User::_internal_tos_acceptance_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tos_acceptance_version_;
}
inline void User::_internal_set_tos_acceptance_version(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tos_acceptance_version_ = value;
}

// .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
inline void User::clear_marketing_consent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.marketing_consent_ = 0;
}
inline ::ai::inworld::studio::v1alpha::MarketingConsent User::marketing_consent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.marketing_consent)
  return _internal_marketing_consent();
}
inline void User::set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value) {
  _internal_set_marketing_consent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.marketing_consent)
}
inline ::ai::inworld::studio::v1alpha::MarketingConsent User::_internal_marketing_consent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::MarketingConsent>(_impl_.marketing_consent_);
}
inline void User::_internal_set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.marketing_consent_ = value;
}

// .ai.inworld.studio.v1alpha.MarketingPlatformPurpose marketing_platform_purpose = 7;
inline void User::clear_marketing_platform_purpose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.marketing_platform_purpose_ = 0;
}
inline ::ai::inworld::studio::v1alpha::MarketingPlatformPurpose User::marketing_platform_purpose() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.marketing_platform_purpose)
  return _internal_marketing_platform_purpose();
}
inline void User::set_marketing_platform_purpose(::ai::inworld::studio::v1alpha::MarketingPlatformPurpose value) {
  _internal_set_marketing_platform_purpose(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.marketing_platform_purpose)
}
inline ::ai::inworld::studio::v1alpha::MarketingPlatformPurpose User::_internal_marketing_platform_purpose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::MarketingPlatformPurpose>(_impl_.marketing_platform_purpose_);
}
inline void User::_internal_set_marketing_platform_purpose(::ai::inworld::studio::v1alpha::MarketingPlatformPurpose value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.marketing_platform_purpose_ = value;
}

// string display_name = 8 [(.ai.inworld.options.examples) = {
inline void User::clear_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& User::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.display_name)
}
inline std::string* User::mutable_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.display_name)
  return _s;
}
inline const std::string& User::_internal_display_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_name_.Get();
}
inline void User::_internal_set_display_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.display_name_.Mutable( GetArena());
}
inline std::string* User::release_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.display_name)
  return _impl_.display_name_.Release();
}
inline void User::set_allocated_display_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_name_.IsDefault()) {
          _impl_.display_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.display_name)
}

// string role = 9;
inline void User::clear_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.role_.ClearToEmpty();
}
inline const std::string& User::role() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_role(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.role)
}
inline std::string* User::mutable_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.role)
  return _s;
}
inline const std::string& User::_internal_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.role_.Get();
}
inline void User::_internal_set_role(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.role_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.role_.Mutable( GetArena());
}
inline std::string* User::release_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.role)
  return _impl_.role_.Release();
}
inline void User::set_allocated_role(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.role_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.role_.IsDefault()) {
          _impl_.role_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.role)
}

// string application = 10;
inline void User::clear_application() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_.ClearToEmpty();
}
inline const std::string& User::application() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.application)
  return _internal_application();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_application(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.application)
}
inline std::string* User::mutable_application() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.application)
  return _s;
}
inline const std::string& User::_internal_application() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_.Get();
}
inline void User::_internal_set_application(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_application() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_.Mutable( GetArena());
}
inline std::string* User::release_application() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.application)
  return _impl_.application_.Release();
}
inline void User::set_allocated_application(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_.IsDefault()) {
          _impl_.application_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.application)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteUserRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteUserRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteUserRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteUserRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteUserRequest.name)
}
inline std::string* DeleteUserRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteUserRequest.name)
  return _s;
}
inline const std::string& DeleteUserRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void DeleteUserRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeleteUserRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeleteUserRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteUserRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteUserRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteUserRequest.name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::MarketingConsent> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::MarketingConsent>() {
  return ::ai::inworld::studio::v1alpha::MarketingConsent_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::MarketingPlatformPurpose> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::MarketingPlatformPurpose>() {
  return ::ai::inworld::studio::v1alpha::MarketingPlatformPurpose_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::AuthType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::AuthType>() {
  return ::ai::inworld::studio::v1alpha::AuthType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_2epb_2eh
