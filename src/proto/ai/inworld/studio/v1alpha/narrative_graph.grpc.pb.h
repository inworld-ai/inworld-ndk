// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/narrative_graph.proto
#ifndef GRPC_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto__INCLUDED
#define GRPC_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto__INCLUDED

#include "ai/inworld/studio/v1alpha/narrative_graph.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// Grpc service to proxy, preprocess and manage auto generator related
// actions
class NarrativeGraph final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.NarrativeGraph";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // The service to retrieve graph data
    virtual ::grpc::Status GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>> AsyncGetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>>(AsyncGetGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>> PrepareAsyncGetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>>(PrepareAsyncGetGraphRaw(context, request, cq));
    }
    // The service to update graph data
    virtual ::grpc::Status UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>> AsyncUpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>>(AsyncUpdateGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>> PrepareAsyncUpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>>(PrepareAsyncUpdateGraphRaw(context, request, cq));
    }
    // RPC to create graph.
    virtual ::grpc::Status CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>> AsyncCreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>>(AsyncCreateGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>> PrepareAsyncCreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>>(PrepareAsyncCreateGraphRaw(context, request, cq));
    }
    // RPC to delete graph.
    virtual ::grpc::Status DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::google::protobuf_inworld::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf_inworld::Empty>> AsyncDeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf_inworld::Empty>>(AsyncDeleteGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf_inworld::Empty>> PrepareAsyncDeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf_inworld::Empty>>(PrepareAsyncDeleteGraphRaw(context, request, cq));
    }
    // RPC to get a list of graphs
    virtual ::grpc::Status ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListGraphsResponse>> AsyncListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListGraphsResponse>>(AsyncListGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListGraphsResponse>> PrepareAsyncListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListGraphsResponse>>(PrepareAsyncListGraphsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // The service to retrieve graph data
      virtual void GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // The service to update graph data
      virtual void UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to create graph.
      virtual void CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to delete graph.
      virtual void DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to get a list of graphs
      virtual void ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>* AsyncGetGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>* PrepareAsyncGetGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>* AsyncUpdateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>* PrepareAsyncUpdateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>* AsyncCreateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Graph>* PrepareAsyncCreateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf_inworld::Empty>* AsyncDeleteGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf_inworld::Empty>* PrepareAsyncDeleteGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* AsyncListGraphsRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* PrepareAsyncListGraphsRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>> AsyncGetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>>(AsyncGetGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>> PrepareAsyncGetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>>(PrepareAsyncGetGraphRaw(context, request, cq));
    }
    ::grpc::Status UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>> AsyncUpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>>(AsyncUpdateGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>> PrepareAsyncUpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>>(PrepareAsyncUpdateGraphRaw(context, request, cq));
    }
    ::grpc::Status CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>> AsyncCreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>>(AsyncCreateGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>> PrepareAsyncCreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>>(PrepareAsyncCreateGraphRaw(context, request, cq));
    }
    ::grpc::Status DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::google::protobuf_inworld::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>> AsyncDeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>>(AsyncDeleteGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>> PrepareAsyncDeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>>(PrepareAsyncDeleteGraphRaw(context, request, cq));
    }
    ::grpc::Status ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>> AsyncListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>>(AsyncListGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>> PrepareAsyncListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>>(PrepareAsyncListGraphsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* AsyncGetGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* PrepareAsyncGetGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* AsyncUpdateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* PrepareAsyncUpdateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* AsyncCreateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* PrepareAsyncCreateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>* AsyncDeleteGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>* PrepareAsyncDeleteGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* AsyncListGraphsRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* PrepareAsyncListGraphsRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_ListGraphs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // The service to retrieve graph data
    virtual ::grpc::Status GetGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response);
    // The service to update graph data
    virtual ::grpc::Status UpdateGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response);
    // RPC to create graph.
    virtual ::grpc::Status CreateGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response);
    // RPC to delete graph.
    virtual ::grpc::Status DeleteGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response);
    // RPC to get a list of graphs
    virtual ::grpc::Status ListGraphs(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGraph() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGraph(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Graph>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGraph() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGraph(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Graph>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGraph() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGraph(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Graph>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteGraph() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteGraph(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf_inworld::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListGraphs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGraphs(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGraphs(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetGraph<WithAsyncMethod_UpdateGraph<WithAsyncMethod_CreateGraph<WithAsyncMethod_DeleteGraph<WithAsyncMethod_ListGraphs<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response) { return this->GetGraph(context, request, response); }));}
    void SetMessageAllocatorFor_GetGraph(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response) { return this->UpdateGraph(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGraph(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response) { return this->CreateGraph(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGraph(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response) { return this->DeleteGraph(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteGraph(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListGraphs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response) { return this->ListGraphs(context, request, response); }));}
    void SetMessageAllocatorFor_ListGraphs(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGraphs(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListGraphs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetGraph<ExperimentalWithCallbackMethod_UpdateGraph<ExperimentalWithCallbackMethod_CreateGraph<ExperimentalWithCallbackMethod_DeleteGraph<ExperimentalWithCallbackMethod_ListGraphs<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetGraph<ExperimentalWithCallbackMethod_UpdateGraph<ExperimentalWithCallbackMethod_CreateGraph<ExperimentalWithCallbackMethod_DeleteGraph<ExperimentalWithCallbackMethod_ListGraphs<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGraph() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGraph() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGraph() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteGraph() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListGraphs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGraphs(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGraph() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGraph() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGraph() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteGraph() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListGraphs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGraphs(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGraphs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListGraphs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListGraphs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGraphs(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListGraphs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGraph() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph>* streamer) {
                       return this->StreamedGetGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetGraphRequest,::ai::inworld::studio::v1alpha::Graph>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGraph() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>* streamer) {
                       return this->StreamedUpdateGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::UpdateGraphRequest,::ai::inworld::studio::v1alpha::Graph>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGraph() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph>* streamer) {
                       return this->StreamedCreateGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* /*request*/, ::ai::inworld::studio::v1alpha::Graph* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::CreateGraphRequest,::ai::inworld::studio::v1alpha::Graph>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteGraph() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty>* streamer) {
                       return this->StreamedDeleteGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteGraph(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* /*request*/, ::google::protobuf_inworld::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeleteGraphRequest,::google::protobuf_inworld::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListGraphs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse>* streamer) {
                       return this->StreamedListGraphs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListGraphs(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListGraphsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListGraphs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ListGraphsRequest,::ai::inworld::studio::v1alpha::ListGraphsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetGraph<WithStreamedUnaryMethod_UpdateGraph<WithStreamedUnaryMethod_CreateGraph<WithStreamedUnaryMethod_DeleteGraph<WithStreamedUnaryMethod_ListGraphs<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetGraph<WithStreamedUnaryMethod_UpdateGraph<WithStreamedUnaryMethod_CreateGraph<WithStreamedUnaryMethod_DeleteGraph<WithStreamedUnaryMethod_ListGraphs<Service > > > > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto__INCLUDED
