// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/triggers.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/triggers.pb.h"
#include "ai/inworld/studio/v1alpha/triggers.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* Triggers_method_names[] = {
  "/ai.inworld.studio.v1alpha.Triggers/GetTrigger",
  "/ai.inworld.studio.v1alpha.Triggers/ListTriggers",
  "/ai.inworld.studio.v1alpha.Triggers/UpdateTrigger",
  "/ai.inworld.studio.v1alpha.Triggers/CreateTrigger",
  "/ai.inworld.studio.v1alpha.Triggers/DeleteTrigger",
};

std::unique_ptr< Triggers::Stub> Triggers::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Triggers::Stub> stub(new Triggers::Stub(channel, options));
  return stub;
}

Triggers::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTrigger_(Triggers_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTriggers_(Triggers_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTrigger_(Triggers_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTrigger_(Triggers_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTrigger_(Triggers_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Triggers::Stub::GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTrigger_, context, request, response);
}

void Triggers::Stub::async::GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTrigger_, context, request, response, std::move(f));
}

void Triggers::Stub::async::GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* Triggers::Stub::PrepareAsyncGetTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Trigger, ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* Triggers::Stub::AsyncGetTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Triggers::Stub::ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTriggers_, context, request, response);
}

void Triggers::Stub::async::ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTriggers_, context, request, response, std::move(f));
}

void Triggers::Stub::async::ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTriggers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* Triggers::Stub::PrepareAsyncListTriggersRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ListTriggersResponse, ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTriggers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* Triggers::Stub::AsyncListTriggersRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTriggersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Triggers::Stub::UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTrigger_, context, request, response);
}

void Triggers::Stub::async::UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTrigger_, context, request, response, std::move(f));
}

void Triggers::Stub::async::UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* Triggers::Stub::PrepareAsyncUpdateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Trigger, ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* Triggers::Stub::AsyncUpdateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Triggers::Stub::CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTrigger_, context, request, response);
}

void Triggers::Stub::async::CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTrigger_, context, request, response, std::move(f));
}

void Triggers::Stub::async::CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* Triggers::Stub::PrepareAsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Trigger, ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* Triggers::Stub::AsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Triggers::Stub::DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTrigger_, context, request, response);
}

void Triggers::Stub::async::DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTrigger_, context, request, response, std::move(f));
}

void Triggers::Stub::async::DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Triggers::Stub::PrepareAsyncDeleteTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Triggers::Stub::AsyncDeleteTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

Triggers::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Triggers_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Triggers::Service, ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Triggers::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GetTriggerRequest* req,
             ::ai::inworld::studio::v1alpha::Trigger* resp) {
               return service->GetTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Triggers_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Triggers::Service, ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Triggers::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::ListTriggersRequest* req,
             ::ai::inworld::studio::v1alpha::ListTriggersResponse* resp) {
               return service->ListTriggers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Triggers_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Triggers::Service, ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Triggers::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* req,
             ::ai::inworld::studio::v1alpha::Trigger* resp) {
               return service->UpdateTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Triggers_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Triggers::Service, ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Triggers::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* req,
             ::ai::inworld::studio::v1alpha::Trigger* resp) {
               return service->CreateTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Triggers_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Triggers::Service, ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Triggers::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteTrigger(ctx, req, resp);
             }, this)));
}

Triggers::Service::~Service() {
}

::grpc::Status Triggers::Service::GetTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Triggers::Service::ListTriggers(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Triggers::Service::UpdateTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Triggers::Service::CreateTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Triggers::Service::DeleteTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

