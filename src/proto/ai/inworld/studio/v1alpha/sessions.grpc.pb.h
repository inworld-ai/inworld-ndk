// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/sessions.proto
#ifndef GRPC_ai_2finworld_2fstudio_2fv1alpha_2fsessions_2eproto__INCLUDED
#define GRPC_ai_2finworld_2fstudio_2fv1alpha_2fsessions_2eproto__INCLUDED

#include "ai/inworld/studio/v1alpha/sessions.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// RPC service to manage sessions
class Sessions final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.Sessions";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPC to load world for the interaction session.
    virtual ::grpc::Status StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncStoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncStoreSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncStoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncStoreSessionRaw(context, request, cq));
    }
    // RPC to load session by name resource name.
    virtual ::grpc::Status LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::ai::inworld::studio::v1alpha::Session* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Session>> AsyncLoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Session>>(AsyncLoadSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Session>> PrepareAsyncLoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Session>>(PrepareAsyncLoadSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RPC to load world for the interaction session.
      virtual void StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to load session by name resource name.
      virtual void LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncStoreSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncStoreSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Session>* AsyncLoadSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Session>* PrepareAsyncLoadSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncStoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncStoreSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncStoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncStoreSessionRaw(context, request, cq));
    }
    ::grpc::Status LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::ai::inworld::studio::v1alpha::Session* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>> AsyncLoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>>(AsyncLoadSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>> PrepareAsyncLoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>>(PrepareAsyncLoadSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response, std::function<void(::grpc::Status)>) override;
      void LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncStoreSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncStoreSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>* AsyncLoadSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>* PrepareAsyncLoadSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StoreSession_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPC to load world for the interaction session.
    virtual ::grpc::Status StoreSession(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response);
    // RPC to load session by name resource name.
    virtual ::grpc::Status LoadSession(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoreSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StoreSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreSession(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSession(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Session>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StoreSession<WithAsyncMethod_LoadSession<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StoreSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StoreSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response) { return this->StoreSession(context, request, response); }));}
    void SetMessageAllocatorFor_StoreSession(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StoreSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreSession(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadSession() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response) { return this->LoadSession(context, request, response); }));}
    void SetMessageAllocatorFor_LoadSession(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadSession(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StoreSession<WithCallbackMethod_LoadSession<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StoreSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoreSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StoreSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoreSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StoreSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StoreSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StoreSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoreSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_StoreSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadSession() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoreSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoreSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedStoreSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StoreSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoreSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoreSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::StoreSessionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session>* streamer) {
                       return this->StreamedLoadSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadSession(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* /*request*/, ::ai::inworld::studio::v1alpha::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::LoadSessionRequest,::ai::inworld::studio::v1alpha::Session>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StoreSession<WithStreamedUnaryMethod_LoadSession<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StoreSession<WithStreamedUnaryMethod_LoadSession<Service > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_ai_2finworld_2fstudio_2fv1alpha_2fsessions_2eproto__INCLUDED
