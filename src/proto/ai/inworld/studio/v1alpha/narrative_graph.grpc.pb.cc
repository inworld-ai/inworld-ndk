#include "ProtoDisableWarning.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/narrative_graph.proto

#include "ai/inworld/studio/v1alpha/narrative_graph.pb.h"
#include "ai/inworld/studio/v1alpha/narrative_graph.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* NarrativeGraph_method_names[] = {
  "/ai.inworld.studio.v1alpha.NarrativeGraph/GetGraph",
  "/ai.inworld.studio.v1alpha.NarrativeGraph/UpdateGraph",
  "/ai.inworld.studio.v1alpha.NarrativeGraph/CreateGraph",
  "/ai.inworld.studio.v1alpha.NarrativeGraph/DeleteGraph",
  "/ai.inworld.studio.v1alpha.NarrativeGraph/ListGraphs",
};

std::unique_ptr< NarrativeGraph::Stub> NarrativeGraph::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NarrativeGraph::Stub> stub(new NarrativeGraph::Stub(channel));
  return stub;
}

NarrativeGraph::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetGraph_(NarrativeGraph_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGraph_(NarrativeGraph_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGraph_(NarrativeGraph_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteGraph_(NarrativeGraph_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGraphs_(NarrativeGraph_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NarrativeGraph::Stub::GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_GetGraph_, context, request, response);
}

void NarrativeGraph::Stub::experimental_async::GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGraph_, context, request, response, std::move(f));
}

void NarrativeGraph::Stub::experimental_async::GetGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* NarrativeGraph::Stub::PrepareAsyncGetGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Graph, ::ai::inworld::studio::v1alpha::GetGraphRequest, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_GetGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* NarrativeGraph::Stub::AsyncGetGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NarrativeGraph::Stub::UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_UpdateGraph_, context, request, response);
}

void NarrativeGraph::Stub::experimental_async::UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGraph_, context, request, response, std::move(f));
}

void NarrativeGraph::Stub::experimental_async::UpdateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* NarrativeGraph::Stub::PrepareAsyncUpdateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Graph, ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* NarrativeGraph::Stub::AsyncUpdateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NarrativeGraph::Stub::CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::ai::inworld::studio::v1alpha::Graph* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_CreateGraph_, context, request, response);
}

void NarrativeGraph::Stub::experimental_async::CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGraph_, context, request, response, std::move(f));
}

void NarrativeGraph::Stub::experimental_async::CreateGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* NarrativeGraph::Stub::PrepareAsyncCreateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Graph, ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_CreateGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Graph>* NarrativeGraph::Stub::AsyncCreateGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NarrativeGraph::Stub::DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::google::protobuf_inworld::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_DeleteGraph_, context, request, response);
}

void NarrativeGraph::Stub::experimental_async::DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteGraph_, context, request, response, std::move(f));
}

void NarrativeGraph::Stub::experimental_async::DeleteGraph(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>* NarrativeGraph::Stub::PrepareAsyncDeleteGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf_inworld::Empty, ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_DeleteGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf_inworld::Empty>* NarrativeGraph::Stub::AsyncDeleteGraphRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NarrativeGraph::Stub::ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_ListGraphs_, context, request, response);
}

void NarrativeGraph::Stub::experimental_async::ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGraphs_, context, request, response, std::move(f));
}

void NarrativeGraph::Stub::experimental_async::ListGraphs(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGraphs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* NarrativeGraph::Stub::PrepareAsyncListGraphsRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ListGraphsResponse, ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_ListGraphs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListGraphsResponse>* NarrativeGraph::Stub::AsyncListGraphsRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListGraphsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NarrativeGraph::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NarrativeGraph_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NarrativeGraph::Service, ::ai::inworld::studio::v1alpha::GetGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](NarrativeGraph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GetGraphRequest* req,
             ::ai::inworld::studio::v1alpha::Graph* resp) {
               return service->GetGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NarrativeGraph_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NarrativeGraph::Service, ::ai::inworld::studio::v1alpha::UpdateGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](NarrativeGraph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* req,
             ::ai::inworld::studio::v1alpha::Graph* resp) {
               return service->UpdateGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NarrativeGraph_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NarrativeGraph::Service, ::ai::inworld::studio::v1alpha::CreateGraphRequest, ::ai::inworld::studio::v1alpha::Graph, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](NarrativeGraph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::CreateGraphRequest* req,
             ::ai::inworld::studio::v1alpha::Graph* resp) {
               return service->CreateGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NarrativeGraph_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NarrativeGraph::Service, ::ai::inworld::studio::v1alpha::DeleteGraphRequest, ::google::protobuf_inworld::Empty, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](NarrativeGraph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* req,
             ::google::protobuf_inworld::Empty* resp) {
               return service->DeleteGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NarrativeGraph_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NarrativeGraph::Service, ::ai::inworld::studio::v1alpha::ListGraphsRequest, ::ai::inworld::studio::v1alpha::ListGraphsResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](NarrativeGraph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::ListGraphsRequest* req,
             ::ai::inworld::studio::v1alpha::ListGraphsResponse* resp) {
               return service->ListGraphs(ctx, req, resp);
             }, this)));
}

NarrativeGraph::Service::~Service() {
}

::grpc::Status NarrativeGraph::Service::GetGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NarrativeGraph::Service::UpdateGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NarrativeGraph::Service::CreateGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateGraphRequest* request, ::ai::inworld::studio::v1alpha::Graph* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NarrativeGraph::Service::DeleteGraph(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteGraphRequest* request, ::google::protobuf_inworld::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NarrativeGraph::Service::ListGraphs(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListGraphsRequest* request, ::ai::inworld::studio::v1alpha::ListGraphsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

