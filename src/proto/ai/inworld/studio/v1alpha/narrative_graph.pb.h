// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/narrative_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "ai/inworld/options/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class CreateGraphRequest;
class CreateGraphRequestDefaultTypeInternal;
extern CreateGraphRequestDefaultTypeInternal _CreateGraphRequest_default_instance_;
class DeleteGraphRequest;
class DeleteGraphRequestDefaultTypeInternal;
extern DeleteGraphRequestDefaultTypeInternal _DeleteGraphRequest_default_instance_;
class GetGraphRequest;
class GetGraphRequestDefaultTypeInternal;
extern GetGraphRequestDefaultTypeInternal _GetGraphRequest_default_instance_;
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class GraphConnection;
class GraphConnectionDefaultTypeInternal;
extern GraphConnectionDefaultTypeInternal _GraphConnection_default_instance_;
class GraphNode;
class GraphNodeDefaultTypeInternal;
extern GraphNodeDefaultTypeInternal _GraphNode_default_instance_;
class GraphNode_Quote;
class GraphNode_QuoteDefaultTypeInternal;
extern GraphNode_QuoteDefaultTypeInternal _GraphNode_Quote_default_instance_;
class ListGraphsRequest;
class ListGraphsRequestDefaultTypeInternal;
extern ListGraphsRequestDefaultTypeInternal _ListGraphsRequest_default_instance_;
class ListGraphsResponse;
class ListGraphsResponseDefaultTypeInternal;
extern ListGraphsResponseDefaultTypeInternal _ListGraphsResponse_default_instance_;
class UpdateGraphRequest;
class UpdateGraphRequestDefaultTypeInternal;
extern UpdateGraphRequestDefaultTypeInternal _UpdateGraphRequest_default_instance_;
class ZipGraphRequest;
class ZipGraphRequestDefaultTypeInternal;
extern ZipGraphRequestDefaultTypeInternal _ZipGraphRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::CreateGraphRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CreateGraphRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeleteGraphRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeleteGraphRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetGraphRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetGraphRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Graph* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Graph>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GraphConnection* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GraphConnection>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GraphNode* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GraphNode>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GraphNode_Quote* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GraphNode_Quote>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListGraphsRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListGraphsRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListGraphsResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListGraphsResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdateGraphRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdateGraphRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ZipGraphRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ZipGraphRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================

class Graph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 4,
    kConnectionsFieldNumber = 5,
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
  };
  // repeated .ai.inworld.studio.v1alpha.GraphNode nodes = 4;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::ai::inworld::studio::v1alpha::GraphNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode >*
      mutable_nodes();
  private:
  const ::ai::inworld::studio::v1alpha::GraphNode& _internal_nodes(int index) const;
  ::ai::inworld::studio::v1alpha::GraphNode* _internal_add_nodes();
  public:
  const ::ai::inworld::studio::v1alpha::GraphNode& nodes(int index) const;
  ::ai::inworld::studio::v1alpha::GraphNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode >&
      nodes() const;

  // repeated .ai.inworld.studio.v1alpha.GraphConnection connections = 5;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::ai::inworld::studio::v1alpha::GraphConnection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphConnection >*
      mutable_connections();
  private:
  const ::ai::inworld::studio::v1alpha::GraphConnection& _internal_connections(int index) const;
  ::ai::inworld::studio::v1alpha::GraphConnection* _internal_add_connections();
  public:
  const ::ai::inworld::studio::v1alpha::GraphConnection& connections(int index) const;
  ::ai::inworld::studio::v1alpha::GraphConnection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphConnection >&
      connections() const;

  // string name = 1 [(.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_data();
  PROTOBUF_DEPRECATED const std::string& data() const;
  PROTOBUF_DEPRECATED void set_data(const std::string& value);
  PROTOBUF_DEPRECATED void set_data(std::string&& value);
  PROTOBUF_DEPRECATED void set_data(const char* value);
  PROTOBUF_DEPRECATED void set_data(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_data();
  PROTOBUF_DEPRECATED std::string* release_data();
  PROTOBUF_DEPRECATED void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphConnection > connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class GraphNode_Quote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GraphNode.Quote) */ {
 public:
  inline GraphNode_Quote() : GraphNode_Quote(nullptr) {}
  virtual ~GraphNode_Quote();

  GraphNode_Quote(const GraphNode_Quote& from);
  GraphNode_Quote(GraphNode_Quote&& from) noexcept
    : GraphNode_Quote() {
    *this = ::std::move(from);
  }

  inline GraphNode_Quote& operator=(const GraphNode_Quote& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphNode_Quote& operator=(GraphNode_Quote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphNode_Quote& default_instance();

  static inline const GraphNode_Quote* internal_default_instance() {
    return reinterpret_cast<const GraphNode_Quote*>(
               &_GraphNode_Quote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GraphNode_Quote& a, GraphNode_Quote& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphNode_Quote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphNode_Quote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphNode_Quote* New() const final {
    return CreateMaybeMessage<GraphNode_Quote>(nullptr);
  }

  GraphNode_Quote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphNode_Quote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphNode_Quote& from);
  void MergeFrom(const GraphNode_Quote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphNode_Quote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GraphNode.Quote";
  }
  protected:
  explicit GraphNode_Quote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string character = 1;
  void clear_character();
  const std::string& character() const;
  void set_character(const std::string& value);
  void set_character(std::string&& value);
  void set_character(const char* value);
  void set_character(const char* value, size_t size);
  std::string* mutable_character();
  std::string* release_character();
  void set_allocated_character(std::string* character);
  private:
  const std::string& _internal_character() const;
  void _internal_set_character(const std::string& value);
  std::string* _internal_mutable_character();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GraphNode.Quote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class GraphNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GraphNode) */ {
 public:
  inline GraphNode() : GraphNode(nullptr) {}
  virtual ~GraphNode();

  GraphNode(const GraphNode& from);
  GraphNode(GraphNode&& from) noexcept
    : GraphNode() {
    *this = ::std::move(from);
  }

  inline GraphNode& operator=(const GraphNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphNode& operator=(GraphNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphNode& default_instance();

  static inline const GraphNode* internal_default_instance() {
    return reinterpret_cast<const GraphNode*>(
               &_GraphNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GraphNode& a, GraphNode& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphNode* New() const final {
    return CreateMaybeMessage<GraphNode>(nullptr);
  }

  GraphNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphNode& from);
  void MergeFrom(const GraphNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GraphNode";
  }
  protected:
  explicit GraphNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GraphNode_Quote Quote;

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 3,
    kNameFieldNumber = 1,
    kSceneFieldNumber = 2,
    kIsStartFieldNumber = 4,
  };
  // repeated .ai.inworld.studio.v1alpha.GraphNode.Quote quotes = 3;
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::ai::inworld::studio::v1alpha::GraphNode_Quote* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode_Quote >*
      mutable_quotes();
  private:
  const ::ai::inworld::studio::v1alpha::GraphNode_Quote& _internal_quotes(int index) const;
  ::ai::inworld::studio::v1alpha::GraphNode_Quote* _internal_add_quotes();
  public:
  const ::ai::inworld::studio::v1alpha::GraphNode_Quote& quotes(int index) const;
  ::ai::inworld::studio::v1alpha::GraphNode_Quote* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode_Quote >&
      quotes() const;

  // string name = 1 [(.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string scene = 2 [(.google.api.resource_reference) = {
  void clear_scene();
  const std::string& scene() const;
  void set_scene(const std::string& value);
  void set_scene(std::string&& value);
  void set_scene(const char* value);
  void set_scene(const char* value, size_t size);
  std::string* mutable_scene();
  std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // bool is_start = 4;
  void clear_is_start();
  bool is_start() const;
  void set_is_start(bool value);
  private:
  bool _internal_is_start() const;
  void _internal_set_is_start(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GraphNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode_Quote > quotes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  bool is_start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class GraphConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GraphConnection) */ {
 public:
  inline GraphConnection() : GraphConnection(nullptr) {}
  virtual ~GraphConnection();

  GraphConnection(const GraphConnection& from);
  GraphConnection(GraphConnection&& from) noexcept
    : GraphConnection() {
    *this = ::std::move(from);
  }

  inline GraphConnection& operator=(const GraphConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphConnection& operator=(GraphConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphConnection& default_instance();

  static inline const GraphConnection* internal_default_instance() {
    return reinterpret_cast<const GraphConnection*>(
               &_GraphConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GraphConnection& a, GraphConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphConnection* New() const final {
    return CreateMaybeMessage<GraphConnection>(nullptr);
  }

  GraphConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphConnection& from);
  void MergeFrom(const GraphConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GraphConnection";
  }
  protected:
  explicit GraphConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNodeFromFieldNumber = 2,
    kNodeToFieldNumber = 3,
    kTextFieldNumber = 4,
  };
  // string name = 1 [(.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string node_from = 2 [(.google.api.resource_reference) = {
  void clear_node_from();
  const std::string& node_from() const;
  void set_node_from(const std::string& value);
  void set_node_from(std::string&& value);
  void set_node_from(const char* value);
  void set_node_from(const char* value, size_t size);
  std::string* mutable_node_from();
  std::string* release_node_from();
  void set_allocated_node_from(std::string* node_from);
  private:
  const std::string& _internal_node_from() const;
  void _internal_set_node_from(const std::string& value);
  std::string* _internal_mutable_node_from();
  public:

  // string node_to = 3 [(.google.api.resource_reference) = {
  void clear_node_to();
  const std::string& node_to() const;
  void set_node_to(const std::string& value);
  void set_node_to(std::string&& value);
  void set_node_to(const char* value);
  void set_node_to(const char* value, size_t size);
  std::string* mutable_node_to();
  std::string* release_node_to();
  void set_allocated_node_to(std::string* node_to);
  private:
  const std::string& _internal_node_to() const;
  void _internal_set_node_to(const std::string& value);
  std::string* _internal_mutable_node_to();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GraphConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class GetGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetGraphRequest) */ {
 public:
  inline GetGraphRequest() : GetGraphRequest(nullptr) {}
  virtual ~GetGraphRequest();

  GetGraphRequest(const GetGraphRequest& from);
  GetGraphRequest(GetGraphRequest&& from) noexcept
    : GetGraphRequest() {
    *this = ::std::move(from);
  }

  inline GetGraphRequest& operator=(const GetGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGraphRequest& operator=(GetGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGraphRequest& default_instance();

  static inline const GetGraphRequest* internal_default_instance() {
    return reinterpret_cast<const GetGraphRequest*>(
               &_GetGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetGraphRequest& a, GetGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGraphRequest* New() const final {
    return CreateMaybeMessage<GetGraphRequest>(nullptr);
  }

  GetGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGraphRequest& from);
  void MergeFrom(const GetGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetGraphRequest";
  }
  protected:
  explicit GetGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class UpdateGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateGraphRequest) */ {
 public:
  inline UpdateGraphRequest() : UpdateGraphRequest(nullptr) {}
  virtual ~UpdateGraphRequest();

  UpdateGraphRequest(const UpdateGraphRequest& from);
  UpdateGraphRequest(UpdateGraphRequest&& from) noexcept
    : UpdateGraphRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGraphRequest& operator=(const UpdateGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGraphRequest& operator=(UpdateGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGraphRequest& default_instance();

  static inline const UpdateGraphRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGraphRequest*>(
               &_UpdateGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateGraphRequest& a, UpdateGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGraphRequest* New() const final {
    return CreateMaybeMessage<UpdateGraphRequest>(nullptr);
  }

  UpdateGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGraphRequest& from);
  void MergeFrom(const UpdateGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateGraphRequest";
  }
  protected:
  explicit UpdateGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.Graph graph = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::ai::inworld::studio::v1alpha::Graph& graph() const;
  ::ai::inworld::studio::v1alpha::Graph* release_graph();
  ::ai::inworld::studio::v1alpha::Graph* mutable_graph();
  void set_allocated_graph(::ai::inworld::studio::v1alpha::Graph* graph);
  private:
  const ::ai::inworld::studio::v1alpha::Graph& _internal_graph() const;
  ::ai::inworld::studio::v1alpha::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::ai::inworld::studio::v1alpha::Graph* graph);
  ::ai::inworld::studio::v1alpha::Graph* unsafe_arena_release_graph();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::Graph* graph_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class CreateGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateGraphRequest) */ {
 public:
  inline CreateGraphRequest() : CreateGraphRequest(nullptr) {}
  virtual ~CreateGraphRequest();

  CreateGraphRequest(const CreateGraphRequest& from);
  CreateGraphRequest(CreateGraphRequest&& from) noexcept
    : CreateGraphRequest() {
    *this = ::std::move(from);
  }

  inline CreateGraphRequest& operator=(const CreateGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGraphRequest& operator=(CreateGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGraphRequest& default_instance();

  static inline const CreateGraphRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGraphRequest*>(
               &_CreateGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateGraphRequest& a, CreateGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGraphRequest* New() const final {
    return CreateMaybeMessage<CreateGraphRequest>(nullptr);
  }

  CreateGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGraphRequest& from);
  void MergeFrom(const CreateGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateGraphRequest";
  }
  protected:
  explicit CreateGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kGraphFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .ai.inworld.studio.v1alpha.Graph graph = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::ai::inworld::studio::v1alpha::Graph& graph() const;
  ::ai::inworld::studio::v1alpha::Graph* release_graph();
  ::ai::inworld::studio::v1alpha::Graph* mutable_graph();
  void set_allocated_graph(::ai::inworld::studio::v1alpha::Graph* graph);
  private:
  const ::ai::inworld::studio::v1alpha::Graph& _internal_graph() const;
  ::ai::inworld::studio::v1alpha::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::ai::inworld::studio::v1alpha::Graph* graph);
  ::ai::inworld::studio::v1alpha::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::ai::inworld::studio::v1alpha::Graph* graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class DeleteGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteGraphRequest) */ {
 public:
  inline DeleteGraphRequest() : DeleteGraphRequest(nullptr) {}
  virtual ~DeleteGraphRequest();

  DeleteGraphRequest(const DeleteGraphRequest& from);
  DeleteGraphRequest(DeleteGraphRequest&& from) noexcept
    : DeleteGraphRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGraphRequest& operator=(const DeleteGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGraphRequest& operator=(DeleteGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGraphRequest& default_instance();

  static inline const DeleteGraphRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGraphRequest*>(
               &_DeleteGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteGraphRequest& a, DeleteGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGraphRequest* New() const final {
    return CreateMaybeMessage<DeleteGraphRequest>(nullptr);
  }

  DeleteGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGraphRequest& from);
  void MergeFrom(const DeleteGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteGraphRequest";
  }
  protected:
  explicit DeleteGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class ListGraphsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListGraphsRequest) */ {
 public:
  inline ListGraphsRequest() : ListGraphsRequest(nullptr) {}
  virtual ~ListGraphsRequest();

  ListGraphsRequest(const ListGraphsRequest& from);
  ListGraphsRequest(ListGraphsRequest&& from) noexcept
    : ListGraphsRequest() {
    *this = ::std::move(from);
  }

  inline ListGraphsRequest& operator=(const ListGraphsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGraphsRequest& operator=(ListGraphsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGraphsRequest& default_instance();

  static inline const ListGraphsRequest* internal_default_instance() {
    return reinterpret_cast<const ListGraphsRequest*>(
               &_ListGraphsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListGraphsRequest& a, ListGraphsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGraphsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGraphsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGraphsRequest* New() const final {
    return CreateMaybeMessage<ListGraphsRequest>(nullptr);
  }

  ListGraphsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGraphsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGraphsRequest& from);
  void MergeFrom(const ListGraphsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGraphsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListGraphsRequest";
  }
  protected:
  explicit ListGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListGraphsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class ListGraphsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListGraphsResponse) */ {
 public:
  inline ListGraphsResponse() : ListGraphsResponse(nullptr) {}
  virtual ~ListGraphsResponse();

  ListGraphsResponse(const ListGraphsResponse& from);
  ListGraphsResponse(ListGraphsResponse&& from) noexcept
    : ListGraphsResponse() {
    *this = ::std::move(from);
  }

  inline ListGraphsResponse& operator=(const ListGraphsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGraphsResponse& operator=(ListGraphsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGraphsResponse& default_instance();

  static inline const ListGraphsResponse* internal_default_instance() {
    return reinterpret_cast<const ListGraphsResponse*>(
               &_ListGraphsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListGraphsResponse& a, ListGraphsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGraphsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGraphsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGraphsResponse* New() const final {
    return CreateMaybeMessage<ListGraphsResponse>(nullptr);
  }

  ListGraphsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGraphsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGraphsResponse& from);
  void MergeFrom(const ListGraphsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGraphsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListGraphsResponse";
  }
  protected:
  explicit ListGraphsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Graph graphs = 1;
  int graphs_size() const;
  private:
  int _internal_graphs_size() const;
  public:
  void clear_graphs();
  ::ai::inworld::studio::v1alpha::Graph* mutable_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Graph >*
      mutable_graphs();
  private:
  const ::ai::inworld::studio::v1alpha::Graph& _internal_graphs(int index) const;
  ::ai::inworld::studio::v1alpha::Graph* _internal_add_graphs();
  public:
  const ::ai::inworld::studio::v1alpha::Graph& graphs(int index) const;
  ::ai::inworld::studio::v1alpha::Graph* add_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Graph >&
      graphs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListGraphsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Graph > graphs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class ZipGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ZipGraphRequest) */ {
 public:
  inline ZipGraphRequest() : ZipGraphRequest(nullptr) {}
  virtual ~ZipGraphRequest();

  ZipGraphRequest(const ZipGraphRequest& from);
  ZipGraphRequest(ZipGraphRequest&& from) noexcept
    : ZipGraphRequest() {
    *this = ::std::move(from);
  }

  inline ZipGraphRequest& operator=(const ZipGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZipGraphRequest& operator=(ZipGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZipGraphRequest& default_instance();

  static inline const ZipGraphRequest* internal_default_instance() {
    return reinterpret_cast<const ZipGraphRequest*>(
               &_ZipGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ZipGraphRequest& a, ZipGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZipGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZipGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZipGraphRequest* New() const final {
    return CreateMaybeMessage<ZipGraphRequest>(nullptr);
  }

  ZipGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZipGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZipGraphRequest& from);
  void MergeFrom(const ZipGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZipGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ZipGraphRequest";
  }
  protected:
  explicit ZipGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ZipGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Graph

// string name = 1 [(.google.api.resource_reference) = {
inline void Graph::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Graph::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Graph.name)
  return _internal_name();
}
inline void Graph::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Graph.name)
}
inline std::string* Graph::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Graph.name)
  return _internal_mutable_name();
}
inline const std::string& Graph::_internal_name() const {
  return name_.Get();
}
inline void Graph::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Graph::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Graph.name)
}
inline void Graph::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Graph.name)
}
inline void Graph::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Graph.name)
}
inline std::string* Graph::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Graph::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Graph.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Graph::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Graph.name)
}

// string data = 2 [deprecated = true];
inline void Graph::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Graph::data() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Graph.data)
  return _internal_data();
}
inline void Graph::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Graph.data)
}
inline std::string* Graph::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Graph.data)
  return _internal_mutable_data();
}
inline const std::string& Graph::_internal_data() const {
  return data_.Get();
}
inline void Graph::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Graph::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Graph.data)
}
inline void Graph::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Graph.data)
}
inline void Graph::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Graph.data)
}
inline std::string* Graph::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Graph::release_data() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Graph.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Graph::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Graph.data)
}

// string display_name = 3;
inline void Graph::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& Graph::display_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Graph.display_name)
  return _internal_display_name();
}
inline void Graph::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Graph.display_name)
}
inline std::string* Graph::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Graph.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Graph::_internal_display_name() const {
  return display_name_.Get();
}
inline void Graph::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Graph::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Graph.display_name)
}
inline void Graph::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Graph.display_name)
}
inline void Graph::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Graph.display_name)
}
inline std::string* Graph::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Graph::release_display_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Graph.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Graph::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Graph.display_name)
}

// repeated .ai.inworld.studio.v1alpha.GraphNode nodes = 4;
inline int Graph::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Graph::nodes_size() const {
  return _internal_nodes_size();
}
inline void Graph::clear_nodes() {
  nodes_.Clear();
}
inline ::ai::inworld::studio::v1alpha::GraphNode* Graph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Graph.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode >*
Graph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Graph.nodes)
  return &nodes_;
}
inline const ::ai::inworld::studio::v1alpha::GraphNode& Graph::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::GraphNode& Graph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Graph.nodes)
  return _internal_nodes(index);
}
inline ::ai::inworld::studio::v1alpha::GraphNode* Graph::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::ai::inworld::studio::v1alpha::GraphNode* Graph::add_nodes() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Graph.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode >&
Graph::nodes() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Graph.nodes)
  return nodes_;
}

// repeated .ai.inworld.studio.v1alpha.GraphConnection connections = 5;
inline int Graph::_internal_connections_size() const {
  return connections_.size();
}
inline int Graph::connections_size() const {
  return _internal_connections_size();
}
inline void Graph::clear_connections() {
  connections_.Clear();
}
inline ::ai::inworld::studio::v1alpha::GraphConnection* Graph::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Graph.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphConnection >*
Graph::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Graph.connections)
  return &connections_;
}
inline const ::ai::inworld::studio::v1alpha::GraphConnection& Graph::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::GraphConnection& Graph::connections(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Graph.connections)
  return _internal_connections(index);
}
inline ::ai::inworld::studio::v1alpha::GraphConnection* Graph::_internal_add_connections() {
  return connections_.Add();
}
inline ::ai::inworld::studio::v1alpha::GraphConnection* Graph::add_connections() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Graph.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphConnection >&
Graph::connections() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Graph.connections)
  return connections_;
}

// -------------------------------------------------------------------

// GraphNode_Quote

// string character = 1;
inline void GraphNode_Quote::clear_character() {
  character_.ClearToEmpty();
}
inline const std::string& GraphNode_Quote::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
  return _internal_character();
}
inline void GraphNode_Quote::set_character(const std::string& value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
}
inline std::string* GraphNode_Quote::mutable_character() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
  return _internal_mutable_character();
}
inline const std::string& GraphNode_Quote::_internal_character() const {
  return character_.Get();
}
inline void GraphNode_Quote::_internal_set_character(const std::string& value) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphNode_Quote::set_character(std::string&& value) {
  
  character_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
}
inline void GraphNode_Quote::set_character(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
}
inline void GraphNode_Quote::set_character(const char* value,
    size_t size) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
}
inline std::string* GraphNode_Quote::_internal_mutable_character() {
  
  return character_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphNode_Quote::release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
  return character_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphNode_Quote::set_allocated_character(std::string* character) {
  if (character != nullptr) {
    
  } else {
    
  }
  character_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphNode.Quote.character)
}

// string text = 2;
inline void GraphNode_Quote::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& GraphNode_Quote::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
  return _internal_text();
}
inline void GraphNode_Quote::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
}
inline std::string* GraphNode_Quote::mutable_text() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
  return _internal_mutable_text();
}
inline const std::string& GraphNode_Quote::_internal_text() const {
  return text_.Get();
}
inline void GraphNode_Quote::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphNode_Quote::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
}
inline void GraphNode_Quote::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
}
inline void GraphNode_Quote::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
}
inline std::string* GraphNode_Quote::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphNode_Quote::release_text() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphNode_Quote::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphNode.Quote.text)
}

// -------------------------------------------------------------------

// GraphNode

// string name = 1 [(.google.api.resource_reference) = {
inline void GraphNode::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GraphNode::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphNode.name)
  return _internal_name();
}
inline void GraphNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphNode.name)
}
inline std::string* GraphNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphNode.name)
  return _internal_mutable_name();
}
inline const std::string& GraphNode::_internal_name() const {
  return name_.Get();
}
inline void GraphNode::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphNode::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphNode.name)
}
inline void GraphNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphNode.name)
}
inline void GraphNode::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphNode.name)
}
inline std::string* GraphNode::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphNode::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphNode.name)
}

// string scene = 2 [(.google.api.resource_reference) = {
inline void GraphNode::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& GraphNode::scene() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphNode.scene)
  return _internal_scene();
}
inline void GraphNode::set_scene(const std::string& value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphNode.scene)
}
inline std::string* GraphNode::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphNode.scene)
  return _internal_mutable_scene();
}
inline const std::string& GraphNode::_internal_scene() const {
  return scene_.Get();
}
inline void GraphNode::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphNode::set_scene(std::string&& value) {
  
  scene_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphNode.scene)
}
inline void GraphNode::set_scene(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphNode.scene)
}
inline void GraphNode::set_scene(const char* value,
    size_t size) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphNode.scene)
}
inline std::string* GraphNode::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphNode::release_scene() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphNode.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphNode::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphNode.scene)
}

// repeated .ai.inworld.studio.v1alpha.GraphNode.Quote quotes = 3;
inline int GraphNode::_internal_quotes_size() const {
  return quotes_.size();
}
inline int GraphNode::quotes_size() const {
  return _internal_quotes_size();
}
inline void GraphNode::clear_quotes() {
  quotes_.Clear();
}
inline ::ai::inworld::studio::v1alpha::GraphNode_Quote* GraphNode::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphNode.quotes)
  return quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode_Quote >*
GraphNode::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.GraphNode.quotes)
  return &quotes_;
}
inline const ::ai::inworld::studio::v1alpha::GraphNode_Quote& GraphNode::_internal_quotes(int index) const {
  return quotes_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::GraphNode_Quote& GraphNode::quotes(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphNode.quotes)
  return _internal_quotes(index);
}
inline ::ai::inworld::studio::v1alpha::GraphNode_Quote* GraphNode::_internal_add_quotes() {
  return quotes_.Add();
}
inline ::ai::inworld::studio::v1alpha::GraphNode_Quote* GraphNode::add_quotes() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.GraphNode.quotes)
  return _internal_add_quotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::GraphNode_Quote >&
GraphNode::quotes() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.GraphNode.quotes)
  return quotes_;
}

// bool is_start = 4;
inline void GraphNode::clear_is_start() {
  is_start_ = false;
}
inline bool GraphNode::_internal_is_start() const {
  return is_start_;
}
inline bool GraphNode::is_start() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphNode.is_start)
  return _internal_is_start();
}
inline void GraphNode::_internal_set_is_start(bool value) {
  
  is_start_ = value;
}
inline void GraphNode::set_is_start(bool value) {
  _internal_set_is_start(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphNode.is_start)
}

// -------------------------------------------------------------------

// GraphConnection

// string name = 1 [(.google.api.resource_reference) = {
inline void GraphConnection::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GraphConnection::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphConnection.name)
  return _internal_name();
}
inline void GraphConnection::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphConnection.name)
}
inline std::string* GraphConnection::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphConnection.name)
  return _internal_mutable_name();
}
inline const std::string& GraphConnection::_internal_name() const {
  return name_.Get();
}
inline void GraphConnection::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphConnection::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphConnection.name)
}
inline void GraphConnection::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphConnection.name)
}
inline void GraphConnection::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphConnection.name)
}
inline std::string* GraphConnection::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphConnection::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphConnection.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphConnection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphConnection.name)
}

// string node_from = 2 [(.google.api.resource_reference) = {
inline void GraphConnection::clear_node_from() {
  node_from_.ClearToEmpty();
}
inline const std::string& GraphConnection::node_from() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphConnection.node_from)
  return _internal_node_from();
}
inline void GraphConnection::set_node_from(const std::string& value) {
  _internal_set_node_from(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphConnection.node_from)
}
inline std::string* GraphConnection::mutable_node_from() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphConnection.node_from)
  return _internal_mutable_node_from();
}
inline const std::string& GraphConnection::_internal_node_from() const {
  return node_from_.Get();
}
inline void GraphConnection::_internal_set_node_from(const std::string& value) {
  
  node_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphConnection::set_node_from(std::string&& value) {
  
  node_from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphConnection.node_from)
}
inline void GraphConnection::set_node_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphConnection.node_from)
}
inline void GraphConnection::set_node_from(const char* value,
    size_t size) {
  
  node_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphConnection.node_from)
}
inline std::string* GraphConnection::_internal_mutable_node_from() {
  
  return node_from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphConnection::release_node_from() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphConnection.node_from)
  return node_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphConnection::set_allocated_node_from(std::string* node_from) {
  if (node_from != nullptr) {
    
  } else {
    
  }
  node_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphConnection.node_from)
}

// string node_to = 3 [(.google.api.resource_reference) = {
inline void GraphConnection::clear_node_to() {
  node_to_.ClearToEmpty();
}
inline const std::string& GraphConnection::node_to() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphConnection.node_to)
  return _internal_node_to();
}
inline void GraphConnection::set_node_to(const std::string& value) {
  _internal_set_node_to(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphConnection.node_to)
}
inline std::string* GraphConnection::mutable_node_to() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphConnection.node_to)
  return _internal_mutable_node_to();
}
inline const std::string& GraphConnection::_internal_node_to() const {
  return node_to_.Get();
}
inline void GraphConnection::_internal_set_node_to(const std::string& value) {
  
  node_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphConnection::set_node_to(std::string&& value) {
  
  node_to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphConnection.node_to)
}
inline void GraphConnection::set_node_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphConnection.node_to)
}
inline void GraphConnection::set_node_to(const char* value,
    size_t size) {
  
  node_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphConnection.node_to)
}
inline std::string* GraphConnection::_internal_mutable_node_to() {
  
  return node_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphConnection::release_node_to() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphConnection.node_to)
  return node_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphConnection::set_allocated_node_to(std::string* node_to) {
  if (node_to != nullptr) {
    
  } else {
    
  }
  node_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphConnection.node_to)
}

// string text = 4;
inline void GraphConnection::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& GraphConnection::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GraphConnection.text)
  return _internal_text();
}
inline void GraphConnection::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GraphConnection.text)
}
inline std::string* GraphConnection::mutable_text() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GraphConnection.text)
  return _internal_mutable_text();
}
inline const std::string& GraphConnection::_internal_text() const {
  return text_.Get();
}
inline void GraphConnection::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphConnection::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GraphConnection.text)
}
inline void GraphConnection::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GraphConnection.text)
}
inline void GraphConnection::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GraphConnection.text)
}
inline std::string* GraphConnection::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphConnection::release_text() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GraphConnection.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphConnection::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GraphConnection.text)
}

// -------------------------------------------------------------------

// GetGraphRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetGraphRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetGraphRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetGraphRequest.name)
  return _internal_name();
}
inline void GetGraphRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetGraphRequest.name)
}
inline std::string* GetGraphRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetGraphRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetGraphRequest::_internal_name() const {
  return name_.Get();
}
inline void GetGraphRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetGraphRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GetGraphRequest.name)
}
inline void GetGraphRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GetGraphRequest.name)
}
inline void GetGraphRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GetGraphRequest.name)
}
inline std::string* GetGraphRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetGraphRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetGraphRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGraphRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetGraphRequest.name)
}

// -------------------------------------------------------------------

// UpdateGraphRequest

// .ai.inworld.studio.v1alpha.Graph graph = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateGraphRequest::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool UpdateGraphRequest::has_graph() const {
  return _internal_has_graph();
}
inline void UpdateGraphRequest::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Graph& UpdateGraphRequest::_internal_graph() const {
  const ::ai::inworld::studio::v1alpha::Graph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Graph&>(
      ::ai::inworld::studio::v1alpha::_Graph_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Graph& UpdateGraphRequest::graph() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateGraphRequest.graph)
  return _internal_graph();
}
inline void UpdateGraphRequest::unsafe_arena_set_allocated_graph(
    ::ai::inworld::studio::v1alpha::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateGraphRequest.graph)
}
inline ::ai::inworld::studio::v1alpha::Graph* UpdateGraphRequest::release_graph() {
  
  ::ai::inworld::studio::v1alpha::Graph* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Graph* UpdateGraphRequest::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateGraphRequest.graph)
  
  ::ai::inworld::studio::v1alpha::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Graph* UpdateGraphRequest::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::ai::inworld::studio::v1alpha::Graph* UpdateGraphRequest::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateGraphRequest.graph)
  return _internal_mutable_graph();
}
inline void UpdateGraphRequest::set_allocated_graph(::ai::inworld::studio::v1alpha::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateGraphRequest.graph)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateGraphRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateGraphRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateGraphRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateGraphRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateGraphRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateGraphRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateGraphRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateGraphRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateGraphRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateGraphRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateGraphRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateGraphRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateGraphRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateGraphRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateGraphRequest.update_mask)
}

// -------------------------------------------------------------------

// CreateGraphRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateGraphRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateGraphRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
  return _internal_parent();
}
inline void CreateGraphRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
}
inline std::string* CreateGraphRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateGraphRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateGraphRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateGraphRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
}
inline void CreateGraphRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
}
inline void CreateGraphRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
}
inline std::string* CreateGraphRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateGraphRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGraphRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateGraphRequest.parent)
}

// .ai.inworld.studio.v1alpha.Graph graph = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateGraphRequest::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool CreateGraphRequest::has_graph() const {
  return _internal_has_graph();
}
inline void CreateGraphRequest::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Graph& CreateGraphRequest::_internal_graph() const {
  const ::ai::inworld::studio::v1alpha::Graph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Graph&>(
      ::ai::inworld::studio::v1alpha::_Graph_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Graph& CreateGraphRequest::graph() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateGraphRequest.graph)
  return _internal_graph();
}
inline void CreateGraphRequest::unsafe_arena_set_allocated_graph(
    ::ai::inworld::studio::v1alpha::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CreateGraphRequest.graph)
}
inline ::ai::inworld::studio::v1alpha::Graph* CreateGraphRequest::release_graph() {
  
  ::ai::inworld::studio::v1alpha::Graph* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Graph* CreateGraphRequest::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateGraphRequest.graph)
  
  ::ai::inworld::studio::v1alpha::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Graph* CreateGraphRequest::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::ai::inworld::studio::v1alpha::Graph* CreateGraphRequest::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateGraphRequest.graph)
  return _internal_mutable_graph();
}
inline void CreateGraphRequest::set_allocated_graph(::ai::inworld::studio::v1alpha::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateGraphRequest.graph)
}

// -------------------------------------------------------------------

// DeleteGraphRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteGraphRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteGraphRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
  return _internal_name();
}
inline void DeleteGraphRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
}
inline std::string* DeleteGraphRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteGraphRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteGraphRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteGraphRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
}
inline void DeleteGraphRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
}
inline void DeleteGraphRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
}
inline std::string* DeleteGraphRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteGraphRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteGraphRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteGraphRequest.name)
}

// -------------------------------------------------------------------

// ListGraphsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListGraphsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListGraphsRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
  return _internal_parent();
}
inline void ListGraphsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
}
inline std::string* ListGraphsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListGraphsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListGraphsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGraphsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
}
inline void ListGraphsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
}
inline void ListGraphsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
}
inline std::string* ListGraphsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGraphsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGraphsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListGraphsRequest.parent)
}

// int32 page_size = 2;
inline void ListGraphsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListGraphsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListGraphsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListGraphsRequest.page_size)
  return _internal_page_size();
}
inline void ListGraphsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListGraphsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListGraphsRequest.page_size)
}

// string page_token = 3;
inline void ListGraphsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListGraphsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
  return _internal_page_token();
}
inline void ListGraphsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
}
inline std::string* ListGraphsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListGraphsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListGraphsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGraphsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
}
inline void ListGraphsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
}
inline void ListGraphsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
}
inline std::string* ListGraphsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGraphsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGraphsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListGraphsRequest.page_token)
}

// -------------------------------------------------------------------

// ListGraphsResponse

// repeated .ai.inworld.studio.v1alpha.Graph graphs = 1;
inline int ListGraphsResponse::_internal_graphs_size() const {
  return graphs_.size();
}
inline int ListGraphsResponse::graphs_size() const {
  return _internal_graphs_size();
}
inline void ListGraphsResponse::clear_graphs() {
  graphs_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Graph* ListGraphsResponse::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListGraphsResponse.graphs)
  return graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Graph >*
ListGraphsResponse::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListGraphsResponse.graphs)
  return &graphs_;
}
inline const ::ai::inworld::studio::v1alpha::Graph& ListGraphsResponse::_internal_graphs(int index) const {
  return graphs_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Graph& ListGraphsResponse::graphs(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListGraphsResponse.graphs)
  return _internal_graphs(index);
}
inline ::ai::inworld::studio::v1alpha::Graph* ListGraphsResponse::_internal_add_graphs() {
  return graphs_.Add();
}
inline ::ai::inworld::studio::v1alpha::Graph* ListGraphsResponse::add_graphs() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListGraphsResponse.graphs)
  return _internal_add_graphs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Graph >&
ListGraphsResponse::graphs() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListGraphsResponse.graphs)
  return graphs_;
}

// string next_page_token = 2;
inline void ListGraphsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListGraphsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListGraphsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
}
inline std::string* ListGraphsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListGraphsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListGraphsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGraphsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
}
inline void ListGraphsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
}
inline void ListGraphsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
}
inline std::string* ListGraphsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGraphsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGraphsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListGraphsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ZipGraphRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ZipGraphRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ZipGraphRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
  return _internal_name();
}
inline void ZipGraphRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
}
inline std::string* ZipGraphRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ZipGraphRequest::_internal_name() const {
  return name_.Get();
}
inline void ZipGraphRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZipGraphRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
}
inline void ZipGraphRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
}
inline void ZipGraphRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
}
inline std::string* ZipGraphRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZipGraphRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZipGraphRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ZipGraphRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fnarrative_5fgraph_2eproto
