// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/apikeys.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "ai/inworld/options/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class ActivateApiKeyRequest;
struct ActivateApiKeyRequestDefaultTypeInternal;
extern ActivateApiKeyRequestDefaultTypeInternal _ActivateApiKeyRequest_default_instance_;
class ApiKey;
struct ApiKeyDefaultTypeInternal;
extern ApiKeyDefaultTypeInternal _ApiKey_default_instance_;
class ApiKey_UsageLimits;
struct ApiKey_UsageLimitsDefaultTypeInternal;
extern ApiKey_UsageLimitsDefaultTypeInternal _ApiKey_UsageLimits_default_instance_;
class DeleteApiKeyRequest;
struct DeleteApiKeyRequestDefaultTypeInternal;
extern DeleteApiKeyRequestDefaultTypeInternal _DeleteApiKeyRequest_default_instance_;
class GenerateApiKeyRequest;
struct GenerateApiKeyRequestDefaultTypeInternal;
extern GenerateApiKeyRequestDefaultTypeInternal _GenerateApiKeyRequest_default_instance_;
class ListApiKeysRequest;
struct ListApiKeysRequestDefaultTypeInternal;
extern ListApiKeysRequestDefaultTypeInternal _ListApiKeysRequest_default_instance_;
class ListApiKeysResponse;
struct ListApiKeysResponseDefaultTypeInternal;
extern ListApiKeysResponseDefaultTypeInternal _ListApiKeysResponse_default_instance_;
class SuspendApiKeyRequest;
struct SuspendApiKeyRequestDefaultTypeInternal;
extern SuspendApiKeyRequestDefaultTypeInternal _SuspendApiKeyRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
enum ApiKey_State : int {
  ApiKey_State_STATE_UNSPECIFIED = 0,
  ApiKey_State_ACTIVE = 1,
  ApiKey_State_SUSPENDED = 2,
  ApiKey_State_DELETED = 3,
  ApiKey_State_ApiKey_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ApiKey_State_ApiKey_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ApiKey_State_IsValid(int value);
extern const uint32_t ApiKey_State_internal_data_[];
constexpr ApiKey_State ApiKey_State_State_MIN = static_cast<ApiKey_State>(0);
constexpr ApiKey_State ApiKey_State_State_MAX = static_cast<ApiKey_State>(3);
constexpr int ApiKey_State_State_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ApiKey_State_descriptor();
template <typename T>
const std::string& ApiKey_State_Name(T value) {
  static_assert(std::is_same<T, ApiKey_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return ApiKey_State_Name(static_cast<ApiKey_State>(value));
}
template <>
inline const std::string& ApiKey_State_Name(ApiKey_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ApiKey_State_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ApiKey_State_Parse(absl::string_view name, ApiKey_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApiKey_State>(
      ApiKey_State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SuspendApiKeyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.SuspendApiKeyRequest) */ {
 public:
  inline SuspendApiKeyRequest() : SuspendApiKeyRequest(nullptr) {}
  ~SuspendApiKeyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SuspendApiKeyRequest(::google::protobuf::internal::ConstantInitialized);

  inline SuspendApiKeyRequest(const SuspendApiKeyRequest& from)
      : SuspendApiKeyRequest(nullptr, from) {}
  SuspendApiKeyRequest(SuspendApiKeyRequest&& from) noexcept
    : SuspendApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline SuspendApiKeyRequest& operator=(const SuspendApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendApiKeyRequest& operator=(SuspendApiKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuspendApiKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuspendApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const SuspendApiKeyRequest*>(
               &_SuspendApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SuspendApiKeyRequest& a, SuspendApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendApiKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendApiKeyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuspendApiKeyRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuspendApiKeyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SuspendApiKeyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SuspendApiKeyRequest& from) {
    SuspendApiKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SuspendApiKeyRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.SuspendApiKeyRequest";
  }
  protected:
  explicit SuspendApiKeyRequest(::google::protobuf::Arena* arena);
  SuspendApiKeyRequest(::google::protobuf::Arena* arena, const SuspendApiKeyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class ListApiKeysRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListApiKeysRequest) */ {
 public:
  inline ListApiKeysRequest() : ListApiKeysRequest(nullptr) {}
  ~ListApiKeysRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListApiKeysRequest(::google::protobuf::internal::ConstantInitialized);

  inline ListApiKeysRequest(const ListApiKeysRequest& from)
      : ListApiKeysRequest(nullptr, from) {}
  ListApiKeysRequest(ListApiKeysRequest&& from) noexcept
    : ListApiKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListApiKeysRequest& operator=(const ListApiKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApiKeysRequest& operator=(ListApiKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListApiKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListApiKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListApiKeysRequest*>(
               &_ListApiKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListApiKeysRequest& a, ListApiKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApiKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApiKeysRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListApiKeysRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListApiKeysRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListApiKeysRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListApiKeysRequest& from) {
    ListApiKeysRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListApiKeysRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListApiKeysRequest";
  }
  protected:
  explicit ListApiKeysRequest(::google::protobuf::Arena* arena);
  ListApiKeysRequest(::google::protobuf::Arena* arena, const ListApiKeysRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string page_token = 3;
  void clear_page_token() ;
  const std::string& page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* value);

  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(
      const std::string& value);
  std::string* _internal_mutable_page_token();

  public:
  // int32 page_size = 2;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListApiKeysRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr parent_;
    ::google::protobuf::internal::ArenaStringPtr page_token_;
    ::int32_t page_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class GenerateApiKeyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateApiKeyRequest) */ {
 public:
  inline GenerateApiKeyRequest() : GenerateApiKeyRequest(nullptr) {}
  ~GenerateApiKeyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenerateApiKeyRequest(::google::protobuf::internal::ConstantInitialized);

  inline GenerateApiKeyRequest(const GenerateApiKeyRequest& from)
      : GenerateApiKeyRequest(nullptr, from) {}
  GenerateApiKeyRequest(GenerateApiKeyRequest&& from) noexcept
    : GenerateApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline GenerateApiKeyRequest& operator=(const GenerateApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateApiKeyRequest& operator=(GenerateApiKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateApiKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateApiKeyRequest*>(
               &_GenerateApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenerateApiKeyRequest& a, GenerateApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateApiKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateApiKeyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateApiKeyRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateApiKeyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenerateApiKeyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GenerateApiKeyRequest& from) {
    GenerateApiKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GenerateApiKeyRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateApiKeyRequest";
  }
  protected:
  explicit GenerateApiKeyRequest(::google::protobuf::Arena* arena);
  GenerateApiKeyRequest(::google::protobuf::Arena* arena, const GenerateApiKeyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr parent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class DeleteApiKeyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteApiKeyRequest) */ {
 public:
  inline DeleteApiKeyRequest() : DeleteApiKeyRequest(nullptr) {}
  ~DeleteApiKeyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteApiKeyRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteApiKeyRequest(const DeleteApiKeyRequest& from)
      : DeleteApiKeyRequest(nullptr, from) {}
  DeleteApiKeyRequest(DeleteApiKeyRequest&& from) noexcept
    : DeleteApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteApiKeyRequest& operator=(const DeleteApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApiKeyRequest& operator=(DeleteApiKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteApiKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteApiKeyRequest*>(
               &_DeleteApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteApiKeyRequest& a, DeleteApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApiKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApiKeyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteApiKeyRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteApiKeyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteApiKeyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteApiKeyRequest& from) {
    DeleteApiKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteApiKeyRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteApiKeyRequest";
  }
  protected:
  explicit DeleteApiKeyRequest(::google::protobuf::Arena* arena);
  DeleteApiKeyRequest(::google::protobuf::Arena* arena, const DeleteApiKeyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class ActivateApiKeyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ActivateApiKeyRequest) */ {
 public:
  inline ActivateApiKeyRequest() : ActivateApiKeyRequest(nullptr) {}
  ~ActivateApiKeyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActivateApiKeyRequest(::google::protobuf::internal::ConstantInitialized);

  inline ActivateApiKeyRequest(const ActivateApiKeyRequest& from)
      : ActivateApiKeyRequest(nullptr, from) {}
  ActivateApiKeyRequest(ActivateApiKeyRequest&& from) noexcept
    : ActivateApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline ActivateApiKeyRequest& operator=(const ActivateApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateApiKeyRequest& operator=(ActivateApiKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateApiKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateApiKeyRequest*>(
               &_ActivateApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ActivateApiKeyRequest& a, ActivateApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateApiKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateApiKeyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateApiKeyRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateApiKeyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActivateApiKeyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ActivateApiKeyRequest& from) {
    ActivateApiKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActivateApiKeyRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ActivateApiKeyRequest";
  }
  protected:
  explicit ActivateApiKeyRequest(::google::protobuf::Arena* arena);
  ActivateApiKeyRequest(::google::protobuf::Arena* arena, const ActivateApiKeyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class ApiKey_UsageLimits final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ApiKey.UsageLimits) */ {
 public:
  inline ApiKey_UsageLimits() : ApiKey_UsageLimits(nullptr) {}
  ~ApiKey_UsageLimits() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiKey_UsageLimits(::google::protobuf::internal::ConstantInitialized);

  inline ApiKey_UsageLimits(const ApiKey_UsageLimits& from)
      : ApiKey_UsageLimits(nullptr, from) {}
  ApiKey_UsageLimits(ApiKey_UsageLimits&& from) noexcept
    : ApiKey_UsageLimits() {
    *this = ::std::move(from);
  }

  inline ApiKey_UsageLimits& operator=(const ApiKey_UsageLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiKey_UsageLimits& operator=(ApiKey_UsageLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiKey_UsageLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiKey_UsageLimits* internal_default_instance() {
    return reinterpret_cast<const ApiKey_UsageLimits*>(
               &_ApiKey_UsageLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApiKey_UsageLimits& a, ApiKey_UsageLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiKey_UsageLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiKey_UsageLimits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiKey_UsageLimits* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiKey_UsageLimits>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ApiKey_UsageLimits& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ApiKey_UsageLimits& from) {
    ApiKey_UsageLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ApiKey_UsageLimits* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ApiKey.UsageLimits";
  }
  protected:
  explicit ApiKey_UsageLimits(::google::protobuf::Arena* arena);
  ApiKey_UsageLimits(::google::protobuf::Arena* arena, const ApiKey_UsageLimits& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationTimeFieldNumber = 4,
    kDailyLimitSecondsAmountFieldNumber = 2,
    kTotalLimitSecondsAmountFieldNumber = 3,
    kMaxConcurrentSessionsFieldNumber = 1,
  };
  // .google.protobuf.Timestamp expiration_time = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_expiration_time() const;
  void clear_expiration_time() ;
  const ::google::protobuf::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiration_time();
  ::google::protobuf::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiration_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration_time();

  private:
  const ::google::protobuf::Timestamp& _internal_expiration_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiration_time();

  public:
  // int64 daily_limit_seconds_amount = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_daily_limit_seconds_amount() ;
  ::int64_t daily_limit_seconds_amount() const;
  void set_daily_limit_seconds_amount(::int64_t value);

  private:
  ::int64_t _internal_daily_limit_seconds_amount() const;
  void _internal_set_daily_limit_seconds_amount(::int64_t value);

  public:
  // int64 total_limit_seconds_amount = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_total_limit_seconds_amount() ;
  ::int64_t total_limit_seconds_amount() const;
  void set_total_limit_seconds_amount(::int64_t value);

  private:
  ::int64_t _internal_total_limit_seconds_amount() const;
  void _internal_set_total_limit_seconds_amount(::int64_t value);

  public:
  // int32 max_concurrent_sessions = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_max_concurrent_sessions() ;
  ::int32_t max_concurrent_sessions() const;
  void set_max_concurrent_sessions(::int32_t value);

  private:
  ::int32_t _internal_max_concurrent_sessions() const;
  void _internal_set_max_concurrent_sessions(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* expiration_time_;
    ::int64_t daily_limit_seconds_amount_;
    ::int64_t total_limit_seconds_amount_;
    ::int32_t max_concurrent_sessions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class ApiKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ApiKey) */ {
 public:
  inline ApiKey() : ApiKey(nullptr) {}
  ~ApiKey() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiKey(::google::protobuf::internal::ConstantInitialized);

  inline ApiKey(const ApiKey& from)
      : ApiKey(nullptr, from) {}
  ApiKey(ApiKey&& from) noexcept
    : ApiKey() {
    *this = ::std::move(from);
  }

  inline ApiKey& operator=(const ApiKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiKey& operator=(ApiKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiKey* internal_default_instance() {
    return reinterpret_cast<const ApiKey*>(
               &_ApiKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApiKey& a, ApiKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiKey* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ApiKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ApiKey& from) {
    ApiKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ApiKey* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ApiKey";
  }
  protected:
  explicit ApiKey(::google::protobuf::Arena* arena);
  ApiKey(::google::protobuf::Arena* arena, const ApiKey& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using UsageLimits = ApiKey_UsageLimits;

  using State = ApiKey_State;
  static constexpr State STATE_UNSPECIFIED = ApiKey_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE = ApiKey_State_ACTIVE;
  static constexpr State SUSPENDED = ApiKey_State_SUSPENDED;
  static constexpr State DELETED = ApiKey_State_DELETED;
  static inline bool State_IsValid(int value) {
    return ApiKey_State_IsValid(value);
  }
  static constexpr State State_MIN = ApiKey_State_State_MIN;
  static constexpr State State_MAX = ApiKey_State_State_MAX;
  static constexpr int State_ARRAYSIZE = ApiKey_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* State_descriptor() {
    return ApiKey_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return ApiKey_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return ApiKey_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kKeyFieldNumber = 2,
    kSecretFieldNumber = 3,
    kUsageLimitsFieldNumber = 5,
    kStateFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string secret = 3;
  void clear_secret() ;
  const std::string& secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* value);

  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(
      const std::string& value);
  std::string* _internal_mutable_secret();

  public:
  // .ai.inworld.studio.v1alpha.ApiKey.UsageLimits usage_limits = 5;
  bool has_usage_limits() const;
  void clear_usage_limits() ;
  const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits& usage_limits() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* release_usage_limits();
  ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* mutable_usage_limits();
  void set_allocated_usage_limits(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* value);
  void unsafe_arena_set_allocated_usage_limits(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* value);
  ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* unsafe_arena_release_usage_limits();

  private:
  const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits& _internal_usage_limits() const;
  ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* _internal_mutable_usage_limits();

  public:
  // .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
  void clear_state() ;
  ::ai::inworld::studio::v1alpha::ApiKey_State state() const;
  void set_state(::ai::inworld::studio::v1alpha::ApiKey_State value);

  private:
  ::ai::inworld::studio::v1alpha::ApiKey_State _internal_state() const;
  void _internal_set_state(::ai::inworld::studio::v1alpha::ApiKey_State value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ApiKey)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr secret_;
    ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* usage_limits_;
    int state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};// -------------------------------------------------------------------

class ListApiKeysResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListApiKeysResponse) */ {
 public:
  inline ListApiKeysResponse() : ListApiKeysResponse(nullptr) {}
  ~ListApiKeysResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListApiKeysResponse(::google::protobuf::internal::ConstantInitialized);

  inline ListApiKeysResponse(const ListApiKeysResponse& from)
      : ListApiKeysResponse(nullptr, from) {}
  ListApiKeysResponse(ListApiKeysResponse&& from) noexcept
    : ListApiKeysResponse() {
    *this = ::std::move(from);
  }

  inline ListApiKeysResponse& operator=(const ListApiKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApiKeysResponse& operator=(ListApiKeysResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListApiKeysResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListApiKeysResponse* internal_default_instance() {
    return reinterpret_cast<const ListApiKeysResponse*>(
               &_ListApiKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListApiKeysResponse& a, ListApiKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApiKeysResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApiKeysResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListApiKeysResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListApiKeysResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListApiKeysResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListApiKeysResponse& from) {
    ListApiKeysResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListApiKeysResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListApiKeysResponse";
  }
  protected:
  explicit ListApiKeysResponse(::google::protobuf::Arena* arena);
  ListApiKeysResponse(::google::protobuf::Arena* arena, const ListApiKeysResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiKeysFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
  int api_keys_size() const;
  private:
  int _internal_api_keys_size() const;

  public:
  void clear_api_keys() ;
  ::ai::inworld::studio::v1alpha::ApiKey* mutable_api_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey >*
      mutable_api_keys();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::ApiKey>& _internal_api_keys() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::ApiKey>* _internal_mutable_api_keys();
  public:
  const ::ai::inworld::studio::v1alpha::ApiKey& api_keys(int index) const;
  ::ai::inworld::studio::v1alpha::ApiKey* add_api_keys();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey >&
      api_keys() const;
  // string next_page_token = 2;
  void clear_next_page_token() ;
  const std::string& next_page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* value);

  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(
      const std::string& value);
  std::string* _internal_mutable_next_page_token();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListApiKeysResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey > api_keys_;
    ::google::protobuf::internal::ArenaStringPtr next_page_token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ApiKey_UsageLimits

// int32 max_concurrent_sessions = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void ApiKey_UsageLimits::clear_max_concurrent_sessions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_concurrent_sessions_ = 0;
}
inline ::int32_t ApiKey_UsageLimits::max_concurrent_sessions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.max_concurrent_sessions)
  return _internal_max_concurrent_sessions();
}
inline void ApiKey_UsageLimits::set_max_concurrent_sessions(::int32_t value) {
  _internal_set_max_concurrent_sessions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.max_concurrent_sessions)
}
inline ::int32_t ApiKey_UsageLimits::_internal_max_concurrent_sessions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_concurrent_sessions_;
}
inline void ApiKey_UsageLimits::_internal_set_max_concurrent_sessions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_concurrent_sessions_ = value;
}

// int64 daily_limit_seconds_amount = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ApiKey_UsageLimits::clear_daily_limit_seconds_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.daily_limit_seconds_amount_ = ::int64_t{0};
}
inline ::int64_t ApiKey_UsageLimits::daily_limit_seconds_amount() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.daily_limit_seconds_amount)
  return _internal_daily_limit_seconds_amount();
}
inline void ApiKey_UsageLimits::set_daily_limit_seconds_amount(::int64_t value) {
  _internal_set_daily_limit_seconds_amount(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.daily_limit_seconds_amount)
}
inline ::int64_t ApiKey_UsageLimits::_internal_daily_limit_seconds_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.daily_limit_seconds_amount_;
}
inline void ApiKey_UsageLimits::_internal_set_daily_limit_seconds_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.daily_limit_seconds_amount_ = value;
}

// int64 total_limit_seconds_amount = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ApiKey_UsageLimits::clear_total_limit_seconds_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_limit_seconds_amount_ = ::int64_t{0};
}
inline ::int64_t ApiKey_UsageLimits::total_limit_seconds_amount() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.total_limit_seconds_amount)
  return _internal_total_limit_seconds_amount();
}
inline void ApiKey_UsageLimits::set_total_limit_seconds_amount(::int64_t value) {
  _internal_set_total_limit_seconds_amount(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.total_limit_seconds_amount)
}
inline ::int64_t ApiKey_UsageLimits::_internal_total_limit_seconds_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_limit_seconds_amount_;
}
inline void ApiKey_UsageLimits::_internal_set_total_limit_seconds_amount(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_limit_seconds_amount_ = value;
}

// .google.protobuf.Timestamp expiration_time = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool ApiKey_UsageLimits::has_expiration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ApiKey_UsageLimits::_internal_expiration_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ApiKey_UsageLimits::expiration_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.expiration_time)
  return _internal_expiration_time();
}
inline void ApiKey_UsageLimits::unsafe_arena_set_allocated_expiration_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.expiration_time)
}
inline ::google::protobuf::Timestamp* ApiKey_UsageLimits::release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ApiKey_UsageLimits::unsafe_arena_release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.expiration_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ApiKey_UsageLimits::_internal_mutable_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiration_time_;
}
inline ::google::protobuf::Timestamp* ApiKey_UsageLimits::mutable_expiration_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.expiration_time)
  return _msg;
}
inline void ApiKey_UsageLimits::set_allocated_expiration_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.UsageLimits.expiration_time)
}

// -------------------------------------------------------------------

// ApiKey

// string name = 1;
inline void ApiKey::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ApiKey::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiKey::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.name)
}
inline std::string* ApiKey::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.name)
  return _s;
}
inline const std::string& ApiKey::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ApiKey::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ApiKey::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ApiKey::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.name)
  return _impl_.name_.Release();
}
inline void ApiKey::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.name)
}

// string key = 2;
inline void ApiKey::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ApiKey::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiKey::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.key)
}
inline std::string* ApiKey::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.key)
  return _s;
}
inline const std::string& ApiKey::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void ApiKey::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ApiKey::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ApiKey::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.key)
  return _impl_.key_.Release();
}
inline void ApiKey::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.key)
}

// string secret = 3;
inline void ApiKey::clear_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& ApiKey::secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiKey::set_secret(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.secret)
}
inline std::string* ApiKey::mutable_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.secret)
  return _s;
}
inline const std::string& ApiKey::_internal_secret() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_.Get();
}
inline void ApiKey::_internal_set_secret(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_.Set(value, GetArena());
}
inline std::string* ApiKey::_internal_mutable_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.secret_.Mutable( GetArena());
}
inline std::string* ApiKey::release_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.secret)
  return _impl_.secret_.Release();
}
inline void ApiKey::set_allocated_secret(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_.IsDefault()) {
          _impl_.secret_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.secret)
}

// .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
inline void ApiKey::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_ = 0;
}
inline ::ai::inworld::studio::v1alpha::ApiKey_State ApiKey::state() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.state)
  return _internal_state();
}
inline void ApiKey::set_state(::ai::inworld::studio::v1alpha::ApiKey_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.state)
}
inline ::ai::inworld::studio::v1alpha::ApiKey_State ApiKey::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::ApiKey_State>(_impl_.state_);
}
inline void ApiKey::_internal_set_state(::ai::inworld::studio::v1alpha::ApiKey_State value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_ = value;
}

// .ai.inworld.studio.v1alpha.ApiKey.UsageLimits usage_limits = 5;
inline bool ApiKey::has_usage_limits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.usage_limits_ != nullptr);
  return value;
}
inline void ApiKey::clear_usage_limits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.usage_limits_ != nullptr) _impl_.usage_limits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits& ApiKey::_internal_usage_limits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* p = _impl_.usage_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits&>(::ai::inworld::studio::v1alpha::_ApiKey_UsageLimits_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits& ApiKey::usage_limits() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.usage_limits)
  return _internal_usage_limits();
}
inline void ApiKey::unsafe_arena_set_allocated_usage_limits(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.usage_limits_);
  }
  _impl_.usage_limits_ = reinterpret_cast<::ai::inworld::studio::v1alpha::ApiKey_UsageLimits*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.ApiKey.usage_limits)
}
inline ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* ApiKey::release_usage_limits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* released = _impl_.usage_limits_;
  _impl_.usage_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* ApiKey::unsafe_arena_release_usage_limits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.usage_limits)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* temp = _impl_.usage_limits_;
  _impl_.usage_limits_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* ApiKey::_internal_mutable_usage_limits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.usage_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::ApiKey_UsageLimits>(GetArena());
    _impl_.usage_limits_ = reinterpret_cast<::ai::inworld::studio::v1alpha::ApiKey_UsageLimits*>(p);
  }
  return _impl_.usage_limits_;
}
inline ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* ApiKey::mutable_usage_limits() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* _msg = _internal_mutable_usage_limits();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.usage_limits)
  return _msg;
}
inline void ApiKey::set_allocated_usage_limits(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::ApiKey_UsageLimits*>(_impl_.usage_limits_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::ApiKey_UsageLimits*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.usage_limits_ = reinterpret_cast<::ai::inworld::studio::v1alpha::ApiKey_UsageLimits*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.usage_limits)
}

// -------------------------------------------------------------------

// GenerateApiKeyRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateApiKeyRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& GenerateApiKeyRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateApiKeyRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}
inline std::string* GenerateApiKeyRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
  return _s;
}
inline const std::string& GenerateApiKeyRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void GenerateApiKeyRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* GenerateApiKeyRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* GenerateApiKeyRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
  return _impl_.parent_.Release();
}
inline void GenerateApiKeyRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}

// -------------------------------------------------------------------

// ListApiKeysRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListApiKeysRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListApiKeysRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListApiKeysRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}
inline std::string* ListApiKeysRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
  return _s;
}
inline const std::string& ListApiKeysRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void ListApiKeysRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* ListApiKeysRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* ListApiKeysRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListApiKeysRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}

// int32 page_size = 2;
inline void ListApiKeysRequest::clear_page_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_size_ = 0;
}
inline ::int32_t ListApiKeysRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_size)
  return _internal_page_size();
}
inline void ListApiKeysRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_size)
}
inline ::int32_t ListApiKeysRequest::_internal_page_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_size_;
}
inline void ListApiKeysRequest::_internal_set_page_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_size_ = value;
}

// string page_token = 3;
inline void ListApiKeysRequest::clear_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListApiKeysRequest::page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
  return _internal_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListApiKeysRequest::set_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}
inline std::string* ListApiKeysRequest::mutable_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
  return _s;
}
inline const std::string& ListApiKeysRequest::_internal_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_token_.Get();
}
inline void ListApiKeysRequest::_internal_set_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(value, GetArena());
}
inline std::string* ListApiKeysRequest::_internal_mutable_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.page_token_.Mutable( GetArena());
}
inline std::string* ListApiKeysRequest::release_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListApiKeysRequest::set_allocated_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_token_.IsDefault()) {
          _impl_.page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}

// -------------------------------------------------------------------

// SuspendApiKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SuspendApiKeyRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SuspendApiKeyRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SuspendApiKeyRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}
inline std::string* SuspendApiKeyRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
  return _s;
}
inline const std::string& SuspendApiKeyRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SuspendApiKeyRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SuspendApiKeyRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SuspendApiKeyRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
  return _impl_.name_.Release();
}
inline void SuspendApiKeyRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}

// -------------------------------------------------------------------

// ActivateApiKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ActivateApiKeyRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ActivateApiKeyRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActivateApiKeyRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}
inline std::string* ActivateApiKeyRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
  return _s;
}
inline const std::string& ActivateApiKeyRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ActivateApiKeyRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ActivateApiKeyRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ActivateApiKeyRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
  return _impl_.name_.Release();
}
inline void ActivateApiKeyRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}

// -------------------------------------------------------------------

// DeleteApiKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteApiKeyRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteApiKeyRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteApiKeyRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}
inline std::string* DeleteApiKeyRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
  return _s;
}
inline const std::string& DeleteApiKeyRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void DeleteApiKeyRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeleteApiKeyRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeleteApiKeyRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteApiKeyRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}

// -------------------------------------------------------------------

// ListApiKeysResponse

// repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
inline int ListApiKeysResponse::_internal_api_keys_size() const {
  return _internal_api_keys().size();
}
inline int ListApiKeysResponse::api_keys_size() const {
  return _internal_api_keys_size();
}
inline void ListApiKeysResponse::clear_api_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_keys_.Clear();
}
inline ::ai::inworld::studio::v1alpha::ApiKey* ListApiKeysResponse::mutable_api_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return _internal_mutable_api_keys()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::ApiKey>* ListApiKeysResponse::mutable_api_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_api_keys();
}
inline const ::ai::inworld::studio::v1alpha::ApiKey& ListApiKeysResponse::api_keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return _internal_api_keys().Get(index);
}
inline ::ai::inworld::studio::v1alpha::ApiKey* ListApiKeysResponse::add_api_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::ApiKey* _add = _internal_mutable_api_keys()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::ApiKey>& ListApiKeysResponse::api_keys() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return _internal_api_keys();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::ApiKey>&
ListApiKeysResponse::_internal_api_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_keys_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::ApiKey>*
ListApiKeysResponse::_internal_mutable_api_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.api_keys_;
}

// string next_page_token = 2;
inline void ListApiKeysResponse::clear_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListApiKeysResponse::next_page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListApiKeysResponse::set_next_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}
inline std::string* ListApiKeysResponse::mutable_next_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
  return _s;
}
inline const std::string& ListApiKeysResponse::_internal_next_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.next_page_token_.Get();
}
inline void ListApiKeysResponse::_internal_set_next_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(value, GetArena());
}
inline std::string* ListApiKeysResponse::_internal_mutable_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.next_page_token_.Mutable( GetArena());
}
inline std::string* ListApiKeysResponse::release_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListApiKeysResponse::set_allocated_next_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_page_token_.IsDefault()) {
          _impl_.next_page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::ApiKey_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::ApiKey_State>() {
  return ::ai::inworld::studio::v1alpha::ApiKey_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_2epb_2eh
