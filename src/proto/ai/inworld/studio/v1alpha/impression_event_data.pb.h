// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/impression_event_data.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf_inworld::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class ImpressionEventData;
struct ImpressionEventDataDefaultTypeInternal;
extern ImpressionEventDataDefaultTypeInternal _ImpressionEventData_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================


// -------------------------------------------------------------------

class ImpressionEventData final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ImpressionEventData) */ {
 public:
  inline ImpressionEventData() : ImpressionEventData(nullptr) {}
  ~ImpressionEventData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImpressionEventData(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ImpressionEventData(const ImpressionEventData& from)
      : ImpressionEventData(nullptr, from) {}
  ImpressionEventData(ImpressionEventData&& from) noexcept
    : ImpressionEventData() {
    *this = ::std::move(from);
  }

  inline ImpressionEventData& operator=(const ImpressionEventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImpressionEventData& operator=(ImpressionEventData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImpressionEventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImpressionEventData* internal_default_instance() {
    return reinterpret_cast<const ImpressionEventData*>(
               &_ImpressionEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImpressionEventData& a, ImpressionEventData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImpressionEventData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImpressionEventData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImpressionEventData* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImpressionEventData>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ImpressionEventData& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ImpressionEventData& from) {
    ImpressionEventData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ImpressionEventData* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ImpressionEventData";
  }
  protected:
  explicit ImpressionEventData(::google::protobuf_inworld::Arena* arena);
  ImpressionEventData(::google::protobuf_inworld::Arena* arena, const ImpressionEventData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
    kVariantFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kStickinessFieldNumber = 4,
    kWorkspaceIdFieldNumber = 6,
    kEventTimeFieldNumber = 5,
  };
  // string feature = 1;
  void clear_feature() ;
  const std::string& feature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feature(Arg_&& arg, Args_... args);
  std::string* mutable_feature();
  PROTOBUF_NODISCARD std::string* release_feature();
  void set_allocated_feature(std::string* value);

  private:
  const std::string& _internal_feature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feature(
      const std::string& value);
  std::string* _internal_mutable_feature();

  public:
  // string variant = 2;
  void clear_variant() ;
  const std::string& variant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_variant(Arg_&& arg, Args_... args);
  std::string* mutable_variant();
  PROTOBUF_NODISCARD std::string* release_variant();
  void set_allocated_variant(std::string* value);

  private:
  const std::string& _internal_variant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variant(
      const std::string& value);
  std::string* _internal_mutable_variant();

  public:
  // string payload = 3;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // string stickiness = 4;
  void clear_stickiness() ;
  const std::string& stickiness() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stickiness(Arg_&& arg, Args_... args);
  std::string* mutable_stickiness();
  PROTOBUF_NODISCARD std::string* release_stickiness();
  void set_allocated_stickiness(std::string* value);

  private:
  const std::string& _internal_stickiness() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stickiness(
      const std::string& value);
  std::string* _internal_mutable_stickiness();

  public:
  // string workspace_id = 6;
  void clear_workspace_id() ;
  const std::string& workspace_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workspace_id(Arg_&& arg, Args_... args);
  std::string* mutable_workspace_id();
  PROTOBUF_NODISCARD std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* value);

  private:
  const std::string& _internal_workspace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace_id(
      const std::string& value);
  std::string* _internal_mutable_workspace_id();

  public:
  // .google.protobuf.Timestamp event_time = 5;
  bool has_event_time() const;
  void clear_event_time() ;
  const ::google::protobuf_inworld::Timestamp& event_time() const;
  PROTOBUF_NODISCARD ::google::protobuf_inworld::Timestamp* release_event_time();
  ::google::protobuf_inworld::Timestamp* mutable_event_time();
  void set_allocated_event_time(::google::protobuf_inworld::Timestamp* value);
  void unsafe_arena_set_allocated_event_time(::google::protobuf_inworld::Timestamp* value);
  ::google::protobuf_inworld::Timestamp* unsafe_arena_release_event_time();

  private:
  const ::google::protobuf_inworld::Timestamp& _internal_event_time() const;
  ::google::protobuf_inworld::Timestamp* _internal_mutable_event_time();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ImpressionEventData)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      3, 6, 1,
      97, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr feature_;
    ::google::protobuf_inworld::internal::ArenaStringPtr variant_;
    ::google::protobuf_inworld::internal::ArenaStringPtr payload_;
    ::google::protobuf_inworld::internal::ArenaStringPtr stickiness_;
    ::google::protobuf_inworld::internal::ArenaStringPtr workspace_id_;
    ::google::protobuf_inworld::Timestamp* event_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImpressionEventData

// string feature = 1;
inline void ImpressionEventData::clear_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.feature_.ClearToEmpty();
}
inline const std::string& ImpressionEventData::feature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ImpressionEventData.feature)
  return _internal_feature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImpressionEventData::set_feature(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.feature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ImpressionEventData.feature)
}
inline std::string* ImpressionEventData::mutable_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_feature();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ImpressionEventData.feature)
  return _s;
}
inline const std::string& ImpressionEventData::_internal_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.feature_.Get();
}
inline void ImpressionEventData::_internal_set_feature(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.feature_.Set(value, GetArena());
}
inline std::string* ImpressionEventData::_internal_mutable_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.feature_.Mutable( GetArena());
}
inline std::string* ImpressionEventData::release_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ImpressionEventData.feature)
  return _impl_.feature_.Release();
}
inline void ImpressionEventData::set_allocated_feature(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.feature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feature_.IsDefault()) {
          _impl_.feature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.feature)
}

// string variant = 2;
inline void ImpressionEventData::clear_variant() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variant_.ClearToEmpty();
}
inline const std::string& ImpressionEventData::variant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ImpressionEventData.variant)
  return _internal_variant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImpressionEventData::set_variant(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.variant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ImpressionEventData.variant)
}
inline std::string* ImpressionEventData::mutable_variant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_variant();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ImpressionEventData.variant)
  return _s;
}
inline const std::string& ImpressionEventData::_internal_variant() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variant_.Get();
}
inline void ImpressionEventData::_internal_set_variant(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.variant_.Set(value, GetArena());
}
inline std::string* ImpressionEventData::_internal_mutable_variant() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.variant_.Mutable( GetArena());
}
inline std::string* ImpressionEventData::release_variant() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ImpressionEventData.variant)
  return _impl_.variant_.Release();
}
inline void ImpressionEventData::set_allocated_variant(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variant_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.variant_.IsDefault()) {
          _impl_.variant_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.variant)
}

// string payload = 3;
inline void ImpressionEventData::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& ImpressionEventData::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ImpressionEventData.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImpressionEventData::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ImpressionEventData.payload)
}
inline std::string* ImpressionEventData::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ImpressionEventData.payload)
  return _s;
}
inline const std::string& ImpressionEventData::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void ImpressionEventData::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* ImpressionEventData::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* ImpressionEventData::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ImpressionEventData.payload)
  return _impl_.payload_.Release();
}
inline void ImpressionEventData::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.payload)
}

// string stickiness = 4;
inline void ImpressionEventData::clear_stickiness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stickiness_.ClearToEmpty();
}
inline const std::string& ImpressionEventData::stickiness() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ImpressionEventData.stickiness)
  return _internal_stickiness();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImpressionEventData::set_stickiness(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stickiness_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ImpressionEventData.stickiness)
}
inline std::string* ImpressionEventData::mutable_stickiness() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stickiness();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ImpressionEventData.stickiness)
  return _s;
}
inline const std::string& ImpressionEventData::_internal_stickiness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stickiness_.Get();
}
inline void ImpressionEventData::_internal_set_stickiness(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stickiness_.Set(value, GetArena());
}
inline std::string* ImpressionEventData::_internal_mutable_stickiness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stickiness_.Mutable( GetArena());
}
inline std::string* ImpressionEventData::release_stickiness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ImpressionEventData.stickiness)
  return _impl_.stickiness_.Release();
}
inline void ImpressionEventData::set_allocated_stickiness(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stickiness_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stickiness_.IsDefault()) {
          _impl_.stickiness_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.stickiness)
}

// .google.protobuf.Timestamp event_time = 5;
inline bool ImpressionEventData::has_event_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_time_ != nullptr);
  return value;
}
inline const ::google::protobuf_inworld::Timestamp& ImpressionEventData::_internal_event_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf_inworld::Timestamp* p = _impl_.event_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf_inworld::Timestamp&>(::google::protobuf_inworld::_Timestamp_default_instance_);
}
inline const ::google::protobuf_inworld::Timestamp& ImpressionEventData::event_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ImpressionEventData.event_time)
  return _internal_event_time();
}
inline void ImpressionEventData::unsafe_arena_set_allocated_event_time(::google::protobuf_inworld::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.event_time_);
  }
  _impl_.event_time_ = reinterpret_cast<::google::protobuf_inworld::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.event_time)
}
inline ::google::protobuf_inworld::Timestamp* ImpressionEventData::release_event_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf_inworld::Timestamp* released = _impl_.event_time_;
  _impl_.event_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf_inworld::Timestamp* ImpressionEventData::unsafe_arena_release_event_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ImpressionEventData.event_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf_inworld::Timestamp* temp = _impl_.event_time_;
  _impl_.event_time_ = nullptr;
  return temp;
}
inline ::google::protobuf_inworld::Timestamp* ImpressionEventData::_internal_mutable_event_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.event_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf_inworld::Timestamp>(GetArena());
    _impl_.event_time_ = reinterpret_cast<::google::protobuf_inworld::Timestamp*>(p);
  }
  return _impl_.event_time_;
}
inline ::google::protobuf_inworld::Timestamp* ImpressionEventData::mutable_event_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf_inworld::Timestamp* _msg = _internal_mutable_event_time();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ImpressionEventData.event_time)
  return _msg;
}
inline void ImpressionEventData::set_allocated_event_time(::google::protobuf_inworld::Timestamp* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.event_time_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.event_time_ = reinterpret_cast<::google::protobuf_inworld::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.event_time)
}

// string workspace_id = 6;
inline void ImpressionEventData::clear_workspace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.workspace_id_.ClearToEmpty();
}
inline const std::string& ImpressionEventData::workspace_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ImpressionEventData.workspace_id)
  return _internal_workspace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImpressionEventData::set_workspace_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.workspace_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ImpressionEventData.workspace_id)
}
inline std::string* ImpressionEventData::mutable_workspace_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_workspace_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ImpressionEventData.workspace_id)
  return _s;
}
inline const std::string& ImpressionEventData::_internal_workspace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.workspace_id_.Get();
}
inline void ImpressionEventData::_internal_set_workspace_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.workspace_id_.Set(value, GetArena());
}
inline std::string* ImpressionEventData::_internal_mutable_workspace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.workspace_id_.Mutable( GetArena());
}
inline std::string* ImpressionEventData::release_workspace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ImpressionEventData.workspace_id)
  return _impl_.workspace_id_.Release();
}
inline void ImpressionEventData::set_allocated_workspace_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.workspace_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.workspace_id_.IsDefault()) {
          _impl_.workspace_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ImpressionEventData.workspace_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto_2epb_2eh
