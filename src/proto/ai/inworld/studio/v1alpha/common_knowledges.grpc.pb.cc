// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/common_knowledges.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/common_knowledges.pb.h"
#include "ai/inworld/studio/v1alpha/common_knowledges.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* CommonKnowledges_method_names[] = {
  "/ai.inworld.studio.v1alpha.CommonKnowledges/GetCommonKnowledge",
  "/ai.inworld.studio.v1alpha.CommonKnowledges/ListCommonKnowledges",
  "/ai.inworld.studio.v1alpha.CommonKnowledges/UpdateCommonKnowledge",
  "/ai.inworld.studio.v1alpha.CommonKnowledges/CreateCommonKnowledge",
  "/ai.inworld.studio.v1alpha.CommonKnowledges/DeleteCommonKnowledge",
};

std::unique_ptr< CommonKnowledges::Stub> CommonKnowledges::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CommonKnowledges::Stub> stub(new CommonKnowledges::Stub(channel, options));
  return stub;
}

CommonKnowledges::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCommonKnowledge_(CommonKnowledges_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCommonKnowledges_(CommonKnowledges_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCommonKnowledge_(CommonKnowledges_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCommonKnowledge_(CommonKnowledges_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCommonKnowledge_(CommonKnowledges_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CommonKnowledges::Stub::GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCommonKnowledge_, context, request, response);
}

void CommonKnowledges::Stub::async::GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCommonKnowledge_, context, request, response, std::move(f));
}

void CommonKnowledges::Stub::async::GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCommonKnowledge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* CommonKnowledges::Stub::PrepareAsyncGetCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::CommonKnowledge, ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCommonKnowledge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* CommonKnowledges::Stub::AsyncGetCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCommonKnowledgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommonKnowledges::Stub::ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCommonKnowledges_, context, request, response);
}

void CommonKnowledges::Stub::async::ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCommonKnowledges_, context, request, response, std::move(f));
}

void CommonKnowledges::Stub::async::ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCommonKnowledges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* CommonKnowledges::Stub::PrepareAsyncListCommonKnowledgesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCommonKnowledges_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* CommonKnowledges::Stub::AsyncListCommonKnowledgesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCommonKnowledgesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommonKnowledges::Stub::UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCommonKnowledge_, context, request, response);
}

void CommonKnowledges::Stub::async::UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCommonKnowledge_, context, request, response, std::move(f));
}

void CommonKnowledges::Stub::async::UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCommonKnowledge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* CommonKnowledges::Stub::PrepareAsyncUpdateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::CommonKnowledge, ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCommonKnowledge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* CommonKnowledges::Stub::AsyncUpdateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCommonKnowledgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommonKnowledges::Stub::CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCommonKnowledge_, context, request, response);
}

void CommonKnowledges::Stub::async::CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCommonKnowledge_, context, request, response, std::move(f));
}

void CommonKnowledges::Stub::async::CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCommonKnowledge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* CommonKnowledges::Stub::PrepareAsyncCreateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::CommonKnowledge, ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCommonKnowledge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* CommonKnowledges::Stub::AsyncCreateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCommonKnowledgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommonKnowledges::Stub::DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCommonKnowledge_, context, request, response);
}

void CommonKnowledges::Stub::async::DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCommonKnowledge_, context, request, response, std::move(f));
}

void CommonKnowledges::Stub::async::DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCommonKnowledge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CommonKnowledges::Stub::PrepareAsyncDeleteCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCommonKnowledge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CommonKnowledges::Stub::AsyncDeleteCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCommonKnowledgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

CommonKnowledges::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommonKnowledges_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommonKnowledges::Service, ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommonKnowledges::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* req,
             ::ai::inworld::studio::v1alpha::CommonKnowledge* resp) {
               return service->GetCommonKnowledge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommonKnowledges_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommonKnowledges::Service, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommonKnowledges::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* req,
             ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* resp) {
               return service->ListCommonKnowledges(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommonKnowledges_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommonKnowledges::Service, ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommonKnowledges::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* req,
             ::ai::inworld::studio::v1alpha::CommonKnowledge* resp) {
               return service->UpdateCommonKnowledge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommonKnowledges_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommonKnowledges::Service, ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommonKnowledges::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* req,
             ::ai::inworld::studio::v1alpha::CommonKnowledge* resp) {
               return service->CreateCommonKnowledge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommonKnowledges_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommonKnowledges::Service, ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommonKnowledges::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteCommonKnowledge(ctx, req, resp);
             }, this)));
}

CommonKnowledges::Service::~Service() {
}

::grpc::Status CommonKnowledges::Service::GetCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommonKnowledges::Service::ListCommonKnowledges(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommonKnowledges::Service::UpdateCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommonKnowledges::Service::CreateCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommonKnowledges::Service::DeleteCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

