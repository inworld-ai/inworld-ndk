// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/characters.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "ai/inworld/options/options.pb.h"
#include "ai/inworld/studio/v1alpha/behavioral_contexts.pb.h"
#include "ai/inworld/studio/v1alpha/scenes.pb.h"
#include "ai/inworld/voices/voices.pb.h"
#include "ai/inworld/language_codes/language_codes.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf_inworld::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class CharacterAdvancedSettings;
struct CharacterAdvancedSettingsDefaultTypeInternal;
extern CharacterAdvancedSettingsDefaultTypeInternal _CharacterAdvancedSettings_default_instance_;
class CharacterAdvancedSettings_ConversationConfig;
struct CharacterAdvancedSettings_ConversationConfigDefaultTypeInternal;
extern CharacterAdvancedSettings_ConversationConfigDefaultTypeInternal _CharacterAdvancedSettings_ConversationConfig_default_instance_;
class CharacterAdvancedSettings_ConversationConfig_EngineSpec;
struct CharacterAdvancedSettings_ConversationConfig_EngineSpecDefaultTypeInternal;
extern CharacterAdvancedSettings_ConversationConfig_EngineSpecDefaultTypeInternal _CharacterAdvancedSettings_ConversationConfig_EngineSpec_default_instance_;
class CharacterAdvancedSettings_SafetySpec;
struct CharacterAdvancedSettings_SafetySpecDefaultTypeInternal;
extern CharacterAdvancedSettings_SafetySpecDefaultTypeInternal _CharacterAdvancedSettings_SafetySpec_default_instance_;
class CharacterShareInfo;
struct CharacterShareInfoDefaultTypeInternal;
extern CharacterShareInfoDefaultTypeInternal _CharacterShareInfo_default_instance_;
class Character_CharacterAssets;
struct Character_CharacterAssetsDefaultTypeInternal;
extern Character_CharacterAssetsDefaultTypeInternal _Character_CharacterAssets_default_instance_;
class Character_CharacterDescription;
struct Character_CharacterDescriptionDefaultTypeInternal;
extern Character_CharacterDescriptionDefaultTypeInternal _Character_CharacterDescription_default_instance_;
class Character_CharacterDescription_CustomDialogStyle;
struct Character_CharacterDescription_CustomDialogStyleDefaultTypeInternal;
extern Character_CharacterDescription_CustomDialogStyleDefaultTypeInternal _Character_CharacterDescription_CustomDialogStyle_default_instance_;
class Character_CharacterInitialMood;
struct Character_CharacterInitialMoodDefaultTypeInternal;
extern Character_CharacterInitialMoodDefaultTypeInternal _Character_CharacterInitialMood_default_instance_;
class Character_CharacterPersonality;
struct Character_CharacterPersonalityDefaultTypeInternal;
extern Character_CharacterPersonalityDefaultTypeInternal _Character_CharacterPersonality_default_instance_;
class Character_Fact;
struct Character_FactDefaultTypeInternal;
extern Character_FactDefaultTypeInternal _Character_Fact_default_instance_;
class Character_LongTermCoherence;
struct Character_LongTermCoherenceDefaultTypeInternal;
extern Character_LongTermCoherenceDefaultTypeInternal _Character_LongTermCoherence_default_instance_;
class Character_Meta;
struct Character_MetaDefaultTypeInternal;
extern Character_MetaDefaultTypeInternal _Character_Meta_default_instance_;
class Character_Relationship;
struct Character_RelationshipDefaultTypeInternal;
extern Character_RelationshipDefaultTypeInternal _Character_Relationship_default_instance_;
class Character_SafetyConfigEntry_DoNotUse;
struct Character_SafetyConfigEntry_DoNotUseDefaultTypeInternal;
extern Character_SafetyConfigEntry_DoNotUseDefaultTypeInternal _Character_SafetyConfigEntry_DoNotUse_default_instance_;
class Character_SharedPortalInfo;
struct Character_SharedPortalInfoDefaultTypeInternal;
extern Character_SharedPortalInfoDefaultTypeInternal _Character_SharedPortalInfo_default_instance_;
class Character_SharedPortalInfo_InteractionCountStat;
struct Character_SharedPortalInfo_InteractionCountStatDefaultTypeInternal;
extern Character_SharedPortalInfo_InteractionCountStatDefaultTypeInternal _Character_SharedPortalInfo_InteractionCountStat_default_instance_;
class CheckDeployInfoRequest;
struct CheckDeployInfoRequestDefaultTypeInternal;
extern CheckDeployInfoRequestDefaultTypeInternal _CheckDeployInfoRequest_default_instance_;
class CheckDeployInfoResponse;
struct CheckDeployInfoResponseDefaultTypeInternal;
extern CheckDeployInfoResponseDefaultTypeInternal _CheckDeployInfoResponse_default_instance_;
class CloneCharacterRequest;
struct CloneCharacterRequestDefaultTypeInternal;
extern CloneCharacterRequestDefaultTypeInternal _CloneCharacterRequest_default_instance_;
class CreateCharacterMetadata;
struct CreateCharacterMetadataDefaultTypeInternal;
extern CreateCharacterMetadataDefaultTypeInternal _CreateCharacterMetadata_default_instance_;
class CreateCharacterRequest;
struct CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class DeleteCharacterRequest;
struct DeleteCharacterRequestDefaultTypeInternal;
extern DeleteCharacterRequestDefaultTypeInternal _DeleteCharacterRequest_default_instance_;
class DeployCharacterAsyncMetadata;
struct DeployCharacterAsyncMetadataDefaultTypeInternal;
extern DeployCharacterAsyncMetadataDefaultTypeInternal _DeployCharacterAsyncMetadata_default_instance_;
class DeployCharacterAsyncResponse;
struct DeployCharacterAsyncResponseDefaultTypeInternal;
extern DeployCharacterAsyncResponseDefaultTypeInternal _DeployCharacterAsyncResponse_default_instance_;
class DeployCharacterRequest;
struct DeployCharacterRequestDefaultTypeInternal;
extern DeployCharacterRequestDefaultTypeInternal _DeployCharacterRequest_default_instance_;
class GetCharacterAdvancedSettingsRequest;
struct GetCharacterAdvancedSettingsRequestDefaultTypeInternal;
extern GetCharacterAdvancedSettingsRequestDefaultTypeInternal _GetCharacterAdvancedSettingsRequest_default_instance_;
class GetCharacterRequest;
struct GetCharacterRequestDefaultTypeInternal;
extern GetCharacterRequestDefaultTypeInternal _GetCharacterRequest_default_instance_;
class GetCharacterShareInfoRequest;
struct GetCharacterShareInfoRequestDefaultTypeInternal;
extern GetCharacterShareInfoRequestDefaultTypeInternal _GetCharacterShareInfoRequest_default_instance_;
class ListCharactersRequest;
struct ListCharactersRequestDefaultTypeInternal;
extern ListCharactersRequestDefaultTypeInternal _ListCharactersRequest_default_instance_;
class ListCharactersResponse;
struct ListCharactersResponseDefaultTypeInternal;
extern ListCharactersResponseDefaultTypeInternal _ListCharactersResponse_default_instance_;
class ListSharedCharactersRequest;
struct ListSharedCharactersRequestDefaultTypeInternal;
extern ListSharedCharactersRequestDefaultTypeInternal _ListSharedCharactersRequest_default_instance_;
class ListSharedCharactersResponse;
struct ListSharedCharactersResponseDefaultTypeInternal;
extern ListSharedCharactersResponseDefaultTypeInternal _ListSharedCharactersResponse_default_instance_;
class PreviewPromptTempalteResponse;
struct PreviewPromptTempalteResponseDefaultTypeInternal;
extern PreviewPromptTempalteResponseDefaultTypeInternal _PreviewPromptTempalteResponse_default_instance_;
class PreviewPromptTemplateRequest;
struct PreviewPromptTemplateRequestDefaultTypeInternal;
extern PreviewPromptTemplateRequestDefaultTypeInternal _PreviewPromptTemplateRequest_default_instance_;
class ReplaceCharacterImageRequest;
struct ReplaceCharacterImageRequestDefaultTypeInternal;
extern ReplaceCharacterImageRequestDefaultTypeInternal _ReplaceCharacterImageRequest_default_instance_;
class ReplaceCharacterRpmModelRequest;
struct ReplaceCharacterRpmModelRequestDefaultTypeInternal;
extern ReplaceCharacterRpmModelRequestDefaultTypeInternal _ReplaceCharacterRpmModelRequest_default_instance_;
class ShareCharacterPortalRequest;
struct ShareCharacterPortalRequestDefaultTypeInternal;
extern ShareCharacterPortalRequestDefaultTypeInternal _ShareCharacterPortalRequest_default_instance_;
class ShareCharacterRequest;
struct ShareCharacterRequestDefaultTypeInternal;
extern ShareCharacterRequestDefaultTypeInternal _ShareCharacterRequest_default_instance_;
class UnshareCharacterPortalRequest;
struct UnshareCharacterPortalRequestDefaultTypeInternal;
extern UnshareCharacterPortalRequestDefaultTypeInternal _UnshareCharacterPortalRequest_default_instance_;
class UpdateCharacterAdvancedSettingsRequest;
struct UpdateCharacterAdvancedSettingsRequestDefaultTypeInternal;
extern UpdateCharacterAdvancedSettingsRequestDefaultTypeInternal _UpdateCharacterAdvancedSettingsRequest_default_instance_;
class UpdateCharacterRequest;
struct UpdateCharacterRequestDefaultTypeInternal;
extern UpdateCharacterRequestDefaultTypeInternal _UpdateCharacterRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
enum Character_CharacterDescription_Pronoun : int {
  Character_CharacterDescription_Pronoun_PRONOUN_UNSPECIFIED = 0,
  Character_CharacterDescription_Pronoun_PRONOUN_FEMALE = 1,
  Character_CharacterDescription_Pronoun_PRONOUN_MALE = 2,
  Character_CharacterDescription_Pronoun_PRONOUN_OTHER = 3,
  Character_CharacterDescription_Pronoun_Character_CharacterDescription_Pronoun_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_CharacterDescription_Pronoun_Character_CharacterDescription_Pronoun_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_CharacterDescription_Pronoun_IsValid(int value);
extern const uint32_t Character_CharacterDescription_Pronoun_internal_data_[];
constexpr Character_CharacterDescription_Pronoun Character_CharacterDescription_Pronoun_Pronoun_MIN = static_cast<Character_CharacterDescription_Pronoun>(0);
constexpr Character_CharacterDescription_Pronoun Character_CharacterDescription_Pronoun_Pronoun_MAX = static_cast<Character_CharacterDescription_Pronoun>(3);
constexpr int Character_CharacterDescription_Pronoun_Pronoun_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_CharacterDescription_Pronoun_descriptor();
template <typename T>
const std::string& Character_CharacterDescription_Pronoun_Name(T value) {
  static_assert(std::is_same<T, Character_CharacterDescription_Pronoun>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Pronoun_Name().");
  return Character_CharacterDescription_Pronoun_Name(static_cast<Character_CharacterDescription_Pronoun>(value));
}
template <>
inline const std::string& Character_CharacterDescription_Pronoun_Name(Character_CharacterDescription_Pronoun value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_CharacterDescription_Pronoun_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Character_CharacterDescription_Pronoun_Parse(absl::string_view name, Character_CharacterDescription_Pronoun* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_CharacterDescription_Pronoun>(
      Character_CharacterDescription_Pronoun_descriptor(), name, value);
}
enum Character_CharacterDescription_ExampleDialogStyle : int {
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_UNSPECIFIED = 0,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_DEFAULT = 1,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BUBBLY = 2,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_FORMAL = 3,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BLUNT = 4,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_INQUISITIVE = 5,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_COMMANDING = 6,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_EMPATHETIC = 7,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_ENTERTAINING = 8,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_HYPOCHONDRIAC = 9,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_LAIDBACK = 10,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_LONG_WINDED = 11,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_MORAL = 12,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_MYSTERIOUS = 13,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_RACONTEUR = 14,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_SARCASTIC = 15,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_TENACIOUS = 16,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_VILLAINOUS = 17,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_CUSTOM = 18,
  Character_CharacterDescription_ExampleDialogStyle_Character_CharacterDescription_ExampleDialogStyle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_CharacterDescription_ExampleDialogStyle_Character_CharacterDescription_ExampleDialogStyle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_CharacterDescription_ExampleDialogStyle_IsValid(int value);
extern const uint32_t Character_CharacterDescription_ExampleDialogStyle_internal_data_[];
constexpr Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MIN = static_cast<Character_CharacterDescription_ExampleDialogStyle>(0);
constexpr Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MAX = static_cast<Character_CharacterDescription_ExampleDialogStyle>(18);
constexpr int Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_ARRAYSIZE = 18 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_CharacterDescription_ExampleDialogStyle_descriptor();
template <typename T>
const std::string& Character_CharacterDescription_ExampleDialogStyle_Name(T value) {
  static_assert(std::is_same<T, Character_CharacterDescription_ExampleDialogStyle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExampleDialogStyle_Name().");
  return Character_CharacterDescription_ExampleDialogStyle_Name(static_cast<Character_CharacterDescription_ExampleDialogStyle>(value));
}
template <>
inline const std::string& Character_CharacterDescription_ExampleDialogStyle_Name(Character_CharacterDescription_ExampleDialogStyle value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_CharacterDescription_ExampleDialogStyle_descriptor,
                                                 0, 18>(
      static_cast<int>(value));
}
inline bool Character_CharacterDescription_ExampleDialogStyle_Parse(absl::string_view name, Character_CharacterDescription_ExampleDialogStyle* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_CharacterDescription_ExampleDialogStyle>(
      Character_CharacterDescription_ExampleDialogStyle_descriptor(), name, value);
}
enum Character_CharacterDescription_LifeStage : int {
  Character_CharacterDescription_LifeStage_LIFE_STAGE_UNSPECIFIED = 0,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_INFANCY [[deprecated]] = 1,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_TODDLERHOOD [[deprecated]] = 2,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_PRESCHOOL [[deprecated]] = 3,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_EARLY_SCHOOL [[deprecated]] = 4,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_ADOLESCENCE = 5,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_YOUNG_ADULTHOOD = 6,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_MIDDLE_ADULTHOOD = 7,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_LATE_ADULTHOOD = 8,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_CHILDHOOD = 9,
  Character_CharacterDescription_LifeStage_Character_CharacterDescription_LifeStage_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_CharacterDescription_LifeStage_Character_CharacterDescription_LifeStage_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_CharacterDescription_LifeStage_IsValid(int value);
extern const uint32_t Character_CharacterDescription_LifeStage_internal_data_[];
constexpr Character_CharacterDescription_LifeStage Character_CharacterDescription_LifeStage_LifeStage_MIN = static_cast<Character_CharacterDescription_LifeStage>(0);
constexpr Character_CharacterDescription_LifeStage Character_CharacterDescription_LifeStage_LifeStage_MAX = static_cast<Character_CharacterDescription_LifeStage>(9);
constexpr int Character_CharacterDescription_LifeStage_LifeStage_ARRAYSIZE = 9 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_CharacterDescription_LifeStage_descriptor();
template <typename T>
const std::string& Character_CharacterDescription_LifeStage_Name(T value) {
  static_assert(std::is_same<T, Character_CharacterDescription_LifeStage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LifeStage_Name().");
  return Character_CharacterDescription_LifeStage_Name(static_cast<Character_CharacterDescription_LifeStage>(value));
}
template <>
inline const std::string& Character_CharacterDescription_LifeStage_Name(Character_CharacterDescription_LifeStage value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_CharacterDescription_LifeStage_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool Character_CharacterDescription_LifeStage_Parse(absl::string_view name, Character_CharacterDescription_LifeStage* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_CharacterDescription_LifeStage>(
      Character_CharacterDescription_LifeStage_descriptor(), name, value);
}
enum Character_CharacterDescription_DialogResponseLength : int {
  Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_UNSPECIFIED = 0,
  Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_VERY_SHORT = 1,
  Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_SHORT = 2,
  Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_MEDIUM = 3,
  Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_LONG = 4,
  Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_VERY_LONG = 5,
  Character_CharacterDescription_DialogResponseLength_Character_CharacterDescription_DialogResponseLength_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_CharacterDescription_DialogResponseLength_Character_CharacterDescription_DialogResponseLength_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_CharacterDescription_DialogResponseLength_IsValid(int value);
extern const uint32_t Character_CharacterDescription_DialogResponseLength_internal_data_[];
constexpr Character_CharacterDescription_DialogResponseLength Character_CharacterDescription_DialogResponseLength_DialogResponseLength_MIN = static_cast<Character_CharacterDescription_DialogResponseLength>(0);
constexpr Character_CharacterDescription_DialogResponseLength Character_CharacterDescription_DialogResponseLength_DialogResponseLength_MAX = static_cast<Character_CharacterDescription_DialogResponseLength>(5);
constexpr int Character_CharacterDescription_DialogResponseLength_DialogResponseLength_ARRAYSIZE = 5 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_CharacterDescription_DialogResponseLength_descriptor();
template <typename T>
const std::string& Character_CharacterDescription_DialogResponseLength_Name(T value) {
  static_assert(std::is_same<T, Character_CharacterDescription_DialogResponseLength>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DialogResponseLength_Name().");
  return Character_CharacterDescription_DialogResponseLength_Name(static_cast<Character_CharacterDescription_DialogResponseLength>(value));
}
template <>
inline const std::string& Character_CharacterDescription_DialogResponseLength_Name(Character_CharacterDescription_DialogResponseLength value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_CharacterDescription_DialogResponseLength_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Character_CharacterDescription_DialogResponseLength_Parse(absl::string_view name, Character_CharacterDescription_DialogResponseLength* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_CharacterDescription_DialogResponseLength>(
      Character_CharacterDescription_DialogResponseLength_descriptor(), name, value);
}
enum Character_CharacterAssets_AvatarType : int {
  Character_CharacterAssets_AvatarType_AVATAR_TYPE_UNSPECIFIED = 0,
  Character_CharacterAssets_AvatarType_AVATAR_TYPE_RPM = 1,
  Character_CharacterAssets_AvatarType_AVATAR_TYPE_INWORLD = 2,
  Character_CharacterAssets_AvatarType_Character_CharacterAssets_AvatarType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_CharacterAssets_AvatarType_Character_CharacterAssets_AvatarType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_CharacterAssets_AvatarType_IsValid(int value);
extern const uint32_t Character_CharacterAssets_AvatarType_internal_data_[];
constexpr Character_CharacterAssets_AvatarType Character_CharacterAssets_AvatarType_AvatarType_MIN = static_cast<Character_CharacterAssets_AvatarType>(0);
constexpr Character_CharacterAssets_AvatarType Character_CharacterAssets_AvatarType_AvatarType_MAX = static_cast<Character_CharacterAssets_AvatarType>(2);
constexpr int Character_CharacterAssets_AvatarType_AvatarType_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_CharacterAssets_AvatarType_descriptor();
template <typename T>
const std::string& Character_CharacterAssets_AvatarType_Name(T value) {
  static_assert(std::is_same<T, Character_CharacterAssets_AvatarType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AvatarType_Name().");
  return Character_CharacterAssets_AvatarType_Name(static_cast<Character_CharacterAssets_AvatarType>(value));
}
template <>
inline const std::string& Character_CharacterAssets_AvatarType_Name(Character_CharacterAssets_AvatarType value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_CharacterAssets_AvatarType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Character_CharacterAssets_AvatarType_Parse(absl::string_view name, Character_CharacterAssets_AvatarType* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_CharacterAssets_AvatarType>(
      Character_CharacterAssets_AvatarType_descriptor(), name, value);
}
enum Character_CharacterAssets_AvatarDisplayImageSource : int {
  Character_CharacterAssets_AvatarDisplayImageSource_AVATAR_DISPLAY_IMAGE_SOURCE_UNSPECIFIED = 0,
  Character_CharacterAssets_AvatarDisplayImageSource_RPM_IMAGE = 1,
  Character_CharacterAssets_AvatarDisplayImageSource_INNEQUIN_IMAGE = 2,
  Character_CharacterAssets_AvatarDisplayImageSource_USER_PROVIDED_IMAGE = 3,
  Character_CharacterAssets_AvatarDisplayImageSource_Character_CharacterAssets_AvatarDisplayImageSource_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_CharacterAssets_AvatarDisplayImageSource_Character_CharacterAssets_AvatarDisplayImageSource_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_CharacterAssets_AvatarDisplayImageSource_IsValid(int value);
extern const uint32_t Character_CharacterAssets_AvatarDisplayImageSource_internal_data_[];
constexpr Character_CharacterAssets_AvatarDisplayImageSource Character_CharacterAssets_AvatarDisplayImageSource_AvatarDisplayImageSource_MIN = static_cast<Character_CharacterAssets_AvatarDisplayImageSource>(0);
constexpr Character_CharacterAssets_AvatarDisplayImageSource Character_CharacterAssets_AvatarDisplayImageSource_AvatarDisplayImageSource_MAX = static_cast<Character_CharacterAssets_AvatarDisplayImageSource>(3);
constexpr int Character_CharacterAssets_AvatarDisplayImageSource_AvatarDisplayImageSource_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_CharacterAssets_AvatarDisplayImageSource_descriptor();
template <typename T>
const std::string& Character_CharacterAssets_AvatarDisplayImageSource_Name(T value) {
  static_assert(std::is_same<T, Character_CharacterAssets_AvatarDisplayImageSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AvatarDisplayImageSource_Name().");
  return Character_CharacterAssets_AvatarDisplayImageSource_Name(static_cast<Character_CharacterAssets_AvatarDisplayImageSource>(value));
}
template <>
inline const std::string& Character_CharacterAssets_AvatarDisplayImageSource_Name(Character_CharacterAssets_AvatarDisplayImageSource value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_CharacterAssets_AvatarDisplayImageSource_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Character_CharacterAssets_AvatarDisplayImageSource_Parse(absl::string_view name, Character_CharacterAssets_AvatarDisplayImageSource* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_CharacterAssets_AvatarDisplayImageSource>(
      Character_CharacterAssets_AvatarDisplayImageSource_descriptor(), name, value);
}
enum Character_Tag : int {
  Character_Tag_TAG_UNSPECIFIED = 0,
  Character_Tag_TAG_MEMORY = 1,
  Character_Tag_TAG_APPEARANCE = 2,
  Character_Tag_Character_Tag_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_Tag_Character_Tag_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_Tag_IsValid(int value);
extern const uint32_t Character_Tag_internal_data_[];
constexpr Character_Tag Character_Tag_Tag_MIN = static_cast<Character_Tag>(0);
constexpr Character_Tag Character_Tag_Tag_MAX = static_cast<Character_Tag>(2);
constexpr int Character_Tag_Tag_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_Tag_descriptor();
template <typename T>
const std::string& Character_Tag_Name(T value) {
  static_assert(std::is_same<T, Character_Tag>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Tag_Name().");
  return Character_Tag_Name(static_cast<Character_Tag>(value));
}
template <>
inline const std::string& Character_Tag_Name(Character_Tag value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_Tag_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Character_Tag_Parse(absl::string_view name, Character_Tag* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_Tag>(
      Character_Tag_descriptor(), name, value);
}
enum Character_FourthWallContainment : int {
  Character_FourthWallContainment_FOURTH_WALL_CONTAINMENT_UNSPECIFIED = 0,
  Character_FourthWallContainment_FOURTH_WALL_CONTAINMENT_DISABLED = 1,
  Character_FourthWallContainment_FOURTH_WALL_CONTAINMENT_EXPERIMENTAL = 2,
  Character_FourthWallContainment_Character_FourthWallContainment_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Character_FourthWallContainment_Character_FourthWallContainment_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Character_FourthWallContainment_IsValid(int value);
extern const uint32_t Character_FourthWallContainment_internal_data_[];
constexpr Character_FourthWallContainment Character_FourthWallContainment_FourthWallContainment_MIN = static_cast<Character_FourthWallContainment>(0);
constexpr Character_FourthWallContainment Character_FourthWallContainment_FourthWallContainment_MAX = static_cast<Character_FourthWallContainment>(2);
constexpr int Character_FourthWallContainment_FourthWallContainment_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Character_FourthWallContainment_descriptor();
template <typename T>
const std::string& Character_FourthWallContainment_Name(T value) {
  static_assert(std::is_same<T, Character_FourthWallContainment>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FourthWallContainment_Name().");
  return Character_FourthWallContainment_Name(static_cast<Character_FourthWallContainment>(value));
}
template <>
inline const std::string& Character_FourthWallContainment_Name(Character_FourthWallContainment value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Character_FourthWallContainment_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Character_FourthWallContainment_Parse(absl::string_view name, Character_FourthWallContainment* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Character_FourthWallContainment>(
      Character_FourthWallContainment_descriptor(), name, value);
}
enum CharacterAdvancedSettings_SafetyTopicName : int {
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_UNSPECIFIED = 0,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SAFE_TOPIC = 1,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_POLITICS = 2,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_FINANCES = 3,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_DISGUSTING_STUFF = 4,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_GENDER_BIAS = 5,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SUBSTANCE_USE = 6,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_HEALTH_ADVICE = 7,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELIGION = 8,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELATIONSHIPS = 9,
  CharacterAdvancedSettings_SafetyTopicName_CharacterAdvancedSettings_SafetyTopicName_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterAdvancedSettings_SafetyTopicName_CharacterAdvancedSettings_SafetyTopicName_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterAdvancedSettings_SafetyTopicName_IsValid(int value);
extern const uint32_t CharacterAdvancedSettings_SafetyTopicName_internal_data_[];
constexpr CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MIN = static_cast<CharacterAdvancedSettings_SafetyTopicName>(0);
constexpr CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MAX = static_cast<CharacterAdvancedSettings_SafetyTopicName>(9);
constexpr int CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_ARRAYSIZE = 9 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
CharacterAdvancedSettings_SafetyTopicName_descriptor();
template <typename T>
const std::string& CharacterAdvancedSettings_SafetyTopicName_Name(T value) {
  static_assert(std::is_same<T, CharacterAdvancedSettings_SafetyTopicName>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SafetyTopicName_Name().");
  return CharacterAdvancedSettings_SafetyTopicName_Name(static_cast<CharacterAdvancedSettings_SafetyTopicName>(value));
}
template <>
inline const std::string& CharacterAdvancedSettings_SafetyTopicName_Name(CharacterAdvancedSettings_SafetyTopicName value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<CharacterAdvancedSettings_SafetyTopicName_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool CharacterAdvancedSettings_SafetyTopicName_Parse(absl::string_view name, CharacterAdvancedSettings_SafetyTopicName* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<CharacterAdvancedSettings_SafetyTopicName>(
      CharacterAdvancedSettings_SafetyTopicName_descriptor(), name, value);
}
enum CharacterView : int {
  CHARACTER_VIEW_UNSPECIFIED = 0,
  CHARACTER_VIEW_DEFAULT = 1,
  CHARACTER_VIEW_WITH_SCENES = 2,
  CharacterView_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterView_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterView_IsValid(int value);
extern const uint32_t CharacterView_internal_data_[];
constexpr CharacterView CharacterView_MIN = static_cast<CharacterView>(0);
constexpr CharacterView CharacterView_MAX = static_cast<CharacterView>(2);
constexpr int CharacterView_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
CharacterView_descriptor();
template <typename T>
const std::string& CharacterView_Name(T value) {
  static_assert(std::is_same<T, CharacterView>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterView_Name().");
  return CharacterView_Name(static_cast<CharacterView>(value));
}
template <>
inline const std::string& CharacterView_Name(CharacterView value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<CharacterView_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CharacterView_Parse(absl::string_view name, CharacterView* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<CharacterView>(
      CharacterView_descriptor(), name, value);
}
enum CharacterItemView : int {
  CHARACTER_ITEM_VIEW_UNSPECIFIED = 0,
  CHARACTER_ITEM_VIEW_DEFAULT = 1,
  CHARACTER_ITEM_VIEW_WITH_META = 2,
  CharacterItemView_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterItemView_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterItemView_IsValid(int value);
extern const uint32_t CharacterItemView_internal_data_[];
constexpr CharacterItemView CharacterItemView_MIN = static_cast<CharacterItemView>(0);
constexpr CharacterItemView CharacterItemView_MAX = static_cast<CharacterItemView>(2);
constexpr int CharacterItemView_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
CharacterItemView_descriptor();
template <typename T>
const std::string& CharacterItemView_Name(T value) {
  static_assert(std::is_same<T, CharacterItemView>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterItemView_Name().");
  return CharacterItemView_Name(static_cast<CharacterItemView>(value));
}
template <>
inline const std::string& CharacterItemView_Name(CharacterItemView value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<CharacterItemView_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CharacterItemView_Parse(absl::string_view name, CharacterItemView* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<CharacterItemView>(
      CharacterItemView_descriptor(), name, value);
}
enum CharacterSharePurpose : int {
  CHARACTER_SHARE_PURPOSE_UNSPECIFIED = 0,
  CHARACTER_SHARE_PURPOSE_OCULUS = 1,
  CHARACTER_SHARE_PURPOSE_PORTAL = 2,
  CharacterSharePurpose_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterSharePurpose_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterSharePurpose_IsValid(int value);
extern const uint32_t CharacterSharePurpose_internal_data_[];
constexpr CharacterSharePurpose CharacterSharePurpose_MIN = static_cast<CharacterSharePurpose>(0);
constexpr CharacterSharePurpose CharacterSharePurpose_MAX = static_cast<CharacterSharePurpose>(2);
constexpr int CharacterSharePurpose_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
CharacterSharePurpose_descriptor();
template <typename T>
const std::string& CharacterSharePurpose_Name(T value) {
  static_assert(std::is_same<T, CharacterSharePurpose>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterSharePurpose_Name().");
  return CharacterSharePurpose_Name(static_cast<CharacterSharePurpose>(value));
}
template <>
inline const std::string& CharacterSharePurpose_Name(CharacterSharePurpose value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<CharacterSharePurpose_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CharacterSharePurpose_Parse(absl::string_view name, CharacterSharePurpose* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<CharacterSharePurpose>(
      CharacterSharePurpose_descriptor(), name, value);
}
enum SafetyLevel : int {
  SAFETY_LEVEL_UNSPECIFIED = 0,
  SAFETY_LEVEL_NO_CONTROL = 1,
  SAFETY_LEVEL_MILD_CONTROL = 2,
  SAFETY_LEVEL_STRICT_CONTROL = 3,
  SafetyLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SafetyLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SafetyLevel_IsValid(int value);
extern const uint32_t SafetyLevel_internal_data_[];
constexpr SafetyLevel SafetyLevel_MIN = static_cast<SafetyLevel>(0);
constexpr SafetyLevel SafetyLevel_MAX = static_cast<SafetyLevel>(3);
constexpr int SafetyLevel_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
SafetyLevel_descriptor();
template <typename T>
const std::string& SafetyLevel_Name(T value) {
  static_assert(std::is_same<T, SafetyLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SafetyLevel_Name().");
  return SafetyLevel_Name(static_cast<SafetyLevel>(value));
}
template <>
inline const std::string& SafetyLevel_Name(SafetyLevel value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<SafetyLevel_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SafetyLevel_Parse(absl::string_view name, SafetyLevel* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<SafetyLevel>(
      SafetyLevel_descriptor(), name, value);
}
enum CognitiveControl : int {
  COGNITIVE_CONTROL_UNSPECIFIED = 0,
  COGNITIVE_CONTROL_NONE = 1,
  COGNITIVE_CONTROL_MILD = 2,
  COGNITIVE_CONTROL_STRICT = 3,
  CognitiveControl_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CognitiveControl_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CognitiveControl_IsValid(int value);
extern const uint32_t CognitiveControl_internal_data_[];
constexpr CognitiveControl CognitiveControl_MIN = static_cast<CognitiveControl>(0);
constexpr CognitiveControl CognitiveControl_MAX = static_cast<CognitiveControl>(3);
constexpr int CognitiveControl_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
CognitiveControl_descriptor();
template <typename T>
const std::string& CognitiveControl_Name(T value) {
  static_assert(std::is_same<T, CognitiveControl>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CognitiveControl_Name().");
  return CognitiveControl_Name(static_cast<CognitiveControl>(value));
}
template <>
inline const std::string& CognitiveControl_Name(CognitiveControl value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<CognitiveControl_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CognitiveControl_Parse(absl::string_view name, CognitiveControl* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<CognitiveControl>(
      CognitiveControl_descriptor(), name, value);
}
enum CharacterAssetType : int {
  CHARACTER_ASSET_TYPE_UNSPECIFIED = 0,
  CHARACTER_ASSET_TYPE_INNEQUIN_IMAGE = 1,
  CHARACTER_ASSET_TYPE_USER_PROVIDED_IMAGE = 2,
  CharacterAssetType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterAssetType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterAssetType_IsValid(int value);
extern const uint32_t CharacterAssetType_internal_data_[];
constexpr CharacterAssetType CharacterAssetType_MIN = static_cast<CharacterAssetType>(0);
constexpr CharacterAssetType CharacterAssetType_MAX = static_cast<CharacterAssetType>(2);
constexpr int CharacterAssetType_ARRAYSIZE = 2 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
CharacterAssetType_descriptor();
template <typename T>
const std::string& CharacterAssetType_Name(T value) {
  static_assert(std::is_same<T, CharacterAssetType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterAssetType_Name().");
  return CharacterAssetType_Name(static_cast<CharacterAssetType>(value));
}
template <>
inline const std::string& CharacterAssetType_Name(CharacterAssetType value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<CharacterAssetType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CharacterAssetType_Parse(absl::string_view name, CharacterAssetType* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<CharacterAssetType>(
      CharacterAssetType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UnshareCharacterPortalRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest) */ {
 public:
  inline UnshareCharacterPortalRequest() : UnshareCharacterPortalRequest(nullptr) {}
  ~UnshareCharacterPortalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnshareCharacterPortalRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UnshareCharacterPortalRequest(const UnshareCharacterPortalRequest& from)
      : UnshareCharacterPortalRequest(nullptr, from) {}
  UnshareCharacterPortalRequest(UnshareCharacterPortalRequest&& from) noexcept
    : UnshareCharacterPortalRequest() {
    *this = ::std::move(from);
  }

  inline UnshareCharacterPortalRequest& operator=(const UnshareCharacterPortalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnshareCharacterPortalRequest& operator=(UnshareCharacterPortalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnshareCharacterPortalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnshareCharacterPortalRequest* internal_default_instance() {
    return reinterpret_cast<const UnshareCharacterPortalRequest*>(
               &_UnshareCharacterPortalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UnshareCharacterPortalRequest& a, UnshareCharacterPortalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnshareCharacterPortalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnshareCharacterPortalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnshareCharacterPortalRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnshareCharacterPortalRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UnshareCharacterPortalRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UnshareCharacterPortalRequest& from) {
    UnshareCharacterPortalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UnshareCharacterPortalRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest";
  }
  protected:
  explicit UnshareCharacterPortalRequest(::google::protobuf_inworld::Arena* arena);
  UnshareCharacterPortalRequest(::google::protobuf_inworld::Arena* arena, const UnshareCharacterPortalRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ShareCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ShareCharacterRequest) */ {
 public:
  inline ShareCharacterRequest() : ShareCharacterRequest(nullptr) {}
  ~ShareCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShareCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ShareCharacterRequest(const ShareCharacterRequest& from)
      : ShareCharacterRequest(nullptr, from) {}
  ShareCharacterRequest(ShareCharacterRequest&& from) noexcept
    : ShareCharacterRequest() {
    *this = ::std::move(from);
  }

  inline ShareCharacterRequest& operator=(const ShareCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareCharacterRequest& operator=(ShareCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShareCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const ShareCharacterRequest*>(
               &_ShareCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ShareCharacterRequest& a, ShareCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ShareCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ShareCharacterRequest& from) {
    ShareCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShareCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ShareCharacterRequest";
  }
  protected:
  explicit ShareCharacterRequest(::google::protobuf_inworld::Arena* arena);
  ShareCharacterRequest(::google::protobuf_inworld::Arena* arena, const ShareCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalIdsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string external_ids = 2;
  int external_ids_size() const;
  private:
  int _internal_external_ids_size() const;

  public:
  void clear_external_ids() ;
  const std::string& external_ids(int index) const;
  std::string* mutable_external_ids(int index);
  void set_external_ids(int index, const std::string& value);
  void set_external_ids(int index, std::string&& value);
  void set_external_ids(int index, const char* value);
  void set_external_ids(int index, const char* value, std::size_t size);
  void set_external_ids(int index, absl::string_view value);
  std::string* add_external_ids();
  void add_external_ids(const std::string& value);
  void add_external_ids(std::string&& value);
  void add_external_ids(const char* value);
  void add_external_ids(const char* value, std::size_t size);
  void add_external_ids(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& external_ids() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_external_ids();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_external_ids() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_external_ids();

  public:
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ShareCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField<std::string> external_ids_;
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ShareCharacterPortalRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest) */ {
 public:
  inline ShareCharacterPortalRequest() : ShareCharacterPortalRequest(nullptr) {}
  ~ShareCharacterPortalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShareCharacterPortalRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ShareCharacterPortalRequest(const ShareCharacterPortalRequest& from)
      : ShareCharacterPortalRequest(nullptr, from) {}
  ShareCharacterPortalRequest(ShareCharacterPortalRequest&& from) noexcept
    : ShareCharacterPortalRequest() {
    *this = ::std::move(from);
  }

  inline ShareCharacterPortalRequest& operator=(const ShareCharacterPortalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareCharacterPortalRequest& operator=(ShareCharacterPortalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShareCharacterPortalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareCharacterPortalRequest* internal_default_instance() {
    return reinterpret_cast<const ShareCharacterPortalRequest*>(
               &_ShareCharacterPortalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ShareCharacterPortalRequest& a, ShareCharacterPortalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareCharacterPortalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareCharacterPortalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareCharacterPortalRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareCharacterPortalRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ShareCharacterPortalRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ShareCharacterPortalRequest& from) {
    ShareCharacterPortalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShareCharacterPortalRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ShareCharacterPortalRequest";
  }
  protected:
  explicit ShareCharacterPortalRequest(::google::protobuf_inworld::Arena* arena);
  ShareCharacterPortalRequest(::google::protobuf_inworld::Arena* arena, const ShareCharacterPortalRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBylineFieldNumber = 2,
    kPromptFieldNumber = 3,
    kAllowedOnShowcaseFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string byline = 2;
  void clear_byline() ;
  const std::string& byline() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_byline(Arg_&& arg, Args_... args);
  std::string* mutable_byline();
  PROTOBUF_NODISCARD std::string* release_byline();
  void set_allocated_byline(std::string* value);

  private:
  const std::string& _internal_byline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_byline(
      const std::string& value);
  std::string* _internal_mutable_byline();

  public:
  // string prompt = 3;
  void clear_prompt() ;
  const std::string& prompt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* value);

  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(
      const std::string& value);
  std::string* _internal_mutable_prompt();

  public:
  // bool allowed_on_showcase = 4;
  void clear_allowed_on_showcase() ;
  bool allowed_on_showcase() const;
  void set_allowed_on_showcase(bool value);

  private:
  bool _internal_allowed_on_showcase() const;
  void _internal_set_allowed_on_showcase(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 4, 0,
      78, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr byline_;
    ::google::protobuf_inworld::internal::ArenaStringPtr prompt_;
    bool allowed_on_showcase_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ReplaceCharacterRpmModelRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest) */ {
 public:
  inline ReplaceCharacterRpmModelRequest() : ReplaceCharacterRpmModelRequest(nullptr) {}
  ~ReplaceCharacterRpmModelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReplaceCharacterRpmModelRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ReplaceCharacterRpmModelRequest(const ReplaceCharacterRpmModelRequest& from)
      : ReplaceCharacterRpmModelRequest(nullptr, from) {}
  ReplaceCharacterRpmModelRequest(ReplaceCharacterRpmModelRequest&& from) noexcept
    : ReplaceCharacterRpmModelRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceCharacterRpmModelRequest& operator=(const ReplaceCharacterRpmModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceCharacterRpmModelRequest& operator=(ReplaceCharacterRpmModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceCharacterRpmModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceCharacterRpmModelRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceCharacterRpmModelRequest*>(
               &_ReplaceCharacterRpmModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ReplaceCharacterRpmModelRequest& a, ReplaceCharacterRpmModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceCharacterRpmModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceCharacterRpmModelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceCharacterRpmModelRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceCharacterRpmModelRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ReplaceCharacterRpmModelRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ReplaceCharacterRpmModelRequest& from) {
    ReplaceCharacterRpmModelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReplaceCharacterRpmModelRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest";
  }
  protected:
  explicit ReplaceCharacterRpmModelRequest(::google::protobuf_inworld::Arena* arena);
  ReplaceCharacterRpmModelRequest(::google::protobuf_inworld::Arena* arena, const ReplaceCharacterRpmModelRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kRpmModelUriFieldNumber = 2,
  };
  // string character = 1 [(.ai.inworld.options.examples) = {
  void clear_character() ;
  const std::string& character() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character(Arg_&& arg, Args_... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* value);

  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(
      const std::string& value);
  std::string* _internal_mutable_character();

  public:
  // string rpm_model_uri = 2;
  void clear_rpm_model_uri() ;
  const std::string& rpm_model_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_model_uri(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_model_uri();
  PROTOBUF_NODISCARD std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* value);

  private:
  const std::string& _internal_rpm_model_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_model_uri(
      const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      88, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr character_;
    ::google::protobuf_inworld::internal::ArenaStringPtr rpm_model_uri_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ReplaceCharacterImageRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest) */ {
 public:
  inline ReplaceCharacterImageRequest() : ReplaceCharacterImageRequest(nullptr) {}
  ~ReplaceCharacterImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReplaceCharacterImageRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ReplaceCharacterImageRequest(const ReplaceCharacterImageRequest& from)
      : ReplaceCharacterImageRequest(nullptr, from) {}
  ReplaceCharacterImageRequest(ReplaceCharacterImageRequest&& from) noexcept
    : ReplaceCharacterImageRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceCharacterImageRequest& operator=(const ReplaceCharacterImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceCharacterImageRequest& operator=(ReplaceCharacterImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceCharacterImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceCharacterImageRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceCharacterImageRequest*>(
               &_ReplaceCharacterImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ReplaceCharacterImageRequest& a, ReplaceCharacterImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceCharacterImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceCharacterImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceCharacterImageRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceCharacterImageRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ReplaceCharacterImageRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ReplaceCharacterImageRequest& from) {
    ReplaceCharacterImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReplaceCharacterImageRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest";
  }
  protected:
  explicit ReplaceCharacterImageRequest(::google::protobuf_inworld::Arena* arena);
  ReplaceCharacterImageRequest(::google::protobuf_inworld::Arena* arena, const ReplaceCharacterImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kContentFieldNumber = 2,
    kCharacterAssetTypeFieldNumber = 3,
  };
  // string character = 1 [(.ai.inworld.options.examples) = {
  void clear_character() ;
  const std::string& character() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character(Arg_&& arg, Args_... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* value);

  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(
      const std::string& value);
  std::string* _internal_mutable_character();

  public:
  // bytes content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .ai.inworld.studio.v1alpha.CharacterAssetType character_asset_type = 3;
  void clear_character_asset_type() ;
  ::ai::inworld::studio::v1alpha::CharacterAssetType character_asset_type() const;
  void set_character_asset_type(::ai::inworld::studio::v1alpha::CharacterAssetType value);

  private:
  ::ai::inworld::studio::v1alpha::CharacterAssetType _internal_character_asset_type() const;
  void _internal_set_character_asset_type(::ai::inworld::studio::v1alpha::CharacterAssetType value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      72, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr character_;
    ::google::protobuf_inworld::internal::ArenaStringPtr content_;
    int character_asset_type_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class PreviewPromptTemplateRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest) */ {
 public:
  inline PreviewPromptTemplateRequest() : PreviewPromptTemplateRequest(nullptr) {}
  ~PreviewPromptTemplateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PreviewPromptTemplateRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline PreviewPromptTemplateRequest(const PreviewPromptTemplateRequest& from)
      : PreviewPromptTemplateRequest(nullptr, from) {}
  PreviewPromptTemplateRequest(PreviewPromptTemplateRequest&& from) noexcept
    : PreviewPromptTemplateRequest() {
    *this = ::std::move(from);
  }

  inline PreviewPromptTemplateRequest& operator=(const PreviewPromptTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewPromptTemplateRequest& operator=(PreviewPromptTemplateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreviewPromptTemplateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreviewPromptTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const PreviewPromptTemplateRequest*>(
               &_PreviewPromptTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PreviewPromptTemplateRequest& a, PreviewPromptTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewPromptTemplateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewPromptTemplateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreviewPromptTemplateRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreviewPromptTemplateRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const PreviewPromptTemplateRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const PreviewPromptTemplateRequest& from) {
    PreviewPromptTemplateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreviewPromptTemplateRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest";
  }
  protected:
  explicit PreviewPromptTemplateRequest(::google::protobuf_inworld::Arena* arena);
  PreviewPromptTemplateRequest(::google::protobuf_inworld::Arena* arena, const PreviewPromptTemplateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kTemplateFieldNumber = 2,
  };
  // string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_character() ;
  const std::string& character() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character(Arg_&& arg, Args_... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* value);

  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(
      const std::string& value);
  std::string* _internal_mutable_character();

  public:
  // string template = 2;
  void clear_template_() ;
  const std::string& template_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_template_(Arg_&& arg, Args_... args);
  std::string* mutable_template_();
  PROTOBUF_NODISCARD std::string* release_template_();
  void set_allocated_template_(std::string* value);

  private:
  const std::string& _internal_template_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_(
      const std::string& value);
  std::string* _internal_mutable_template_();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr character_;
    ::google::protobuf_inworld::internal::ArenaStringPtr template__;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class PreviewPromptTempalteResponse final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse) */ {
 public:
  inline PreviewPromptTempalteResponse() : PreviewPromptTempalteResponse(nullptr) {}
  ~PreviewPromptTempalteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PreviewPromptTempalteResponse(::google::protobuf_inworld::internal::ConstantInitialized);

  inline PreviewPromptTempalteResponse(const PreviewPromptTempalteResponse& from)
      : PreviewPromptTempalteResponse(nullptr, from) {}
  PreviewPromptTempalteResponse(PreviewPromptTempalteResponse&& from) noexcept
    : PreviewPromptTempalteResponse() {
    *this = ::std::move(from);
  }

  inline PreviewPromptTempalteResponse& operator=(const PreviewPromptTempalteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewPromptTempalteResponse& operator=(PreviewPromptTempalteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreviewPromptTempalteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreviewPromptTempalteResponse* internal_default_instance() {
    return reinterpret_cast<const PreviewPromptTempalteResponse*>(
               &_PreviewPromptTempalteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PreviewPromptTempalteResponse& a, PreviewPromptTempalteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewPromptTempalteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewPromptTempalteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreviewPromptTempalteResponse* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreviewPromptTempalteResponse>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const PreviewPromptTempalteResponse& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const PreviewPromptTempalteResponse& from) {
    PreviewPromptTempalteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreviewPromptTempalteResponse* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse";
  }
  protected:
  explicit PreviewPromptTempalteResponse(::google::protobuf_inworld::Arena* arena);
  PreviewPromptTempalteResponse(::google::protobuf_inworld::Arena* arena, const PreviewPromptTempalteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 2,
    kPromptFieldNumber = 1,
  };
  // repeated string errors = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int errors_size() const;
  private:
  int _internal_errors_size() const;

  public:
  void clear_errors() ;
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, std::size_t size);
  void set_errors(int index, absl::string_view value);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, std::size_t size);
  void add_errors(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& errors() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_errors();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_errors() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_errors();

  public:
  // string prompt = 1;
  void clear_prompt() ;
  const std::string& prompt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* value);

  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(
      const std::string& value);
  std::string* _internal_mutable_prompt();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField<std::string> errors_;
    ::google::protobuf_inworld::internal::ArenaStringPtr prompt_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ListSharedCharactersRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListSharedCharactersRequest) */ {
 public:
  inline ListSharedCharactersRequest() : ListSharedCharactersRequest(nullptr) {}
  ~ListSharedCharactersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListSharedCharactersRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ListSharedCharactersRequest(const ListSharedCharactersRequest& from)
      : ListSharedCharactersRequest(nullptr, from) {}
  ListSharedCharactersRequest(ListSharedCharactersRequest&& from) noexcept
    : ListSharedCharactersRequest() {
    *this = ::std::move(from);
  }

  inline ListSharedCharactersRequest& operator=(const ListSharedCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSharedCharactersRequest& operator=(ListSharedCharactersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSharedCharactersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSharedCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const ListSharedCharactersRequest*>(
               &_ListSharedCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ListSharedCharactersRequest& a, ListSharedCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSharedCharactersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSharedCharactersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSharedCharactersRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSharedCharactersRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ListSharedCharactersRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ListSharedCharactersRequest& from) {
    ListSharedCharactersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListSharedCharactersRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListSharedCharactersRequest";
  }
  protected:
  explicit ListSharedCharactersRequest(::google::protobuf_inworld::Arena* arena);
  ListSharedCharactersRequest(::google::protobuf_inworld::Arena* arena, const ListSharedCharactersRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string page_token = 3;
  void clear_page_token() ;
  const std::string& page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* value);

  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(
      const std::string& value);
  std::string* _internal_mutable_page_token();

  public:
  // int32 page_size = 2;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListSharedCharactersRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      78, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr parent_;
    ::google::protobuf_inworld::internal::ArenaStringPtr page_token_;
    ::int32_t page_size_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ListCharactersRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListCharactersRequest) */ {
 public:
  inline ListCharactersRequest() : ListCharactersRequest(nullptr) {}
  ~ListCharactersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListCharactersRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ListCharactersRequest(const ListCharactersRequest& from)
      : ListCharactersRequest(nullptr, from) {}
  ListCharactersRequest(ListCharactersRequest&& from) noexcept
    : ListCharactersRequest() {
    *this = ::std::move(from);
  }

  inline ListCharactersRequest& operator=(const ListCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCharactersRequest& operator=(ListCharactersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCharactersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const ListCharactersRequest*>(
               &_ListCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListCharactersRequest& a, ListCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCharactersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCharactersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCharactersRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCharactersRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ListCharactersRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ListCharactersRequest& from) {
    ListCharactersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListCharactersRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListCharactersRequest";
  }
  protected:
  explicit ListCharactersRequest(::google::protobuf_inworld::Arena* arena);
  ListCharactersRequest(::google::protobuf_inworld::Arena* arena, const ListCharactersRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 5,
    kPageSizeFieldNumber = 2,
    kViewFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string page_token = 3;
  void clear_page_token() ;
  const std::string& page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* value);

  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(
      const std::string& value);
  std::string* _internal_mutable_page_token();

  public:
  // string filter = 5;
  void clear_filter() ;
  const std::string& filter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filter(Arg_&& arg, Args_... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* value);

  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(
      const std::string& value);
  std::string* _internal_mutable_filter();

  public:
  // int32 page_size = 2;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // .ai.inworld.studio.v1alpha.CharacterView view = 4;
  void clear_view() ;
  ::ai::inworld::studio::v1alpha::CharacterView view() const;
  void set_view(::ai::inworld::studio::v1alpha::CharacterView value);

  private:
  ::ai::inworld::studio::v1alpha::CharacterView _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::CharacterView value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListCharactersRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      3, 5, 0,
      78, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr parent_;
    ::google::protobuf_inworld::internal::ArenaStringPtr page_token_;
    ::google::protobuf_inworld::internal::ArenaStringPtr filter_;
    ::int32_t page_size_;
    int view_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class GetCharacterShareInfoRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest) */ {
 public:
  inline GetCharacterShareInfoRequest() : GetCharacterShareInfoRequest(nullptr) {}
  ~GetCharacterShareInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCharacterShareInfoRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline GetCharacterShareInfoRequest(const GetCharacterShareInfoRequest& from)
      : GetCharacterShareInfoRequest(nullptr, from) {}
  GetCharacterShareInfoRequest(GetCharacterShareInfoRequest&& from) noexcept
    : GetCharacterShareInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterShareInfoRequest& operator=(const GetCharacterShareInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterShareInfoRequest& operator=(GetCharacterShareInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharacterShareInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharacterShareInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterShareInfoRequest*>(
               &_GetCharacterShareInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetCharacterShareInfoRequest& a, GetCharacterShareInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterShareInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterShareInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharacterShareInfoRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharacterShareInfoRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const GetCharacterShareInfoRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const GetCharacterShareInfoRequest& from) {
    GetCharacterShareInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetCharacterShareInfoRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest";
  }
  protected:
  explicit GetCharacterShareInfoRequest(::google::protobuf_inworld::Arena* arena);
  GetCharacterShareInfoRequest(::google::protobuf_inworld::Arena* arena, const GetCharacterShareInfoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .ai.inworld.studio.v1alpha.CharacterSharePurpose view = 2;
  void clear_view() ;
  ::ai::inworld::studio::v1alpha::CharacterSharePurpose view() const;
  void set_view(::ai::inworld::studio::v1alpha::CharacterSharePurpose value);

  private:
  ::ai::inworld::studio::v1alpha::CharacterSharePurpose _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::CharacterSharePurpose value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    int view_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class GetCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCharacterRequest) */ {
 public:
  inline GetCharacterRequest() : GetCharacterRequest(nullptr) {}
  ~GetCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline GetCharacterRequest(const GetCharacterRequest& from)
      : GetCharacterRequest(nullptr, from) {}
  GetCharacterRequest(GetCharacterRequest&& from) noexcept
    : GetCharacterRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterRequest& operator=(const GetCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterRequest& operator=(GetCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterRequest*>(
               &_GetCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetCharacterRequest& a, GetCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const GetCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const GetCharacterRequest& from) {
    GetCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCharacterRequest";
  }
  protected:
  explicit GetCharacterRequest(::google::protobuf_inworld::Arena* arena);
  GetCharacterRequest(::google::protobuf_inworld::Arena* arena, const GetCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .ai.inworld.studio.v1alpha.CharacterItemView view = 2;
  void clear_view() ;
  ::ai::inworld::studio::v1alpha::CharacterItemView view() const;
  void set_view(::ai::inworld::studio::v1alpha::CharacterItemView value);

  private:
  ::ai::inworld::studio::v1alpha::CharacterItemView _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::CharacterItemView value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    int view_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class GetCharacterAdvancedSettingsRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest) */ {
 public:
  inline GetCharacterAdvancedSettingsRequest() : GetCharacterAdvancedSettingsRequest(nullptr) {}
  ~GetCharacterAdvancedSettingsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCharacterAdvancedSettingsRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline GetCharacterAdvancedSettingsRequest(const GetCharacterAdvancedSettingsRequest& from)
      : GetCharacterAdvancedSettingsRequest(nullptr, from) {}
  GetCharacterAdvancedSettingsRequest(GetCharacterAdvancedSettingsRequest&& from) noexcept
    : GetCharacterAdvancedSettingsRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterAdvancedSettingsRequest& operator=(const GetCharacterAdvancedSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterAdvancedSettingsRequest& operator=(GetCharacterAdvancedSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharacterAdvancedSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharacterAdvancedSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterAdvancedSettingsRequest*>(
               &_GetCharacterAdvancedSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetCharacterAdvancedSettingsRequest& a, GetCharacterAdvancedSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharacterAdvancedSettingsRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharacterAdvancedSettingsRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const GetCharacterAdvancedSettingsRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const GetCharacterAdvancedSettingsRequest& from) {
    GetCharacterAdvancedSettingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetCharacterAdvancedSettingsRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest";
  }
  protected:
  explicit GetCharacterAdvancedSettingsRequest(::google::protobuf_inworld::Arena* arena);
  GetCharacterAdvancedSettingsRequest(::google::protobuf_inworld::Arena* arena, const GetCharacterAdvancedSettingsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      74, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class DeployCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeployCharacterRequest) */ {
 public:
  inline DeployCharacterRequest() : DeployCharacterRequest(nullptr) {}
  ~DeployCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeployCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline DeployCharacterRequest(const DeployCharacterRequest& from)
      : DeployCharacterRequest(nullptr, from) {}
  DeployCharacterRequest(DeployCharacterRequest&& from) noexcept
    : DeployCharacterRequest() {
    *this = ::std::move(from);
  }

  inline DeployCharacterRequest& operator=(const DeployCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployCharacterRequest& operator=(DeployCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const DeployCharacterRequest*>(
               &_DeployCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeployCharacterRequest& a, DeployCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const DeployCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const DeployCharacterRequest& from) {
    DeployCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeployCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeployCharacterRequest";
  }
  protected:
  explicit DeployCharacterRequest(::google::protobuf_inworld::Arena* arena);
  DeployCharacterRequest(::google::protobuf_inworld::Arena* arena, const DeployCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeployCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class DeployCharacterAsyncResponse final :
    public ::google::protobuf_inworld::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeployCharacterAsyncResponse) */ {
 public:
  inline DeployCharacterAsyncResponse() : DeployCharacterAsyncResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeployCharacterAsyncResponse(::google::protobuf_inworld::internal::ConstantInitialized);

  inline DeployCharacterAsyncResponse(const DeployCharacterAsyncResponse& from)
      : DeployCharacterAsyncResponse(nullptr, from) {}
  DeployCharacterAsyncResponse(DeployCharacterAsyncResponse&& from) noexcept
    : DeployCharacterAsyncResponse() {
    *this = ::std::move(from);
  }

  inline DeployCharacterAsyncResponse& operator=(const DeployCharacterAsyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployCharacterAsyncResponse& operator=(DeployCharacterAsyncResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployCharacterAsyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployCharacterAsyncResponse* internal_default_instance() {
    return reinterpret_cast<const DeployCharacterAsyncResponse*>(
               &_DeployCharacterAsyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DeployCharacterAsyncResponse& a, DeployCharacterAsyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployCharacterAsyncResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployCharacterAsyncResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployCharacterAsyncResponse* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployCharacterAsyncResponse>(arena);
  }
  using ::google::protobuf_inworld::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeployCharacterAsyncResponse& from) {
    ::google::protobuf_inworld::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf_inworld::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeployCharacterAsyncResponse& from) {
    ::google::protobuf_inworld::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeployCharacterAsyncResponse";
  }
  protected:
  explicit DeployCharacterAsyncResponse(::google::protobuf_inworld::Arena* arena);
  DeployCharacterAsyncResponse(::google::protobuf_inworld::Arena* arena, const DeployCharacterAsyncResponse& from);
  public:

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeployCharacterAsyncResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class DeployCharacterAsyncMetadata final :
    public ::google::protobuf_inworld::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeployCharacterAsyncMetadata) */ {
 public:
  inline DeployCharacterAsyncMetadata() : DeployCharacterAsyncMetadata(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeployCharacterAsyncMetadata(::google::protobuf_inworld::internal::ConstantInitialized);

  inline DeployCharacterAsyncMetadata(const DeployCharacterAsyncMetadata& from)
      : DeployCharacterAsyncMetadata(nullptr, from) {}
  DeployCharacterAsyncMetadata(DeployCharacterAsyncMetadata&& from) noexcept
    : DeployCharacterAsyncMetadata() {
    *this = ::std::move(from);
  }

  inline DeployCharacterAsyncMetadata& operator=(const DeployCharacterAsyncMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployCharacterAsyncMetadata& operator=(DeployCharacterAsyncMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployCharacterAsyncMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployCharacterAsyncMetadata* internal_default_instance() {
    return reinterpret_cast<const DeployCharacterAsyncMetadata*>(
               &_DeployCharacterAsyncMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DeployCharacterAsyncMetadata& a, DeployCharacterAsyncMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployCharacterAsyncMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployCharacterAsyncMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployCharacterAsyncMetadata* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployCharacterAsyncMetadata>(arena);
  }
  using ::google::protobuf_inworld::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeployCharacterAsyncMetadata& from) {
    ::google::protobuf_inworld::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf_inworld::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeployCharacterAsyncMetadata& from) {
    ::google::protobuf_inworld::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeployCharacterAsyncMetadata";
  }
  protected:
  explicit DeployCharacterAsyncMetadata(::google::protobuf_inworld::Arena* arena);
  DeployCharacterAsyncMetadata(::google::protobuf_inworld::Arena* arena, const DeployCharacterAsyncMetadata& from);
  public:

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeployCharacterAsyncMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class DeleteCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteCharacterRequest) */ {
 public:
  inline DeleteCharacterRequest() : DeleteCharacterRequest(nullptr) {}
  ~DeleteCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline DeleteCharacterRequest(const DeleteCharacterRequest& from)
      : DeleteCharacterRequest(nullptr, from) {}
  DeleteCharacterRequest(DeleteCharacterRequest&& from) noexcept
    : DeleteCharacterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCharacterRequest& operator=(const DeleteCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCharacterRequest& operator=(DeleteCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCharacterRequest*>(
               &_DeleteCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteCharacterRequest& a, DeleteCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const DeleteCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const DeleteCharacterRequest& from) {
    DeleteCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteCharacterRequest";
  }
  protected:
  explicit DeleteCharacterRequest(::google::protobuf_inworld::Arena* arena);
  DeleteCharacterRequest(::google::protobuf_inworld::Arena* arena, const DeleteCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CreateCharacterMetadata final :
    public ::google::protobuf_inworld::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateCharacterMetadata) */ {
 public:
  inline CreateCharacterMetadata() : CreateCharacterMetadata(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateCharacterMetadata(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CreateCharacterMetadata(const CreateCharacterMetadata& from)
      : CreateCharacterMetadata(nullptr, from) {}
  CreateCharacterMetadata(CreateCharacterMetadata&& from) noexcept
    : CreateCharacterMetadata() {
    *this = ::std::move(from);
  }

  inline CreateCharacterMetadata& operator=(const CreateCharacterMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterMetadata& operator=(CreateCharacterMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterMetadata*>(
               &_CreateCharacterMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CreateCharacterMetadata& a, CreateCharacterMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterMetadata* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterMetadata>(arena);
  }
  using ::google::protobuf_inworld::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateCharacterMetadata& from) {
    ::google::protobuf_inworld::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf_inworld::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateCharacterMetadata& from) {
    ::google::protobuf_inworld::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateCharacterMetadata";
  }
  protected:
  explicit CreateCharacterMetadata(::google::protobuf_inworld::Arena* arena);
  CreateCharacterMetadata(::google::protobuf_inworld::Arena* arena, const CreateCharacterMetadata& from);
  public:

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateCharacterMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CloneCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CloneCharacterRequest) */ {
 public:
  inline CloneCharacterRequest() : CloneCharacterRequest(nullptr) {}
  ~CloneCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloneCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CloneCharacterRequest(const CloneCharacterRequest& from)
      : CloneCharacterRequest(nullptr, from) {}
  CloneCharacterRequest(CloneCharacterRequest&& from) noexcept
    : CloneCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CloneCharacterRequest& operator=(const CloneCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloneCharacterRequest& operator=(CloneCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloneCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloneCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CloneCharacterRequest*>(
               &_CloneCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CloneCharacterRequest& a, CloneCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloneCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloneCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloneCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloneCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CloneCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CloneCharacterRequest& from) {
    CloneCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CloneCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CloneCharacterRequest";
  }
  protected:
  explicit CloneCharacterRequest(::google::protobuf_inworld::Arena* arena);
  CloneCharacterRequest(::google::protobuf_inworld::Arena* arena, const CloneCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWorkspaceFieldNumber = 2,
    kNewNameFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string workspace = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_workspace() ;
  const std::string& workspace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workspace(Arg_&& arg, Args_... args);
  std::string* mutable_workspace();
  PROTOBUF_NODISCARD std::string* release_workspace();
  void set_allocated_workspace(std::string* value);

  private:
  const std::string& _internal_workspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace(
      const std::string& value);
  std::string* _internal_mutable_workspace();

  public:
  // string new_name = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_new_name() ;
  const std::string& new_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_name(Arg_&& arg, Args_... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* value);

  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(
      const std::string& value);
  std::string* _internal_mutable_new_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CloneCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr workspace_;
    ::google::protobuf_inworld::internal::ArenaStringPtr new_name_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CheckDeployInfoResponse final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CheckDeployInfoResponse) */ {
 public:
  inline CheckDeployInfoResponse() : CheckDeployInfoResponse(nullptr) {}
  ~CheckDeployInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CheckDeployInfoResponse(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CheckDeployInfoResponse(const CheckDeployInfoResponse& from)
      : CheckDeployInfoResponse(nullptr, from) {}
  CheckDeployInfoResponse(CheckDeployInfoResponse&& from) noexcept
    : CheckDeployInfoResponse() {
    *this = ::std::move(from);
  }

  inline CheckDeployInfoResponse& operator=(const CheckDeployInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDeployInfoResponse& operator=(CheckDeployInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckDeployInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckDeployInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CheckDeployInfoResponse*>(
               &_CheckDeployInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CheckDeployInfoResponse& a, CheckDeployInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDeployInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDeployInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckDeployInfoResponse* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckDeployInfoResponse>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CheckDeployInfoResponse& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CheckDeployInfoResponse& from) {
    CheckDeployInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckDeployInfoResponse* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CheckDeployInfoResponse";
  }
  protected:
  explicit CheckDeployInfoResponse(::google::protobuf_inworld::Arena* arena);
  CheckDeployInfoResponse(::google::protobuf_inworld::Arena* arena, const CheckDeployInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsFreshFieldNumber = 1,
  };
  // bool is_fresh = 1;
  void clear_is_fresh() ;
  bool is_fresh() const;
  void set_is_fresh(bool value);

  private:
  bool _internal_is_fresh() const;
  void _internal_set_is_fresh(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CheckDeployInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    bool is_fresh_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CheckDeployInfoRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CheckDeployInfoRequest) */ {
 public:
  inline CheckDeployInfoRequest() : CheckDeployInfoRequest(nullptr) {}
  ~CheckDeployInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CheckDeployInfoRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CheckDeployInfoRequest(const CheckDeployInfoRequest& from)
      : CheckDeployInfoRequest(nullptr, from) {}
  CheckDeployInfoRequest(CheckDeployInfoRequest&& from) noexcept
    : CheckDeployInfoRequest() {
    *this = ::std::move(from);
  }

  inline CheckDeployInfoRequest& operator=(const CheckDeployInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDeployInfoRequest& operator=(CheckDeployInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckDeployInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckDeployInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CheckDeployInfoRequest*>(
               &_CheckDeployInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CheckDeployInfoRequest& a, CheckDeployInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDeployInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDeployInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckDeployInfoRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckDeployInfoRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CheckDeployInfoRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CheckDeployInfoRequest& from) {
    CheckDeployInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckDeployInfoRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CheckDeployInfoRequest";
  }
  protected:
  explicit CheckDeployInfoRequest(::google::protobuf_inworld::Arena* arena);
  CheckDeployInfoRequest(::google::protobuf_inworld::Arena* arena, const CheckDeployInfoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_character() ;
  const std::string& character() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character(Arg_&& arg, Args_... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* value);

  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(
      const std::string& value);
  std::string* _internal_mutable_character();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CheckDeployInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      66, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr character_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CharacterShareInfo final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterShareInfo) */ {
 public:
  inline CharacterShareInfo() : CharacterShareInfo(nullptr) {}
  ~CharacterShareInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterShareInfo(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CharacterShareInfo(const CharacterShareInfo& from)
      : CharacterShareInfo(nullptr, from) {}
  CharacterShareInfo(CharacterShareInfo&& from) noexcept
    : CharacterShareInfo() {
    *this = ::std::move(from);
  }

  inline CharacterShareInfo& operator=(const CharacterShareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterShareInfo& operator=(CharacterShareInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterShareInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterShareInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterShareInfo*>(
               &_CharacterShareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CharacterShareInfo& a, CharacterShareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterShareInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterShareInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterShareInfo* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterShareInfo>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CharacterShareInfo& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CharacterShareInfo& from) {
    CharacterShareInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterShareInfo* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterShareInfo";
  }
  protected:
  explicit CharacterShareInfo(::google::protobuf_inworld::Arena* arena);
  CharacterShareInfo(::google::protobuf_inworld::Arena* arena, const CharacterShareInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalIdsFieldNumber = 1,
  };
  // repeated string external_ids = 1;
  int external_ids_size() const;
  private:
  int _internal_external_ids_size() const;

  public:
  void clear_external_ids() ;
  const std::string& external_ids(int index) const;
  std::string* mutable_external_ids(int index);
  void set_external_ids(int index, const std::string& value);
  void set_external_ids(int index, std::string&& value);
  void set_external_ids(int index, const char* value);
  void set_external_ids(int index, const char* value, std::size_t size);
  void set_external_ids(int index, absl::string_view value);
  std::string* add_external_ids();
  void add_external_ids(const std::string& value);
  void add_external_ids(std::string&& value);
  void add_external_ids(const char* value);
  void add_external_ids(const char* value, std::size_t size);
  void add_external_ids(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& external_ids() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_external_ids();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_external_ids() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_external_ids();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterShareInfo)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField<std::string> external_ids_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CharacterAdvancedSettings_SafetySpec final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec) */ {
 public:
  inline CharacterAdvancedSettings_SafetySpec() : CharacterAdvancedSettings_SafetySpec(nullptr) {}
  ~CharacterAdvancedSettings_SafetySpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAdvancedSettings_SafetySpec(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CharacterAdvancedSettings_SafetySpec(const CharacterAdvancedSettings_SafetySpec& from)
      : CharacterAdvancedSettings_SafetySpec(nullptr, from) {}
  CharacterAdvancedSettings_SafetySpec(CharacterAdvancedSettings_SafetySpec&& from) noexcept
    : CharacterAdvancedSettings_SafetySpec() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings_SafetySpec& operator=(const CharacterAdvancedSettings_SafetySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings_SafetySpec& operator=(CharacterAdvancedSettings_SafetySpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterAdvancedSettings_SafetySpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterAdvancedSettings_SafetySpec* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings_SafetySpec*>(
               &_CharacterAdvancedSettings_SafetySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CharacterAdvancedSettings_SafetySpec& a, CharacterAdvancedSettings_SafetySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings_SafetySpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings_SafetySpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterAdvancedSettings_SafetySpec* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_SafetySpec>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CharacterAdvancedSettings_SafetySpec& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CharacterAdvancedSettings_SafetySpec& from) {
    CharacterAdvancedSettings_SafetySpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterAdvancedSettings_SafetySpec* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec";
  }
  protected:
  explicit CharacterAdvancedSettings_SafetySpec(::google::protobuf_inworld::Arena* arena);
  CharacterAdvancedSettings_SafetySpec(::google::protobuf_inworld::Arena* arena, const CharacterAdvancedSettings_SafetySpec& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedTopicsFieldNumber = 1,
  };
  // repeated .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetyTopicName allowed_topics = 1;
  int allowed_topics_size() const;
  private:
  int _internal_allowed_topics_size() const;

  public:
  void clear_allowed_topics() ;
  public:
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName allowed_topics(int index) const;
  void set_allowed_topics(int index, ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value);
  void add_allowed_topics(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value);
  const ::google::protobuf_inworld::RepeatedField<int>& allowed_topics() const;
  ::google::protobuf_inworld::RepeatedField<int>* mutable_allowed_topics();

  private:
  const ::google::protobuf_inworld::RepeatedField<int>& _internal_allowed_topics() const;
  ::google::protobuf_inworld::RepeatedField<int>* _internal_mutable_allowed_topics();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedField<int> allowed_topics_;
    mutable ::google::protobuf_inworld::internal::CachedSize _allowed_topics_cached_byte_size_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CharacterAdvancedSettings_ConversationConfig_EngineSpec final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec) */ {
 public:
  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec() : CharacterAdvancedSettings_ConversationConfig_EngineSpec(nullptr) {}
  ~CharacterAdvancedSettings_ConversationConfig_EngineSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAdvancedSettings_ConversationConfig_EngineSpec(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from)
      : CharacterAdvancedSettings_ConversationConfig_EngineSpec(nullptr, from) {}
  CharacterAdvancedSettings_ConversationConfig_EngineSpec(CharacterAdvancedSettings_ConversationConfig_EngineSpec&& from) noexcept
    : CharacterAdvancedSettings_ConversationConfig_EngineSpec() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec& operator=(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec& operator=(CharacterAdvancedSettings_ConversationConfig_EngineSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterAdvancedSettings_ConversationConfig_EngineSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterAdvancedSettings_ConversationConfig_EngineSpec* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(
               &_CharacterAdvancedSettings_ConversationConfig_EngineSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CharacterAdvancedSettings_ConversationConfig_EngineSpec& a, CharacterAdvancedSettings_ConversationConfig_EngineSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings_ConversationConfig_EngineSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings_ConversationConfig_EngineSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterAdvancedSettings_ConversationConfig_EngineSpec* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_ConversationConfig_EngineSpec>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from) {
    CharacterAdvancedSettings_ConversationConfig_EngineSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterAdvancedSettings_ConversationConfig_EngineSpec* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec";
  }
  protected:
  explicit CharacterAdvancedSettings_ConversationConfig_EngineSpec(::google::protobuf_inworld::Arena* arena);
  CharacterAdvancedSettings_ConversationConfig_EngineSpec(::google::protobuf_inworld::Arena* arena, const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kMaxTokensFieldNumber = 3,
    kFrequencyPenaltyFieldNumber = 4,
    kPresencePenaltyFieldNumber = 5,
    kTopPFieldNumber = 6,
    kRepetitionPenaltyFieldNumber = 7,
  };
  // string engine = 1;
  void clear_engine() ;
  const std::string& engine() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_engine(Arg_&& arg, Args_... args);
  std::string* mutable_engine();
  PROTOBUF_NODISCARD std::string* release_engine();
  void set_allocated_engine(std::string* value);

  private:
  const std::string& _internal_engine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_engine(
      const std::string& value);
  std::string* _internal_mutable_engine();

  public:
  // float temperature = 2;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // int32 max_tokens = 3;
  void clear_max_tokens() ;
  ::int32_t max_tokens() const;
  void set_max_tokens(::int32_t value);

  private:
  ::int32_t _internal_max_tokens() const;
  void _internal_set_max_tokens(::int32_t value);

  public:
  // float frequency_penalty = 4;
  void clear_frequency_penalty() ;
  float frequency_penalty() const;
  void set_frequency_penalty(float value);

  private:
  float _internal_frequency_penalty() const;
  void _internal_set_frequency_penalty(float value);

  public:
  // float presence_penalty = 5;
  void clear_presence_penalty() ;
  float presence_penalty() const;
  void set_presence_penalty(float value);

  private:
  float _internal_presence_penalty() const;
  void _internal_set_presence_penalty(float value);

  public:
  // float top_p = 6;
  void clear_top_p() ;
  float top_p() const;
  void set_top_p(float value);

  private:
  float _internal_top_p() const;
  void _internal_set_top_p(float value);

  public:
  // float repetition_penalty = 7;
  void clear_repetition_penalty() ;
  float repetition_penalty() const;
  void set_repetition_penalty(float value);

  private:
  float _internal_repetition_penalty() const;
  void _internal_set_repetition_penalty(float value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      3, 7, 0,
      96, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr engine_;
    float temperature_;
    ::int32_t max_tokens_;
    float frequency_penalty_;
    float presence_penalty_;
    float top_p_;
    float repetition_penalty_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_SharedPortalInfo_InteractionCountStat final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat) */ {
 public:
  inline Character_SharedPortalInfo_InteractionCountStat() : Character_SharedPortalInfo_InteractionCountStat(nullptr) {}
  ~Character_SharedPortalInfo_InteractionCountStat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_SharedPortalInfo_InteractionCountStat(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_SharedPortalInfo_InteractionCountStat(const Character_SharedPortalInfo_InteractionCountStat& from)
      : Character_SharedPortalInfo_InteractionCountStat(nullptr, from) {}
  Character_SharedPortalInfo_InteractionCountStat(Character_SharedPortalInfo_InteractionCountStat&& from) noexcept
    : Character_SharedPortalInfo_InteractionCountStat() {
    *this = ::std::move(from);
  }

  inline Character_SharedPortalInfo_InteractionCountStat& operator=(const Character_SharedPortalInfo_InteractionCountStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_SharedPortalInfo_InteractionCountStat& operator=(Character_SharedPortalInfo_InteractionCountStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_SharedPortalInfo_InteractionCountStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_SharedPortalInfo_InteractionCountStat* internal_default_instance() {
    return reinterpret_cast<const Character_SharedPortalInfo_InteractionCountStat*>(
               &_Character_SharedPortalInfo_InteractionCountStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Character_SharedPortalInfo_InteractionCountStat& a, Character_SharedPortalInfo_InteractionCountStat& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_SharedPortalInfo_InteractionCountStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_SharedPortalInfo_InteractionCountStat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_SharedPortalInfo_InteractionCountStat* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_SharedPortalInfo_InteractionCountStat>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_SharedPortalInfo_InteractionCountStat& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_SharedPortalInfo_InteractionCountStat& from) {
    Character_SharedPortalInfo_InteractionCountStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_SharedPortalInfo_InteractionCountStat* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat";
  }
  protected:
  explicit Character_SharedPortalInfo_InteractionCountStat(::google::protobuf_inworld::Arena* arena);
  Character_SharedPortalInfo_InteractionCountStat(::google::protobuf_inworld::Arena* arena, const Character_SharedPortalInfo_InteractionCountStat& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalCountFieldNumber = 1,
    kTotalUnreadCountFieldNumber = 2,
    kTotalReadCountFieldNumber = 3,
  };
  // int32 total_count = 1;
  void clear_total_count() ;
  ::int32_t total_count() const;
  void set_total_count(::int32_t value);

  private:
  ::int32_t _internal_total_count() const;
  void _internal_set_total_count(::int32_t value);

  public:
  // int32 total_unread_count = 2;
  void clear_total_unread_count() ;
  ::int32_t total_unread_count() const;
  void set_total_unread_count(::int32_t value);

  private:
  ::int32_t _internal_total_unread_count() const;
  void _internal_set_total_unread_count(::int32_t value);

  public:
  // int32 total_read_count = 3;
  void clear_total_read_count() ;
  ::int32_t total_read_count() const;
  void set_total_read_count(::int32_t value);

  private:
  ::int32_t _internal_total_read_count() const;
  void _internal_set_total_read_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::int32_t total_count_;
    ::int32_t total_unread_count_;
    ::int32_t total_read_count_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_SafetyConfigEntry_DoNotUse final
    : public ::google::protobuf_inworld::internal::MapEntry<
          Character_SafetyConfigEntry_DoNotUse, std::string, ::ai::inworld::studio::v1alpha::SafetyLevel,
          ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf_inworld::internal::WireFormatLite::TYPE_ENUM> {
 public:
  using SuperType = ::google::protobuf_inworld::internal::MapEntry<
      Character_SafetyConfigEntry_DoNotUse, std::string, ::ai::inworld::studio::v1alpha::SafetyLevel,
      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_ENUM>;
  Character_SafetyConfigEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Character_SafetyConfigEntry_DoNotUse(
      ::google::protobuf_inworld::internal::ConstantInitialized);
  explicit Character_SafetyConfigEntry_DoNotUse(::google::protobuf_inworld::Arena* arena);
  static const Character_SafetyConfigEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Character_SafetyConfigEntry_DoNotUse*>(
        &_Character_SafetyConfigEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf_inworld::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf_inworld::internal::WireFormatLite::PARSE, "ai.inworld.studio.v1alpha.Character.SafetyConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf_inworld::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};
// -------------------------------------------------------------------

class Character_Relationship final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.Relationship) */ {
 public:
  inline Character_Relationship() : Character_Relationship(nullptr) {}
  ~Character_Relationship() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_Relationship(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_Relationship(const Character_Relationship& from)
      : Character_Relationship(nullptr, from) {}
  Character_Relationship(Character_Relationship&& from) noexcept
    : Character_Relationship() {
    *this = ::std::move(from);
  }

  inline Character_Relationship& operator=(const Character_Relationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_Relationship& operator=(Character_Relationship&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_Relationship& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_Relationship* internal_default_instance() {
    return reinterpret_cast<const Character_Relationship*>(
               &_Character_Relationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Character_Relationship& a, Character_Relationship& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_Relationship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_Relationship* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_Relationship* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_Relationship>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_Relationship& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_Relationship& from) {
    Character_Relationship::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_Relationship* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.Relationship";
  }
  protected:
  explicit Character_Relationship(::google::protobuf_inworld::Arena* arena);
  Character_Relationship(::google::protobuf_inworld::Arena* arena, const Character_Relationship& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kFluidityFieldNumber = 2,
  };
  // bool enabled = 1;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // float fluidity = 2;
  void clear_fluidity() ;
  float fluidity() const;
  void set_fluidity(float value);

  private:
  float _internal_fluidity() const;
  void _internal_set_fluidity(float value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.Relationship)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    bool enabled_;
    float fluidity_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_Meta final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.Meta) */ {
 public:
  inline Character_Meta() : Character_Meta(nullptr) {}
  ~Character_Meta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_Meta(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_Meta(const Character_Meta& from)
      : Character_Meta(nullptr, from) {}
  Character_Meta(Character_Meta&& from) noexcept
    : Character_Meta() {
    *this = ::std::move(from);
  }

  inline Character_Meta& operator=(const Character_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_Meta& operator=(Character_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_Meta* internal_default_instance() {
    return reinterpret_cast<const Character_Meta*>(
               &_Character_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Character_Meta& a, Character_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_Meta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_Meta* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_Meta>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_Meta& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_Meta& from) {
    Character_Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_Meta* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.Meta";
  }
  protected:
  explicit Character_Meta(::google::protobuf_inworld::Arena* arena);
  Character_Meta(::google::protobuf_inworld::Arena* arena, const Character_Meta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTriggersFieldNumber = 1,
    kTotalCommonKnowledgeFieldNumber = 2,
    kGoalsVersionFieldNumber = 3,
  };
  // int32 total_triggers = 1;
  void clear_total_triggers() ;
  ::int32_t total_triggers() const;
  void set_total_triggers(::int32_t value);

  private:
  ::int32_t _internal_total_triggers() const;
  void _internal_set_total_triggers(::int32_t value);

  public:
  // int32 total_common_knowledge = 2;
  void clear_total_common_knowledge() ;
  ::int32_t total_common_knowledge() const;
  void set_total_common_knowledge(::int32_t value);

  private:
  ::int32_t _internal_total_common_knowledge() const;
  void _internal_set_total_common_knowledge(::int32_t value);

  public:
  // int32 goals_version = 3;
  void clear_goals_version() ;
  ::int32_t goals_version() const;
  void set_goals_version(::int32_t value);

  private:
  ::int32_t _internal_goals_version() const;
  void _internal_set_goals_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.Meta)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::int32_t total_triggers_;
    ::int32_t total_common_knowledge_;
    ::int32_t goals_version_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_LongTermCoherence final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.LongTermCoherence) */ {
 public:
  inline Character_LongTermCoherence() : Character_LongTermCoherence(nullptr) {}
  ~Character_LongTermCoherence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_LongTermCoherence(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_LongTermCoherence(const Character_LongTermCoherence& from)
      : Character_LongTermCoherence(nullptr, from) {}
  Character_LongTermCoherence(Character_LongTermCoherence&& from) noexcept
    : Character_LongTermCoherence() {
    *this = ::std::move(from);
  }

  inline Character_LongTermCoherence& operator=(const Character_LongTermCoherence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_LongTermCoherence& operator=(Character_LongTermCoherence&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_LongTermCoherence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_LongTermCoherence* internal_default_instance() {
    return reinterpret_cast<const Character_LongTermCoherence*>(
               &_Character_LongTermCoherence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Character_LongTermCoherence& a, Character_LongTermCoherence& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_LongTermCoherence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_LongTermCoherence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_LongTermCoherence* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_LongTermCoherence>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_LongTermCoherence& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_LongTermCoherence& from) {
    Character_LongTermCoherence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_LongTermCoherence* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.LongTermCoherence";
  }
  protected:
  explicit Character_LongTermCoherence(::google::protobuf_inworld::Arena* arena);
  Character_LongTermCoherence(::google::protobuf_inworld::Arena* arena, const Character_LongTermCoherence& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.LongTermCoherence)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    bool enabled_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_Fact final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.Fact) */ {
 public:
  inline Character_Fact() : Character_Fact(nullptr) {}
  ~Character_Fact() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_Fact(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_Fact(const Character_Fact& from)
      : Character_Fact(nullptr, from) {}
  Character_Fact(Character_Fact&& from) noexcept
    : Character_Fact() {
    *this = ::std::move(from);
  }

  inline Character_Fact& operator=(const Character_Fact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_Fact& operator=(Character_Fact&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_Fact& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_Fact* internal_default_instance() {
    return reinterpret_cast<const Character_Fact*>(
               &_Character_Fact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Character_Fact& a, Character_Fact& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_Fact* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_Fact* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_Fact* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_Fact>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_Fact& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_Fact& from) {
    Character_Fact::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_Fact* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.Fact";
  }
  protected:
  explicit Character_Fact(::google::protobuf_inworld::Arena* arena);
  Character_Fact(::google::protobuf_inworld::Arena* arena, const Character_Fact& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTagsFieldNumber = 3,
    kUuidFieldNumber = 1,
  };
  // repeated string text = 2;
  int text_size() const;
  private:
  int _internal_text_size() const;

  public:
  void clear_text() ;
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, std::size_t size);
  void set_text(int index, absl::string_view value);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, std::size_t size);
  void add_text(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& text() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_text();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_text() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_text();

  public:
  // repeated .ai.inworld.studio.v1alpha.Character.Tag tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  public:
  ::ai::inworld::studio::v1alpha::Character_Tag tags(int index) const;
  void set_tags(int index, ::ai::inworld::studio::v1alpha::Character_Tag value);
  void add_tags(::ai::inworld::studio::v1alpha::Character_Tag value);
  const ::google::protobuf_inworld::RepeatedField<int>& tags() const;
  ::google::protobuf_inworld::RepeatedField<int>* mutable_tags();

  private:
  const ::google::protobuf_inworld::RepeatedField<int>& _internal_tags() const;
  ::google::protobuf_inworld::RepeatedField<int>* _internal_mutable_tags();

  public:
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.Fact)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField<std::string> text_;
    ::google::protobuf_inworld::RepeatedField<int> tags_;
    mutable ::google::protobuf_inworld::internal::CachedSize _tags_cached_byte_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr uuid_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_CharacterPersonality final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterPersonality) */ {
 public:
  inline Character_CharacterPersonality() : Character_CharacterPersonality(nullptr) {}
  ~Character_CharacterPersonality() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_CharacterPersonality(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_CharacterPersonality(const Character_CharacterPersonality& from)
      : Character_CharacterPersonality(nullptr, from) {}
  Character_CharacterPersonality(Character_CharacterPersonality&& from) noexcept
    : Character_CharacterPersonality() {
    *this = ::std::move(from);
  }

  inline Character_CharacterPersonality& operator=(const Character_CharacterPersonality& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterPersonality& operator=(Character_CharacterPersonality&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_CharacterPersonality& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_CharacterPersonality* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterPersonality*>(
               &_Character_CharacterPersonality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Character_CharacterPersonality& a, Character_CharacterPersonality& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterPersonality* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterPersonality* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_CharacterPersonality* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_CharacterPersonality>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_CharacterPersonality& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_CharacterPersonality& from) {
    Character_CharacterPersonality::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_CharacterPersonality* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterPersonality";
  }
  protected:
  explicit Character_CharacterPersonality(::google::protobuf_inworld::Arena* arena);
  Character_CharacterPersonality(::google::protobuf_inworld::Arena* arena, const Character_CharacterPersonality& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveFieldNumber = 1,
    kPeacefulFieldNumber = 2,
    kOpenFieldNumber = 3,
    kExtravertFieldNumber = 4,
  };
  // int32 positive = 1;
  void clear_positive() ;
  ::int32_t positive() const;
  void set_positive(::int32_t value);

  private:
  ::int32_t _internal_positive() const;
  void _internal_set_positive(::int32_t value);

  public:
  // int32 peaceful = 2;
  void clear_peaceful() ;
  ::int32_t peaceful() const;
  void set_peaceful(::int32_t value);

  private:
  ::int32_t _internal_peaceful() const;
  void _internal_set_peaceful(::int32_t value);

  public:
  // int32 open = 3;
  void clear_open() ;
  ::int32_t open() const;
  void set_open(::int32_t value);

  private:
  ::int32_t _internal_open() const;
  void _internal_set_open(::int32_t value);

  public:
  // int32 extravert = 4;
  void clear_extravert() ;
  ::int32_t extravert() const;
  void set_extravert(::int32_t value);

  private:
  ::int32_t _internal_extravert() const;
  void _internal_set_extravert(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterPersonality)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::int32_t positive_;
    ::int32_t peaceful_;
    ::int32_t open_;
    ::int32_t extravert_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_CharacterInitialMood final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterInitialMood) */ {
 public:
  inline Character_CharacterInitialMood() : Character_CharacterInitialMood(nullptr) {}
  ~Character_CharacterInitialMood() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_CharacterInitialMood(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_CharacterInitialMood(const Character_CharacterInitialMood& from)
      : Character_CharacterInitialMood(nullptr, from) {}
  Character_CharacterInitialMood(Character_CharacterInitialMood&& from) noexcept
    : Character_CharacterInitialMood() {
    *this = ::std::move(from);
  }

  inline Character_CharacterInitialMood& operator=(const Character_CharacterInitialMood& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterInitialMood& operator=(Character_CharacterInitialMood&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_CharacterInitialMood& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_CharacterInitialMood* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterInitialMood*>(
               &_Character_CharacterInitialMood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Character_CharacterInitialMood& a, Character_CharacterInitialMood& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterInitialMood* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterInitialMood* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_CharacterInitialMood* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_CharacterInitialMood>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_CharacterInitialMood& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_CharacterInitialMood& from) {
    Character_CharacterInitialMood::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_CharacterInitialMood* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterInitialMood";
  }
  protected:
  explicit Character_CharacterInitialMood(::google::protobuf_inworld::Arena* arena);
  Character_CharacterInitialMood(::google::protobuf_inworld::Arena* arena, const Character_CharacterInitialMood& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoyFieldNumber = 1,
    kFearFieldNumber = 2,
    kTrustFieldNumber = 3,
    kSurpriseFieldNumber = 4,
  };
  // int32 joy = 1;
  void clear_joy() ;
  ::int32_t joy() const;
  void set_joy(::int32_t value);

  private:
  ::int32_t _internal_joy() const;
  void _internal_set_joy(::int32_t value);

  public:
  // int32 fear = 2;
  void clear_fear() ;
  ::int32_t fear() const;
  void set_fear(::int32_t value);

  private:
  ::int32_t _internal_fear() const;
  void _internal_set_fear(::int32_t value);

  public:
  // int32 trust = 3;
  void clear_trust() ;
  ::int32_t trust() const;
  void set_trust(::int32_t value);

  private:
  ::int32_t _internal_trust() const;
  void _internal_set_trust(::int32_t value);

  public:
  // int32 surprise = 4;
  void clear_surprise() ;
  ::int32_t surprise() const;
  void set_surprise(::int32_t value);

  private:
  ::int32_t _internal_surprise() const;
  void _internal_set_surprise(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterInitialMood)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::int32_t joy_;
    ::int32_t fear_;
    ::int32_t trust_;
    ::int32_t surprise_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_CharacterDescription_CustomDialogStyle final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle) */ {
 public:
  inline Character_CharacterDescription_CustomDialogStyle() : Character_CharacterDescription_CustomDialogStyle(nullptr) {}
  ~Character_CharacterDescription_CustomDialogStyle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_CharacterDescription_CustomDialogStyle(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_CharacterDescription_CustomDialogStyle(const Character_CharacterDescription_CustomDialogStyle& from)
      : Character_CharacterDescription_CustomDialogStyle(nullptr, from) {}
  Character_CharacterDescription_CustomDialogStyle(Character_CharacterDescription_CustomDialogStyle&& from) noexcept
    : Character_CharacterDescription_CustomDialogStyle() {
    *this = ::std::move(from);
  }

  inline Character_CharacterDescription_CustomDialogStyle& operator=(const Character_CharacterDescription_CustomDialogStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterDescription_CustomDialogStyle& operator=(Character_CharacterDescription_CustomDialogStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_CharacterDescription_CustomDialogStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_CharacterDescription_CustomDialogStyle* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterDescription_CustomDialogStyle*>(
               &_Character_CharacterDescription_CustomDialogStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Character_CharacterDescription_CustomDialogStyle& a, Character_CharacterDescription_CustomDialogStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterDescription_CustomDialogStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterDescription_CustomDialogStyle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_CharacterDescription_CustomDialogStyle* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_CharacterDescription_CustomDialogStyle>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_CharacterDescription_CustomDialogStyle& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_CharacterDescription_CustomDialogStyle& from) {
    Character_CharacterDescription_CustomDialogStyle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_CharacterDescription_CustomDialogStyle* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle";
  }
  protected:
  explicit Character_CharacterDescription_CustomDialogStyle(::google::protobuf_inworld::Arena* arena);
  Character_CharacterDescription_CustomDialogStyle(::google::protobuf_inworld::Arena* arena, const Character_CharacterDescription_CustomDialogStyle& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdjectivesFieldNumber = 4,
    kUuidFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kColloquialismFieldNumber = 6,
    kIsActiveFieldNumber = 3,
  };
  // repeated string adjectives = 4;
  int adjectives_size() const;
  private:
  int _internal_adjectives_size() const;

  public:
  void clear_adjectives() ;
  const std::string& adjectives(int index) const;
  std::string* mutable_adjectives(int index);
  void set_adjectives(int index, const std::string& value);
  void set_adjectives(int index, std::string&& value);
  void set_adjectives(int index, const char* value);
  void set_adjectives(int index, const char* value, std::size_t size);
  void set_adjectives(int index, absl::string_view value);
  std::string* add_adjectives();
  void add_adjectives(const std::string& value);
  void add_adjectives(std::string&& value);
  void add_adjectives(const char* value);
  void add_adjectives(const char* value, std::size_t size);
  void add_adjectives(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& adjectives() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_adjectives();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_adjectives() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_adjectives();

  public:
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // string display_name = 2;
  void clear_display_name() ;
  const std::string& display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* value);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // string colloquialism = 6;
  void clear_colloquialism() ;
  const std::string& colloquialism() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_colloquialism(Arg_&& arg, Args_... args);
  std::string* mutable_colloquialism();
  PROTOBUF_NODISCARD std::string* release_colloquialism();
  void set_allocated_colloquialism(std::string* value);

  private:
  const std::string& _internal_colloquialism() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colloquialism(
      const std::string& value);
  std::string* _internal_mutable_colloquialism();

  public:
  // bool is_active = 3;
  void clear_is_active() ;
  bool is_active() const;
  void set_is_active(bool value);

  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      3, 5, 0,
      122, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField<std::string> adjectives_;
    ::google::protobuf_inworld::internal::ArenaStringPtr uuid_;
    ::google::protobuf_inworld::internal::ArenaStringPtr display_name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr colloquialism_;
    bool is_active_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CharacterAdvancedSettings_ConversationConfig final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig) */ {
 public:
  inline CharacterAdvancedSettings_ConversationConfig() : CharacterAdvancedSettings_ConversationConfig(nullptr) {}
  ~CharacterAdvancedSettings_ConversationConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAdvancedSettings_ConversationConfig(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CharacterAdvancedSettings_ConversationConfig(const CharacterAdvancedSettings_ConversationConfig& from)
      : CharacterAdvancedSettings_ConversationConfig(nullptr, from) {}
  CharacterAdvancedSettings_ConversationConfig(CharacterAdvancedSettings_ConversationConfig&& from) noexcept
    : CharacterAdvancedSettings_ConversationConfig() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings_ConversationConfig& operator=(const CharacterAdvancedSettings_ConversationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings_ConversationConfig& operator=(CharacterAdvancedSettings_ConversationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterAdvancedSettings_ConversationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterAdvancedSettings_ConversationConfig* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings_ConversationConfig*>(
               &_CharacterAdvancedSettings_ConversationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CharacterAdvancedSettings_ConversationConfig& a, CharacterAdvancedSettings_ConversationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings_ConversationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings_ConversationConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterAdvancedSettings_ConversationConfig* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_ConversationConfig>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CharacterAdvancedSettings_ConversationConfig& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CharacterAdvancedSettings_ConversationConfig& from) {
    CharacterAdvancedSettings_ConversationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterAdvancedSettings_ConversationConfig* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig";
  }
  protected:
  explicit CharacterAdvancedSettings_ConversationConfig(::google::protobuf_inworld::Arena* arena);
  CharacterAdvancedSettings_ConversationConfig(::google::protobuf_inworld::Arena* arena, const CharacterAdvancedSettings_ConversationConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using EngineSpec = CharacterAdvancedSettings_ConversationConfig_EngineSpec;

  // accessors -------------------------------------------------------

  enum : int {
    kEngineSpecFieldNumber = 1,
  };
  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec engine_spec = 1;
  bool has_engine_spec() const;
  void clear_engine_spec() ;
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& engine_spec() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* release_engine_spec();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* mutable_engine_spec();
  void set_allocated_engine_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* value);
  void unsafe_arena_set_allocated_engine_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* value);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* unsafe_arena_release_engine_spec();

  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& _internal_engine_spec() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* _internal_mutable_engine_spec();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* engine_spec_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_SharedPortalInfo final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.SharedPortalInfo) */ {
 public:
  inline Character_SharedPortalInfo() : Character_SharedPortalInfo(nullptr) {}
  ~Character_SharedPortalInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_SharedPortalInfo(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_SharedPortalInfo(const Character_SharedPortalInfo& from)
      : Character_SharedPortalInfo(nullptr, from) {}
  Character_SharedPortalInfo(Character_SharedPortalInfo&& from) noexcept
    : Character_SharedPortalInfo() {
    *this = ::std::move(from);
  }

  inline Character_SharedPortalInfo& operator=(const Character_SharedPortalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_SharedPortalInfo& operator=(Character_SharedPortalInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_SharedPortalInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_SharedPortalInfo* internal_default_instance() {
    return reinterpret_cast<const Character_SharedPortalInfo*>(
               &_Character_SharedPortalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Character_SharedPortalInfo& a, Character_SharedPortalInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_SharedPortalInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_SharedPortalInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_SharedPortalInfo* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_SharedPortalInfo>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_SharedPortalInfo& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_SharedPortalInfo& from) {
    Character_SharedPortalInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_SharedPortalInfo* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.SharedPortalInfo";
  }
  protected:
  explicit Character_SharedPortalInfo(::google::protobuf_inworld::Arena* arena);
  Character_SharedPortalInfo(::google::protobuf_inworld::Arena* arena, const Character_SharedPortalInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using InteractionCountStat = Character_SharedPortalInfo_InteractionCountStat;

  // accessors -------------------------------------------------------

  enum : int {
    kBylineFieldNumber = 2,
    kPromptFieldNumber = 3,
    kShortAliasFieldNumber = 4,
    kInteractionCountStatFieldNumber = 6,
    kIsSharedFieldNumber = 1,
    kAllowedOnShowcaseFieldNumber = 5,
  };
  // string byline = 2;
  void clear_byline() ;
  const std::string& byline() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_byline(Arg_&& arg, Args_... args);
  std::string* mutable_byline();
  PROTOBUF_NODISCARD std::string* release_byline();
  void set_allocated_byline(std::string* value);

  private:
  const std::string& _internal_byline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_byline(
      const std::string& value);
  std::string* _internal_mutable_byline();

  public:
  // string prompt = 3;
  void clear_prompt() ;
  const std::string& prompt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* value);

  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(
      const std::string& value);
  std::string* _internal_mutable_prompt();

  public:
  // string short_alias = 4;
  void clear_short_alias() ;
  const std::string& short_alias() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_alias(Arg_&& arg, Args_... args);
  std::string* mutable_short_alias();
  PROTOBUF_NODISCARD std::string* release_short_alias();
  void set_allocated_short_alias(std::string* value);

  private:
  const std::string& _internal_short_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_alias(
      const std::string& value);
  std::string* _internal_mutable_short_alias();

  public:
  // .ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat interaction_count_stat = 6;
  bool has_interaction_count_stat() const;
  void clear_interaction_count_stat() ;
  const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat& interaction_count_stat() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* release_interaction_count_stat();
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* mutable_interaction_count_stat();
  void set_allocated_interaction_count_stat(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* value);
  void unsafe_arena_set_allocated_interaction_count_stat(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* value);
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* unsafe_arena_release_interaction_count_stat();

  private:
  const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat& _internal_interaction_count_stat() const;
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* _internal_mutable_interaction_count_stat();

  public:
  // bool is_shared = 1;
  void clear_is_shared() ;
  bool is_shared() const;
  void set_is_shared(bool value);

  private:
  bool _internal_is_shared() const;
  void _internal_set_is_shared(bool value);

  public:
  // bool allowed_on_showcase = 5;
  void clear_allowed_on_showcase() ;
  bool allowed_on_showcase() const;
  void set_allowed_on_showcase(bool value);

  private:
  bool _internal_allowed_on_showcase() const;
  void _internal_set_allowed_on_showcase(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.SharedPortalInfo)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      3, 6, 1,
      84, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr byline_;
    ::google::protobuf_inworld::internal::ArenaStringPtr prompt_;
    ::google::protobuf_inworld::internal::ArenaStringPtr short_alias_;
    ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* interaction_count_stat_;
    bool is_shared_;
    bool allowed_on_showcase_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_CharacterDescription final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterDescription) */ {
 public:
  inline Character_CharacterDescription() : Character_CharacterDescription(nullptr) {}
  ~Character_CharacterDescription() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_CharacterDescription(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_CharacterDescription(const Character_CharacterDescription& from)
      : Character_CharacterDescription(nullptr, from) {}
  Character_CharacterDescription(Character_CharacterDescription&& from) noexcept
    : Character_CharacterDescription() {
    *this = ::std::move(from);
  }

  inline Character_CharacterDescription& operator=(const Character_CharacterDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterDescription& operator=(Character_CharacterDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_CharacterDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_CharacterDescription* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterDescription*>(
               &_Character_CharacterDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Character_CharacterDescription& a, Character_CharacterDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterDescription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_CharacterDescription* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_CharacterDescription>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_CharacterDescription& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_CharacterDescription& from) {
    Character_CharacterDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_CharacterDescription* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterDescription";
  }
  protected:
  explicit Character_CharacterDescription(::google::protobuf_inworld::Arena* arena);
  Character_CharacterDescription(::google::protobuf_inworld::Arena* arena, const Character_CharacterDescription& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CustomDialogStyle = Character_CharacterDescription_CustomDialogStyle;

  using Pronoun = Character_CharacterDescription_Pronoun;
  static constexpr Pronoun PRONOUN_UNSPECIFIED = Character_CharacterDescription_Pronoun_PRONOUN_UNSPECIFIED;
  static constexpr Pronoun PRONOUN_FEMALE = Character_CharacterDescription_Pronoun_PRONOUN_FEMALE;
  static constexpr Pronoun PRONOUN_MALE = Character_CharacterDescription_Pronoun_PRONOUN_MALE;
  static constexpr Pronoun PRONOUN_OTHER = Character_CharacterDescription_Pronoun_PRONOUN_OTHER;
  static inline bool Pronoun_IsValid(int value) {
    return Character_CharacterDescription_Pronoun_IsValid(value);
  }
  static constexpr Pronoun Pronoun_MIN = Character_CharacterDescription_Pronoun_Pronoun_MIN;
  static constexpr Pronoun Pronoun_MAX = Character_CharacterDescription_Pronoun_Pronoun_MAX;
  static constexpr int Pronoun_ARRAYSIZE = Character_CharacterDescription_Pronoun_Pronoun_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* Pronoun_descriptor() {
    return Character_CharacterDescription_Pronoun_descriptor();
  }
  template <typename T>
  static inline const std::string& Pronoun_Name(T value) {
    return Character_CharacterDescription_Pronoun_Name(value);
  }
  static inline bool Pronoun_Parse(absl::string_view name, Pronoun* value) {
    return Character_CharacterDescription_Pronoun_Parse(name, value);
  }

  using ExampleDialogStyle = Character_CharacterDescription_ExampleDialogStyle;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_UNSPECIFIED = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_UNSPECIFIED;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_DEFAULT = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_DEFAULT;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_BUBBLY = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BUBBLY;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_FORMAL = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_FORMAL;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_BLUNT = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BLUNT;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_INQUISITIVE = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_INQUISITIVE;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_COMMANDING = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_COMMANDING;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_EMPATHETIC = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_EMPATHETIC;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_ENTERTAINING = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_ENTERTAINING;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_HYPOCHONDRIAC = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_HYPOCHONDRIAC;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_LAIDBACK = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_LAIDBACK;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_LONG_WINDED = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_LONG_WINDED;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_MORAL = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_MORAL;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_MYSTERIOUS = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_MYSTERIOUS;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_RACONTEUR = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_RACONTEUR;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_SARCASTIC = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_SARCASTIC;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_TENACIOUS = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_TENACIOUS;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_VILLAINOUS = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_VILLAINOUS;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_CUSTOM = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_CUSTOM;
  static inline bool ExampleDialogStyle_IsValid(int value) {
    return Character_CharacterDescription_ExampleDialogStyle_IsValid(value);
  }
  static constexpr ExampleDialogStyle ExampleDialogStyle_MIN = Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MIN;
  static constexpr ExampleDialogStyle ExampleDialogStyle_MAX = Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MAX;
  static constexpr int ExampleDialogStyle_ARRAYSIZE = Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* ExampleDialogStyle_descriptor() {
    return Character_CharacterDescription_ExampleDialogStyle_descriptor();
  }
  template <typename T>
  static inline const std::string& ExampleDialogStyle_Name(T value) {
    return Character_CharacterDescription_ExampleDialogStyle_Name(value);
  }
  static inline bool ExampleDialogStyle_Parse(absl::string_view name, ExampleDialogStyle* value) {
    return Character_CharacterDescription_ExampleDialogStyle_Parse(name, value);
  }

  using LifeStage = Character_CharacterDescription_LifeStage;
  static constexpr LifeStage LIFE_STAGE_UNSPECIFIED = Character_CharacterDescription_LifeStage_LIFE_STAGE_UNSPECIFIED;
  [[deprecated]] static constexpr LifeStage LIFE_STAGE_INFANCY = Character_CharacterDescription_LifeStage_LIFE_STAGE_INFANCY;
  [[deprecated]] static constexpr LifeStage LIFE_STAGE_TODDLERHOOD = Character_CharacterDescription_LifeStage_LIFE_STAGE_TODDLERHOOD;
  [[deprecated]] static constexpr LifeStage LIFE_STAGE_PRESCHOOL = Character_CharacterDescription_LifeStage_LIFE_STAGE_PRESCHOOL;
  [[deprecated]] static constexpr LifeStage LIFE_STAGE_EARLY_SCHOOL = Character_CharacterDescription_LifeStage_LIFE_STAGE_EARLY_SCHOOL;
  static constexpr LifeStage LIFE_STAGE_ADOLESCENCE = Character_CharacterDescription_LifeStage_LIFE_STAGE_ADOLESCENCE;
  static constexpr LifeStage LIFE_STAGE_YOUNG_ADULTHOOD = Character_CharacterDescription_LifeStage_LIFE_STAGE_YOUNG_ADULTHOOD;
  static constexpr LifeStage LIFE_STAGE_MIDDLE_ADULTHOOD = Character_CharacterDescription_LifeStage_LIFE_STAGE_MIDDLE_ADULTHOOD;
  static constexpr LifeStage LIFE_STAGE_LATE_ADULTHOOD = Character_CharacterDescription_LifeStage_LIFE_STAGE_LATE_ADULTHOOD;
  static constexpr LifeStage LIFE_STAGE_CHILDHOOD = Character_CharacterDescription_LifeStage_LIFE_STAGE_CHILDHOOD;
  static inline bool LifeStage_IsValid(int value) {
    return Character_CharacterDescription_LifeStage_IsValid(value);
  }
  static constexpr LifeStage LifeStage_MIN = Character_CharacterDescription_LifeStage_LifeStage_MIN;
  static constexpr LifeStage LifeStage_MAX = Character_CharacterDescription_LifeStage_LifeStage_MAX;
  static constexpr int LifeStage_ARRAYSIZE = Character_CharacterDescription_LifeStage_LifeStage_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* LifeStage_descriptor() {
    return Character_CharacterDescription_LifeStage_descriptor();
  }
  template <typename T>
  static inline const std::string& LifeStage_Name(T value) {
    return Character_CharacterDescription_LifeStage_Name(value);
  }
  static inline bool LifeStage_Parse(absl::string_view name, LifeStage* value) {
    return Character_CharacterDescription_LifeStage_Parse(name, value);
  }

  using DialogResponseLength = Character_CharacterDescription_DialogResponseLength;
  static constexpr DialogResponseLength DIALOG_RESPONSE_LENGTH_UNSPECIFIED = Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_UNSPECIFIED;
  static constexpr DialogResponseLength DIALOG_RESPONSE_LENGTH_VERY_SHORT = Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_VERY_SHORT;
  static constexpr DialogResponseLength DIALOG_RESPONSE_LENGTH_SHORT = Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_SHORT;
  static constexpr DialogResponseLength DIALOG_RESPONSE_LENGTH_MEDIUM = Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_MEDIUM;
  static constexpr DialogResponseLength DIALOG_RESPONSE_LENGTH_LONG = Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_LONG;
  static constexpr DialogResponseLength DIALOG_RESPONSE_LENGTH_VERY_LONG = Character_CharacterDescription_DialogResponseLength_DIALOG_RESPONSE_LENGTH_VERY_LONG;
  static inline bool DialogResponseLength_IsValid(int value) {
    return Character_CharacterDescription_DialogResponseLength_IsValid(value);
  }
  static constexpr DialogResponseLength DialogResponseLength_MIN = Character_CharacterDescription_DialogResponseLength_DialogResponseLength_MIN;
  static constexpr DialogResponseLength DialogResponseLength_MAX = Character_CharacterDescription_DialogResponseLength_DialogResponseLength_MAX;
  static constexpr int DialogResponseLength_ARRAYSIZE = Character_CharacterDescription_DialogResponseLength_DialogResponseLength_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* DialogResponseLength_descriptor() {
    return Character_CharacterDescription_DialogResponseLength_descriptor();
  }
  template <typename T>
  static inline const std::string& DialogResponseLength_Name(T value) {
    return Character_CharacterDescription_DialogResponseLength_Name(value);
  }
  static inline bool DialogResponseLength_Parse(absl::string_view name, DialogResponseLength* value) {
    return Character_CharacterDescription_DialogResponseLength_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicknamesFieldNumber = 4,
    kPersonalityAdjectivesFieldNumber = 11,
    kHobbyOrInterestsFieldNumber = 13,
    kCustomDialogStylesFieldNumber = 16,
    kGivenNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kMotivationFieldNumber = 5,
    kWikipediaUriFieldNumber = 6,
    kExampleDialogFieldNumber = 9,
    kCharacterRoleFieldNumber = 14,
    kFlawsFieldNumber = 17,
    kPronounFieldNumber = 3,
    kExampleDialogStyleFieldNumber = 10,
    kLifeStageFieldNumber = 12,
    kNarrativeActionsEnabledFieldNumber = 15,
    kDialogResponseLengthFieldNumber = 19,
  };
  // repeated string nicknames = 4;
  int nicknames_size() const;
  private:
  int _internal_nicknames_size() const;

  public:
  void clear_nicknames() ;
  const std::string& nicknames(int index) const;
  std::string* mutable_nicknames(int index);
  void set_nicknames(int index, const std::string& value);
  void set_nicknames(int index, std::string&& value);
  void set_nicknames(int index, const char* value);
  void set_nicknames(int index, const char* value, std::size_t size);
  void set_nicknames(int index, absl::string_view value);
  std::string* add_nicknames();
  void add_nicknames(const std::string& value);
  void add_nicknames(std::string&& value);
  void add_nicknames(const char* value);
  void add_nicknames(const char* value, std::size_t size);
  void add_nicknames(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& nicknames() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_nicknames();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_nicknames() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_nicknames();

  public:
  // repeated string personality_adjectives = 11;
  int personality_adjectives_size() const;
  private:
  int _internal_personality_adjectives_size() const;

  public:
  void clear_personality_adjectives() ;
  const std::string& personality_adjectives(int index) const;
  std::string* mutable_personality_adjectives(int index);
  void set_personality_adjectives(int index, const std::string& value);
  void set_personality_adjectives(int index, std::string&& value);
  void set_personality_adjectives(int index, const char* value);
  void set_personality_adjectives(int index, const char* value, std::size_t size);
  void set_personality_adjectives(int index, absl::string_view value);
  std::string* add_personality_adjectives();
  void add_personality_adjectives(const std::string& value);
  void add_personality_adjectives(std::string&& value);
  void add_personality_adjectives(const char* value);
  void add_personality_adjectives(const char* value, std::size_t size);
  void add_personality_adjectives(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& personality_adjectives() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_personality_adjectives();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_personality_adjectives() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_personality_adjectives();

  public:
  // repeated string hobby_or_interests = 13;
  int hobby_or_interests_size() const;
  private:
  int _internal_hobby_or_interests_size() const;

  public:
  void clear_hobby_or_interests() ;
  const std::string& hobby_or_interests(int index) const;
  std::string* mutable_hobby_or_interests(int index);
  void set_hobby_or_interests(int index, const std::string& value);
  void set_hobby_or_interests(int index, std::string&& value);
  void set_hobby_or_interests(int index, const char* value);
  void set_hobby_or_interests(int index, const char* value, std::size_t size);
  void set_hobby_or_interests(int index, absl::string_view value);
  std::string* add_hobby_or_interests();
  void add_hobby_or_interests(const std::string& value);
  void add_hobby_or_interests(std::string&& value);
  void add_hobby_or_interests(const char* value);
  void add_hobby_or_interests(const char* value, std::size_t size);
  void add_hobby_or_interests(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& hobby_or_interests() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_hobby_or_interests();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_hobby_or_interests() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_hobby_or_interests();

  public:
  // repeated .ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle custom_dialog_styles = 16;
  int custom_dialog_styles_size() const;
  private:
  int _internal_custom_dialog_styles_size() const;

  public:
  void clear_custom_dialog_styles() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle* mutable_custom_dialog_styles(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle >*
      mutable_custom_dialog_styles();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle>& _internal_custom_dialog_styles() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle>* _internal_mutable_custom_dialog_styles();
  public:
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle& custom_dialog_styles(int index) const;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle* add_custom_dialog_styles();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle >&
      custom_dialog_styles() const;
  // string given_name = 1 [(.ai.inworld.options.examples) = {
  void clear_given_name() ;
  const std::string& given_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_given_name(Arg_&& arg, Args_... args);
  std::string* mutable_given_name();
  PROTOBUF_NODISCARD std::string* release_given_name();
  void set_allocated_given_name(std::string* value);

  private:
  const std::string& _internal_given_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_given_name(
      const std::string& value);
  std::string* _internal_mutable_given_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string motivation = 5;
  void clear_motivation() ;
  const std::string& motivation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_motivation(Arg_&& arg, Args_... args);
  std::string* mutable_motivation();
  PROTOBUF_NODISCARD std::string* release_motivation();
  void set_allocated_motivation(std::string* value);

  private:
  const std::string& _internal_motivation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motivation(
      const std::string& value);
  std::string* _internal_mutable_motivation();

  public:
  // string wikipedia_uri = 6;
  void clear_wikipedia_uri() ;
  const std::string& wikipedia_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wikipedia_uri(Arg_&& arg, Args_... args);
  std::string* mutable_wikipedia_uri();
  PROTOBUF_NODISCARD std::string* release_wikipedia_uri();
  void set_allocated_wikipedia_uri(std::string* value);

  private:
  const std::string& _internal_wikipedia_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wikipedia_uri(
      const std::string& value);
  std::string* _internal_mutable_wikipedia_uri();

  public:
  // string example_dialog = 9;
  void clear_example_dialog() ;
  const std::string& example_dialog() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_example_dialog(Arg_&& arg, Args_... args);
  std::string* mutable_example_dialog();
  PROTOBUF_NODISCARD std::string* release_example_dialog();
  void set_allocated_example_dialog(std::string* value);

  private:
  const std::string& _internal_example_dialog() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_example_dialog(
      const std::string& value);
  std::string* _internal_mutable_example_dialog();

  public:
  // string character_role = 14;
  void clear_character_role() ;
  const std::string& character_role() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_role(Arg_&& arg, Args_... args);
  std::string* mutable_character_role();
  PROTOBUF_NODISCARD std::string* release_character_role();
  void set_allocated_character_role(std::string* value);

  private:
  const std::string& _internal_character_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_role(
      const std::string& value);
  std::string* _internal_mutable_character_role();

  public:
  // string flaws = 17;
  void clear_flaws() ;
  const std::string& flaws() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_flaws(Arg_&& arg, Args_... args);
  std::string* mutable_flaws();
  PROTOBUF_NODISCARD std::string* release_flaws();
  void set_allocated_flaws(std::string* value);

  private:
  const std::string& _internal_flaws() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flaws(
      const std::string& value);
  std::string* _internal_mutable_flaws();

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.Pronoun pronoun = 3;
  void clear_pronoun() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun pronoun() const;
  void set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value);

  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun _internal_pronoun() const;
  void _internal_set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value);

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.ExampleDialogStyle example_dialog_style = 10;
  void clear_example_dialog_style() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle example_dialog_style() const;
  void set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value);

  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle _internal_example_dialog_style() const;
  void _internal_set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value);

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.LifeStage life_stage = 12;
  void clear_life_stage() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage life_stage() const;
  void set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value);

  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage _internal_life_stage() const;
  void _internal_set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value);

  public:
  // bool narrative_actions_enabled = 15;
  void clear_narrative_actions_enabled() ;
  bool narrative_actions_enabled() const;
  void set_narrative_actions_enabled(bool value);

  private:
  bool _internal_narrative_actions_enabled() const;
  void _internal_set_narrative_actions_enabled(bool value);

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.DialogResponseLength dialog_response_length = 19;
  void clear_dialog_response_length() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength dialog_response_length() const;
  void set_dialog_response_length(::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength value);

  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength _internal_dialog_response_length() const;
  void _internal_set_dialog_response_length(::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterDescription)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      5, 16, 1,
      207, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField<std::string> nicknames_;
    ::google::protobuf_inworld::RepeatedPtrField<std::string> personality_adjectives_;
    ::google::protobuf_inworld::RepeatedPtrField<std::string> hobby_or_interests_;
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle > custom_dialog_styles_;
    ::google::protobuf_inworld::internal::ArenaStringPtr given_name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr description_;
    ::google::protobuf_inworld::internal::ArenaStringPtr motivation_;
    ::google::protobuf_inworld::internal::ArenaStringPtr wikipedia_uri_;
    ::google::protobuf_inworld::internal::ArenaStringPtr example_dialog_;
    ::google::protobuf_inworld::internal::ArenaStringPtr character_role_;
    ::google::protobuf_inworld::internal::ArenaStringPtr flaws_;
    int pronoun_;
    int example_dialog_style_;
    int life_stage_;
    bool narrative_actions_enabled_;
    int dialog_response_length_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CharacterAdvancedSettings final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings) */ {
 public:
  inline CharacterAdvancedSettings() : CharacterAdvancedSettings(nullptr) {}
  ~CharacterAdvancedSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAdvancedSettings(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CharacterAdvancedSettings(const CharacterAdvancedSettings& from)
      : CharacterAdvancedSettings(nullptr, from) {}
  CharacterAdvancedSettings(CharacterAdvancedSettings&& from) noexcept
    : CharacterAdvancedSettings() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings& operator=(const CharacterAdvancedSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings& operator=(CharacterAdvancedSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterAdvancedSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterAdvancedSettings* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings*>(
               &_CharacterAdvancedSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CharacterAdvancedSettings& a, CharacterAdvancedSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterAdvancedSettings* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CharacterAdvancedSettings& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CharacterAdvancedSettings& from) {
    CharacterAdvancedSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterAdvancedSettings* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings";
  }
  protected:
  explicit CharacterAdvancedSettings(::google::protobuf_inworld::Arena* arena);
  CharacterAdvancedSettings(::google::protobuf_inworld::Arena* arena, const CharacterAdvancedSettings& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ConversationConfig = CharacterAdvancedSettings_ConversationConfig;
  using SafetySpec = CharacterAdvancedSettings_SafetySpec;

  using SafetyTopicName = CharacterAdvancedSettings_SafetyTopicName;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_UNSPECIFIED = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_UNSPECIFIED;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_SAFE_TOPIC = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SAFE_TOPIC;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_POLITICS = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_POLITICS;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_FINANCES = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_FINANCES;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_DISGUSTING_STUFF = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_DISGUSTING_STUFF;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_GENDER_BIAS = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_GENDER_BIAS;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_SUBSTANCE_USE = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SUBSTANCE_USE;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_HEALTH_ADVICE = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_HEALTH_ADVICE;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_RELIGION = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELIGION;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_RELATIONSHIPS = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELATIONSHIPS;
  static inline bool SafetyTopicName_IsValid(int value) {
    return CharacterAdvancedSettings_SafetyTopicName_IsValid(value);
  }
  static constexpr SafetyTopicName SafetyTopicName_MIN = CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MIN;
  static constexpr SafetyTopicName SafetyTopicName_MAX = CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MAX;
  static constexpr int SafetyTopicName_ARRAYSIZE = CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* SafetyTopicName_descriptor() {
    return CharacterAdvancedSettings_SafetyTopicName_descriptor();
  }
  template <typename T>
  static inline const std::string& SafetyTopicName_Name(T value) {
    return CharacterAdvancedSettings_SafetyTopicName_Name(value);
  }
  static inline bool SafetyTopicName_Parse(absl::string_view name, SafetyTopicName* value) {
    return CharacterAdvancedSettings_SafetyTopicName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCustomPromptTemplateFieldNumber = 4,
    kAdditionalAgentInfoFieldNumber = 6,
    kConversationConfigFieldNumber = 2,
    kSpeechSafetySpecFieldNumber = 5,
  };
  // string name = 1 [(.ai.inworld.options.examples) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string custom_prompt_template = 4;
  void clear_custom_prompt_template() ;
  const std::string& custom_prompt_template() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_custom_prompt_template(Arg_&& arg, Args_... args);
  std::string* mutable_custom_prompt_template();
  PROTOBUF_NODISCARD std::string* release_custom_prompt_template();
  void set_allocated_custom_prompt_template(std::string* value);

  private:
  const std::string& _internal_custom_prompt_template() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_prompt_template(
      const std::string& value);
  std::string* _internal_mutable_custom_prompt_template();

  public:
  // string additional_agent_info = 6;
  void clear_additional_agent_info() ;
  const std::string& additional_agent_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_additional_agent_info(Arg_&& arg, Args_... args);
  std::string* mutable_additional_agent_info();
  PROTOBUF_NODISCARD std::string* release_additional_agent_info();
  void set_allocated_additional_agent_info(std::string* value);

  private:
  const std::string& _internal_additional_agent_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_agent_info(
      const std::string& value);
  std::string* _internal_mutable_additional_agent_info();

  public:
  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig conversation_config = 2;
  bool has_conversation_config() const;
  void clear_conversation_config() ;
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& conversation_config() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* release_conversation_config();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* mutable_conversation_config();
  void set_allocated_conversation_config(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* value);
  void unsafe_arena_set_allocated_conversation_config(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* value);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* unsafe_arena_release_conversation_config();

  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& _internal_conversation_config() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* _internal_mutable_conversation_config();

  public:
  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec speech_safety_spec = 5;
  bool has_speech_safety_spec() const;
  void clear_speech_safety_spec() ;
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& speech_safety_spec() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* release_speech_safety_spec();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* mutable_speech_safety_spec();
  void set_allocated_speech_safety_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* value);
  void unsafe_arena_set_allocated_speech_safety_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* value);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* unsafe_arena_release_speech_safety_spec();

  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& _internal_speech_safety_spec() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* _internal_mutable_speech_safety_spec();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      3, 5, 2,
      107, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr custom_prompt_template_;
    ::google::protobuf_inworld::internal::ArenaStringPtr additional_agent_info_;
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* conversation_config_;
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* speech_safety_spec_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character_CharacterAssets final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterAssets) */ {
 public:
  inline Character_CharacterAssets() : Character_CharacterAssets(nullptr) {}
  ~Character_CharacterAssets() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character_CharacterAssets(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character_CharacterAssets(const Character_CharacterAssets& from)
      : Character_CharacterAssets(nullptr, from) {}
  Character_CharacterAssets(Character_CharacterAssets&& from) noexcept
    : Character_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline Character_CharacterAssets& operator=(const Character_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterAssets& operator=(Character_CharacterAssets&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_CharacterAssets& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterAssets*>(
               &_Character_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Character_CharacterAssets& a, Character_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterAssets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterAssets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_CharacterAssets* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_CharacterAssets>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character_CharacterAssets& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character_CharacterAssets& from) {
    Character_CharacterAssets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character_CharacterAssets* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterAssets";
  }
  protected:
  explicit Character_CharacterAssets(::google::protobuf_inworld::Arena* arena);
  Character_CharacterAssets(::google::protobuf_inworld::Arena* arena, const Character_CharacterAssets& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AvatarType = Character_CharacterAssets_AvatarType;
  static constexpr AvatarType AVATAR_TYPE_UNSPECIFIED = Character_CharacterAssets_AvatarType_AVATAR_TYPE_UNSPECIFIED;
  static constexpr AvatarType AVATAR_TYPE_RPM = Character_CharacterAssets_AvatarType_AVATAR_TYPE_RPM;
  static constexpr AvatarType AVATAR_TYPE_INWORLD = Character_CharacterAssets_AvatarType_AVATAR_TYPE_INWORLD;
  static inline bool AvatarType_IsValid(int value) {
    return Character_CharacterAssets_AvatarType_IsValid(value);
  }
  static constexpr AvatarType AvatarType_MIN = Character_CharacterAssets_AvatarType_AvatarType_MIN;
  static constexpr AvatarType AvatarType_MAX = Character_CharacterAssets_AvatarType_AvatarType_MAX;
  static constexpr int AvatarType_ARRAYSIZE = Character_CharacterAssets_AvatarType_AvatarType_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* AvatarType_descriptor() {
    return Character_CharacterAssets_AvatarType_descriptor();
  }
  template <typename T>
  static inline const std::string& AvatarType_Name(T value) {
    return Character_CharacterAssets_AvatarType_Name(value);
  }
  static inline bool AvatarType_Parse(absl::string_view name, AvatarType* value) {
    return Character_CharacterAssets_AvatarType_Parse(name, value);
  }

  using AvatarDisplayImageSource = Character_CharacterAssets_AvatarDisplayImageSource;
  static constexpr AvatarDisplayImageSource AVATAR_DISPLAY_IMAGE_SOURCE_UNSPECIFIED = Character_CharacterAssets_AvatarDisplayImageSource_AVATAR_DISPLAY_IMAGE_SOURCE_UNSPECIFIED;
  static constexpr AvatarDisplayImageSource RPM_IMAGE = Character_CharacterAssets_AvatarDisplayImageSource_RPM_IMAGE;
  static constexpr AvatarDisplayImageSource INNEQUIN_IMAGE = Character_CharacterAssets_AvatarDisplayImageSource_INNEQUIN_IMAGE;
  static constexpr AvatarDisplayImageSource USER_PROVIDED_IMAGE = Character_CharacterAssets_AvatarDisplayImageSource_USER_PROVIDED_IMAGE;
  static inline bool AvatarDisplayImageSource_IsValid(int value) {
    return Character_CharacterAssets_AvatarDisplayImageSource_IsValid(value);
  }
  static constexpr AvatarDisplayImageSource AvatarDisplayImageSource_MIN = Character_CharacterAssets_AvatarDisplayImageSource_AvatarDisplayImageSource_MIN;
  static constexpr AvatarDisplayImageSource AvatarDisplayImageSource_MAX = Character_CharacterAssets_AvatarDisplayImageSource_AvatarDisplayImageSource_MAX;
  static constexpr int AvatarDisplayImageSource_ARRAYSIZE = Character_CharacterAssets_AvatarDisplayImageSource_AvatarDisplayImageSource_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* AvatarDisplayImageSource_descriptor() {
    return Character_CharacterAssets_AvatarDisplayImageSource_descriptor();
  }
  template <typename T>
  static inline const std::string& AvatarDisplayImageSource_Name(T value) {
    return Character_CharacterAssets_AvatarDisplayImageSource_Name(value);
  }
  static inline bool AvatarDisplayImageSource_Parse(absl::string_view name, AvatarDisplayImageSource* value) {
    return Character_CharacterAssets_AvatarDisplayImageSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 2,
    kRpmImageUriFieldNumber = 3,
    kRpmImageUriPortraitFieldNumber = 4,
    kRpmImageUriPostureFieldNumber = 5,
    kAvatarImgFieldNumber = 7,
    kAvatarImgOriginalFieldNumber = 8,
    kAvatarBackgroundFieldNumber = 9,
    kAvatarMaterialFieldNumber = 10,
    kInnequinImgUriFieldNumber = 12,
    kInnequinImgOriginalFieldNumber = 14,
    kVoiceFieldNumber = 6,
    kAvatarTypeFieldNumber = 11,
    kAvatarDisplayImageSourceFieldNumber = 13,
  };
  // string rpm_model_uri = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_model_uri() ;
  const std::string& rpm_model_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_model_uri(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_model_uri();
  PROTOBUF_NODISCARD std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* value);

  private:
  const std::string& _internal_rpm_model_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_model_uri(
      const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();

  public:
  // string rpm_image_uri = 3 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  [[deprecated]]  void clear_rpm_image_uri() ;
  [[deprecated]] const std::string& rpm_image_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_rpm_image_uri(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_rpm_image_uri();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_rpm_image_uri();
  [[deprecated]] void set_allocated_rpm_image_uri(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri();

  public:
  // string rpm_image_uri_portrait = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_portrait() ;
  const std::string& rpm_image_uri_portrait() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_image_uri_portrait(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_image_uri_portrait();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_portrait(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();

  public:
  // string rpm_image_uri_posture = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_posture() ;
  const std::string& rpm_image_uri_posture() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_image_uri_posture(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_image_uri_posture();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_posture(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();

  public:
  // string avatar_img = 7;
  void clear_avatar_img() ;
  const std::string& avatar_img() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_img(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_img();
  PROTOBUF_NODISCARD std::string* release_avatar_img();
  void set_allocated_avatar_img(std::string* value);

  private:
  const std::string& _internal_avatar_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_img(
      const std::string& value);
  std::string* _internal_mutable_avatar_img();

  public:
  // string avatar_img_original = 8;
  void clear_avatar_img_original() ;
  const std::string& avatar_img_original() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_img_original(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_img_original();
  PROTOBUF_NODISCARD std::string* release_avatar_img_original();
  void set_allocated_avatar_img_original(std::string* value);

  private:
  const std::string& _internal_avatar_img_original() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_img_original(
      const std::string& value);
  std::string* _internal_mutable_avatar_img_original();

  public:
  // string avatar_background = 9;
  void clear_avatar_background() ;
  const std::string& avatar_background() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_background(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_background();
  PROTOBUF_NODISCARD std::string* release_avatar_background();
  void set_allocated_avatar_background(std::string* value);

  private:
  const std::string& _internal_avatar_background() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_background(
      const std::string& value);
  std::string* _internal_mutable_avatar_background();

  public:
  // string avatar_material = 10;
  void clear_avatar_material() ;
  const std::string& avatar_material() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_material(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_material();
  PROTOBUF_NODISCARD std::string* release_avatar_material();
  void set_allocated_avatar_material(std::string* value);

  private:
  const std::string& _internal_avatar_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_material(
      const std::string& value);
  std::string* _internal_mutable_avatar_material();

  public:
  // string innequin_img_uri = 12;
  void clear_innequin_img_uri() ;
  const std::string& innequin_img_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_innequin_img_uri(Arg_&& arg, Args_... args);
  std::string* mutable_innequin_img_uri();
  PROTOBUF_NODISCARD std::string* release_innequin_img_uri();
  void set_allocated_innequin_img_uri(std::string* value);

  private:
  const std::string& _internal_innequin_img_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_innequin_img_uri(
      const std::string& value);
  std::string* _internal_mutable_innequin_img_uri();

  public:
  // string innequin_img_original = 14;
  void clear_innequin_img_original() ;
  const std::string& innequin_img_original() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_innequin_img_original(Arg_&& arg, Args_... args);
  std::string* mutable_innequin_img_original();
  PROTOBUF_NODISCARD std::string* release_innequin_img_original();
  void set_allocated_innequin_img_original(std::string* value);

  private:
  const std::string& _internal_innequin_img_original() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_innequin_img_original(
      const std::string& value);
  std::string* _internal_mutable_innequin_img_original();

  public:
  // .ai.inworld.voices.Voice voice = 6;
  bool has_voice() const;
  void clear_voice() ;
  const ::ai::inworld::voices::Voice& voice() const;
  PROTOBUF_NODISCARD ::ai::inworld::voices::Voice* release_voice();
  ::ai::inworld::voices::Voice* mutable_voice();
  void set_allocated_voice(::ai::inworld::voices::Voice* value);
  void unsafe_arena_set_allocated_voice(::ai::inworld::voices::Voice* value);
  ::ai::inworld::voices::Voice* unsafe_arena_release_voice();

  private:
  const ::ai::inworld::voices::Voice& _internal_voice() const;
  ::ai::inworld::voices::Voice* _internal_mutable_voice();

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterAssets.AvatarType avatar_type = 11;
  void clear_avatar_type() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType avatar_type() const;
  void set_avatar_type(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType value);

  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType _internal_avatar_type() const;
  void _internal_set_avatar_type(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType value);

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterAssets.AvatarDisplayImageSource avatar_display_image_source = 13;
  void clear_avatar_display_image_source() ;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource avatar_display_image_source() const;
  void set_avatar_display_image_source(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource value);

  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource _internal_avatar_display_image_source() const;
  void _internal_set_avatar_display_image_source(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterAssets)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      4, 13, 1,
      235, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr rpm_model_uri_;
    ::google::protobuf_inworld::internal::ArenaStringPtr rpm_image_uri_;
    ::google::protobuf_inworld::internal::ArenaStringPtr rpm_image_uri_portrait_;
    ::google::protobuf_inworld::internal::ArenaStringPtr rpm_image_uri_posture_;
    ::google::protobuf_inworld::internal::ArenaStringPtr avatar_img_;
    ::google::protobuf_inworld::internal::ArenaStringPtr avatar_img_original_;
    ::google::protobuf_inworld::internal::ArenaStringPtr avatar_background_;
    ::google::protobuf_inworld::internal::ArenaStringPtr avatar_material_;
    ::google::protobuf_inworld::internal::ArenaStringPtr innequin_img_uri_;
    ::google::protobuf_inworld::internal::ArenaStringPtr innequin_img_original_;
    ::ai::inworld::voices::Voice* voice_;
    int avatar_type_;
    int avatar_display_image_source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class UpdateCharacterAdvancedSettingsRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest) */ {
 public:
  inline UpdateCharacterAdvancedSettingsRequest() : UpdateCharacterAdvancedSettingsRequest(nullptr) {}
  ~UpdateCharacterAdvancedSettingsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateCharacterAdvancedSettingsRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UpdateCharacterAdvancedSettingsRequest(const UpdateCharacterAdvancedSettingsRequest& from)
      : UpdateCharacterAdvancedSettingsRequest(nullptr, from) {}
  UpdateCharacterAdvancedSettingsRequest(UpdateCharacterAdvancedSettingsRequest&& from) noexcept
    : UpdateCharacterAdvancedSettingsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCharacterAdvancedSettingsRequest& operator=(const UpdateCharacterAdvancedSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCharacterAdvancedSettingsRequest& operator=(UpdateCharacterAdvancedSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCharacterAdvancedSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCharacterAdvancedSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCharacterAdvancedSettingsRequest*>(
               &_UpdateCharacterAdvancedSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateCharacterAdvancedSettingsRequest& a, UpdateCharacterAdvancedSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCharacterAdvancedSettingsRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCharacterAdvancedSettingsRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UpdateCharacterAdvancedSettingsRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UpdateCharacterAdvancedSettingsRequest& from) {
    UpdateCharacterAdvancedSettingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateCharacterAdvancedSettingsRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest";
  }
  protected:
  explicit UpdateCharacterAdvancedSettingsRequest(::google::protobuf_inworld::Arena* arena);
  UpdateCharacterAdvancedSettingsRequest(::google::protobuf_inworld::Arena* arena, const UpdateCharacterAdvancedSettingsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterAdvancedSettingsFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings character_advanced_settings = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_character_advanced_settings() const;
  void clear_character_advanced_settings() ;
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& character_advanced_settings() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* release_character_advanced_settings();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* mutable_character_advanced_settings();
  void set_allocated_character_advanced_settings(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* value);
  void unsafe_arena_set_allocated_character_advanced_settings(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* value);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* unsafe_arena_release_character_advanced_settings();

  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& _internal_character_advanced_settings() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* _internal_mutable_character_advanced_settings();

  public:
  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask() ;
  const ::google::protobuf_inworld::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::google::protobuf_inworld::FieldMask* release_update_mask();
  ::google::protobuf_inworld::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value);
  void unsafe_arena_set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value);
  ::google::protobuf_inworld::FieldMask* unsafe_arena_release_update_mask();

  private:
  const ::google::protobuf_inworld::FieldMask& _internal_update_mask() const;
  ::google::protobuf_inworld::FieldMask* _internal_mutable_update_mask();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* character_advanced_settings_;
    ::google::protobuf_inworld::FieldMask* update_mask_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class Character final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Character(const Character& from)
      : Character(nullptr, from) {}
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Character* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character";
  }
  protected:
  explicit Character(::google::protobuf_inworld::Arena* arena);
  Character(::google::protobuf_inworld::Arena* arena, const Character& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CharacterDescription = Character_CharacterDescription;
  using CharacterAssets = Character_CharacterAssets;
  using CharacterInitialMood = Character_CharacterInitialMood;
  using CharacterPersonality = Character_CharacterPersonality;
  using Fact = Character_Fact;
  using Meta = Character_Meta;
  using SharedPortalInfo = Character_SharedPortalInfo;
  using LongTermCoherence = Character_LongTermCoherence;
  using Relationship = Character_Relationship;

  using Tag = Character_Tag;
  static constexpr Tag TAG_UNSPECIFIED = Character_Tag_TAG_UNSPECIFIED;
  static constexpr Tag TAG_MEMORY = Character_Tag_TAG_MEMORY;
  static constexpr Tag TAG_APPEARANCE = Character_Tag_TAG_APPEARANCE;
  static inline bool Tag_IsValid(int value) {
    return Character_Tag_IsValid(value);
  }
  static constexpr Tag Tag_MIN = Character_Tag_Tag_MIN;
  static constexpr Tag Tag_MAX = Character_Tag_Tag_MAX;
  static constexpr int Tag_ARRAYSIZE = Character_Tag_Tag_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* Tag_descriptor() {
    return Character_Tag_descriptor();
  }
  template <typename T>
  static inline const std::string& Tag_Name(T value) {
    return Character_Tag_Name(value);
  }
  static inline bool Tag_Parse(absl::string_view name, Tag* value) {
    return Character_Tag_Parse(name, value);
  }

  using FourthWallContainment = Character_FourthWallContainment;
  static constexpr FourthWallContainment FOURTH_WALL_CONTAINMENT_UNSPECIFIED = Character_FourthWallContainment_FOURTH_WALL_CONTAINMENT_UNSPECIFIED;
  static constexpr FourthWallContainment FOURTH_WALL_CONTAINMENT_DISABLED = Character_FourthWallContainment_FOURTH_WALL_CONTAINMENT_DISABLED;
  static constexpr FourthWallContainment FOURTH_WALL_CONTAINMENT_EXPERIMENTAL = Character_FourthWallContainment_FOURTH_WALL_CONTAINMENT_EXPERIMENTAL;
  static inline bool FourthWallContainment_IsValid(int value) {
    return Character_FourthWallContainment_IsValid(value);
  }
  static constexpr FourthWallContainment FourthWallContainment_MIN = Character_FourthWallContainment_FourthWallContainment_MIN;
  static constexpr FourthWallContainment FourthWallContainment_MAX = Character_FourthWallContainment_FourthWallContainment_MAX;
  static constexpr int FourthWallContainment_ARRAYSIZE = Character_FourthWallContainment_FourthWallContainment_ARRAYSIZE;
  static inline const ::google::protobuf_inworld::EnumDescriptor* FourthWallContainment_descriptor() {
    return Character_FourthWallContainment_descriptor();
  }
  template <typename T>
  static inline const std::string& FourthWallContainment_Name(T value) {
    return Character_FourthWallContainment_Name(value);
  }
  static inline bool FourthWallContainment_Parse(absl::string_view name, FourthWallContainment* value) {
    return Character_FourthWallContainment_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonKnowledgesFieldNumber = 11,
    kScenesFieldNumber = 13,
    kFactsFieldNumber = 14,
    kBehavioralContextsFieldNumber = 15,
    kSafetyConfigFieldNumber = 21,
    kNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kYamlConfigFieldNumber = 19,
    kDefaultCharacterDescriptionFieldNumber = 3,
    kDefaultCharacterAssetsFieldNumber = 7,
    kInitialMoodFieldNumber = 9,
    kPersonalityFieldNumber = 10,
    kMetaFieldNumber = 16,
    kSharePortalInfoFieldNumber = 18,
    kLongTermCoherenceFieldNumber = 24,
    kRelationshipFieldNumber = 25,
    kSocialRankFieldNumber = 12,
    kEmotionalFluidityFieldNumber = 17,
    kRelationshipFluidityFieldNumber = 22,
    kFourthWallFieldNumber = 23,
    kCognitiveControlFieldNumber = 26,
    kLanguageFieldNumber = 27,
  };
  // repeated string common_knowledges = 11;
  int common_knowledges_size() const;
  private:
  int _internal_common_knowledges_size() const;

  public:
  void clear_common_knowledges() ;
  const std::string& common_knowledges(int index) const;
  std::string* mutable_common_knowledges(int index);
  void set_common_knowledges(int index, const std::string& value);
  void set_common_knowledges(int index, std::string&& value);
  void set_common_knowledges(int index, const char* value);
  void set_common_knowledges(int index, const char* value, std::size_t size);
  void set_common_knowledges(int index, absl::string_view value);
  std::string* add_common_knowledges();
  void add_common_knowledges(const std::string& value);
  void add_common_knowledges(std::string&& value);
  void add_common_knowledges(const char* value);
  void add_common_knowledges(const char* value, std::size_t size);
  void add_common_knowledges(absl::string_view value);
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& common_knowledges() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* mutable_common_knowledges();

  private:
  const ::google::protobuf_inworld::RepeatedPtrField<std::string>& _internal_common_knowledges() const;
  ::google::protobuf_inworld::RepeatedPtrField<std::string>* _internal_mutable_common_knowledges();

  public:
  // repeated .ai.inworld.studio.v1alpha.Scene scenes = 13;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;

  public:
  void clear_scenes() ;
  ::ai::inworld::studio::v1alpha::Scene* mutable_scenes(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >*
      mutable_scenes();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>& _internal_scenes() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>* _internal_mutable_scenes();
  public:
  const ::ai::inworld::studio::v1alpha::Scene& scenes(int index) const;
  ::ai::inworld::studio::v1alpha::Scene* add_scenes();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >&
      scenes() const;
  // repeated .ai.inworld.studio.v1alpha.Character.Fact facts = 14;
  int facts_size() const;
  private:
  int _internal_facts_size() const;

  public:
  void clear_facts() ;
  ::ai::inworld::studio::v1alpha::Character_Fact* mutable_facts(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact >*
      mutable_facts();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_Fact>& _internal_facts() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_Fact>* _internal_mutable_facts();
  public:
  const ::ai::inworld::studio::v1alpha::Character_Fact& facts(int index) const;
  ::ai::inworld::studio::v1alpha::Character_Fact* add_facts();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact >&
      facts() const;
  // repeated .ai.inworld.studio.v1alpha.BehavioralContext behavioral_contexts = 15;
  int behavioral_contexts_size() const;
  private:
  int _internal_behavioral_contexts_size() const;

  public:
  void clear_behavioral_contexts() ;
  ::ai::inworld::studio::v1alpha::BehavioralContext* mutable_behavioral_contexts(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext >*
      mutable_behavioral_contexts();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::BehavioralContext>& _internal_behavioral_contexts() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::BehavioralContext>* _internal_mutable_behavioral_contexts();
  public:
  const ::ai::inworld::studio::v1alpha::BehavioralContext& behavioral_contexts(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContext* add_behavioral_contexts();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext >&
      behavioral_contexts() const;
  // map<string, .ai.inworld.studio.v1alpha.SafetyLevel> safety_config = 21;
  int safety_config_size() const;
  private:
  int _internal_safety_config_size() const;

  public:
  void clear_safety_config() ;
  const ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>& safety_config() const;
  ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>* mutable_safety_config();

  private:
  const ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>& _internal_safety_config() const;
  ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>* _internal_mutable_safety_config();

  public:
  // string name = 1 [(.ai.inworld.options.examples) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string language_code = 2 [deprecated = true];
  [[deprecated]]  void clear_language_code() ;
  [[deprecated]] const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_language_code(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_language_code();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_language_code();
  [[deprecated]] void set_allocated_language_code(std::string* value);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // string yaml_config = 19;
  void clear_yaml_config() ;
  const std::string& yaml_config() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_yaml_config(Arg_&& arg, Args_... args);
  std::string* mutable_yaml_config();
  PROTOBUF_NODISCARD std::string* release_yaml_config();
  void set_allocated_yaml_config(std::string* value);

  private:
  const std::string& _internal_yaml_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_yaml_config(
      const std::string& value);
  std::string* _internal_mutable_yaml_config();

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterDescription default_character_description = 3;
  bool has_default_character_description() const;
  void clear_default_character_description() ;
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& default_character_description() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_CharacterDescription* release_default_character_description();
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* mutable_default_character_description();
  void set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Character_CharacterDescription* value);
  void unsafe_arena_set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Character_CharacterDescription* value);
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* unsafe_arena_release_default_character_description();

  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& _internal_default_character_description() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* _internal_mutable_default_character_description();

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterAssets default_character_assets = 7;
  bool has_default_character_assets() const;
  void clear_default_character_assets() ;
  const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& default_character_assets() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_CharacterAssets* release_default_character_assets();
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* mutable_default_character_assets();
  void set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Character_CharacterAssets* value);
  void unsafe_arena_set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Character_CharacterAssets* value);
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* unsafe_arena_release_default_character_assets();

  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& _internal_default_character_assets() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* _internal_mutable_default_character_assets();

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterInitialMood initial_mood = 9;
  bool has_initial_mood() const;
  void clear_initial_mood() ;
  const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& initial_mood() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* release_initial_mood();
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* mutable_initial_mood();
  void set_allocated_initial_mood(::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* value);
  void unsafe_arena_set_allocated_initial_mood(::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* value);
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* unsafe_arena_release_initial_mood();

  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& _internal_initial_mood() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* _internal_mutable_initial_mood();

  public:
  // .ai.inworld.studio.v1alpha.Character.CharacterPersonality personality = 10;
  bool has_personality() const;
  void clear_personality() ;
  const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& personality() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* release_personality();
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* mutable_personality();
  void set_allocated_personality(::ai::inworld::studio::v1alpha::Character_CharacterPersonality* value);
  void unsafe_arena_set_allocated_personality(::ai::inworld::studio::v1alpha::Character_CharacterPersonality* value);
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* unsafe_arena_release_personality();

  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& _internal_personality() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* _internal_mutable_personality();

  public:
  // .ai.inworld.studio.v1alpha.Character.Meta meta = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_meta() const;
  void clear_meta() ;
  const ::ai::inworld::studio::v1alpha::Character_Meta& meta() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_Meta* release_meta();
  ::ai::inworld::studio::v1alpha::Character_Meta* mutable_meta();
  void set_allocated_meta(::ai::inworld::studio::v1alpha::Character_Meta* value);
  void unsafe_arena_set_allocated_meta(::ai::inworld::studio::v1alpha::Character_Meta* value);
  ::ai::inworld::studio::v1alpha::Character_Meta* unsafe_arena_release_meta();

  private:
  const ::ai::inworld::studio::v1alpha::Character_Meta& _internal_meta() const;
  ::ai::inworld::studio::v1alpha::Character_Meta* _internal_mutable_meta();

  public:
  // .ai.inworld.studio.v1alpha.Character.SharedPortalInfo share_portal_info = 18 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_share_portal_info() const;
  void clear_share_portal_info() ;
  const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo& share_portal_info() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* release_share_portal_info();
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* mutable_share_portal_info();
  void set_allocated_share_portal_info(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* value);
  void unsafe_arena_set_allocated_share_portal_info(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* value);
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* unsafe_arena_release_share_portal_info();

  private:
  const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo& _internal_share_portal_info() const;
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* _internal_mutable_share_portal_info();

  public:
  // .ai.inworld.studio.v1alpha.Character.LongTermCoherence long_term_coherence = 24;
  bool has_long_term_coherence() const;
  void clear_long_term_coherence() ;
  const ::ai::inworld::studio::v1alpha::Character_LongTermCoherence& long_term_coherence() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* release_long_term_coherence();
  ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* mutable_long_term_coherence();
  void set_allocated_long_term_coherence(::ai::inworld::studio::v1alpha::Character_LongTermCoherence* value);
  void unsafe_arena_set_allocated_long_term_coherence(::ai::inworld::studio::v1alpha::Character_LongTermCoherence* value);
  ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* unsafe_arena_release_long_term_coherence();

  private:
  const ::ai::inworld::studio::v1alpha::Character_LongTermCoherence& _internal_long_term_coherence() const;
  ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* _internal_mutable_long_term_coherence();

  public:
  // .ai.inworld.studio.v1alpha.Character.Relationship relationship = 25;
  bool has_relationship() const;
  void clear_relationship() ;
  const ::ai::inworld::studio::v1alpha::Character_Relationship& relationship() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character_Relationship* release_relationship();
  ::ai::inworld::studio::v1alpha::Character_Relationship* mutable_relationship();
  void set_allocated_relationship(::ai::inworld::studio::v1alpha::Character_Relationship* value);
  void unsafe_arena_set_allocated_relationship(::ai::inworld::studio::v1alpha::Character_Relationship* value);
  ::ai::inworld::studio::v1alpha::Character_Relationship* unsafe_arena_release_relationship();

  private:
  const ::ai::inworld::studio::v1alpha::Character_Relationship& _internal_relationship() const;
  ::ai::inworld::studio::v1alpha::Character_Relationship* _internal_mutable_relationship();

  public:
  // float social_rank = 12;
  void clear_social_rank() ;
  float social_rank() const;
  void set_social_rank(float value);

  private:
  float _internal_social_rank() const;
  void _internal_set_social_rank(float value);

  public:
  // float emotional_fluidity = 17;
  void clear_emotional_fluidity() ;
  float emotional_fluidity() const;
  void set_emotional_fluidity(float value);

  private:
  float _internal_emotional_fluidity() const;
  void _internal_set_emotional_fluidity(float value);

  public:
  // float relationship_fluidity = 22 [deprecated = true];
  [[deprecated]]  void clear_relationship_fluidity() ;
  [[deprecated]] float relationship_fluidity() const;
  [[deprecated]] void set_relationship_fluidity(float value);

  private:
  float _internal_relationship_fluidity() const;
  void _internal_set_relationship_fluidity(float value);

  public:
  // .ai.inworld.studio.v1alpha.Character.FourthWallContainment fourth_wall = 23;
  void clear_fourth_wall() ;
  ::ai::inworld::studio::v1alpha::Character_FourthWallContainment fourth_wall() const;
  void set_fourth_wall(::ai::inworld::studio::v1alpha::Character_FourthWallContainment value);

  private:
  ::ai::inworld::studio::v1alpha::Character_FourthWallContainment _internal_fourth_wall() const;
  void _internal_set_fourth_wall(::ai::inworld::studio::v1alpha::Character_FourthWallContainment value);

  public:
  // .ai.inworld.studio.v1alpha.CognitiveControl cognitive_control = 26;
  void clear_cognitive_control() ;
  ::ai::inworld::studio::v1alpha::CognitiveControl cognitive_control() const;
  void set_cognitive_control(::ai::inworld::studio::v1alpha::CognitiveControl value);

  private:
  ::ai::inworld::studio::v1alpha::CognitiveControl _internal_cognitive_control() const;
  void _internal_set_cognitive_control(::ai::inworld::studio::v1alpha::CognitiveControl value);

  public:
  // .ai.inworld.language_codes.LanguageCode language = 27;
  void clear_language() ;
  ::ai::inworld::language_codes::LanguageCode language() const;
  void set_language(::ai::inworld::language_codes::LanguageCode value);

  private:
  ::ai::inworld::language_codes::LanguageCode _internal_language() const;
  void _internal_set_language(::ai::inworld::language_codes::LanguageCode value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      5, 22, 12,
      118, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::RepeatedPtrField<std::string> common_knowledges_;
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene > scenes_;
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact > facts_;
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext > behavioral_contexts_;
    ::google::protobuf_inworld::internal::MapField<Character_SafetyConfigEntry_DoNotUse, std::string, ::ai::inworld::studio::v1alpha::SafetyLevel,
                      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_ENUM>
        safety_config_;
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr language_code_;
    ::google::protobuf_inworld::internal::ArenaStringPtr yaml_config_;
    ::ai::inworld::studio::v1alpha::Character_CharacterDescription* default_character_description_;
    ::ai::inworld::studio::v1alpha::Character_CharacterAssets* default_character_assets_;
    ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* initial_mood_;
    ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* personality_;
    ::ai::inworld::studio::v1alpha::Character_Meta* meta_;
    ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* share_portal_info_;
    ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* long_term_coherence_;
    ::ai::inworld::studio::v1alpha::Character_Relationship* relationship_;
    float social_rank_;
    float emotional_fluidity_;
    float relationship_fluidity_;
    int fourth_wall_;
    int cognitive_control_;
    int language_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class UpdateCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateCharacterRequest) */ {
 public:
  inline UpdateCharacterRequest() : UpdateCharacterRequest(nullptr) {}
  ~UpdateCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UpdateCharacterRequest(const UpdateCharacterRequest& from)
      : UpdateCharacterRequest(nullptr, from) {}
  UpdateCharacterRequest(UpdateCharacterRequest&& from) noexcept
    : UpdateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCharacterRequest& operator=(const UpdateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCharacterRequest& operator=(UpdateCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCharacterRequest*>(
               &_UpdateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateCharacterRequest& a, UpdateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UpdateCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UpdateCharacterRequest& from) {
    UpdateCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateCharacterRequest";
  }
  protected:
  explicit UpdateCharacterRequest(::google::protobuf_inworld::Arena* arena);
  UpdateCharacterRequest(::google::protobuf_inworld::Arena* arena, const UpdateCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.Character character = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_character() const;
  void clear_character() ;
  const ::ai::inworld::studio::v1alpha::Character& character() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character* release_character();
  ::ai::inworld::studio::v1alpha::Character* mutable_character();
  void set_allocated_character(::ai::inworld::studio::v1alpha::Character* value);
  void unsafe_arena_set_allocated_character(::ai::inworld::studio::v1alpha::Character* value);
  ::ai::inworld::studio::v1alpha::Character* unsafe_arena_release_character();

  private:
  const ::ai::inworld::studio::v1alpha::Character& _internal_character() const;
  ::ai::inworld::studio::v1alpha::Character* _internal_mutable_character();

  public:
  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask() ;
  const ::google::protobuf_inworld::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::google::protobuf_inworld::FieldMask* release_update_mask();
  ::google::protobuf_inworld::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value);
  void unsafe_arena_set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value);
  ::google::protobuf_inworld::FieldMask* unsafe_arena_release_update_mask();

  private:
  const ::google::protobuf_inworld::FieldMask& _internal_update_mask() const;
  ::google::protobuf_inworld::FieldMask* _internal_mutable_update_mask();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::ai::inworld::studio::v1alpha::Character* character_;
    ::google::protobuf_inworld::FieldMask* update_mask_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ListSharedCharactersResponse final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListSharedCharactersResponse) */ {
 public:
  inline ListSharedCharactersResponse() : ListSharedCharactersResponse(nullptr) {}
  ~ListSharedCharactersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListSharedCharactersResponse(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ListSharedCharactersResponse(const ListSharedCharactersResponse& from)
      : ListSharedCharactersResponse(nullptr, from) {}
  ListSharedCharactersResponse(ListSharedCharactersResponse&& from) noexcept
    : ListSharedCharactersResponse() {
    *this = ::std::move(from);
  }

  inline ListSharedCharactersResponse& operator=(const ListSharedCharactersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSharedCharactersResponse& operator=(ListSharedCharactersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSharedCharactersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSharedCharactersResponse* internal_default_instance() {
    return reinterpret_cast<const ListSharedCharactersResponse*>(
               &_ListSharedCharactersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ListSharedCharactersResponse& a, ListSharedCharactersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSharedCharactersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSharedCharactersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSharedCharactersResponse* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSharedCharactersResponse>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ListSharedCharactersResponse& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ListSharedCharactersResponse& from) {
    ListSharedCharactersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListSharedCharactersResponse* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListSharedCharactersResponse";
  }
  protected:
  explicit ListSharedCharactersResponse(::google::protobuf_inworld::Arena* arena);
  ListSharedCharactersResponse(::google::protobuf_inworld::Arena* arena, const ListSharedCharactersResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedCharactersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Character shared_characters = 1;
  int shared_characters_size() const;
  private:
  int _internal_shared_characters_size() const;

  public:
  void clear_shared_characters() ;
  ::ai::inworld::studio::v1alpha::Character* mutable_shared_characters(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >*
      mutable_shared_characters();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>& _internal_shared_characters() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>* _internal_mutable_shared_characters();
  public:
  const ::ai::inworld::studio::v1alpha::Character& shared_characters(int index) const;
  ::ai::inworld::studio::v1alpha::Character* add_shared_characters();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >&
      shared_characters() const;
  // string next_page_token = 2;
  void clear_next_page_token() ;
  const std::string& next_page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* value);

  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(
      const std::string& value);
  std::string* _internal_mutable_next_page_token();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListSharedCharactersResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 1,
      78, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character > shared_characters_;
    ::google::protobuf_inworld::internal::ArenaStringPtr next_page_token_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class ListCharactersResponse final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListCharactersResponse) */ {
 public:
  inline ListCharactersResponse() : ListCharactersResponse(nullptr) {}
  ~ListCharactersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListCharactersResponse(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ListCharactersResponse(const ListCharactersResponse& from)
      : ListCharactersResponse(nullptr, from) {}
  ListCharactersResponse(ListCharactersResponse&& from) noexcept
    : ListCharactersResponse() {
    *this = ::std::move(from);
  }

  inline ListCharactersResponse& operator=(const ListCharactersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCharactersResponse& operator=(ListCharactersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCharactersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCharactersResponse* internal_default_instance() {
    return reinterpret_cast<const ListCharactersResponse*>(
               &_ListCharactersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListCharactersResponse& a, ListCharactersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCharactersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCharactersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCharactersResponse* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCharactersResponse>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ListCharactersResponse& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ListCharactersResponse& from) {
    ListCharactersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListCharactersResponse* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListCharactersResponse";
  }
  protected:
  explicit ListCharactersResponse(::google::protobuf_inworld::Arena* arena);
  ListCharactersResponse(::google::protobuf_inworld::Arena* arena, const ListCharactersResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Character characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;

  public:
  void clear_characters() ;
  ::ai::inworld::studio::v1alpha::Character* mutable_characters(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >*
      mutable_characters();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>& _internal_characters() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>* _internal_mutable_characters();
  public:
  const ::ai::inworld::studio::v1alpha::Character& characters(int index) const;
  ::ai::inworld::studio::v1alpha::Character* add_characters();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >&
      characters() const;
  // string next_page_token = 2;
  void clear_next_page_token() ;
  const std::string& next_page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* value);

  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(
      const std::string& value);
  std::string* _internal_mutable_next_page_token();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListCharactersResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 1,
      72, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character > characters_;
    ::google::protobuf_inworld::internal::ArenaStringPtr next_page_token_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};// -------------------------------------------------------------------

class CreateCharacterRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateCharacterRequest) */ {
 public:
  inline CreateCharacterRequest() : CreateCharacterRequest(nullptr) {}
  ~CreateCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateCharacterRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CreateCharacterRequest(const CreateCharacterRequest& from)
      : CreateCharacterRequest(nullptr, from) {}
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CreateCharacterRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CreateCharacterRequest& from) {
    CreateCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateCharacterRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateCharacterRequest";
  }
  protected:
  explicit CreateCharacterRequest(::google::protobuf_inworld::Arena* arena);
  CreateCharacterRequest(::google::protobuf_inworld::Arena* arena, const CreateCharacterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kSkipAutoCreateFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // .ai.inworld.studio.v1alpha.Character character = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_character() const;
  void clear_character() ;
  const ::ai::inworld::studio::v1alpha::Character& character() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Character* release_character();
  ::ai::inworld::studio::v1alpha::Character* mutable_character();
  void set_allocated_character(::ai::inworld::studio::v1alpha::Character* value);
  void unsafe_arena_set_allocated_character(::ai::inworld::studio::v1alpha::Character* value);
  ::ai::inworld::studio::v1alpha::Character* unsafe_arena_release_character();

  private:
  const ::ai::inworld::studio::v1alpha::Character& _internal_character() const;
  ::ai::inworld::studio::v1alpha::Character* _internal_mutable_character();

  public:
  // bool skip_auto_create = 3;
  void clear_skip_auto_create() ;
  bool skip_auto_create() const;
  void set_skip_auto_create(bool value);

  private:
  bool _internal_skip_auto_create() const;
  void _internal_set_skip_auto_create(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateCharacterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 1,
      63, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr parent_;
    ::ai::inworld::studio::v1alpha::Character* character_;
    bool skip_auto_create_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Character_CharacterDescription_CustomDialogStyle

// string uuid = 1;
inline void Character_CharacterDescription_CustomDialogStyle::clear_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription_CustomDialogStyle::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.uuid)
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.uuid)
  return _s;
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::_internal_uuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uuid_.Get();
}
inline void Character_CharacterDescription_CustomDialogStyle::_internal_set_uuid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::_internal_mutable_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::release_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.uuid)
  return _impl_.uuid_.Release();
}
inline void Character_CharacterDescription_CustomDialogStyle::set_allocated_uuid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uuid_.IsDefault()) {
          _impl_.uuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.uuid)
}

// string display_name = 2;
inline void Character_CharacterDescription_CustomDialogStyle::clear_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription_CustomDialogStyle::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.display_name)
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::mutable_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.display_name)
  return _s;
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::_internal_display_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_name_.Get();
}
inline void Character_CharacterDescription_CustomDialogStyle::_internal_set_display_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::_internal_mutable_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.display_name_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::release_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.display_name)
  return _impl_.display_name_.Release();
}
inline void Character_CharacterDescription_CustomDialogStyle::set_allocated_display_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_name_.IsDefault()) {
          _impl_.display_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.display_name)
}

// bool is_active = 3;
inline void Character_CharacterDescription_CustomDialogStyle::clear_is_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_active_ = false;
}
inline bool Character_CharacterDescription_CustomDialogStyle::is_active() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.is_active)
  return _internal_is_active();
}
inline void Character_CharacterDescription_CustomDialogStyle::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.is_active)
}
inline bool Character_CharacterDescription_CustomDialogStyle::_internal_is_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_active_;
}
inline void Character_CharacterDescription_CustomDialogStyle::_internal_set_is_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_active_ = value;
}

// repeated string adjectives = 4;
inline int Character_CharacterDescription_CustomDialogStyle::_internal_adjectives_size() const {
  return _internal_adjectives().size();
}
inline int Character_CharacterDescription_CustomDialogStyle::adjectives_size() const {
  return _internal_adjectives_size();
}
inline void Character_CharacterDescription_CustomDialogStyle::clear_adjectives() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adjectives_.Clear();
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::add_adjectives()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_adjectives()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
  return _s;
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::adjectives(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
  return _internal_adjectives().Get(index);
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::mutable_adjectives(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
  return _internal_mutable_adjectives()->Mutable(index);
}
inline void Character_CharacterDescription_CustomDialogStyle::set_adjectives(int index, const std::string& value) {
  _internal_mutable_adjectives()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::set_adjectives(int index, std::string&& value) {
  _internal_mutable_adjectives()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::set_adjectives(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_adjectives()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::set_adjectives(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_adjectives()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::set_adjectives(int index, absl::string_view value) {
  _internal_mutable_adjectives()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::add_adjectives(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_adjectives()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::add_adjectives(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_adjectives()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::add_adjectives(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_adjectives()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::add_adjectives(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_adjectives()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline void Character_CharacterDescription_CustomDialogStyle::add_adjectives(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_adjectives()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription_CustomDialogStyle::adjectives() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
  return _internal_adjectives();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription_CustomDialogStyle::mutable_adjectives() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.adjectives)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_adjectives();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription_CustomDialogStyle::_internal_adjectives() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adjectives_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription_CustomDialogStyle::_internal_mutable_adjectives() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.adjectives_;
}

// string colloquialism = 6;
inline void Character_CharacterDescription_CustomDialogStyle::clear_colloquialism() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.colloquialism_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::colloquialism() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.colloquialism)
  return _internal_colloquialism();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription_CustomDialogStyle::set_colloquialism(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.colloquialism_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.colloquialism)
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::mutable_colloquialism() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_colloquialism();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.colloquialism)
  return _s;
}
inline const std::string& Character_CharacterDescription_CustomDialogStyle::_internal_colloquialism() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.colloquialism_.Get();
}
inline void Character_CharacterDescription_CustomDialogStyle::_internal_set_colloquialism(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.colloquialism_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::_internal_mutable_colloquialism() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.colloquialism_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription_CustomDialogStyle::release_colloquialism() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.colloquialism)
  return _impl_.colloquialism_.Release();
}
inline void Character_CharacterDescription_CustomDialogStyle::set_allocated_colloquialism(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.colloquialism_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.colloquialism_.IsDefault()) {
          _impl_.colloquialism_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle.colloquialism)
}

// -------------------------------------------------------------------

// Character_CharacterDescription

// string given_name = 1 [(.ai.inworld.options.examples) = {
inline void Character_CharacterDescription::clear_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.given_name_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::given_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
  return _internal_given_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_given_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.given_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}
inline std::string* Character_CharacterDescription::mutable_given_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_given_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_given_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.given_name_.Get();
}
inline void Character_CharacterDescription::_internal_set_given_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.given_name_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.given_name_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
  return _impl_.given_name_.Release();
}
inline void Character_CharacterDescription::set_allocated_given_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.given_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.given_name_.IsDefault()) {
          _impl_.given_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}

// string description = 2;
inline void Character_CharacterDescription::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}
inline std::string* Character_CharacterDescription::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Character_CharacterDescription::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
  return _impl_.description_.Release();
}
inline void Character_CharacterDescription::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.Pronoun pronoun = 3;
inline void Character_CharacterDescription::clear_pronoun() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pronoun_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun Character_CharacterDescription::pronoun() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.pronoun)
  return _internal_pronoun();
}
inline void Character_CharacterDescription::set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value) {
  _internal_set_pronoun(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.pronoun)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun Character_CharacterDescription::_internal_pronoun() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun>(_impl_.pronoun_);
}
inline void Character_CharacterDescription::_internal_set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pronoun_ = value;
}

// repeated string nicknames = 4;
inline int Character_CharacterDescription::_internal_nicknames_size() const {
  return _internal_nicknames().size();
}
inline int Character_CharacterDescription::nicknames_size() const {
  return _internal_nicknames_size();
}
inline void Character_CharacterDescription::clear_nicknames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nicknames_.Clear();
}
inline std::string* Character_CharacterDescription::add_nicknames()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_nicknames()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return _s;
}
inline const std::string& Character_CharacterDescription::nicknames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return _internal_nicknames().Get(index);
}
inline std::string* Character_CharacterDescription::mutable_nicknames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return _internal_mutable_nicknames()->Mutable(index);
}
inline void Character_CharacterDescription::set_nicknames(int index, const std::string& value) {
  _internal_mutable_nicknames()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::set_nicknames(int index, std::string&& value) {
  _internal_mutable_nicknames()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::set_nicknames(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_nicknames()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::set_nicknames(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_nicknames()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::set_nicknames(int index, absl::string_view value) {
  _internal_mutable_nicknames()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_nicknames()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_nicknames()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_nicknames()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_nicknames()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_nicknames()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription::nicknames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return _internal_nicknames();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription::mutable_nicknames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_nicknames();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription::_internal_nicknames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nicknames_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription::_internal_mutable_nicknames() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.nicknames_;
}

// string motivation = 5;
inline void Character_CharacterDescription::clear_motivation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motivation_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::motivation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
  return _internal_motivation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_motivation(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.motivation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}
inline std::string* Character_CharacterDescription::mutable_motivation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_motivation();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_motivation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motivation_.Get();
}
inline void Character_CharacterDescription::_internal_set_motivation(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.motivation_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_motivation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.motivation_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_motivation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
  return _impl_.motivation_.Release();
}
inline void Character_CharacterDescription::set_allocated_motivation(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motivation_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.motivation_.IsDefault()) {
          _impl_.motivation_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}

// string wikipedia_uri = 6;
inline void Character_CharacterDescription::clear_wikipedia_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wikipedia_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::wikipedia_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
  return _internal_wikipedia_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_wikipedia_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wikipedia_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}
inline std::string* Character_CharacterDescription::mutable_wikipedia_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_wikipedia_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_wikipedia_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wikipedia_uri_.Get();
}
inline void Character_CharacterDescription::_internal_set_wikipedia_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wikipedia_uri_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_wikipedia_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.wikipedia_uri_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_wikipedia_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
  return _impl_.wikipedia_uri_.Release();
}
inline void Character_CharacterDescription::set_allocated_wikipedia_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wikipedia_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wikipedia_uri_.IsDefault()) {
          _impl_.wikipedia_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}

// string example_dialog = 9;
inline void Character_CharacterDescription::clear_example_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.example_dialog_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::example_dialog() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
  return _internal_example_dialog();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_example_dialog(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.example_dialog_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}
inline std::string* Character_CharacterDescription::mutable_example_dialog() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_example_dialog();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_example_dialog() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.example_dialog_.Get();
}
inline void Character_CharacterDescription::_internal_set_example_dialog(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.example_dialog_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_example_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.example_dialog_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_example_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
  return _impl_.example_dialog_.Release();
}
inline void Character_CharacterDescription::set_allocated_example_dialog(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.example_dialog_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.example_dialog_.IsDefault()) {
          _impl_.example_dialog_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.ExampleDialogStyle example_dialog_style = 10;
inline void Character_CharacterDescription::clear_example_dialog_style() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.example_dialog_style_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription::example_dialog_style() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog_style)
  return _internal_example_dialog_style();
}
inline void Character_CharacterDescription::set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value) {
  _internal_set_example_dialog_style(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog_style)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription::_internal_example_dialog_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle>(_impl_.example_dialog_style_);
}
inline void Character_CharacterDescription::_internal_set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.example_dialog_style_ = value;
}

// repeated string personality_adjectives = 11;
inline int Character_CharacterDescription::_internal_personality_adjectives_size() const {
  return _internal_personality_adjectives().size();
}
inline int Character_CharacterDescription::personality_adjectives_size() const {
  return _internal_personality_adjectives_size();
}
inline void Character_CharacterDescription::clear_personality_adjectives() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.personality_adjectives_.Clear();
}
inline std::string* Character_CharacterDescription::add_personality_adjectives()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_personality_adjectives()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return _s;
}
inline const std::string& Character_CharacterDescription::personality_adjectives(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return _internal_personality_adjectives().Get(index);
}
inline std::string* Character_CharacterDescription::mutable_personality_adjectives(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return _internal_mutable_personality_adjectives()->Mutable(index);
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, const std::string& value) {
  _internal_mutable_personality_adjectives()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, std::string&& value) {
  _internal_mutable_personality_adjectives()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_personality_adjectives()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_personality_adjectives()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, absl::string_view value) {
  _internal_mutable_personality_adjectives()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_personality_adjectives()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_personality_adjectives()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_personality_adjectives()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_personality_adjectives()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_personality_adjectives()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription::personality_adjectives() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return _internal_personality_adjectives();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription::mutable_personality_adjectives() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_personality_adjectives();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription::_internal_personality_adjectives() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.personality_adjectives_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription::_internal_mutable_personality_adjectives() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.personality_adjectives_;
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.LifeStage life_stage = 12;
inline void Character_CharacterDescription::clear_life_stage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.life_stage_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage Character_CharacterDescription::life_stage() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.life_stage)
  return _internal_life_stage();
}
inline void Character_CharacterDescription::set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value) {
  _internal_set_life_stage(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.life_stage)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage Character_CharacterDescription::_internal_life_stage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage>(_impl_.life_stage_);
}
inline void Character_CharacterDescription::_internal_set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.life_stage_ = value;
}

// repeated string hobby_or_interests = 13;
inline int Character_CharacterDescription::_internal_hobby_or_interests_size() const {
  return _internal_hobby_or_interests().size();
}
inline int Character_CharacterDescription::hobby_or_interests_size() const {
  return _internal_hobby_or_interests_size();
}
inline void Character_CharacterDescription::clear_hobby_or_interests() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hobby_or_interests_.Clear();
}
inline std::string* Character_CharacterDescription::add_hobby_or_interests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_hobby_or_interests()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return _s;
}
inline const std::string& Character_CharacterDescription::hobby_or_interests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return _internal_hobby_or_interests().Get(index);
}
inline std::string* Character_CharacterDescription::mutable_hobby_or_interests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return _internal_mutable_hobby_or_interests()->Mutable(index);
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, const std::string& value) {
  _internal_mutable_hobby_or_interests()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, std::string&& value) {
  _internal_mutable_hobby_or_interests()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_hobby_or_interests()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_hobby_or_interests()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, absl::string_view value) {
  _internal_mutable_hobby_or_interests()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_hobby_or_interests()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_hobby_or_interests()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_hobby_or_interests()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_hobby_or_interests()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_hobby_or_interests()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription::hobby_or_interests() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return _internal_hobby_or_interests();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription::mutable_hobby_or_interests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_hobby_or_interests();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_CharacterDescription::_internal_hobby_or_interests() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hobby_or_interests_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_CharacterDescription::_internal_mutable_hobby_or_interests() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.hobby_or_interests_;
}

// string character_role = 14;
inline void Character_CharacterDescription::clear_character_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_role_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::character_role() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
  return _internal_character_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_character_role(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_role_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}
inline std::string* Character_CharacterDescription::mutable_character_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_role();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_character_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_role_.Get();
}
inline void Character_CharacterDescription::_internal_set_character_role(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_role_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_character_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_role_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_character_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
  return _impl_.character_role_.Release();
}
inline void Character_CharacterDescription::set_allocated_character_role(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_role_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_role_.IsDefault()) {
          _impl_.character_role_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}

// bool narrative_actions_enabled = 15;
inline void Character_CharacterDescription::clear_narrative_actions_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.narrative_actions_enabled_ = false;
}
inline bool Character_CharacterDescription::narrative_actions_enabled() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.narrative_actions_enabled)
  return _internal_narrative_actions_enabled();
}
inline void Character_CharacterDescription::set_narrative_actions_enabled(bool value) {
  _internal_set_narrative_actions_enabled(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.narrative_actions_enabled)
}
inline bool Character_CharacterDescription::_internal_narrative_actions_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.narrative_actions_enabled_;
}
inline void Character_CharacterDescription::_internal_set_narrative_actions_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.narrative_actions_enabled_ = value;
}

// repeated .ai.inworld.studio.v1alpha.Character.CharacterDescription.CustomDialogStyle custom_dialog_styles = 16;
inline int Character_CharacterDescription::_internal_custom_dialog_styles_size() const {
  return _internal_custom_dialog_styles().size();
}
inline int Character_CharacterDescription::custom_dialog_styles_size() const {
  return _internal_custom_dialog_styles_size();
}
inline void Character_CharacterDescription::clear_custom_dialog_styles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.custom_dialog_styles_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle* Character_CharacterDescription::mutable_custom_dialog_styles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.custom_dialog_styles)
  return _internal_mutable_custom_dialog_styles()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle>* Character_CharacterDescription::mutable_custom_dialog_styles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.custom_dialog_styles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_custom_dialog_styles();
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle& Character_CharacterDescription::custom_dialog_styles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.custom_dialog_styles)
  return _internal_custom_dialog_styles().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle* Character_CharacterDescription::add_custom_dialog_styles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle* _add = _internal_mutable_custom_dialog_styles()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.custom_dialog_styles)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle>& Character_CharacterDescription::custom_dialog_styles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.custom_dialog_styles)
  return _internal_custom_dialog_styles();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle>&
Character_CharacterDescription::_internal_custom_dialog_styles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_dialog_styles_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_CharacterDescription_CustomDialogStyle>*
Character_CharacterDescription::_internal_mutable_custom_dialog_styles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.custom_dialog_styles_;
}

// string flaws = 17;
inline void Character_CharacterDescription::clear_flaws() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flaws_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::flaws() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.flaws)
  return _internal_flaws();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterDescription::set_flaws(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flaws_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.flaws)
}
inline std::string* Character_CharacterDescription::mutable_flaws() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_flaws();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.flaws)
  return _s;
}
inline const std::string& Character_CharacterDescription::_internal_flaws() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flaws_.Get();
}
inline void Character_CharacterDescription::_internal_set_flaws(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flaws_.Set(value, GetArena());
}
inline std::string* Character_CharacterDescription::_internal_mutable_flaws() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.flaws_.Mutable( GetArena());
}
inline std::string* Character_CharacterDescription::release_flaws() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.flaws)
  return _impl_.flaws_.Release();
}
inline void Character_CharacterDescription::set_allocated_flaws(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flaws_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.flaws_.IsDefault()) {
          _impl_.flaws_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.flaws)
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.DialogResponseLength dialog_response_length = 19;
inline void Character_CharacterDescription::clear_dialog_response_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dialog_response_length_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength Character_CharacterDescription::dialog_response_length() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.dialog_response_length)
  return _internal_dialog_response_length();
}
inline void Character_CharacterDescription::set_dialog_response_length(::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength value) {
  _internal_set_dialog_response_length(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.dialog_response_length)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength Character_CharacterDescription::_internal_dialog_response_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength>(_impl_.dialog_response_length_);
}
inline void Character_CharacterDescription::_internal_set_dialog_response_length(::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dialog_response_length_ = value;
}

// -------------------------------------------------------------------

// Character_CharacterAssets

// string rpm_model_uri = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_model_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_rpm_model_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}
inline std::string* Character_CharacterAssets::mutable_rpm_model_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_model_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_rpm_model_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_model_uri_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_model_uri_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
  return _impl_.rpm_model_uri_.Release();
}
inline void Character_CharacterAssets::set_allocated_rpm_model_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_model_uri_.IsDefault()) {
          _impl_.rpm_model_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri = 3 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_image_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_image_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
  return _internal_rpm_image_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_rpm_image_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}
inline std::string* Character_CharacterAssets::mutable_rpm_image_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_rpm_image_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_image_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_image_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_image_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
  return _impl_.rpm_image_uri_.Release();
}
inline void Character_CharacterAssets::set_allocated_rpm_image_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_.IsDefault()) {
          _impl_.rpm_image_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}

// string rpm_image_uri_portrait = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_image_uri_portrait() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_rpm_image_uri_portrait(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_portrait_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* Character_CharacterAssets::mutable_rpm_image_uri_portrait() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri_portrait();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_portrait_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_portrait_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_portrait_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
  return _impl_.rpm_image_uri_portrait_.Release();
}
inline void Character_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_portrait_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_portrait_.IsDefault()) {
          _impl_.rpm_image_uri_portrait_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_image_uri_posture() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_rpm_image_uri_posture(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_posture_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* Character_CharacterAssets::mutable_rpm_image_uri_posture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri_posture();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_rpm_image_uri_posture() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_posture_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_posture_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_posture_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
  return _impl_.rpm_image_uri_posture_.Release();
}
inline void Character_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_posture_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_posture_.IsDefault()) {
          _impl_.rpm_image_uri_posture_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}

// .ai.inworld.voices.Voice voice = 6;
inline bool Character_CharacterAssets::has_voice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voice_ != nullptr);
  return value;
}
inline const ::ai::inworld::voices::Voice& Character_CharacterAssets::_internal_voice() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::voices::Voice* p = _impl_.voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::voices::Voice&>(::ai::inworld::voices::_Voice_default_instance_);
}
inline const ::ai::inworld::voices::Voice& Character_CharacterAssets::voice() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
  return _internal_voice();
}
inline void Character_CharacterAssets::unsafe_arena_set_allocated_voice(::ai::inworld::voices::Voice* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.voice_);
  }
  _impl_.voice_ = reinterpret_cast<::ai::inworld::voices::Voice*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::release_voice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::voices::Voice* released = _impl_.voice_;
  _impl_.voice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::unsafe_arena_release_voice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::voices::Voice* temp = _impl_.voice_;
  _impl_.voice_ = nullptr;
  return temp;
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::_internal_mutable_voice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::voices::Voice>(GetArena());
    _impl_.voice_ = reinterpret_cast<::ai::inworld::voices::Voice*>(p);
  }
  return _impl_.voice_;
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::mutable_voice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::voices::Voice* _msg = _internal_mutable_voice();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
  return _msg;
}
inline void Character_CharacterAssets::set_allocated_voice(::ai::inworld::voices::Voice* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.voice_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.voice_ = reinterpret_cast<::ai::inworld::voices::Voice*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
}

// string avatar_img = 7;
inline void Character_CharacterAssets::clear_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::avatar_img() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img)
  return _internal_avatar_img();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_avatar_img(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img)
}
inline std::string* Character_CharacterAssets::mutable_avatar_img() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_img();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_avatar_img() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_img_.Get();
}
inline void Character_CharacterAssets::_internal_set_avatar_img(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_img_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img)
  return _impl_.avatar_img_.Release();
}
inline void Character_CharacterAssets::set_allocated_avatar_img(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_img_.IsDefault()) {
          _impl_.avatar_img_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img)
}

// string avatar_img_original = 8;
inline void Character_CharacterAssets::clear_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_original_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::avatar_img_original() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img_original)
  return _internal_avatar_img_original();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_avatar_img_original(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_original_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img_original)
}
inline std::string* Character_CharacterAssets::mutable_avatar_img_original() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_img_original();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img_original)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_avatar_img_original() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_img_original_.Get();
}
inline void Character_CharacterAssets::_internal_set_avatar_img_original(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_original_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_img_original_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img_original)
  return _impl_.avatar_img_original_.Release();
}
inline void Character_CharacterAssets::set_allocated_avatar_img_original(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_original_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_img_original_.IsDefault()) {
          _impl_.avatar_img_original_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_img_original)
}

// string avatar_background = 9;
inline void Character_CharacterAssets::clear_avatar_background() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_background_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::avatar_background() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_background)
  return _internal_avatar_background();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_avatar_background(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_background_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_background)
}
inline std::string* Character_CharacterAssets::mutable_avatar_background() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_background();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_background)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_avatar_background() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_background_.Get();
}
inline void Character_CharacterAssets::_internal_set_avatar_background(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_background_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_avatar_background() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_background_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_avatar_background() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_background)
  return _impl_.avatar_background_.Release();
}
inline void Character_CharacterAssets::set_allocated_avatar_background(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_background_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_background_.IsDefault()) {
          _impl_.avatar_background_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_background)
}

// string avatar_material = 10;
inline void Character_CharacterAssets::clear_avatar_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_material_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::avatar_material() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_material)
  return _internal_avatar_material();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_avatar_material(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_material_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_material)
}
inline std::string* Character_CharacterAssets::mutable_avatar_material() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_material();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_material)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_avatar_material() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_material_.Get();
}
inline void Character_CharacterAssets::_internal_set_avatar_material(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_material_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_avatar_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_material_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_avatar_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_material)
  return _impl_.avatar_material_.Release();
}
inline void Character_CharacterAssets::set_allocated_avatar_material(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_material_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_material_.IsDefault()) {
          _impl_.avatar_material_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_material)
}

// .ai.inworld.studio.v1alpha.Character.CharacterAssets.AvatarType avatar_type = 11;
inline void Character_CharacterAssets::clear_avatar_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_type_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType Character_CharacterAssets::avatar_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_type)
  return _internal_avatar_type();
}
inline void Character_CharacterAssets::set_avatar_type(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType value) {
  _internal_set_avatar_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_type)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType Character_CharacterAssets::_internal_avatar_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType>(_impl_.avatar_type_);
}
inline void Character_CharacterAssets::_internal_set_avatar_type(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_type_ = value;
}

// string innequin_img_uri = 12;
inline void Character_CharacterAssets::clear_innequin_img_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.innequin_img_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::innequin_img_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_uri)
  return _internal_innequin_img_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_innequin_img_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.innequin_img_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_uri)
}
inline std::string* Character_CharacterAssets::mutable_innequin_img_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_innequin_img_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_uri)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_innequin_img_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.innequin_img_uri_.Get();
}
inline void Character_CharacterAssets::_internal_set_innequin_img_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.innequin_img_uri_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_innequin_img_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.innequin_img_uri_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_innequin_img_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_uri)
  return _impl_.innequin_img_uri_.Release();
}
inline void Character_CharacterAssets::set_allocated_innequin_img_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.innequin_img_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.innequin_img_uri_.IsDefault()) {
          _impl_.innequin_img_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_uri)
}

// .ai.inworld.studio.v1alpha.Character.CharacterAssets.AvatarDisplayImageSource avatar_display_image_source = 13;
inline void Character_CharacterAssets::clear_avatar_display_image_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_display_image_source_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource Character_CharacterAssets::avatar_display_image_source() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_display_image_source)
  return _internal_avatar_display_image_source();
}
inline void Character_CharacterAssets::set_avatar_display_image_source(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource value) {
  _internal_set_avatar_display_image_source(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.avatar_display_image_source)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource Character_CharacterAssets::_internal_avatar_display_image_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource>(_impl_.avatar_display_image_source_);
}
inline void Character_CharacterAssets::_internal_set_avatar_display_image_source(::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_display_image_source_ = value;
}

// string innequin_img_original = 14;
inline void Character_CharacterAssets::clear_innequin_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.innequin_img_original_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::innequin_img_original() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_original)
  return _internal_innequin_img_original();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_CharacterAssets::set_innequin_img_original(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.innequin_img_original_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_original)
}
inline std::string* Character_CharacterAssets::mutable_innequin_img_original() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_innequin_img_original();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_original)
  return _s;
}
inline const std::string& Character_CharacterAssets::_internal_innequin_img_original() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.innequin_img_original_.Get();
}
inline void Character_CharacterAssets::_internal_set_innequin_img_original(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.innequin_img_original_.Set(value, GetArena());
}
inline std::string* Character_CharacterAssets::_internal_mutable_innequin_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.innequin_img_original_.Mutable( GetArena());
}
inline std::string* Character_CharacterAssets::release_innequin_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_original)
  return _impl_.innequin_img_original_.Release();
}
inline void Character_CharacterAssets::set_allocated_innequin_img_original(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.innequin_img_original_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.innequin_img_original_.IsDefault()) {
          _impl_.innequin_img_original_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.innequin_img_original)
}

// -------------------------------------------------------------------

// Character_CharacterInitialMood

// int32 joy = 1;
inline void Character_CharacterInitialMood::clear_joy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.joy_ = 0;
}
inline ::int32_t Character_CharacterInitialMood::joy() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.joy)
  return _internal_joy();
}
inline void Character_CharacterInitialMood::set_joy(::int32_t value) {
  _internal_set_joy(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.joy)
}
inline ::int32_t Character_CharacterInitialMood::_internal_joy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.joy_;
}
inline void Character_CharacterInitialMood::_internal_set_joy(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.joy_ = value;
}

// int32 fear = 2;
inline void Character_CharacterInitialMood::clear_fear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fear_ = 0;
}
inline ::int32_t Character_CharacterInitialMood::fear() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.fear)
  return _internal_fear();
}
inline void Character_CharacterInitialMood::set_fear(::int32_t value) {
  _internal_set_fear(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.fear)
}
inline ::int32_t Character_CharacterInitialMood::_internal_fear() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fear_;
}
inline void Character_CharacterInitialMood::_internal_set_fear(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fear_ = value;
}

// int32 trust = 3;
inline void Character_CharacterInitialMood::clear_trust() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trust_ = 0;
}
inline ::int32_t Character_CharacterInitialMood::trust() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.trust)
  return _internal_trust();
}
inline void Character_CharacterInitialMood::set_trust(::int32_t value) {
  _internal_set_trust(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.trust)
}
inline ::int32_t Character_CharacterInitialMood::_internal_trust() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trust_;
}
inline void Character_CharacterInitialMood::_internal_set_trust(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trust_ = value;
}

// int32 surprise = 4;
inline void Character_CharacterInitialMood::clear_surprise() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.surprise_ = 0;
}
inline ::int32_t Character_CharacterInitialMood::surprise() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.surprise)
  return _internal_surprise();
}
inline void Character_CharacterInitialMood::set_surprise(::int32_t value) {
  _internal_set_surprise(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.surprise)
}
inline ::int32_t Character_CharacterInitialMood::_internal_surprise() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.surprise_;
}
inline void Character_CharacterInitialMood::_internal_set_surprise(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.surprise_ = value;
}

// -------------------------------------------------------------------

// Character_CharacterPersonality

// int32 positive = 1;
inline void Character_CharacterPersonality::clear_positive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.positive_ = 0;
}
inline ::int32_t Character_CharacterPersonality::positive() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.positive)
  return _internal_positive();
}
inline void Character_CharacterPersonality::set_positive(::int32_t value) {
  _internal_set_positive(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.positive)
}
inline ::int32_t Character_CharacterPersonality::_internal_positive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.positive_;
}
inline void Character_CharacterPersonality::_internal_set_positive(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.positive_ = value;
}

// int32 peaceful = 2;
inline void Character_CharacterPersonality::clear_peaceful() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.peaceful_ = 0;
}
inline ::int32_t Character_CharacterPersonality::peaceful() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.peaceful)
  return _internal_peaceful();
}
inline void Character_CharacterPersonality::set_peaceful(::int32_t value) {
  _internal_set_peaceful(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.peaceful)
}
inline ::int32_t Character_CharacterPersonality::_internal_peaceful() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.peaceful_;
}
inline void Character_CharacterPersonality::_internal_set_peaceful(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.peaceful_ = value;
}

// int32 open = 3;
inline void Character_CharacterPersonality::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_ = 0;
}
inline ::int32_t Character_CharacterPersonality::open() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.open)
  return _internal_open();
}
inline void Character_CharacterPersonality::set_open(::int32_t value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.open)
}
inline ::int32_t Character_CharacterPersonality::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_;
}
inline void Character_CharacterPersonality::_internal_set_open(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_ = value;
}

// int32 extravert = 4;
inline void Character_CharacterPersonality::clear_extravert() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extravert_ = 0;
}
inline ::int32_t Character_CharacterPersonality::extravert() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.extravert)
  return _internal_extravert();
}
inline void Character_CharacterPersonality::set_extravert(::int32_t value) {
  _internal_set_extravert(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.extravert)
}
inline ::int32_t Character_CharacterPersonality::_internal_extravert() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extravert_;
}
inline void Character_CharacterPersonality::_internal_set_extravert(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.extravert_ = value;
}

// -------------------------------------------------------------------

// Character_Fact

// string uuid = 1;
inline void Character_Fact::clear_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& Character_Fact::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Fact.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_Fact::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}
inline std::string* Character_Fact::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.Fact.uuid)
  return _s;
}
inline const std::string& Character_Fact::_internal_uuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uuid_.Get();
}
inline void Character_Fact::_internal_set_uuid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* Character_Fact::_internal_mutable_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* Character_Fact::release_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.Fact.uuid)
  return _impl_.uuid_.Release();
}
inline void Character_Fact::set_allocated_uuid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uuid_.IsDefault()) {
          _impl_.uuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}

// repeated string text = 2;
inline int Character_Fact::_internal_text_size() const {
  return _internal_text().size();
}
inline int Character_Fact::text_size() const {
  return _internal_text_size();
}
inline void Character_Fact::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.Clear();
}
inline std::string* Character_Fact::add_text()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_text()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.Fact.text)
  return _s;
}
inline const std::string& Character_Fact::text(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Fact.text)
  return _internal_text().Get(index);
}
inline std::string* Character_Fact::mutable_text(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.Fact.text)
  return _internal_mutable_text()->Mutable(index);
}
inline void Character_Fact::set_text(int index, const std::string& value) {
  _internal_mutable_text()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::set_text(int index, std::string&& value) {
  _internal_mutable_text()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::set_text(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_text()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::set_text(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_text()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::set_text(int index, absl::string_view value) {
  _internal_mutable_text()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_text()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_text()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_text()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_text()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_text()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_Fact::text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.Fact.text)
  return _internal_text();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_Fact::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.Fact.text)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_text();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character_Fact::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character_Fact::_internal_mutable_text() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.text_;
}

// repeated .ai.inworld.studio.v1alpha.Character.Tag tags = 3;
inline int Character_Fact::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int Character_Fact::tags_size() const {
  return _internal_tags_size();
}
inline void Character_Fact::clear_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tags_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character_Tag Character_Fact::tags(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Fact.tags)
  return static_cast<::ai::inworld::studio::v1alpha::Character_Tag>(_internal_tags().Get(index));
}
inline void Character_Fact::set_tags(int index, ::ai::inworld::studio::v1alpha::Character_Tag value) {
  _internal_mutable_tags()->Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.tags)
}
inline void Character_Fact::add_tags(::ai::inworld::studio::v1alpha::Character_Tag value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.Fact.tags)
}
inline const ::google::protobuf_inworld::RepeatedField<int>& Character_Fact::tags() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.Fact.tags)
  return _internal_tags();
}
inline ::google::protobuf_inworld::RepeatedField<int>* Character_Fact::mutable_tags()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.Fact.tags)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tags();
}
inline const ::google::protobuf_inworld::RepeatedField<int>& Character_Fact::_internal_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tags_;
}
inline ::google::protobuf_inworld::RepeatedField<int>* Character_Fact::_internal_mutable_tags() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tags_;
}

// -------------------------------------------------------------------

// Character_Meta

// int32 total_triggers = 1;
inline void Character_Meta::clear_total_triggers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_triggers_ = 0;
}
inline ::int32_t Character_Meta::total_triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Meta.total_triggers)
  return _internal_total_triggers();
}
inline void Character_Meta::set_total_triggers(::int32_t value) {
  _internal_set_total_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Meta.total_triggers)
}
inline ::int32_t Character_Meta::_internal_total_triggers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_triggers_;
}
inline void Character_Meta::_internal_set_total_triggers(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_triggers_ = value;
}

// int32 total_common_knowledge = 2;
inline void Character_Meta::clear_total_common_knowledge() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_common_knowledge_ = 0;
}
inline ::int32_t Character_Meta::total_common_knowledge() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Meta.total_common_knowledge)
  return _internal_total_common_knowledge();
}
inline void Character_Meta::set_total_common_knowledge(::int32_t value) {
  _internal_set_total_common_knowledge(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Meta.total_common_knowledge)
}
inline ::int32_t Character_Meta::_internal_total_common_knowledge() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_common_knowledge_;
}
inline void Character_Meta::_internal_set_total_common_knowledge(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_common_knowledge_ = value;
}

// int32 goals_version = 3;
inline void Character_Meta::clear_goals_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.goals_version_ = 0;
}
inline ::int32_t Character_Meta::goals_version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Meta.goals_version)
  return _internal_goals_version();
}
inline void Character_Meta::set_goals_version(::int32_t value) {
  _internal_set_goals_version(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Meta.goals_version)
}
inline ::int32_t Character_Meta::_internal_goals_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.goals_version_;
}
inline void Character_Meta::_internal_set_goals_version(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.goals_version_ = value;
}

// -------------------------------------------------------------------

// Character_SharedPortalInfo_InteractionCountStat

// int32 total_count = 1;
inline void Character_SharedPortalInfo_InteractionCountStat::clear_total_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_count_ = 0;
}
inline ::int32_t Character_SharedPortalInfo_InteractionCountStat::total_count() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat.total_count)
  return _internal_total_count();
}
inline void Character_SharedPortalInfo_InteractionCountStat::set_total_count(::int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat.total_count)
}
inline ::int32_t Character_SharedPortalInfo_InteractionCountStat::_internal_total_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_count_;
}
inline void Character_SharedPortalInfo_InteractionCountStat::_internal_set_total_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_count_ = value;
}

// int32 total_unread_count = 2;
inline void Character_SharedPortalInfo_InteractionCountStat::clear_total_unread_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_unread_count_ = 0;
}
inline ::int32_t Character_SharedPortalInfo_InteractionCountStat::total_unread_count() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat.total_unread_count)
  return _internal_total_unread_count();
}
inline void Character_SharedPortalInfo_InteractionCountStat::set_total_unread_count(::int32_t value) {
  _internal_set_total_unread_count(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat.total_unread_count)
}
inline ::int32_t Character_SharedPortalInfo_InteractionCountStat::_internal_total_unread_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_unread_count_;
}
inline void Character_SharedPortalInfo_InteractionCountStat::_internal_set_total_unread_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_unread_count_ = value;
}

// int32 total_read_count = 3;
inline void Character_SharedPortalInfo_InteractionCountStat::clear_total_read_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_read_count_ = 0;
}
inline ::int32_t Character_SharedPortalInfo_InteractionCountStat::total_read_count() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat.total_read_count)
  return _internal_total_read_count();
}
inline void Character_SharedPortalInfo_InteractionCountStat::set_total_read_count(::int32_t value) {
  _internal_set_total_read_count(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat.total_read_count)
}
inline ::int32_t Character_SharedPortalInfo_InteractionCountStat::_internal_total_read_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_read_count_;
}
inline void Character_SharedPortalInfo_InteractionCountStat::_internal_set_total_read_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_read_count_ = value;
}

// -------------------------------------------------------------------

// Character_SharedPortalInfo

// bool is_shared = 1;
inline void Character_SharedPortalInfo::clear_is_shared() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_shared_ = false;
}
inline bool Character_SharedPortalInfo::is_shared() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.is_shared)
  return _internal_is_shared();
}
inline void Character_SharedPortalInfo::set_is_shared(bool value) {
  _internal_set_is_shared(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.is_shared)
}
inline bool Character_SharedPortalInfo::_internal_is_shared() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_shared_;
}
inline void Character_SharedPortalInfo::_internal_set_is_shared(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_shared_ = value;
}

// string byline = 2;
inline void Character_SharedPortalInfo::clear_byline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byline_.ClearToEmpty();
}
inline const std::string& Character_SharedPortalInfo::byline() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.byline)
  return _internal_byline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_SharedPortalInfo::set_byline(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.byline_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.byline)
}
inline std::string* Character_SharedPortalInfo::mutable_byline() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_byline();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.byline)
  return _s;
}
inline const std::string& Character_SharedPortalInfo::_internal_byline() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.byline_.Get();
}
inline void Character_SharedPortalInfo::_internal_set_byline(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.byline_.Set(value, GetArena());
}
inline std::string* Character_SharedPortalInfo::_internal_mutable_byline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.byline_.Mutable( GetArena());
}
inline std::string* Character_SharedPortalInfo::release_byline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.byline)
  return _impl_.byline_.Release();
}
inline void Character_SharedPortalInfo::set_allocated_byline(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byline_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.byline_.IsDefault()) {
          _impl_.byline_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.byline)
}

// string prompt = 3;
inline void Character_SharedPortalInfo::clear_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& Character_SharedPortalInfo::prompt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_SharedPortalInfo::set_prompt(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.prompt)
}
inline std::string* Character_SharedPortalInfo::mutable_prompt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.prompt)
  return _s;
}
inline const std::string& Character_SharedPortalInfo::_internal_prompt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prompt_.Get();
}
inline void Character_SharedPortalInfo::_internal_set_prompt(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prompt_.Set(value, GetArena());
}
inline std::string* Character_SharedPortalInfo::_internal_mutable_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prompt_.Mutable( GetArena());
}
inline std::string* Character_SharedPortalInfo::release_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.prompt)
  return _impl_.prompt_.Release();
}
inline void Character_SharedPortalInfo::set_allocated_prompt(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prompt_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prompt_.IsDefault()) {
          _impl_.prompt_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.prompt)
}

// string short_alias = 4;
inline void Character_SharedPortalInfo::clear_short_alias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_alias_.ClearToEmpty();
}
inline const std::string& Character_SharedPortalInfo::short_alias() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.short_alias)
  return _internal_short_alias();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character_SharedPortalInfo::set_short_alias(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_alias_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.short_alias)
}
inline std::string* Character_SharedPortalInfo::mutable_short_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_short_alias();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.short_alias)
  return _s;
}
inline const std::string& Character_SharedPortalInfo::_internal_short_alias() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_alias_.Get();
}
inline void Character_SharedPortalInfo::_internal_set_short_alias(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_alias_.Set(value, GetArena());
}
inline std::string* Character_SharedPortalInfo::_internal_mutable_short_alias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.short_alias_.Mutable( GetArena());
}
inline std::string* Character_SharedPortalInfo::release_short_alias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.short_alias)
  return _impl_.short_alias_.Release();
}
inline void Character_SharedPortalInfo::set_allocated_short_alias(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_alias_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.short_alias_.IsDefault()) {
          _impl_.short_alias_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.short_alias)
}

// bool allowed_on_showcase = 5;
inline void Character_SharedPortalInfo::clear_allowed_on_showcase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allowed_on_showcase_ = false;
}
inline bool Character_SharedPortalInfo::allowed_on_showcase() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.allowed_on_showcase)
  return _internal_allowed_on_showcase();
}
inline void Character_SharedPortalInfo::set_allowed_on_showcase(bool value) {
  _internal_set_allowed_on_showcase(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.allowed_on_showcase)
}
inline bool Character_SharedPortalInfo::_internal_allowed_on_showcase() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allowed_on_showcase_;
}
inline void Character_SharedPortalInfo::_internal_set_allowed_on_showcase(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.allowed_on_showcase_ = value;
}

// .ai.inworld.studio.v1alpha.Character.SharedPortalInfo.InteractionCountStat interaction_count_stat = 6;
inline bool Character_SharedPortalInfo::has_interaction_count_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interaction_count_stat_ != nullptr);
  return value;
}
inline void Character_SharedPortalInfo::clear_interaction_count_stat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.interaction_count_stat_ != nullptr) _impl_.interaction_count_stat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat& Character_SharedPortalInfo::_internal_interaction_count_stat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* p = _impl_.interaction_count_stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat&>(::ai::inworld::studio::v1alpha::_Character_SharedPortalInfo_InteractionCountStat_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat& Character_SharedPortalInfo::interaction_count_stat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.interaction_count_stat)
  return _internal_interaction_count_stat();
}
inline void Character_SharedPortalInfo::unsafe_arena_set_allocated_interaction_count_stat(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.interaction_count_stat_);
  }
  _impl_.interaction_count_stat_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.interaction_count_stat)
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* Character_SharedPortalInfo::release_interaction_count_stat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* released = _impl_.interaction_count_stat_;
  _impl_.interaction_count_stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* Character_SharedPortalInfo::unsafe_arena_release_interaction_count_stat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.interaction_count_stat)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* temp = _impl_.interaction_count_stat_;
  _impl_.interaction_count_stat_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* Character_SharedPortalInfo::_internal_mutable_interaction_count_stat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interaction_count_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat>(GetArena());
    _impl_.interaction_count_stat_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat*>(p);
  }
  return _impl_.interaction_count_stat_;
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* Character_SharedPortalInfo::mutable_interaction_count_stat() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* _msg = _internal_mutable_interaction_count_stat();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.interaction_count_stat)
  return _msg;
}
inline void Character_SharedPortalInfo::set_allocated_interaction_count_stat(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat*>(_impl_.interaction_count_stat_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.interaction_count_stat_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo_InteractionCountStat*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.SharedPortalInfo.interaction_count_stat)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Character_LongTermCoherence

// bool enabled = 1;
inline void Character_LongTermCoherence::clear_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enabled_ = false;
}
inline bool Character_LongTermCoherence::enabled() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.LongTermCoherence.enabled)
  return _internal_enabled();
}
inline void Character_LongTermCoherence::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.LongTermCoherence.enabled)
}
inline bool Character_LongTermCoherence::_internal_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enabled_;
}
inline void Character_LongTermCoherence::_internal_set_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enabled_ = value;
}

// -------------------------------------------------------------------

// Character_Relationship

// bool enabled = 1;
inline void Character_Relationship::clear_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enabled_ = false;
}
inline bool Character_Relationship::enabled() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Relationship.enabled)
  return _internal_enabled();
}
inline void Character_Relationship::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Relationship.enabled)
}
inline bool Character_Relationship::_internal_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enabled_;
}
inline void Character_Relationship::_internal_set_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enabled_ = value;
}

// float fluidity = 2;
inline void Character_Relationship::clear_fluidity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fluidity_ = 0;
}
inline float Character_Relationship::fluidity() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Relationship.fluidity)
  return _internal_fluidity();
}
inline void Character_Relationship::set_fluidity(float value) {
  _internal_set_fluidity(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Relationship.fluidity)
}
inline float Character_Relationship::_internal_fluidity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fluidity_;
}
inline void Character_Relationship::_internal_set_fluidity(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fluidity_ = value;
}

// -------------------------------------------------------------------

// Character

// string name = 1 [(.ai.inworld.options.examples) = {
inline void Character::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Character::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.name)
}
inline std::string* Character::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.name)
  return _s;
}
inline const std::string& Character::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Character::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Character::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Character::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.name)
  return _impl_.name_.Release();
}
inline void Character::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.name)
}

// string language_code = 2 [deprecated = true];
inline void Character::clear_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& Character::language_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.language_code)
}
inline std::string* Character::mutable_language_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.language_code)
  return _s;
}
inline const std::string& Character::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void Character::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArena());
}
inline std::string* Character::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArena());
}
inline std::string* Character::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.language_code)
  return _impl_.language_code_.Release();
}
inline void Character::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.language_code)
}

// .ai.inworld.language_codes.LanguageCode language = 27;
inline void Character::clear_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_ = 0;
}
inline ::ai::inworld::language_codes::LanguageCode Character::language() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.language)
  return _internal_language();
}
inline void Character::set_language(::ai::inworld::language_codes::LanguageCode value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.language)
}
inline ::ai::inworld::language_codes::LanguageCode Character::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::language_codes::LanguageCode>(_impl_.language_);
}
inline void Character::_internal_set_language(::ai::inworld::language_codes::LanguageCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_ = value;
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription default_character_description = 3;
inline bool Character::has_default_character_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_character_description_ != nullptr);
  return value;
}
inline void Character::clear_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.default_character_description_ != nullptr) _impl_.default_character_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& Character::_internal_default_character_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription* p = _impl_.default_character_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterDescription&>(::ai::inworld::studio::v1alpha::_Character_CharacterDescription_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& Character::default_character_description() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.default_character_description)
  return _internal_default_character_description();
}
inline void Character::unsafe_arena_set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Character_CharacterDescription* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.default_character_description_);
  }
  _impl_.default_character_description_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_description)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::release_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* released = _impl_.default_character_description_;
  _impl_.default_character_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::unsafe_arena_release_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.default_character_description)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* temp = _impl_.default_character_description_;
  _impl_.default_character_description_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::_internal_mutable_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_character_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterDescription>(GetArena());
    _impl_.default_character_description_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription*>(p);
  }
  return _impl_.default_character_description_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::mutable_default_character_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* _msg = _internal_mutable_default_character_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.default_character_description)
  return _msg;
}
inline void Character::set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Character_CharacterDescription* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription*>(_impl_.default_character_description_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.default_character_description_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterDescription*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_description)
}

// .ai.inworld.studio.v1alpha.Character.CharacterAssets default_character_assets = 7;
inline bool Character::has_default_character_assets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_character_assets_ != nullptr);
  return value;
}
inline void Character::clear_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.default_character_assets_ != nullptr) _impl_.default_character_assets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& Character::_internal_default_character_assets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_CharacterAssets* p = _impl_.default_character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterAssets&>(::ai::inworld::studio::v1alpha::_Character_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& Character::default_character_assets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.default_character_assets)
  return _internal_default_character_assets();
}
inline void Character::unsafe_arena_set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Character_CharacterAssets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.default_character_assets_);
  }
  _impl_.default_character_assets_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_assets)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::release_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* released = _impl_.default_character_assets_;
  _impl_.default_character_assets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::unsafe_arena_release_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.default_character_assets)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* temp = _impl_.default_character_assets_;
  _impl_.default_character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::_internal_mutable_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.default_character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterAssets>(GetArena());
    _impl_.default_character_assets_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets*>(p);
  }
  return _impl_.default_character_assets_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::mutable_default_character_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* _msg = _internal_mutable_default_character_assets();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.default_character_assets)
  return _msg;
}
inline void Character::set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Character_CharacterAssets* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets*>(_impl_.default_character_assets_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.default_character_assets_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterAssets*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_assets)
}

// .ai.inworld.studio.v1alpha.Character.CharacterInitialMood initial_mood = 9;
inline bool Character::has_initial_mood() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_mood_ != nullptr);
  return value;
}
inline void Character::clear_initial_mood() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.initial_mood_ != nullptr) _impl_.initial_mood_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& Character::_internal_initial_mood() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* p = _impl_.initial_mood_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood&>(::ai::inworld::studio::v1alpha::_Character_CharacterInitialMood_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& Character::initial_mood() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.initial_mood)
  return _internal_initial_mood();
}
inline void Character::unsafe_arena_set_allocated_initial_mood(::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.initial_mood_);
  }
  _impl_.initial_mood_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.initial_mood)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::release_initial_mood() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* released = _impl_.initial_mood_;
  _impl_.initial_mood_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::unsafe_arena_release_initial_mood() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.initial_mood)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* temp = _impl_.initial_mood_;
  _impl_.initial_mood_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::_internal_mutable_initial_mood() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.initial_mood_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood>(GetArena());
    _impl_.initial_mood_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood*>(p);
  }
  return _impl_.initial_mood_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::mutable_initial_mood() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* _msg = _internal_mutable_initial_mood();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.initial_mood)
  return _msg;
}
inline void Character::set_allocated_initial_mood(::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood*>(_impl_.initial_mood_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.initial_mood_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.initial_mood)
}

// .ai.inworld.studio.v1alpha.Character.CharacterPersonality personality = 10;
inline bool Character::has_personality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.personality_ != nullptr);
  return value;
}
inline void Character::clear_personality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.personality_ != nullptr) _impl_.personality_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& Character::_internal_personality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* p = _impl_.personality_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality&>(::ai::inworld::studio::v1alpha::_Character_CharacterPersonality_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& Character::personality() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.personality)
  return _internal_personality();
}
inline void Character::unsafe_arena_set_allocated_personality(::ai::inworld::studio::v1alpha::Character_CharacterPersonality* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.personality_);
  }
  _impl_.personality_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterPersonality*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.personality)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::release_personality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* released = _impl_.personality_;
  _impl_.personality_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::unsafe_arena_release_personality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.personality)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* temp = _impl_.personality_;
  _impl_.personality_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::_internal_mutable_personality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.personality_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterPersonality>(GetArena());
    _impl_.personality_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterPersonality*>(p);
  }
  return _impl_.personality_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::mutable_personality() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* _msg = _internal_mutable_personality();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.personality)
  return _msg;
}
inline void Character::set_allocated_personality(::ai::inworld::studio::v1alpha::Character_CharacterPersonality* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterPersonality*>(_impl_.personality_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterPersonality*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.personality_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_CharacterPersonality*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.personality)
}

// repeated string common_knowledges = 11;
inline int Character::_internal_common_knowledges_size() const {
  return _internal_common_knowledges().size();
}
inline int Character::common_knowledges_size() const {
  return _internal_common_knowledges_size();
}
inline void Character::clear_common_knowledges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.common_knowledges_.Clear();
}
inline std::string* Character::add_common_knowledges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_common_knowledges()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return _s;
}
inline const std::string& Character::common_knowledges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return _internal_common_knowledges().Get(index);
}
inline std::string* Character::mutable_common_knowledges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return _internal_mutable_common_knowledges()->Mutable(index);
}
inline void Character::set_common_knowledges(int index, const std::string& value) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::set_common_knowledges(int index, std::string&& value) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::set_common_knowledges(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_common_knowledges()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::set_common_knowledges(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::set_common_knowledges(int index, absl::string_view value) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character::common_knowledges() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return _internal_common_knowledges();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character::mutable_common_knowledges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.common_knowledges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_common_knowledges();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
Character::_internal_common_knowledges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.common_knowledges_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
Character::_internal_mutable_common_knowledges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.common_knowledges_;
}

// float social_rank = 12;
inline void Character::clear_social_rank() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.social_rank_ = 0;
}
inline float Character::social_rank() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.social_rank)
  return _internal_social_rank();
}
inline void Character::set_social_rank(float value) {
  _internal_set_social_rank(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.social_rank)
}
inline float Character::_internal_social_rank() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.social_rank_;
}
inline void Character::_internal_set_social_rank(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.social_rank_ = value;
}

// repeated .ai.inworld.studio.v1alpha.Scene scenes = 13;
inline int Character::_internal_scenes_size() const {
  return _internal_scenes().size();
}
inline int Character::scenes_size() const {
  return _internal_scenes_size();
}
inline ::ai::inworld::studio::v1alpha::Scene* Character::mutable_scenes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.scenes)
  return _internal_mutable_scenes()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>* Character::mutable_scenes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.scenes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scenes();
}
inline const ::ai::inworld::studio::v1alpha::Scene& Character::scenes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.scenes)
  return _internal_scenes().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Scene* Character::add_scenes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Scene* _add = _internal_mutable_scenes()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.scenes)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>& Character::scenes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.scenes)
  return _internal_scenes();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>&
Character::_internal_scenes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scenes_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>*
Character::_internal_mutable_scenes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scenes_;
}

// repeated .ai.inworld.studio.v1alpha.Character.Fact facts = 14;
inline int Character::_internal_facts_size() const {
  return _internal_facts().size();
}
inline int Character::facts_size() const {
  return _internal_facts_size();
}
inline void Character::clear_facts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.facts_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character_Fact* Character::mutable_facts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.facts)
  return _internal_mutable_facts()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_Fact>* Character::mutable_facts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.facts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_facts();
}
inline const ::ai::inworld::studio::v1alpha::Character_Fact& Character::facts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.facts)
  return _internal_facts().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Character_Fact* Character::add_facts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Character_Fact* _add = _internal_mutable_facts()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.facts)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_Fact>& Character::facts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.facts)
  return _internal_facts();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_Fact>&
Character::_internal_facts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.facts_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character_Fact>*
Character::_internal_mutable_facts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.facts_;
}

// repeated .ai.inworld.studio.v1alpha.BehavioralContext behavioral_contexts = 15;
inline int Character::_internal_behavioral_contexts_size() const {
  return _internal_behavioral_contexts().size();
}
inline int Character::behavioral_contexts_size() const {
  return _internal_behavioral_contexts_size();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContext* Character::mutable_behavioral_contexts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return _internal_mutable_behavioral_contexts()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::BehavioralContext>* Character::mutable_behavioral_contexts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_behavioral_contexts();
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContext& Character::behavioral_contexts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return _internal_behavioral_contexts().Get(index);
}
inline ::ai::inworld::studio::v1alpha::BehavioralContext* Character::add_behavioral_contexts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::BehavioralContext* _add = _internal_mutable_behavioral_contexts()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::BehavioralContext>& Character::behavioral_contexts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return _internal_behavioral_contexts();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::BehavioralContext>&
Character::_internal_behavioral_contexts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.behavioral_contexts_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::BehavioralContext>*
Character::_internal_mutable_behavioral_contexts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.behavioral_contexts_;
}

// .ai.inworld.studio.v1alpha.Character.Meta meta = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Character::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void Character::clear_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::ai::inworld::studio::v1alpha::Character_Meta& Character::_internal_meta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_Meta&>(::ai::inworld::studio::v1alpha::_Character_Meta_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_Meta& Character::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.meta)
  return _internal_meta();
}
inline void Character::unsafe_arena_set_allocated_meta(::ai::inworld::studio::v1alpha::Character_Meta* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.meta)
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::release_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ai::inworld::studio::v1alpha::Character_Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::unsafe_arena_release_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.meta)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ai::inworld::studio::v1alpha::Character_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::_internal_mutable_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.meta)
  return _msg;
}
inline void Character::set_allocated_meta(::ai::inworld::studio::v1alpha::Character_Meta* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Meta*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Meta*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.meta_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.meta)
}

// float emotional_fluidity = 17;
inline void Character::clear_emotional_fluidity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotional_fluidity_ = 0;
}
inline float Character::emotional_fluidity() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.emotional_fluidity)
  return _internal_emotional_fluidity();
}
inline void Character::set_emotional_fluidity(float value) {
  _internal_set_emotional_fluidity(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.emotional_fluidity)
}
inline float Character::_internal_emotional_fluidity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotional_fluidity_;
}
inline void Character::_internal_set_emotional_fluidity(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.emotional_fluidity_ = value;
}

// .ai.inworld.studio.v1alpha.Character.SharedPortalInfo share_portal_info = 18 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Character::has_share_portal_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.share_portal_info_ != nullptr);
  return value;
}
inline void Character::clear_share_portal_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.share_portal_info_ != nullptr) _impl_.share_portal_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo& Character::_internal_share_portal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* p = _impl_.share_portal_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo&>(::ai::inworld::studio::v1alpha::_Character_SharedPortalInfo_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo& Character::share_portal_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.share_portal_info)
  return _internal_share_portal_info();
}
inline void Character::unsafe_arena_set_allocated_share_portal_info(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.share_portal_info_);
  }
  _impl_.share_portal_info_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.share_portal_info)
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* Character::release_share_portal_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* released = _impl_.share_portal_info_;
  _impl_.share_portal_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* Character::unsafe_arena_release_share_portal_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.share_portal_info)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* temp = _impl_.share_portal_info_;
  _impl_.share_portal_info_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* Character::_internal_mutable_share_portal_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.share_portal_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo>(GetArena());
    _impl_.share_portal_info_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo*>(p);
  }
  return _impl_.share_portal_info_;
}
inline ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* Character::mutable_share_portal_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* _msg = _internal_mutable_share_portal_info();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.share_portal_info)
  return _msg;
}
inline void Character::set_allocated_share_portal_info(::ai::inworld::studio::v1alpha::Character_SharedPortalInfo* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo*>(_impl_.share_portal_info_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.share_portal_info_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_SharedPortalInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.share_portal_info)
}

// string yaml_config = 19;
inline void Character::clear_yaml_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaml_config_.ClearToEmpty();
}
inline const std::string& Character::yaml_config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.yaml_config)
  return _internal_yaml_config();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_yaml_config(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaml_config_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.yaml_config)
}
inline std::string* Character::mutable_yaml_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_yaml_config();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.yaml_config)
  return _s;
}
inline const std::string& Character::_internal_yaml_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaml_config_.Get();
}
inline void Character::_internal_set_yaml_config(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaml_config_.Set(value, GetArena());
}
inline std::string* Character::_internal_mutable_yaml_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.yaml_config_.Mutable( GetArena());
}
inline std::string* Character::release_yaml_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.yaml_config)
  return _impl_.yaml_config_.Release();
}
inline void Character::set_allocated_yaml_config(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaml_config_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.yaml_config_.IsDefault()) {
          _impl_.yaml_config_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.yaml_config)
}

// map<string, .ai.inworld.studio.v1alpha.SafetyLevel> safety_config = 21;
inline int Character::_internal_safety_config_size() const {
  return _internal_safety_config().size();
}
inline int Character::safety_config_size() const {
  return _internal_safety_config_size();
}
inline void Character::clear_safety_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.safety_config_.Clear();
}
inline const ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>& Character::_internal_safety_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.safety_config_.GetMap();
}
inline const ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>& Character::safety_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai.inworld.studio.v1alpha.Character.safety_config)
  return _internal_safety_config();
}
inline ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>* Character::_internal_mutable_safety_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.safety_config_.MutableMap();
}
inline ::google::protobuf_inworld::Map<std::string, ::ai::inworld::studio::v1alpha::SafetyLevel>* Character::mutable_safety_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai.inworld.studio.v1alpha.Character.safety_config)
  return _internal_mutable_safety_config();
}

// float relationship_fluidity = 22 [deprecated = true];
inline void Character::clear_relationship_fluidity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relationship_fluidity_ = 0;
}
inline float Character::relationship_fluidity() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.relationship_fluidity)
  return _internal_relationship_fluidity();
}
inline void Character::set_relationship_fluidity(float value) {
  _internal_set_relationship_fluidity(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.relationship_fluidity)
}
inline float Character::_internal_relationship_fluidity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relationship_fluidity_;
}
inline void Character::_internal_set_relationship_fluidity(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relationship_fluidity_ = value;
}

// .ai.inworld.studio.v1alpha.Character.FourthWallContainment fourth_wall = 23;
inline void Character::clear_fourth_wall() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fourth_wall_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_FourthWallContainment Character::fourth_wall() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.fourth_wall)
  return _internal_fourth_wall();
}
inline void Character::set_fourth_wall(::ai::inworld::studio::v1alpha::Character_FourthWallContainment value) {
  _internal_set_fourth_wall(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.fourth_wall)
}
inline ::ai::inworld::studio::v1alpha::Character_FourthWallContainment Character::_internal_fourth_wall() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::Character_FourthWallContainment>(_impl_.fourth_wall_);
}
inline void Character::_internal_set_fourth_wall(::ai::inworld::studio::v1alpha::Character_FourthWallContainment value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fourth_wall_ = value;
}

// .ai.inworld.studio.v1alpha.Character.LongTermCoherence long_term_coherence = 24;
inline bool Character::has_long_term_coherence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.long_term_coherence_ != nullptr);
  return value;
}
inline void Character::clear_long_term_coherence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.long_term_coherence_ != nullptr) _impl_.long_term_coherence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::ai::inworld::studio::v1alpha::Character_LongTermCoherence& Character::_internal_long_term_coherence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* p = _impl_.long_term_coherence_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_LongTermCoherence&>(::ai::inworld::studio::v1alpha::_Character_LongTermCoherence_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_LongTermCoherence& Character::long_term_coherence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.long_term_coherence)
  return _internal_long_term_coherence();
}
inline void Character::unsafe_arena_set_allocated_long_term_coherence(::ai::inworld::studio::v1alpha::Character_LongTermCoherence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.long_term_coherence_);
  }
  _impl_.long_term_coherence_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_LongTermCoherence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.long_term_coherence)
}
inline ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* Character::release_long_term_coherence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* released = _impl_.long_term_coherence_;
  _impl_.long_term_coherence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* Character::unsafe_arena_release_long_term_coherence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.long_term_coherence)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* temp = _impl_.long_term_coherence_;
  _impl_.long_term_coherence_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* Character::_internal_mutable_long_term_coherence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.long_term_coherence_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_LongTermCoherence>(GetArena());
    _impl_.long_term_coherence_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_LongTermCoherence*>(p);
  }
  return _impl_.long_term_coherence_;
}
inline ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* Character::mutable_long_term_coherence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_LongTermCoherence* _msg = _internal_mutable_long_term_coherence();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.long_term_coherence)
  return _msg;
}
inline void Character::set_allocated_long_term_coherence(::ai::inworld::studio::v1alpha::Character_LongTermCoherence* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_LongTermCoherence*>(_impl_.long_term_coherence_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_LongTermCoherence*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.long_term_coherence_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_LongTermCoherence*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.long_term_coherence)
}

// .ai.inworld.studio.v1alpha.Character.Relationship relationship = 25;
inline bool Character::has_relationship() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relationship_ != nullptr);
  return value;
}
inline void Character::clear_relationship() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.relationship_ != nullptr) _impl_.relationship_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::ai::inworld::studio::v1alpha::Character_Relationship& Character::_internal_relationship() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character_Relationship* p = _impl_.relationship_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_Relationship&>(::ai::inworld::studio::v1alpha::_Character_Relationship_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_Relationship& Character::relationship() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.relationship)
  return _internal_relationship();
}
inline void Character::unsafe_arena_set_allocated_relationship(::ai::inworld::studio::v1alpha::Character_Relationship* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.relationship_);
  }
  _impl_.relationship_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Relationship*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.relationship)
}
inline ::ai::inworld::studio::v1alpha::Character_Relationship* Character::release_relationship() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::ai::inworld::studio::v1alpha::Character_Relationship* released = _impl_.relationship_;
  _impl_.relationship_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character_Relationship* Character::unsafe_arena_release_relationship() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.relationship)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::ai::inworld::studio::v1alpha::Character_Relationship* temp = _impl_.relationship_;
  _impl_.relationship_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_Relationship* Character::_internal_mutable_relationship() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.relationship_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_Relationship>(GetArena());
    _impl_.relationship_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Relationship*>(p);
  }
  return _impl_.relationship_;
}
inline ::ai::inworld::studio::v1alpha::Character_Relationship* Character::mutable_relationship() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character_Relationship* _msg = _internal_mutable_relationship();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.relationship)
  return _msg;
}
inline void Character::set_allocated_relationship(::ai::inworld::studio::v1alpha::Character_Relationship* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Relationship*>(_impl_.relationship_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Relationship*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.relationship_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character_Relationship*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.relationship)
}

// .ai.inworld.studio.v1alpha.CognitiveControl cognitive_control = 26;
inline void Character::clear_cognitive_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cognitive_control_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CognitiveControl Character::cognitive_control() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.cognitive_control)
  return _internal_cognitive_control();
}
inline void Character::set_cognitive_control(::ai::inworld::studio::v1alpha::CognitiveControl value) {
  _internal_set_cognitive_control(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.cognitive_control)
}
inline ::ai::inworld::studio::v1alpha::CognitiveControl Character::_internal_cognitive_control() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::CognitiveControl>(_impl_.cognitive_control_);
}
inline void Character::_internal_set_cognitive_control(::ai::inworld::studio::v1alpha::CognitiveControl value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cognitive_control_ = value;
}

// -------------------------------------------------------------------

// GetCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCharacterRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCharacterRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCharacterRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}
inline std::string* GetCharacterRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
  return _s;
}
inline const std::string& GetCharacterRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetCharacterRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetCharacterRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetCharacterRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void GetCharacterRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}

// .ai.inworld.studio.v1alpha.CharacterItemView view = 2;
inline void GetCharacterRequest::clear_view() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CharacterItemView GetCharacterRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterRequest.view)
  return _internal_view();
}
inline void GetCharacterRequest::set_view(::ai::inworld::studio::v1alpha::CharacterItemView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterRequest.view)
}
inline ::ai::inworld::studio::v1alpha::CharacterItemView GetCharacterRequest::_internal_view() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::CharacterItemView>(_impl_.view_);
}
inline void GetCharacterRequest::_internal_set_view(::ai::inworld::studio::v1alpha::CharacterItemView value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_ = value;
}

// -------------------------------------------------------------------

// GetCharacterAdvancedSettingsRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCharacterAdvancedSettingsRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCharacterAdvancedSettingsRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCharacterAdvancedSettingsRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}
inline std::string* GetCharacterAdvancedSettingsRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
  return _s;
}
inline const std::string& GetCharacterAdvancedSettingsRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetCharacterAdvancedSettingsRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetCharacterAdvancedSettingsRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetCharacterAdvancedSettingsRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
  return _impl_.name_.Release();
}
inline void GetCharacterAdvancedSettingsRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}

// -------------------------------------------------------------------

// UpdateCharacterAdvancedSettingsRequest

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings character_advanced_settings = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterAdvancedSettingsRequest::has_character_advanced_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_advanced_settings_ != nullptr);
  return value;
}
inline void UpdateCharacterAdvancedSettingsRequest::clear_character_advanced_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.character_advanced_settings_ != nullptr) _impl_.character_advanced_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& UpdateCharacterAdvancedSettingsRequest::_internal_character_advanced_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* p = _impl_.character_advanced_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings&>(::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& UpdateCharacterAdvancedSettingsRequest::character_advanced_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
  return _internal_character_advanced_settings();
}
inline void UpdateCharacterAdvancedSettingsRequest::unsafe_arena_set_allocated_character_advanced_settings(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.character_advanced_settings_);
  }
  _impl_.character_advanced_settings_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::release_character_advanced_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* released = _impl_.character_advanced_settings_;
  _impl_.character_advanced_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::unsafe_arena_release_character_advanced_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* temp = _impl_.character_advanced_settings_;
  _impl_.character_advanced_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::_internal_mutable_character_advanced_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.character_advanced_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings>(GetArena());
    _impl_.character_advanced_settings_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings*>(p);
  }
  return _impl_.character_advanced_settings_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::mutable_character_advanced_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* _msg = _internal_mutable_character_advanced_settings();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
  return _msg;
}
inline void UpdateCharacterAdvancedSettingsRequest::set_allocated_character_advanced_settings(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings*>(_impl_.character_advanced_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.character_advanced_settings_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterAdvancedSettingsRequest::has_update_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_mask_ != nullptr);
  return value;
}
inline const ::google::protobuf_inworld::FieldMask& UpdateCharacterAdvancedSettingsRequest::_internal_update_mask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf_inworld::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf_inworld::FieldMask&>(::google::protobuf_inworld::_FieldMask_default_instance_);
}
inline const ::google::protobuf_inworld::FieldMask& UpdateCharacterAdvancedSettingsRequest::update_mask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCharacterAdvancedSettingsRequest::unsafe_arena_set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = reinterpret_cast<::google::protobuf_inworld::FieldMask*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterAdvancedSettingsRequest::release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf_inworld::FieldMask* released = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterAdvancedSettingsRequest::unsafe_arena_release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf_inworld::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterAdvancedSettingsRequest::_internal_mutable_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf_inworld::FieldMask>(GetArena());
    _impl_.update_mask_ = reinterpret_cast<::google::protobuf_inworld::FieldMask*>(p);
  }
  return _impl_.update_mask_;
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterAdvancedSettingsRequest::mutable_update_mask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf_inworld::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
  return _msg;
}
inline void UpdateCharacterAdvancedSettingsRequest::set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.update_mask_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.update_mask_ = reinterpret_cast<::google::protobuf_inworld::FieldMask*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
}

// -------------------------------------------------------------------

// ListCharactersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListCharactersRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListCharactersRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListCharactersRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}
inline std::string* ListCharactersRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
  return _s;
}
inline const std::string& ListCharactersRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void ListCharactersRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* ListCharactersRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* ListCharactersRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListCharactersRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}

// int32 page_size = 2;
inline void ListCharactersRequest::clear_page_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_size_ = 0;
}
inline ::int32_t ListCharactersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.page_size)
  return _internal_page_size();
}
inline void ListCharactersRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.page_size)
}
inline ::int32_t ListCharactersRequest::_internal_page_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_size_;
}
inline void ListCharactersRequest::_internal_set_page_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_size_ = value;
}

// string page_token = 3;
inline void ListCharactersRequest::clear_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListCharactersRequest::page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
  return _internal_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListCharactersRequest::set_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}
inline std::string* ListCharactersRequest::mutable_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
  return _s;
}
inline const std::string& ListCharactersRequest::_internal_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_token_.Get();
}
inline void ListCharactersRequest::_internal_set_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(value, GetArena());
}
inline std::string* ListCharactersRequest::_internal_mutable_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.page_token_.Mutable( GetArena());
}
inline std::string* ListCharactersRequest::release_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListCharactersRequest::set_allocated_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_token_.IsDefault()) {
          _impl_.page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}

// .ai.inworld.studio.v1alpha.CharacterView view = 4;
inline void ListCharactersRequest::clear_view() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CharacterView ListCharactersRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.view)
  return _internal_view();
}
inline void ListCharactersRequest::set_view(::ai::inworld::studio::v1alpha::CharacterView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.view)
}
inline ::ai::inworld::studio::v1alpha::CharacterView ListCharactersRequest::_internal_view() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::CharacterView>(_impl_.view_);
}
inline void ListCharactersRequest::_internal_set_view(::ai::inworld::studio::v1alpha::CharacterView value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_ = value;
}

// string filter = 5;
inline void ListCharactersRequest::clear_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListCharactersRequest::filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
  return _internal_filter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListCharactersRequest::set_filter(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}
inline std::string* ListCharactersRequest::mutable_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
  return _s;
}
inline const std::string& ListCharactersRequest::_internal_filter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filter_.Get();
}
inline void ListCharactersRequest::_internal_set_filter(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filter_.Set(value, GetArena());
}
inline std::string* ListCharactersRequest::_internal_mutable_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filter_.Mutable( GetArena());
}
inline std::string* ListCharactersRequest::release_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListCharactersRequest::set_allocated_filter(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filter_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filter_.IsDefault()) {
          _impl_.filter_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateCharacterRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}
inline std::string* CreateCharacterRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void CreateCharacterRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* CreateCharacterRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* CreateCharacterRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateCharacterRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}

// .ai.inworld.studio.v1alpha.Character character = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateCharacterRequest::has_character() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_ != nullptr);
  return value;
}
inline void CreateCharacterRequest::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.character_ != nullptr) _impl_.character_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Character& CreateCharacterRequest::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character&>(::ai::inworld::studio::v1alpha::_Character_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character& CreateCharacterRequest::character() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
  return _internal_character();
}
inline void CreateCharacterRequest::unsafe_arena_set_allocated_character(::ai::inworld::studio::v1alpha::Character* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character* released = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::unsafe_arena_release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character>(GetArena());
    _impl_.character_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(p);
  }
  return _impl_.character_;
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
  return _msg;
}
inline void CreateCharacterRequest::set_allocated_character(::ai::inworld::studio::v1alpha::Character* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(_impl_.character_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.character_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
}

// bool skip_auto_create = 3;
inline void CreateCharacterRequest::clear_skip_auto_create() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.skip_auto_create_ = false;
}
inline bool CreateCharacterRequest::skip_auto_create() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCharacterRequest.skip_auto_create)
  return _internal_skip_auto_create();
}
inline void CreateCharacterRequest::set_skip_auto_create(bool value) {
  _internal_set_skip_auto_create(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateCharacterRequest.skip_auto_create)
}
inline bool CreateCharacterRequest::_internal_skip_auto_create() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.skip_auto_create_;
}
inline void CreateCharacterRequest::_internal_set_skip_auto_create(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.skip_auto_create_ = value;
}

// -------------------------------------------------------------------

// UpdateCharacterRequest

// .ai.inworld.studio.v1alpha.Character character = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterRequest::has_character() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_ != nullptr);
  return value;
}
inline void UpdateCharacterRequest::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.character_ != nullptr) _impl_.character_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Character& UpdateCharacterRequest::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Character* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character&>(::ai::inworld::studio::v1alpha::_Character_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character& UpdateCharacterRequest::character() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
  return _internal_character();
}
inline void UpdateCharacterRequest::unsafe_arena_set_allocated_character(::ai::inworld::studio::v1alpha::Character* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character* released = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::unsafe_arena_release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Character* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character>(GetArena());
    _impl_.character_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(p);
  }
  return _impl_.character_;
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Character* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
  return _msg;
}
inline void UpdateCharacterRequest::set_allocated_character(::ai::inworld::studio::v1alpha::Character* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(_impl_.character_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.character_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Character*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterRequest::has_update_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_mask_ != nullptr);
  return value;
}
inline const ::google::protobuf_inworld::FieldMask& UpdateCharacterRequest::_internal_update_mask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf_inworld::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf_inworld::FieldMask&>(::google::protobuf_inworld::_FieldMask_default_instance_);
}
inline const ::google::protobuf_inworld::FieldMask& UpdateCharacterRequest::update_mask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCharacterRequest::unsafe_arena_set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = reinterpret_cast<::google::protobuf_inworld::FieldMask*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterRequest::release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf_inworld::FieldMask* released = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterRequest::unsafe_arena_release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf_inworld::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterRequest::_internal_mutable_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf_inworld::FieldMask>(GetArena());
    _impl_.update_mask_ = reinterpret_cast<::google::protobuf_inworld::FieldMask*>(p);
  }
  return _impl_.update_mask_;
}
inline ::google::protobuf_inworld::FieldMask* UpdateCharacterRequest::mutable_update_mask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf_inworld::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
  return _msg;
}
inline void UpdateCharacterRequest::set_allocated_update_mask(::google::protobuf_inworld::FieldMask* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.update_mask_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.update_mask_ = reinterpret_cast<::google::protobuf_inworld::FieldMask*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteCharacterRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteCharacterRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteCharacterRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}
inline std::string* DeleteCharacterRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
  return _s;
}
inline const std::string& DeleteCharacterRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void DeleteCharacterRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeleteCharacterRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeleteCharacterRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteCharacterRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}

// -------------------------------------------------------------------

// DeployCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeployCharacterRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeployCharacterRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeployCharacterRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}
inline std::string* DeployCharacterRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
  return _s;
}
inline const std::string& DeployCharacterRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void DeployCharacterRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeployCharacterRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeployCharacterRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void DeployCharacterRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}

// -------------------------------------------------------------------

// CloneCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CloneCharacterRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CloneCharacterRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CloneCharacterRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloneCharacterRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CloneCharacterRequest.name)
}
inline std::string* CloneCharacterRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CloneCharacterRequest.name)
  return _s;
}
inline const std::string& CloneCharacterRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CloneCharacterRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CloneCharacterRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CloneCharacterRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CloneCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void CloneCharacterRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CloneCharacterRequest.name)
}

// string workspace = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CloneCharacterRequest::clear_workspace() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.workspace_.ClearToEmpty();
}
inline const std::string& CloneCharacterRequest::workspace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CloneCharacterRequest.workspace)
  return _internal_workspace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloneCharacterRequest::set_workspace(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.workspace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CloneCharacterRequest.workspace)
}
inline std::string* CloneCharacterRequest::mutable_workspace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_workspace();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CloneCharacterRequest.workspace)
  return _s;
}
inline const std::string& CloneCharacterRequest::_internal_workspace() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.workspace_.Get();
}
inline void CloneCharacterRequest::_internal_set_workspace(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.workspace_.Set(value, GetArena());
}
inline std::string* CloneCharacterRequest::_internal_mutable_workspace() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.workspace_.Mutable( GetArena());
}
inline std::string* CloneCharacterRequest::release_workspace() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CloneCharacterRequest.workspace)
  return _impl_.workspace_.Release();
}
inline void CloneCharacterRequest::set_allocated_workspace(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.workspace_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.workspace_.IsDefault()) {
          _impl_.workspace_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CloneCharacterRequest.workspace)
}

// string new_name = 3 [(.google.api.field_behavior) = REQUIRED];
inline void CloneCharacterRequest::clear_new_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_name_.ClearToEmpty();
}
inline const std::string& CloneCharacterRequest::new_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CloneCharacterRequest.new_name)
  return _internal_new_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloneCharacterRequest::set_new_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.new_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CloneCharacterRequest.new_name)
}
inline std::string* CloneCharacterRequest::mutable_new_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CloneCharacterRequest.new_name)
  return _s;
}
inline const std::string& CloneCharacterRequest::_internal_new_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_name_.Get();
}
inline void CloneCharacterRequest::_internal_set_new_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.new_name_.Set(value, GetArena());
}
inline std::string* CloneCharacterRequest::_internal_mutable_new_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.new_name_.Mutable( GetArena());
}
inline std::string* CloneCharacterRequest::release_new_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CloneCharacterRequest.new_name)
  return _impl_.new_name_.Release();
}
inline void CloneCharacterRequest::set_allocated_new_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_name_.IsDefault()) {
          _impl_.new_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CloneCharacterRequest.new_name)
}

// -------------------------------------------------------------------

// ListCharactersResponse

// repeated .ai.inworld.studio.v1alpha.Character characters = 1;
inline int ListCharactersResponse::_internal_characters_size() const {
  return _internal_characters().size();
}
inline int ListCharactersResponse::characters_size() const {
  return _internal_characters_size();
}
inline void ListCharactersResponse::clear_characters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.characters_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character* ListCharactersResponse::mutable_characters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return _internal_mutable_characters()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>* ListCharactersResponse::mutable_characters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_characters();
}
inline const ::ai::inworld::studio::v1alpha::Character& ListCharactersResponse::characters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return _internal_characters().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Character* ListCharactersResponse::add_characters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Character* _add = _internal_mutable_characters()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>& ListCharactersResponse::characters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return _internal_characters();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>&
ListCharactersResponse::_internal_characters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.characters_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>*
ListCharactersResponse::_internal_mutable_characters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.characters_;
}

// string next_page_token = 2;
inline void ListCharactersResponse::clear_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListCharactersResponse::next_page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListCharactersResponse::set_next_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}
inline std::string* ListCharactersResponse::mutable_next_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
  return _s;
}
inline const std::string& ListCharactersResponse::_internal_next_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.next_page_token_.Get();
}
inline void ListCharactersResponse::_internal_set_next_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(value, GetArena());
}
inline std::string* ListCharactersResponse::_internal_mutable_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.next_page_token_.Mutable( GetArena());
}
inline std::string* ListCharactersResponse::release_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListCharactersResponse::set_allocated_next_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_page_token_.IsDefault()) {
          _impl_.next_page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}

// -------------------------------------------------------------------

// ReplaceCharacterRpmModelRequest

// string character = 1 [(.ai.inworld.options.examples) = {
inline void ReplaceCharacterRpmModelRequest::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.ClearToEmpty();
}
inline const std::string& ReplaceCharacterRpmModelRequest::character() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
  return _internal_character();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceCharacterRpmModelRequest::set_character(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}
inline std::string* ReplaceCharacterRpmModelRequest::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
  return _s;
}
inline const std::string& ReplaceCharacterRpmModelRequest::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_.Get();
}
inline void ReplaceCharacterRpmModelRequest::_internal_set_character(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(value, GetArena());
}
inline std::string* ReplaceCharacterRpmModelRequest::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_.Mutable( GetArena());
}
inline std::string* ReplaceCharacterRpmModelRequest::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
  return _impl_.character_.Release();
}
inline void ReplaceCharacterRpmModelRequest::set_allocated_character(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_.IsDefault()) {
          _impl_.character_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}

// string rpm_model_uri = 2;
inline void ReplaceCharacterRpmModelRequest::clear_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.ClearToEmpty();
}
inline const std::string& ReplaceCharacterRpmModelRequest::rpm_model_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
  return _internal_rpm_model_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceCharacterRpmModelRequest::set_rpm_model_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}
inline std::string* ReplaceCharacterRpmModelRequest::mutable_rpm_model_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_model_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
  return _s;
}
inline const std::string& ReplaceCharacterRpmModelRequest::_internal_rpm_model_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_model_uri_.Get();
}
inline void ReplaceCharacterRpmModelRequest::_internal_set_rpm_model_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(value, GetArena());
}
inline std::string* ReplaceCharacterRpmModelRequest::_internal_mutable_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_model_uri_.Mutable( GetArena());
}
inline std::string* ReplaceCharacterRpmModelRequest::release_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
  return _impl_.rpm_model_uri_.Release();
}
inline void ReplaceCharacterRpmModelRequest::set_allocated_rpm_model_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_model_uri_.IsDefault()) {
          _impl_.rpm_model_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}

// -------------------------------------------------------------------

// ReplaceCharacterImageRequest

// string character = 1 [(.ai.inworld.options.examples) = {
inline void ReplaceCharacterImageRequest::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.ClearToEmpty();
}
inline const std::string& ReplaceCharacterImageRequest::character() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character)
  return _internal_character();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceCharacterImageRequest::set_character(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character)
}
inline std::string* ReplaceCharacterImageRequest::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character)
  return _s;
}
inline const std::string& ReplaceCharacterImageRequest::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_.Get();
}
inline void ReplaceCharacterImageRequest::_internal_set_character(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(value, GetArena());
}
inline std::string* ReplaceCharacterImageRequest::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_.Mutable( GetArena());
}
inline std::string* ReplaceCharacterImageRequest::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character)
  return _impl_.character_.Release();
}
inline void ReplaceCharacterImageRequest::set_allocated_character(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_.IsDefault()) {
          _impl_.character_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character)
}

// bytes content = 2;
inline void ReplaceCharacterImageRequest::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ReplaceCharacterImageRequest::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplaceCharacterImageRequest::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.content)
}
inline std::string* ReplaceCharacterImageRequest::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.content)
  return _s;
}
inline const std::string& ReplaceCharacterImageRequest::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void ReplaceCharacterImageRequest::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* ReplaceCharacterImageRequest::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* ReplaceCharacterImageRequest::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.content)
  return _impl_.content_.Release();
}
inline void ReplaceCharacterImageRequest::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.content)
}

// .ai.inworld.studio.v1alpha.CharacterAssetType character_asset_type = 3;
inline void ReplaceCharacterImageRequest::clear_character_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_asset_type_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CharacterAssetType ReplaceCharacterImageRequest::character_asset_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character_asset_type)
  return _internal_character_asset_type();
}
inline void ReplaceCharacterImageRequest::set_character_asset_type(::ai::inworld::studio::v1alpha::CharacterAssetType value) {
  _internal_set_character_asset_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterImageRequest.character_asset_type)
}
inline ::ai::inworld::studio::v1alpha::CharacterAssetType ReplaceCharacterImageRequest::_internal_character_asset_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::CharacterAssetType>(_impl_.character_asset_type_);
}
inline void ReplaceCharacterImageRequest::_internal_set_character_asset_type(::ai::inworld::studio::v1alpha::CharacterAssetType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_asset_type_ = value;
}

// -------------------------------------------------------------------

// PreviewPromptTemplateRequest

// string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PreviewPromptTemplateRequest::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.ClearToEmpty();
}
inline const std::string& PreviewPromptTemplateRequest::character() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
  return _internal_character();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviewPromptTemplateRequest::set_character(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}
inline std::string* PreviewPromptTemplateRequest::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
  return _s;
}
inline const std::string& PreviewPromptTemplateRequest::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_.Get();
}
inline void PreviewPromptTemplateRequest::_internal_set_character(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(value, GetArena());
}
inline std::string* PreviewPromptTemplateRequest::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_.Mutable( GetArena());
}
inline std::string* PreviewPromptTemplateRequest::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
  return _impl_.character_.Release();
}
inline void PreviewPromptTemplateRequest::set_allocated_character(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_.IsDefault()) {
          _impl_.character_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}

// string template = 2;
inline void PreviewPromptTemplateRequest::clear_template_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.template__.ClearToEmpty();
}
inline const std::string& PreviewPromptTemplateRequest::template_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
  return _internal_template_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviewPromptTemplateRequest::set_template_(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.template__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}
inline std::string* PreviewPromptTemplateRequest::mutable_template_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
  return _s;
}
inline const std::string& PreviewPromptTemplateRequest::_internal_template_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.template__.Get();
}
inline void PreviewPromptTemplateRequest::_internal_set_template_(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.template__.Set(value, GetArena());
}
inline std::string* PreviewPromptTemplateRequest::_internal_mutable_template_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.template__.Mutable( GetArena());
}
inline std::string* PreviewPromptTemplateRequest::release_template_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
  return _impl_.template__.Release();
}
inline void PreviewPromptTemplateRequest::set_allocated_template_(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.template__.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.template__.IsDefault()) {
          _impl_.template__.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}

// -------------------------------------------------------------------

// PreviewPromptTempalteResponse

// string prompt = 1;
inline void PreviewPromptTempalteResponse::clear_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& PreviewPromptTempalteResponse::prompt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviewPromptTempalteResponse::set_prompt(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}
inline std::string* PreviewPromptTempalteResponse::mutable_prompt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
  return _s;
}
inline const std::string& PreviewPromptTempalteResponse::_internal_prompt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prompt_.Get();
}
inline void PreviewPromptTempalteResponse::_internal_set_prompt(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prompt_.Set(value, GetArena());
}
inline std::string* PreviewPromptTempalteResponse::_internal_mutable_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prompt_.Mutable( GetArena());
}
inline std::string* PreviewPromptTempalteResponse::release_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
  return _impl_.prompt_.Release();
}
inline void PreviewPromptTempalteResponse::set_allocated_prompt(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prompt_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prompt_.IsDefault()) {
          _impl_.prompt_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}

// repeated string errors = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int PreviewPromptTempalteResponse::_internal_errors_size() const {
  return _internal_errors().size();
}
inline int PreviewPromptTempalteResponse::errors_size() const {
  return _internal_errors_size();
}
inline void PreviewPromptTempalteResponse::clear_errors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errors_.Clear();
}
inline std::string* PreviewPromptTempalteResponse::add_errors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_errors()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return _s;
}
inline const std::string& PreviewPromptTempalteResponse::errors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return _internal_errors().Get(index);
}
inline std::string* PreviewPromptTempalteResponse::mutable_errors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return _internal_mutable_errors()->Mutable(index);
}
inline void PreviewPromptTempalteResponse::set_errors(int index, const std::string& value) {
  _internal_mutable_errors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::set_errors(int index, std::string&& value) {
  _internal_mutable_errors()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::set_errors(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_errors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::set_errors(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_errors()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::set_errors(int index, absl::string_view value) {
  _internal_mutable_errors()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_errors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_errors()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_errors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_errors()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_errors()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
PreviewPromptTempalteResponse::errors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return _internal_errors();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
PreviewPromptTempalteResponse::mutable_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_errors();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
PreviewPromptTempalteResponse::_internal_errors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errors_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
PreviewPromptTempalteResponse::_internal_mutable_errors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.errors_;
}

// -------------------------------------------------------------------

// ShareCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ShareCharacterRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ShareCharacterRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShareCharacterRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}
inline std::string* ShareCharacterRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
  return _s;
}
inline const std::string& ShareCharacterRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ShareCharacterRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ShareCharacterRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ShareCharacterRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void ShareCharacterRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}

// repeated string external_ids = 2;
inline int ShareCharacterRequest::_internal_external_ids_size() const {
  return _internal_external_ids().size();
}
inline int ShareCharacterRequest::external_ids_size() const {
  return _internal_external_ids_size();
}
inline void ShareCharacterRequest::clear_external_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.external_ids_.Clear();
}
inline std::string* ShareCharacterRequest::add_external_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_external_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return _s;
}
inline const std::string& ShareCharacterRequest::external_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return _internal_external_ids().Get(index);
}
inline std::string* ShareCharacterRequest::mutable_external_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return _internal_mutable_external_ids()->Mutable(index);
}
inline void ShareCharacterRequest::set_external_ids(int index, const std::string& value) {
  _internal_mutable_external_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::set_external_ids(int index, std::string&& value) {
  _internal_mutable_external_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::set_external_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_external_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::set_external_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_external_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::set_external_ids(int index, absl::string_view value) {
  _internal_mutable_external_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
ShareCharacterRequest::external_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return _internal_external_ids();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
ShareCharacterRequest::mutable_external_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_external_ids();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
ShareCharacterRequest::_internal_external_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.external_ids_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
ShareCharacterRequest::_internal_mutable_external_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.external_ids_;
}

// -------------------------------------------------------------------

// ShareCharacterPortalRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ShareCharacterPortalRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ShareCharacterPortalRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShareCharacterPortalRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.name)
}
inline std::string* ShareCharacterPortalRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.name)
  return _s;
}
inline const std::string& ShareCharacterPortalRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ShareCharacterPortalRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ShareCharacterPortalRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ShareCharacterPortalRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.name)
  return _impl_.name_.Release();
}
inline void ShareCharacterPortalRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.name)
}

// string byline = 2;
inline void ShareCharacterPortalRequest::clear_byline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byline_.ClearToEmpty();
}
inline const std::string& ShareCharacterPortalRequest::byline() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.byline)
  return _internal_byline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShareCharacterPortalRequest::set_byline(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.byline_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.byline)
}
inline std::string* ShareCharacterPortalRequest::mutable_byline() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_byline();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.byline)
  return _s;
}
inline const std::string& ShareCharacterPortalRequest::_internal_byline() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.byline_.Get();
}
inline void ShareCharacterPortalRequest::_internal_set_byline(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.byline_.Set(value, GetArena());
}
inline std::string* ShareCharacterPortalRequest::_internal_mutable_byline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.byline_.Mutable( GetArena());
}
inline std::string* ShareCharacterPortalRequest::release_byline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.byline)
  return _impl_.byline_.Release();
}
inline void ShareCharacterPortalRequest::set_allocated_byline(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byline_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.byline_.IsDefault()) {
          _impl_.byline_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.byline)
}

// string prompt = 3;
inline void ShareCharacterPortalRequest::clear_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& ShareCharacterPortalRequest::prompt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShareCharacterPortalRequest::set_prompt(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.prompt)
}
inline std::string* ShareCharacterPortalRequest::mutable_prompt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.prompt)
  return _s;
}
inline const std::string& ShareCharacterPortalRequest::_internal_prompt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prompt_.Get();
}
inline void ShareCharacterPortalRequest::_internal_set_prompt(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prompt_.Set(value, GetArena());
}
inline std::string* ShareCharacterPortalRequest::_internal_mutable_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prompt_.Mutable( GetArena());
}
inline std::string* ShareCharacterPortalRequest::release_prompt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.prompt)
  return _impl_.prompt_.Release();
}
inline void ShareCharacterPortalRequest::set_allocated_prompt(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prompt_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prompt_.IsDefault()) {
          _impl_.prompt_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.prompt)
}

// bool allowed_on_showcase = 4;
inline void ShareCharacterPortalRequest::clear_allowed_on_showcase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allowed_on_showcase_ = false;
}
inline bool ShareCharacterPortalRequest::allowed_on_showcase() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.allowed_on_showcase)
  return _internal_allowed_on_showcase();
}
inline void ShareCharacterPortalRequest::set_allowed_on_showcase(bool value) {
  _internal_set_allowed_on_showcase(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterPortalRequest.allowed_on_showcase)
}
inline bool ShareCharacterPortalRequest::_internal_allowed_on_showcase() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allowed_on_showcase_;
}
inline void ShareCharacterPortalRequest::_internal_set_allowed_on_showcase(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.allowed_on_showcase_ = value;
}

// -------------------------------------------------------------------

// UnshareCharacterPortalRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UnshareCharacterPortalRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UnshareCharacterPortalRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnshareCharacterPortalRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest.name)
}
inline std::string* UnshareCharacterPortalRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest.name)
  return _s;
}
inline const std::string& UnshareCharacterPortalRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UnshareCharacterPortalRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UnshareCharacterPortalRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UnshareCharacterPortalRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest.name)
  return _impl_.name_.Release();
}
inline void UnshareCharacterPortalRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UnshareCharacterPortalRequest.name)
}

// -------------------------------------------------------------------

// ListSharedCharactersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSharedCharactersRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListSharedCharactersRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListSharedCharactersRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}
inline std::string* ListSharedCharactersRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
  return _s;
}
inline const std::string& ListSharedCharactersRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void ListSharedCharactersRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* ListSharedCharactersRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* ListSharedCharactersRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListSharedCharactersRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}

// int32 page_size = 2;
inline void ListSharedCharactersRequest::clear_page_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_size_ = 0;
}
inline ::int32_t ListSharedCharactersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_size)
  return _internal_page_size();
}
inline void ListSharedCharactersRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_size)
}
inline ::int32_t ListSharedCharactersRequest::_internal_page_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_size_;
}
inline void ListSharedCharactersRequest::_internal_set_page_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_size_ = value;
}

// string page_token = 3;
inline void ListSharedCharactersRequest::clear_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListSharedCharactersRequest::page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
  return _internal_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListSharedCharactersRequest::set_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}
inline std::string* ListSharedCharactersRequest::mutable_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
  return _s;
}
inline const std::string& ListSharedCharactersRequest::_internal_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_token_.Get();
}
inline void ListSharedCharactersRequest::_internal_set_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(value, GetArena());
}
inline std::string* ListSharedCharactersRequest::_internal_mutable_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.page_token_.Mutable( GetArena());
}
inline std::string* ListSharedCharactersRequest::release_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListSharedCharactersRequest::set_allocated_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_token_.IsDefault()) {
          _impl_.page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}

// -------------------------------------------------------------------

// ListSharedCharactersResponse

// repeated .ai.inworld.studio.v1alpha.Character shared_characters = 1;
inline int ListSharedCharactersResponse::_internal_shared_characters_size() const {
  return _internal_shared_characters().size();
}
inline int ListSharedCharactersResponse::shared_characters_size() const {
  return _internal_shared_characters_size();
}
inline void ListSharedCharactersResponse::clear_shared_characters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shared_characters_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character* ListSharedCharactersResponse::mutable_shared_characters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return _internal_mutable_shared_characters()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>* ListSharedCharactersResponse::mutable_shared_characters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_shared_characters();
}
inline const ::ai::inworld::studio::v1alpha::Character& ListSharedCharactersResponse::shared_characters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return _internal_shared_characters().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Character* ListSharedCharactersResponse::add_shared_characters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Character* _add = _internal_mutable_shared_characters()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>& ListSharedCharactersResponse::shared_characters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return _internal_shared_characters();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>&
ListSharedCharactersResponse::_internal_shared_characters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shared_characters_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::studio::v1alpha::Character>*
ListSharedCharactersResponse::_internal_mutable_shared_characters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.shared_characters_;
}

// string next_page_token = 2;
inline void ListSharedCharactersResponse::clear_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListSharedCharactersResponse::next_page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListSharedCharactersResponse::set_next_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}
inline std::string* ListSharedCharactersResponse::mutable_next_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
  return _s;
}
inline const std::string& ListSharedCharactersResponse::_internal_next_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.next_page_token_.Get();
}
inline void ListSharedCharactersResponse::_internal_set_next_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(value, GetArena());
}
inline std::string* ListSharedCharactersResponse::_internal_mutable_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.next_page_token_.Mutable( GetArena());
}
inline std::string* ListSharedCharactersResponse::release_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListSharedCharactersResponse::set_allocated_next_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_page_token_.IsDefault()) {
          _impl_.next_page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings_ConversationConfig_EngineSpec

// string engine = 1;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings_ConversationConfig_EngineSpec::engine() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
  return _internal_engine();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_engine(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.engine_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}
inline std::string* CharacterAdvancedSettings_ConversationConfig_EngineSpec::mutable_engine() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_engine();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
  return _s;
}
inline const std::string& CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.engine_.Get();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_engine(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.engine_.Set(value, GetArena());
}
inline std::string* CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_mutable_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.engine_.Mutable( GetArena());
}
inline std::string* CharacterAdvancedSettings_ConversationConfig_EngineSpec::release_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
  return _impl_.engine_.Release();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_allocated_engine(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.engine_.IsDefault()) {
          _impl_.engine_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}

// float temperature = 2;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_temperature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.temperature_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::temperature() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.temperature)
  return _internal_temperature();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.temperature)
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_temperature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.temperature_;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_temperature(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.temperature_ = value;
}

// int32 max_tokens = 3;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_max_tokens() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_tokens_ = 0;
}
inline ::int32_t CharacterAdvancedSettings_ConversationConfig_EngineSpec::max_tokens() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.max_tokens)
  return _internal_max_tokens();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_max_tokens(::int32_t value) {
  _internal_set_max_tokens(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.max_tokens)
}
inline ::int32_t CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_max_tokens() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_tokens_;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_max_tokens(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_tokens_ = value;
}

// float frequency_penalty = 4;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_frequency_penalty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frequency_penalty_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::frequency_penalty() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.frequency_penalty)
  return _internal_frequency_penalty();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_frequency_penalty(float value) {
  _internal_set_frequency_penalty(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.frequency_penalty)
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_frequency_penalty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frequency_penalty_;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_frequency_penalty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frequency_penalty_ = value;
}

// float presence_penalty = 5;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_presence_penalty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.presence_penalty_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::presence_penalty() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.presence_penalty)
  return _internal_presence_penalty();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_presence_penalty(float value) {
  _internal_set_presence_penalty(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.presence_penalty)
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_presence_penalty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.presence_penalty_;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_presence_penalty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.presence_penalty_ = value;
}

// float top_p = 6;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_top_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.top_p_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::top_p() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.top_p)
  return _internal_top_p();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_top_p(float value) {
  _internal_set_top_p(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.top_p)
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_top_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.top_p_;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_top_p(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.top_p_ = value;
}

// float repetition_penalty = 7;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_repetition_penalty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repetition_penalty_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::repetition_penalty() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.repetition_penalty)
  return _internal_repetition_penalty();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_repetition_penalty(float value) {
  _internal_set_repetition_penalty(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.repetition_penalty)
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_repetition_penalty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repetition_penalty_;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_repetition_penalty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repetition_penalty_ = value;
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings_ConversationConfig

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec engine_spec = 1;
inline bool CharacterAdvancedSettings_ConversationConfig::has_engine_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.engine_spec_ != nullptr);
  return value;
}
inline void CharacterAdvancedSettings_ConversationConfig::clear_engine_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.engine_spec_ != nullptr) _impl_.engine_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& CharacterAdvancedSettings_ConversationConfig::_internal_engine_spec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* p = _impl_.engine_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec&>(::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_ConversationConfig_EngineSpec_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& CharacterAdvancedSettings_ConversationConfig::engine_spec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
  return _internal_engine_spec();
}
inline void CharacterAdvancedSettings_ConversationConfig::unsafe_arena_set_allocated_engine_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.engine_spec_);
  }
  _impl_.engine_spec_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::release_engine_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* released = _impl_.engine_spec_;
  _impl_.engine_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::unsafe_arena_release_engine_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* temp = _impl_.engine_spec_;
  _impl_.engine_spec_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::_internal_mutable_engine_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.engine_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec>(GetArena());
    _impl_.engine_spec_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(p);
  }
  return _impl_.engine_spec_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::mutable_engine_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* _msg = _internal_mutable_engine_spec();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
  return _msg;
}
inline void CharacterAdvancedSettings_ConversationConfig::set_allocated_engine_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(_impl_.engine_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.engine_spec_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings_SafetySpec

// repeated .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetyTopicName allowed_topics = 1;
inline int CharacterAdvancedSettings_SafetySpec::_internal_allowed_topics_size() const {
  return _internal_allowed_topics().size();
}
inline int CharacterAdvancedSettings_SafetySpec::allowed_topics_size() const {
  return _internal_allowed_topics_size();
}
inline void CharacterAdvancedSettings_SafetySpec::clear_allowed_topics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allowed_topics_.Clear();
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetySpec::allowed_topics(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  return static_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName>(_internal_allowed_topics().Get(index));
}
inline void CharacterAdvancedSettings_SafetySpec::set_allowed_topics(int index, ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value) {
  _internal_mutable_allowed_topics()->Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
}
inline void CharacterAdvancedSettings_SafetySpec::add_allowed_topics(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_allowed_topics()->Add(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
}
inline const ::google::protobuf_inworld::RepeatedField<int>& CharacterAdvancedSettings_SafetySpec::allowed_topics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  return _internal_allowed_topics();
}
inline ::google::protobuf_inworld::RepeatedField<int>* CharacterAdvancedSettings_SafetySpec::mutable_allowed_topics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_allowed_topics();
}
inline const ::google::protobuf_inworld::RepeatedField<int>& CharacterAdvancedSettings_SafetySpec::_internal_allowed_topics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allowed_topics_;
}
inline ::google::protobuf_inworld::RepeatedField<int>* CharacterAdvancedSettings_SafetySpec::_internal_mutable_allowed_topics() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.allowed_topics_;
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings

// string name = 1 [(.ai.inworld.options.examples) = {
inline void CharacterAdvancedSettings::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterAdvancedSettings::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}
inline std::string* CharacterAdvancedSettings::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
  return _s;
}
inline const std::string& CharacterAdvancedSettings::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CharacterAdvancedSettings::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CharacterAdvancedSettings::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CharacterAdvancedSettings::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
  return _impl_.name_.Release();
}
inline void CharacterAdvancedSettings::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig conversation_config = 2;
inline bool CharacterAdvancedSettings::has_conversation_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conversation_config_ != nullptr);
  return value;
}
inline void CharacterAdvancedSettings::clear_conversation_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.conversation_config_ != nullptr) _impl_.conversation_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& CharacterAdvancedSettings::_internal_conversation_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* p = _impl_.conversation_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig&>(::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_ConversationConfig_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& CharacterAdvancedSettings::conversation_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
  return _internal_conversation_config();
}
inline void CharacterAdvancedSettings::unsafe_arena_set_allocated_conversation_config(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.conversation_config_);
  }
  _impl_.conversation_config_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::release_conversation_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* released = _impl_.conversation_config_;
  _impl_.conversation_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::unsafe_arena_release_conversation_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* temp = _impl_.conversation_config_;
  _impl_.conversation_config_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::_internal_mutable_conversation_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.conversation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig>(GetArena());
    _impl_.conversation_config_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig*>(p);
  }
  return _impl_.conversation_config_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::mutable_conversation_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* _msg = _internal_mutable_conversation_config();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
  return _msg;
}
inline void CharacterAdvancedSettings::set_allocated_conversation_config(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig*>(_impl_.conversation_config_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.conversation_config_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
}

// string custom_prompt_template = 4;
inline void CharacterAdvancedSettings::clear_custom_prompt_template() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.custom_prompt_template_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings::custom_prompt_template() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
  return _internal_custom_prompt_template();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterAdvancedSettings::set_custom_prompt_template(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.custom_prompt_template_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}
inline std::string* CharacterAdvancedSettings::mutable_custom_prompt_template() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_custom_prompt_template();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
  return _s;
}
inline const std::string& CharacterAdvancedSettings::_internal_custom_prompt_template() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_prompt_template_.Get();
}
inline void CharacterAdvancedSettings::_internal_set_custom_prompt_template(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.custom_prompt_template_.Set(value, GetArena());
}
inline std::string* CharacterAdvancedSettings::_internal_mutable_custom_prompt_template() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.custom_prompt_template_.Mutable( GetArena());
}
inline std::string* CharacterAdvancedSettings::release_custom_prompt_template() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
  return _impl_.custom_prompt_template_.Release();
}
inline void CharacterAdvancedSettings::set_allocated_custom_prompt_template(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.custom_prompt_template_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.custom_prompt_template_.IsDefault()) {
          _impl_.custom_prompt_template_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec speech_safety_spec = 5;
inline bool CharacterAdvancedSettings::has_speech_safety_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_safety_spec_ != nullptr);
  return value;
}
inline void CharacterAdvancedSettings::clear_speech_safety_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.speech_safety_spec_ != nullptr) _impl_.speech_safety_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& CharacterAdvancedSettings::_internal_speech_safety_spec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* p = _impl_.speech_safety_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec&>(::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_SafetySpec_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& CharacterAdvancedSettings::speech_safety_spec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
  return _internal_speech_safety_spec();
}
inline void CharacterAdvancedSettings::unsafe_arena_set_allocated_speech_safety_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.speech_safety_spec_);
  }
  _impl_.speech_safety_spec_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::release_speech_safety_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* released = _impl_.speech_safety_spec_;
  _impl_.speech_safety_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::unsafe_arena_release_speech_safety_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* temp = _impl_.speech_safety_spec_;
  _impl_.speech_safety_spec_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::_internal_mutable_speech_safety_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.speech_safety_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec>(GetArena());
    _impl_.speech_safety_spec_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec*>(p);
  }
  return _impl_.speech_safety_spec_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::mutable_speech_safety_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* _msg = _internal_mutable_speech_safety_spec();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
  return _msg;
}
inline void CharacterAdvancedSettings::set_allocated_speech_safety_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec*>(_impl_.speech_safety_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.speech_safety_spec_ = reinterpret_cast<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
}

// string additional_agent_info = 6;
inline void CharacterAdvancedSettings::clear_additional_agent_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.additional_agent_info_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings::additional_agent_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.additional_agent_info)
  return _internal_additional_agent_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterAdvancedSettings::set_additional_agent_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.additional_agent_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.additional_agent_info)
}
inline std::string* CharacterAdvancedSettings::mutable_additional_agent_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_additional_agent_info();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.additional_agent_info)
  return _s;
}
inline const std::string& CharacterAdvancedSettings::_internal_additional_agent_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.additional_agent_info_.Get();
}
inline void CharacterAdvancedSettings::_internal_set_additional_agent_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.additional_agent_info_.Set(value, GetArena());
}
inline std::string* CharacterAdvancedSettings::_internal_mutable_additional_agent_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.additional_agent_info_.Mutable( GetArena());
}
inline std::string* CharacterAdvancedSettings::release_additional_agent_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.additional_agent_info)
  return _impl_.additional_agent_info_.Release();
}
inline void CharacterAdvancedSettings::set_allocated_additional_agent_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.additional_agent_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.additional_agent_info_.IsDefault()) {
          _impl_.additional_agent_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.additional_agent_info)
}

// -------------------------------------------------------------------

// GetCharacterShareInfoRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCharacterShareInfoRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCharacterShareInfoRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCharacterShareInfoRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}
inline std::string* GetCharacterShareInfoRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
  return _s;
}
inline const std::string& GetCharacterShareInfoRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetCharacterShareInfoRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetCharacterShareInfoRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetCharacterShareInfoRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
  return _impl_.name_.Release();
}
inline void GetCharacterShareInfoRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}

// .ai.inworld.studio.v1alpha.CharacterSharePurpose view = 2;
inline void GetCharacterShareInfoRequest::clear_view() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CharacterSharePurpose GetCharacterShareInfoRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.view)
  return _internal_view();
}
inline void GetCharacterShareInfoRequest::set_view(::ai::inworld::studio::v1alpha::CharacterSharePurpose value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.view)
}
inline ::ai::inworld::studio::v1alpha::CharacterSharePurpose GetCharacterShareInfoRequest::_internal_view() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::CharacterSharePurpose>(_impl_.view_);
}
inline void GetCharacterShareInfoRequest::_internal_set_view(::ai::inworld::studio::v1alpha::CharacterSharePurpose value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_ = value;
}

// -------------------------------------------------------------------

// CharacterShareInfo

// repeated string external_ids = 1;
inline int CharacterShareInfo::_internal_external_ids_size() const {
  return _internal_external_ids().size();
}
inline int CharacterShareInfo::external_ids_size() const {
  return _internal_external_ids_size();
}
inline void CharacterShareInfo::clear_external_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.external_ids_.Clear();
}
inline std::string* CharacterShareInfo::add_external_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_external_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return _s;
}
inline const std::string& CharacterShareInfo::external_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return _internal_external_ids().Get(index);
}
inline std::string* CharacterShareInfo::mutable_external_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return _internal_mutable_external_ids()->Mutable(index);
}
inline void CharacterShareInfo::set_external_ids(int index, const std::string& value) {
  _internal_mutable_external_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::set_external_ids(int index, std::string&& value) {
  _internal_mutable_external_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::set_external_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_external_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::set_external_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_external_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::set_external_ids(int index, absl::string_view value) {
  _internal_mutable_external_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_external_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
CharacterShareInfo::external_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return _internal_external_ids();
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
CharacterShareInfo::mutable_external_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_external_ids();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<std::string>&
CharacterShareInfo::_internal_external_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.external_ids_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<std::string>*
CharacterShareInfo::_internal_mutable_external_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.external_ids_;
}

// -------------------------------------------------------------------

// CheckDeployInfoRequest

// string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CheckDeployInfoRequest::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.ClearToEmpty();
}
inline const std::string& CheckDeployInfoRequest::character() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
  return _internal_character();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CheckDeployInfoRequest::set_character(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}
inline std::string* CheckDeployInfoRequest::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
  return _s;
}
inline const std::string& CheckDeployInfoRequest::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_.Get();
}
inline void CheckDeployInfoRequest::_internal_set_character(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(value, GetArena());
}
inline std::string* CheckDeployInfoRequest::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_.Mutable( GetArena());
}
inline std::string* CheckDeployInfoRequest::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
  return _impl_.character_.Release();
}
inline void CheckDeployInfoRequest::set_allocated_character(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_.IsDefault()) {
          _impl_.character_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}

// -------------------------------------------------------------------

// DeployCharacterAsyncMetadata

// -------------------------------------------------------------------

// DeployCharacterAsyncResponse

// -------------------------------------------------------------------

// CreateCharacterMetadata

// -------------------------------------------------------------------

// CheckDeployInfoResponse

// bool is_fresh = 1;
inline void CheckDeployInfoResponse::clear_is_fresh() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_fresh_ = false;
}
inline bool CheckDeployInfoResponse::is_fresh() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CheckDeployInfoResponse.is_fresh)
  return _internal_is_fresh();
}
inline void CheckDeployInfoResponse::set_is_fresh(bool value) {
  _internal_set_is_fresh(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CheckDeployInfoResponse.is_fresh)
}
inline bool CheckDeployInfoResponse::_internal_is_fresh() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_fresh_;
}
inline void CheckDeployInfoResponse::_internal_set_is_fresh(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_fresh_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_DialogResponseLength_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarType_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterAssets_AvatarDisplayImageSource_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_Tag> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_Tag>() {
  return ::ai::inworld::studio::v1alpha::Character_Tag_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::Character_FourthWallContainment> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::Character_FourthWallContainment>() {
  return ::ai::inworld::studio::v1alpha::Character_FourthWallContainment_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName>() {
  return ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::CharacterView> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::CharacterView>() {
  return ::ai::inworld::studio::v1alpha::CharacterView_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::CharacterItemView> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::CharacterItemView>() {
  return ::ai::inworld::studio::v1alpha::CharacterItemView_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::CharacterSharePurpose> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::CharacterSharePurpose>() {
  return ::ai::inworld::studio::v1alpha::CharacterSharePurpose_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::SafetyLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::SafetyLevel>() {
  return ::ai::inworld::studio::v1alpha::SafetyLevel_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::CognitiveControl> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::CognitiveControl>() {
  return ::ai::inworld::studio::v1alpha::CognitiveControl_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::CharacterAssetType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::CharacterAssetType>() {
  return ::ai::inworld::studio::v1alpha::CharacterAssetType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fcharacters_2eproto_2epb_2eh
