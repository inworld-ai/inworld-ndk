// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/player_profiles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class GetPlayerProfileRequest;
struct GetPlayerProfileRequestDefaultTypeInternal;
extern GetPlayerProfileRequestDefaultTypeInternal _GetPlayerProfileRequest_default_instance_;
class PlayerProfile;
struct PlayerProfileDefaultTypeInternal;
extern PlayerProfileDefaultTypeInternal _PlayerProfile_default_instance_;
class PlayerProfile_PlayerField;
struct PlayerProfile_PlayerFieldDefaultTypeInternal;
extern PlayerProfile_PlayerFieldDefaultTypeInternal _PlayerProfile_PlayerField_default_instance_;
class UpdatePlayerProfileRequest;
struct UpdatePlayerProfileRequestDefaultTypeInternal;
extern UpdatePlayerProfileRequestDefaultTypeInternal _UpdatePlayerProfileRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetPlayerProfileRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::PlayerProfile* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::PlayerProfile>(Arena*);
template<> ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

enum FieldType : int {
  FIELD_TYPE_UNSPECIFIED = 0,
  STRING = 1,
  BOOLEAN = 2,
  NUMBER = 4,
  FieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = FIELD_TYPE_UNSPECIFIED;
constexpr FieldType FieldType_MAX = NUMBER;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template<typename T>
inline const std::string& FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldType_descriptor(), enum_t_value);
}
inline bool FieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
// ===================================================================

class PlayerProfile_PlayerField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField) */ {
 public:
  inline PlayerProfile_PlayerField() : PlayerProfile_PlayerField(nullptr) {}
  ~PlayerProfile_PlayerField() override;
  explicit PROTOBUF_CONSTEXPR PlayerProfile_PlayerField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerProfile_PlayerField(const PlayerProfile_PlayerField& from);
  PlayerProfile_PlayerField(PlayerProfile_PlayerField&& from) noexcept
    : PlayerProfile_PlayerField() {
    *this = ::std::move(from);
  }

  inline PlayerProfile_PlayerField& operator=(const PlayerProfile_PlayerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerProfile_PlayerField& operator=(PlayerProfile_PlayerField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerProfile_PlayerField& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerProfile_PlayerField* internal_default_instance() {
    return reinterpret_cast<const PlayerProfile_PlayerField*>(
               &_PlayerProfile_PlayerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerProfile_PlayerField& a, PlayerProfile_PlayerField& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerProfile_PlayerField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerProfile_PlayerField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerProfile_PlayerField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerProfile_PlayerField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerProfile_PlayerField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerProfile_PlayerField& from) {
    PlayerProfile_PlayerField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerProfile_PlayerField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.PlayerProfile.PlayerField";
  }
  protected:
  explicit PlayerProfile_PlayerField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIsDefaultFieldNumber = 4,
  };
  // string field_id = 1;
  void clear_field_id();
  const std::string& field_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_id();
  PROTOBUF_NODISCARD std::string* release_field_id();
  void set_allocated_field_id(std::string* field_id);
  private:
  const std::string& _internal_field_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_id(const std::string& value);
  std::string* _internal_mutable_field_id();
  public:

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .ai.inworld.studio.v1alpha.FieldType type = 3;
  void clear_type();
  ::ai::inworld::studio::v1alpha::FieldType type() const;
  void set_type(::ai::inworld::studio::v1alpha::FieldType value);
  private:
  ::ai::inworld::studio::v1alpha::FieldType _internal_type() const;
  void _internal_set_type(::ai::inworld::studio::v1alpha::FieldType value);
  public:

  // bool is_default = 4;
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    int type_;
    bool is_default_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class PlayerProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.PlayerProfile) */ {
 public:
  inline PlayerProfile() : PlayerProfile(nullptr) {}
  ~PlayerProfile() override;
  explicit PROTOBUF_CONSTEXPR PlayerProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerProfile(const PlayerProfile& from);
  PlayerProfile(PlayerProfile&& from) noexcept
    : PlayerProfile() {
    *this = ::std::move(from);
  }

  inline PlayerProfile& operator=(const PlayerProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerProfile& operator=(PlayerProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerProfile* internal_default_instance() {
    return reinterpret_cast<const PlayerProfile*>(
               &_PlayerProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerProfile& a, PlayerProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerProfile& from) {
    PlayerProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.PlayerProfile";
  }
  protected:
  explicit PlayerProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerProfile_PlayerField PlayerField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .ai.inworld.studio.v1alpha.PlayerProfile.PlayerField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField >*
      mutable_fields();
  private:
  const ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField& _internal_fields(int index) const;
  ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* _internal_add_fields();
  public:
  const ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField& fields(int index) const;
  ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField >&
      fields() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.PlayerProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField > fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest) */ {
 public:
  inline UpdatePlayerProfileRequest() : UpdatePlayerProfileRequest(nullptr) {}
  ~UpdatePlayerProfileRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePlayerProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePlayerProfileRequest(const UpdatePlayerProfileRequest& from);
  UpdatePlayerProfileRequest(UpdatePlayerProfileRequest&& from) noexcept
    : UpdatePlayerProfileRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerProfileRequest& operator=(const UpdatePlayerProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerProfileRequest& operator=(UpdatePlayerProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePlayerProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePlayerProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerProfileRequest*>(
               &_UpdatePlayerProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdatePlayerProfileRequest& a, UpdatePlayerProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePlayerProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePlayerProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePlayerProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePlayerProfileRequest& from) {
    UpdatePlayerProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest";
  }
  protected:
  explicit UpdatePlayerProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerProfileFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.PlayerProfile player_profile = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_player_profile() const;
  private:
  bool _internal_has_player_profile() const;
  public:
  void clear_player_profile();
  const ::ai::inworld::studio::v1alpha::PlayerProfile& player_profile() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::PlayerProfile* release_player_profile();
  ::ai::inworld::studio::v1alpha::PlayerProfile* mutable_player_profile();
  void set_allocated_player_profile(::ai::inworld::studio::v1alpha::PlayerProfile* player_profile);
  private:
  const ::ai::inworld::studio::v1alpha::PlayerProfile& _internal_player_profile() const;
  ::ai::inworld::studio::v1alpha::PlayerProfile* _internal_mutable_player_profile();
  public:
  void unsafe_arena_set_allocated_player_profile(
      ::ai::inworld::studio::v1alpha::PlayerProfile* player_profile);
  ::ai::inworld::studio::v1alpha::PlayerProfile* unsafe_arena_release_player_profile();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ai::inworld::studio::v1alpha::PlayerProfile* player_profile_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class GetPlayerProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetPlayerProfileRequest) */ {
 public:
  inline GetPlayerProfileRequest() : GetPlayerProfileRequest(nullptr) {}
  ~GetPlayerProfileRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPlayerProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPlayerProfileRequest(const GetPlayerProfileRequest& from);
  GetPlayerProfileRequest(GetPlayerProfileRequest&& from) noexcept
    : GetPlayerProfileRequest() {
    *this = ::std::move(from);
  }

  inline GetPlayerProfileRequest& operator=(const GetPlayerProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPlayerProfileRequest& operator=(GetPlayerProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPlayerProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPlayerProfileRequest* internal_default_instance() {
    return reinterpret_cast<const GetPlayerProfileRequest*>(
               &_GetPlayerProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPlayerProfileRequest& a, GetPlayerProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPlayerProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPlayerProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPlayerProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPlayerProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPlayerProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPlayerProfileRequest& from) {
    GetPlayerProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPlayerProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetPlayerProfileRequest";
  }
  protected:
  explicit GetPlayerProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerProfile_PlayerField

// string field_id = 1;
inline void PlayerProfile_PlayerField::clear_field_id() {
  _impl_.field_id_.ClearToEmpty();
}
inline const std::string& PlayerProfile_PlayerField::field_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id)
  return _internal_field_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerProfile_PlayerField::set_field_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id)
}
inline std::string* PlayerProfile_PlayerField::mutable_field_id() {
  std::string* _s = _internal_mutable_field_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id)
  return _s;
}
inline const std::string& PlayerProfile_PlayerField::_internal_field_id() const {
  return _impl_.field_id_.Get();
}
inline void PlayerProfile_PlayerField::_internal_set_field_id(const std::string& value) {
  
  _impl_.field_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerProfile_PlayerField::_internal_mutable_field_id() {
  
  return _impl_.field_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerProfile_PlayerField::release_field_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id)
  return _impl_.field_id_.Release();
}
inline void PlayerProfile_PlayerField::set_allocated_field_id(std::string* field_id) {
  if (field_id != nullptr) {
    
  } else {
    
  }
  _impl_.field_id_.SetAllocated(field_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_id_.IsDefault()) {
    _impl_.field_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id)
}

// string label = 2;
inline void PlayerProfile_PlayerField::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& PlayerProfile_PlayerField::label() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerProfile_PlayerField::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label)
}
inline std::string* PlayerProfile_PlayerField::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label)
  return _s;
}
inline const std::string& PlayerProfile_PlayerField::_internal_label() const {
  return _impl_.label_.Get();
}
inline void PlayerProfile_PlayerField::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerProfile_PlayerField::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerProfile_PlayerField::release_label() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label)
  return _impl_.label_.Release();
}
inline void PlayerProfile_PlayerField::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label)
}

// .ai.inworld.studio.v1alpha.FieldType type = 3;
inline void PlayerProfile_PlayerField::clear_type() {
  _impl_.type_ = 0;
}
inline ::ai::inworld::studio::v1alpha::FieldType PlayerProfile_PlayerField::_internal_type() const {
  return static_cast< ::ai::inworld::studio::v1alpha::FieldType >(_impl_.type_);
}
inline ::ai::inworld::studio::v1alpha::FieldType PlayerProfile_PlayerField::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.type)
  return _internal_type();
}
inline void PlayerProfile_PlayerField::_internal_set_type(::ai::inworld::studio::v1alpha::FieldType value) {
  
  _impl_.type_ = value;
}
inline void PlayerProfile_PlayerField::set_type(::ai::inworld::studio::v1alpha::FieldType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.type)
}

// bool is_default = 4;
inline void PlayerProfile_PlayerField::clear_is_default() {
  _impl_.is_default_ = false;
}
inline bool PlayerProfile_PlayerField::_internal_is_default() const {
  return _impl_.is_default_;
}
inline bool PlayerProfile_PlayerField::is_default() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.is_default)
  return _internal_is_default();
}
inline void PlayerProfile_PlayerField::_internal_set_is_default(bool value) {
  
  _impl_.is_default_ = value;
}
inline void PlayerProfile_PlayerField::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.is_default)
}

// -------------------------------------------------------------------

// PlayerProfile

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PlayerProfile::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PlayerProfile::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PlayerProfile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerProfile::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PlayerProfile.name)
}
inline std::string* PlayerProfile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PlayerProfile.name)
  return _s;
}
inline const std::string& PlayerProfile::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PlayerProfile::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerProfile::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerProfile::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PlayerProfile.name)
  return _impl_.name_.Release();
}
inline void PlayerProfile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PlayerProfile.name)
}

// repeated .ai.inworld.studio.v1alpha.PlayerProfile.PlayerField fields = 2;
inline int PlayerProfile::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int PlayerProfile::fields_size() const {
  return _internal_fields_size();
}
inline void PlayerProfile::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* PlayerProfile::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PlayerProfile.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField >*
PlayerProfile::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.PlayerProfile.fields)
  return &_impl_.fields_;
}
inline const ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField& PlayerProfile::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField& PlayerProfile::fields(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PlayerProfile.fields)
  return _internal_fields(index);
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* PlayerProfile::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* PlayerProfile::add_fields() {
  ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.PlayerProfile.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField >&
PlayerProfile::fields() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.PlayerProfile.fields)
  return _impl_.fields_;
}

// -------------------------------------------------------------------

// UpdatePlayerProfileRequest

// .ai.inworld.studio.v1alpha.PlayerProfile player_profile = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdatePlayerProfileRequest::_internal_has_player_profile() const {
  return this != internal_default_instance() && _impl_.player_profile_ != nullptr;
}
inline bool UpdatePlayerProfileRequest::has_player_profile() const {
  return _internal_has_player_profile();
}
inline void UpdatePlayerProfileRequest::clear_player_profile() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_profile_ != nullptr) {
    delete _impl_.player_profile_;
  }
  _impl_.player_profile_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::PlayerProfile& UpdatePlayerProfileRequest::_internal_player_profile() const {
  const ::ai::inworld::studio::v1alpha::PlayerProfile* p = _impl_.player_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::PlayerProfile&>(
      ::ai::inworld::studio::v1alpha::_PlayerProfile_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::PlayerProfile& UpdatePlayerProfileRequest::player_profile() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.player_profile)
  return _internal_player_profile();
}
inline void UpdatePlayerProfileRequest::unsafe_arena_set_allocated_player_profile(
    ::ai::inworld::studio::v1alpha::PlayerProfile* player_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_profile_);
  }
  _impl_.player_profile_ = player_profile;
  if (player_profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.player_profile)
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile* UpdatePlayerProfileRequest::release_player_profile() {
  
  ::ai::inworld::studio::v1alpha::PlayerProfile* temp = _impl_.player_profile_;
  _impl_.player_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile* UpdatePlayerProfileRequest::unsafe_arena_release_player_profile() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.player_profile)
  
  ::ai::inworld::studio::v1alpha::PlayerProfile* temp = _impl_.player_profile_;
  _impl_.player_profile_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile* UpdatePlayerProfileRequest::_internal_mutable_player_profile() {
  
  if (_impl_.player_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::PlayerProfile>(GetArenaForAllocation());
    _impl_.player_profile_ = p;
  }
  return _impl_.player_profile_;
}
inline ::ai::inworld::studio::v1alpha::PlayerProfile* UpdatePlayerProfileRequest::mutable_player_profile() {
  ::ai::inworld::studio::v1alpha::PlayerProfile* _msg = _internal_mutable_player_profile();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.player_profile)
  return _msg;
}
inline void UpdatePlayerProfileRequest::set_allocated_player_profile(::ai::inworld::studio::v1alpha::PlayerProfile* player_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_profile_;
  }
  if (player_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_profile);
    if (message_arena != submessage_arena) {
      player_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_profile, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_profile_ = player_profile;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.player_profile)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdatePlayerProfileRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdatePlayerProfileRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePlayerProfileRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePlayerProfileRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdatePlayerProfileRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePlayerProfileRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePlayerProfileRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePlayerProfileRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePlayerProfileRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.update_mask)
  return _msg;
}
inline void UpdatePlayerProfileRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest.update_mask)
}

// -------------------------------------------------------------------

// GetPlayerProfileRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetPlayerProfileRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPlayerProfileRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPlayerProfileRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name)
}
inline std::string* GetPlayerProfileRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name)
  return _s;
}
inline const std::string& GetPlayerProfileRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetPlayerProfileRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPlayerProfileRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPlayerProfileRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name)
  return _impl_.name_.Release();
}
inline void GetPlayerProfileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::FieldType>() {
  return ::ai::inworld::studio::v1alpha::FieldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto
