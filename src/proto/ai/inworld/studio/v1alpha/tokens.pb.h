// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/tokens.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "ai/inworld/options/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf_inworld::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class GenerateDefaultSessionTokenRequest;
struct GenerateDefaultSessionTokenRequestDefaultTypeInternal;
extern GenerateDefaultSessionTokenRequestDefaultTypeInternal _GenerateDefaultSessionTokenRequest_default_instance_;
class GenerateSessionTokenRequest;
struct GenerateSessionTokenRequestDefaultTypeInternal;
extern GenerateSessionTokenRequestDefaultTypeInternal _GenerateSessionTokenRequest_default_instance_;
class SessionAccessToken;
struct SessionAccessTokenDefaultTypeInternal;
extern SessionAccessTokenDefaultTypeInternal _SessionAccessToken_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================


// -------------------------------------------------------------------

class GenerateSessionTokenRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest) */ {
 public:
  inline GenerateSessionTokenRequest() : GenerateSessionTokenRequest(nullptr) {}
  ~GenerateSessionTokenRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenerateSessionTokenRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline GenerateSessionTokenRequest(const GenerateSessionTokenRequest& from)
      : GenerateSessionTokenRequest(nullptr, from) {}
  GenerateSessionTokenRequest(GenerateSessionTokenRequest&& from) noexcept
    : GenerateSessionTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateSessionTokenRequest& operator=(const GenerateSessionTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateSessionTokenRequest& operator=(GenerateSessionTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateSessionTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateSessionTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateSessionTokenRequest*>(
               &_GenerateSessionTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateSessionTokenRequest& a, GenerateSessionTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateSessionTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateSessionTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateSessionTokenRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateSessionTokenRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const GenerateSessionTokenRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const GenerateSessionTokenRequest& from) {
    GenerateSessionTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(GenerateSessionTokenRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateSessionTokenRequest";
  }
  protected:
  explicit GenerateSessionTokenRequest(::google::protobuf_inworld::Arena* arena);
  GenerateSessionTokenRequest(::google::protobuf_inworld::Arena* arena, const GenerateSessionTokenRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr key_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
};// -------------------------------------------------------------------

class GenerateDefaultSessionTokenRequest final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest) */ {
 public:
  inline GenerateDefaultSessionTokenRequest() : GenerateDefaultSessionTokenRequest(nullptr) {}
  ~GenerateDefaultSessionTokenRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenerateDefaultSessionTokenRequest(::google::protobuf_inworld::internal::ConstantInitialized);

  inline GenerateDefaultSessionTokenRequest(const GenerateDefaultSessionTokenRequest& from)
      : GenerateDefaultSessionTokenRequest(nullptr, from) {}
  GenerateDefaultSessionTokenRequest(GenerateDefaultSessionTokenRequest&& from) noexcept
    : GenerateDefaultSessionTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateDefaultSessionTokenRequest& operator=(const GenerateDefaultSessionTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateDefaultSessionTokenRequest& operator=(GenerateDefaultSessionTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateDefaultSessionTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateDefaultSessionTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateDefaultSessionTokenRequest*>(
               &_GenerateDefaultSessionTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenerateDefaultSessionTokenRequest& a, GenerateDefaultSessionTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateDefaultSessionTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateDefaultSessionTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateDefaultSessionTokenRequest* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateDefaultSessionTokenRequest>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const GenerateDefaultSessionTokenRequest& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const GenerateDefaultSessionTokenRequest& from) {
    GenerateDefaultSessionTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(GenerateDefaultSessionTokenRequest* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest";
  }
  protected:
  explicit GenerateDefaultSessionTokenRequest(::google::protobuf_inworld::Arena* arena);
  GenerateDefaultSessionTokenRequest(::google::protobuf_inworld::Arena* arena, const GenerateDefaultSessionTokenRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr parent_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
};// -------------------------------------------------------------------

class SessionAccessToken final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.SessionAccessToken) */ {
 public:
  inline SessionAccessToken() : SessionAccessToken(nullptr) {}
  ~SessionAccessToken() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SessionAccessToken(::google::protobuf_inworld::internal::ConstantInitialized);

  inline SessionAccessToken(const SessionAccessToken& from)
      : SessionAccessToken(nullptr, from) {}
  SessionAccessToken(SessionAccessToken&& from) noexcept
    : SessionAccessToken() {
    *this = ::std::move(from);
  }

  inline SessionAccessToken& operator=(const SessionAccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionAccessToken& operator=(SessionAccessToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionAccessToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionAccessToken* internal_default_instance() {
    return reinterpret_cast<const SessionAccessToken*>(
               &_SessionAccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionAccessToken& a, SessionAccessToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionAccessToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionAccessToken* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionAccessToken* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionAccessToken>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const SessionAccessToken& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const SessionAccessToken& from) {
    SessionAccessToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(SessionAccessToken* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.SessionAccessToken";
  }
  protected:
  explicit SessionAccessToken(::google::protobuf_inworld::Arena* arena);
  SessionAccessToken(::google::protobuf_inworld::Arena* arena, const SessionAccessToken& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kExpirationTimeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string session_id = 4;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  void clear_expiration_time() ;
  const ::google::protobuf_inworld::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::google::protobuf_inworld::Timestamp* release_expiration_time();
  ::google::protobuf_inworld::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf_inworld::Timestamp* value);
  void unsafe_arena_set_allocated_expiration_time(::google::protobuf_inworld::Timestamp* value);
  ::google::protobuf_inworld::Timestamp* unsafe_arena_release_expiration_time();

  private:
  const ::google::protobuf_inworld::Timestamp& _internal_expiration_time() const;
  ::google::protobuf_inworld::Timestamp* _internal_mutable_expiration_time();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.SessionAccessToken)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 4, 1,
      72, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr token_;
    ::google::protobuf_inworld::internal::ArenaStringPtr type_;
    ::google::protobuf_inworld::internal::ArenaStringPtr session_id_;
    ::google::protobuf_inworld::Timestamp* expiration_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SessionAccessToken

// string token = 1;
inline void SessionAccessToken::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& SessionAccessToken::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionAccessToken::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}
inline std::string* SessionAccessToken::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.token)
  return _s;
}
inline const std::string& SessionAccessToken::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void SessionAccessToken::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* SessionAccessToken::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* SessionAccessToken::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.token)
  return _impl_.token_.Release();
}
inline void SessionAccessToken::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}

// string type = 2;
inline void SessionAccessToken::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& SessionAccessToken::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionAccessToken::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}
inline std::string* SessionAccessToken::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.type)
  return _s;
}
inline const std::string& SessionAccessToken::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void SessionAccessToken::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* SessionAccessToken::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* SessionAccessToken::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.type)
  return _impl_.type_.Release();
}
inline void SessionAccessToken::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool SessionAccessToken::has_expiration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_time_ != nullptr);
  return value;
}
inline const ::google::protobuf_inworld::Timestamp& SessionAccessToken::_internal_expiration_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf_inworld::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf_inworld::Timestamp&>(::google::protobuf_inworld::_Timestamp_default_instance_);
}
inline const ::google::protobuf_inworld::Timestamp& SessionAccessToken::expiration_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
  return _internal_expiration_time();
}
inline void SessionAccessToken::unsafe_arena_set_allocated_expiration_time(::google::protobuf_inworld::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf_inworld::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
}
inline ::google::protobuf_inworld::Timestamp* SessionAccessToken::release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf_inworld::Timestamp* released = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf_inworld::Timestamp* SessionAccessToken::unsafe_arena_release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf_inworld::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::google::protobuf_inworld::Timestamp* SessionAccessToken::_internal_mutable_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf_inworld::Timestamp>(GetArena());
    _impl_.expiration_time_ = reinterpret_cast<::google::protobuf_inworld::Timestamp*>(p);
  }
  return _impl_.expiration_time_;
}
inline ::google::protobuf_inworld::Timestamp* SessionAccessToken::mutable_expiration_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf_inworld::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
  return _msg;
}
inline void SessionAccessToken::set_allocated_expiration_time(::google::protobuf_inworld::Timestamp* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.expiration_time_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf_inworld::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
}

// string session_id = 4;
inline void SessionAccessToken::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& SessionAccessToken::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionAccessToken::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}
inline std::string* SessionAccessToken::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
  return _s;
}
inline const std::string& SessionAccessToken::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void SessionAccessToken::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* SessionAccessToken::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* SessionAccessToken::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
  return _impl_.session_id_.Release();
}
inline void SessionAccessToken::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}

// -------------------------------------------------------------------

// GenerateSessionTokenRequest

// string key = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
inline void GenerateSessionTokenRequest::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GenerateSessionTokenRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateSessionTokenRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}
inline std::string* GenerateSessionTokenRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
  return _s;
}
inline const std::string& GenerateSessionTokenRequest::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void GenerateSessionTokenRequest::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GenerateSessionTokenRequest::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GenerateSessionTokenRequest::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
  return _impl_.key_.Release();
}
inline void GenerateSessionTokenRequest::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}

// -------------------------------------------------------------------

// GenerateDefaultSessionTokenRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
inline void GenerateDefaultSessionTokenRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& GenerateDefaultSessionTokenRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateDefaultSessionTokenRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}
inline std::string* GenerateDefaultSessionTokenRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
  return _s;
}
inline const std::string& GenerateDefaultSessionTokenRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void GenerateDefaultSessionTokenRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* GenerateDefaultSessionTokenRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* GenerateDefaultSessionTokenRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
  return _impl_.parent_.Release();
}
inline void GenerateDefaultSessionTokenRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_2epb_2eh
