// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/sessions.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/sessions.pb.h"
#include "ai/inworld/studio/v1alpha/sessions.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* Sessions_method_names[] = {
  "/ai.inworld.studio.v1alpha.Sessions/StoreSession",
  "/ai.inworld.studio.v1alpha.Sessions/LoadSession",
};

std::unique_ptr< Sessions::Stub> Sessions::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sessions::Stub> stub(new Sessions::Stub(channel, options));
  return stub;
}

Sessions::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StoreSession_(Sessions_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadSession_(Sessions_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sessions::Stub::StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreSession_, context, request, response);
}

void Sessions::Stub::async::StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreSession_, context, request, response, std::move(f));
}

void Sessions::Stub::async::StoreSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sessions::Stub::PrepareAsyncStoreSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sessions::Stub::AsyncStoreSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sessions::Stub::LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::ai::inworld::studio::v1alpha::Session* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadSession_, context, request, response);
}

void Sessions::Stub::async::LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadSession_, context, request, response, std::move(f));
}

void Sessions::Stub::async::LoadSession(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>* Sessions::Stub::PrepareAsyncLoadSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Session, ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Session>* Sessions::Stub::AsyncLoadSessionRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

Sessions::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sessions_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sessions::Service, ::ai::inworld::studio::v1alpha::StoreSessionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sessions::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::StoreSessionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->StoreSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sessions_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sessions::Service, ::ai::inworld::studio::v1alpha::LoadSessionRequest, ::ai::inworld::studio::v1alpha::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sessions::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::LoadSessionRequest* req,
             ::ai::inworld::studio::v1alpha::Session* resp) {
               return service->LoadSession(ctx, req, resp);
             }, this)));
}

Sessions::Service::~Service() {
}

::grpc::Status Sessions::Service::StoreSession(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::StoreSessionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sessions::Service::LoadSession(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::LoadSessionRequest* request, ::ai::inworld::studio::v1alpha::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

