// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/common_knowledges.proto
#ifndef GRPC_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto__INCLUDED
#define GRPC_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto__INCLUDED

#include "ai/inworld/studio/v1alpha/common_knowledges.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// Service to manage common knowledges for the Inworld characters.
class CommonKnowledges final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.CommonKnowledges";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns one specified common knowledge.
    virtual ::grpc::Status GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>> AsyncGetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(AsyncGetCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>> PrepareAsyncGetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(PrepareAsyncGetCommonKnowledgeRaw(context, request, cq));
    }
    // Return list of common knowledges.
    virtual ::grpc::Status ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>> AsyncListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>>(AsyncListCommonKnowledgesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>> PrepareAsyncListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>>(PrepareAsyncListCommonKnowledgesRaw(context, request, cq));
    }
    // Updates one specified common knowledge.
    virtual ::grpc::Status UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>> AsyncUpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(AsyncUpdateCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>> PrepareAsyncUpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(PrepareAsyncUpdateCommonKnowledgeRaw(context, request, cq));
    }
    // Creates a common knowledge.
    virtual ::grpc::Status CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>> AsyncCreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(AsyncCreateCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>> PrepareAsyncCreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(PrepareAsyncCreateCommonKnowledgeRaw(context, request, cq));
    }
    // Deletes a common knowledge.
    virtual ::grpc::Status DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteCommonKnowledgeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Returns one specified common knowledge.
      virtual void GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return list of common knowledges.
      virtual void ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates one specified common knowledge.
      virtual void UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a common knowledge.
      virtual void CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a common knowledge.
      virtual void DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>* AsyncGetCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>* PrepareAsyncGetCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* AsyncListCommonKnowledgesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* PrepareAsyncListCommonKnowledgesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>* AsyncUpdateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>* PrepareAsyncUpdateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>* AsyncCreateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::CommonKnowledge>* PrepareAsyncCreateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>> AsyncGetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(AsyncGetCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>> PrepareAsyncGetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(PrepareAsyncGetCommonKnowledgeRaw(context, request, cq));
    }
    ::grpc::Status ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>> AsyncListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>>(AsyncListCommonKnowledgesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>> PrepareAsyncListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>>(PrepareAsyncListCommonKnowledgesRaw(context, request, cq));
    }
    ::grpc::Status UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>> AsyncUpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(AsyncUpdateCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>> PrepareAsyncUpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(PrepareAsyncUpdateCommonKnowledgeRaw(context, request, cq));
    }
    ::grpc::Status CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>> AsyncCreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(AsyncCreateCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>> PrepareAsyncCreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>>(PrepareAsyncCreateCommonKnowledgeRaw(context, request, cq));
    }
    ::grpc::Status DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteCommonKnowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteCommonKnowledgeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)>) override;
      void GetCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCommonKnowledges(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)>) override;
      void UpdateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, std::function<void(::grpc::Status)>) override;
      void CreateCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteCommonKnowledge(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* AsyncGetCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* PrepareAsyncGetCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* AsyncListCommonKnowledgesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* PrepareAsyncListCommonKnowledgesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* AsyncUpdateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* PrepareAsyncUpdateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* AsyncCreateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::CommonKnowledge>* PrepareAsyncCreateCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteCommonKnowledgeRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCommonKnowledge_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCommonKnowledges_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCommonKnowledge_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCommonKnowledge_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCommonKnowledge_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns one specified common knowledge.
    virtual ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response);
    // Return list of common knowledges.
    virtual ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response);
    // Updates one specified common knowledge.
    virtual ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response);
    // Creates a common knowledge.
    virtual ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response);
    // Deletes a common knowledge.
    virtual ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCommonKnowledge() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommonKnowledge(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::CommonKnowledge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCommonKnowledges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCommonKnowledges() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListCommonKnowledges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCommonKnowledges(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCommonKnowledge() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCommonKnowledge(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::CommonKnowledge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCommonKnowledge() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCommonKnowledge(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::CommonKnowledge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCommonKnowledge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCommonKnowledge(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCommonKnowledge<WithAsyncMethod_ListCommonKnowledges<WithAsyncMethod_UpdateCommonKnowledge<WithAsyncMethod_CreateCommonKnowledge<WithAsyncMethod_DeleteCommonKnowledge<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCommonKnowledge() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) { return this->GetCommonKnowledge(context, request, response); }));}
    void SetMessageAllocatorFor_GetCommonKnowledge(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCommonKnowledges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCommonKnowledges() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* request, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* response) { return this->ListCommonKnowledges(context, request, response); }));}
    void SetMessageAllocatorFor_ListCommonKnowledges(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCommonKnowledges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCommonKnowledges(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCommonKnowledge() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) { return this->UpdateCommonKnowledge(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCommonKnowledge(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCommonKnowledge() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* request, ::ai::inworld::studio::v1alpha::CommonKnowledge* response) { return this->CreateCommonKnowledge(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCommonKnowledge(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCommonKnowledge() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* request, ::google::protobuf::Empty* response) { return this->DeleteCommonKnowledge(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCommonKnowledge(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCommonKnowledge<WithCallbackMethod_ListCommonKnowledges<WithCallbackMethod_UpdateCommonKnowledge<WithCallbackMethod_CreateCommonKnowledge<WithCallbackMethod_DeleteCommonKnowledge<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCommonKnowledge() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCommonKnowledges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCommonKnowledges() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListCommonKnowledges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCommonKnowledge() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCommonKnowledge() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCommonKnowledge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCommonKnowledge() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommonKnowledge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCommonKnowledges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCommonKnowledges() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListCommonKnowledges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCommonKnowledges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCommonKnowledge() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCommonKnowledge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCommonKnowledge() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCommonKnowledge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCommonKnowledge() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCommonKnowledge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCommonKnowledge() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCommonKnowledge(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCommonKnowledges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCommonKnowledges() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCommonKnowledges(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCommonKnowledges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCommonKnowledges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCommonKnowledge() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCommonKnowledge(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCommonKnowledge() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCommonKnowledge(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCommonKnowledge() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCommonKnowledge(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCommonKnowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCommonKnowledge() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>* streamer) {
                       return this->StreamedGetCommonKnowledge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCommonKnowledge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest,::ai::inworld::studio::v1alpha::CommonKnowledge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCommonKnowledges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCommonKnowledges() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* streamer) {
                       return this->StreamedListCommonKnowledges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCommonKnowledges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCommonKnowledges(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCommonKnowledges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest,::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCommonKnowledge() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>* streamer) {
                       return this->StreamedUpdateCommonKnowledge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCommonKnowledge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest,::ai::inworld::studio::v1alpha::CommonKnowledge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCommonKnowledge() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest, ::ai::inworld::studio::v1alpha::CommonKnowledge>* streamer) {
                       return this->StreamedCreateCommonKnowledge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* /*request*/, ::ai::inworld::studio::v1alpha::CommonKnowledge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCommonKnowledge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest,::ai::inworld::studio::v1alpha::CommonKnowledge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCommonKnowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCommonKnowledge() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteCommonKnowledge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCommonKnowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCommonKnowledge(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCommonKnowledge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCommonKnowledge<WithStreamedUnaryMethod_ListCommonKnowledges<WithStreamedUnaryMethod_UpdateCommonKnowledge<WithStreamedUnaryMethod_CreateCommonKnowledge<WithStreamedUnaryMethod_DeleteCommonKnowledge<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCommonKnowledge<WithStreamedUnaryMethod_ListCommonKnowledges<WithStreamedUnaryMethod_UpdateCommonKnowledge<WithStreamedUnaryMethod_CreateCommonKnowledge<WithStreamedUnaryMethod_DeleteCommonKnowledge<Service > > > > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto__INCLUDED
