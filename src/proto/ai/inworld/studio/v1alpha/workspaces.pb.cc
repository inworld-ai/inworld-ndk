#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/workspaces.proto

#include "ai/inworld/studio/v1alpha/workspaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImpressionEventData_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class GetWorkspaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkspaceRequest> _instance;
} _GetWorkspaceRequest_default_instance_;
class ListWorkspacesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWorkspacesRequest> _instance;
} _ListWorkspacesRequest_default_instance_;
class CreateWorkspaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWorkspaceRequest> _instance;
} _CreateWorkspaceRequest_default_instance_;
class UpdateWorkspaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateWorkspaceRequest> _instance;
} _UpdateWorkspaceRequest_default_instance_;
class DeleteWorkspaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkspaceRequest> _instance;
} _DeleteWorkspaceRequest_default_instance_;
class CloneWorkspaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloneWorkspaceRequest> _instance;
} _CloneWorkspaceRequest_default_instance_;
class ImpressionEventRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImpressionEventRequest> _instance;
} _ImpressionEventRequest_default_instance_;
class Workspace_MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Workspace_Meta> _instance;
} _Workspace_Meta_default_instance_;
class WorkspaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Workspace> _instance;
} _Workspace_default_instance_;
class ListWorkspacesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWorkspacesResponse> _instance;
} _ListWorkspacesResponse_default_instance_;
class ShareWorkspaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShareWorkspaceRequest> _instance;
} _ShareWorkspaceRequest_default_instance_;
class GenerateResourceNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateResourceNameRequest> _instance;
} _GenerateResourceNameRequest_default_instance_;
class GenerateResourceNameResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateResourceNameResponse> _instance;
} _GenerateResourceNameResponse_default_instance_;
class GetWorkspaceShareInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkspaceShareInfoRequest> _instance;
} _GetWorkspaceShareInfoRequest_default_instance_;
class WorkspaceShareInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceShareInfo> _instance;
} _WorkspaceShareInfo_default_instance_;
class GetWorkspaceLimitInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkspaceLimitInfoRequest> _instance;
} _GetWorkspaceLimitInfoRequest_default_instance_;
class GetRemainWorkspaceLimitInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRemainWorkspaceLimitInfoRequest> _instance;
} _GetRemainWorkspaceLimitInfoRequest_default_instance_;
class WorkspaceLimitInfo_TextListLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_TextListLimit> _instance;
} _WorkspaceLimitInfo_TextListLimit_default_instance_;
class WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit> _instance;
} _WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_default_instance_;
class WorkspaceLimitInfo_CharacterLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_CharacterLimit> _instance;
} _WorkspaceLimitInfo_CharacterLimit_default_instance_;
class WorkspaceLimitInfo_SceneLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_SceneLimit> _instance;
} _WorkspaceLimitInfo_SceneLimit_default_instance_;
class WorkspaceLimitInfo_WorkspaceLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_WorkspaceLimit> _instance;
} _WorkspaceLimitInfo_WorkspaceLimit_default_instance_;
class WorkspaceLimitInfo_BillingAccountLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_BillingAccountLimit> _instance;
} _WorkspaceLimitInfo_BillingAccountLimit_default_instance_;
class WorkspaceLimitInfo_CommonKnowledgeLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_CommonKnowledgeLimit> _instance;
} _WorkspaceLimitInfo_CommonKnowledgeLimit_default_instance_;
class WorkspaceLimitInfo_AutoGeneratorLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_AutoGeneratorLimit> _instance;
} _WorkspaceLimitInfo_AutoGeneratorLimit_default_instance_;
class WorkspaceLimitInfo_NarrativeGraphLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_NarrativeGraphLimit> _instance;
} _WorkspaceLimitInfo_NarrativeGraphLimit_default_instance_;
class WorkspaceLimitInfo_BatchLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo_BatchLimit> _instance;
} _WorkspaceLimitInfo_BatchLimit_default_instance_;
class WorkspaceLimitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkspaceLimitInfo> _instance;
} _WorkspaceLimitInfo_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_CloneWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_CloneWorkspaceRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::CloneWorkspaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloneWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloneWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_CreateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_CreateWorkspaceRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_DeleteWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_DeleteWorkspaceRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_GenerateResourceNameRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GenerateResourceNameRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateResourceNameRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateResourceNameRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_GenerateResourceNameResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GenerateResourceNameResponse_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateResourceNameResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateResourceNameResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_GetRemainWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GetRemainWorkspaceLimitInfoRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRemainWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRemainWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_GetWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GetWorkspaceLimitInfoRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_GetWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GetWorkspaceRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GetWorkspaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_GetWorkspaceShareInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GetWorkspaceShareInfoRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWorkspaceShareInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWorkspaceShareInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_ImpressionEventRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_ImpressionEventRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::ImpressionEventRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImpressionEventRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImpressionEventRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_ImpressionEventData_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_ListWorkspacesRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_ListWorkspacesRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::ListWorkspacesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListWorkspacesRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListWorkspacesRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_ListWorkspacesResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_ListWorkspacesResponse_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::ListWorkspacesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListWorkspacesResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListWorkspacesResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_ShareWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_ShareWorkspaceRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShareWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShareWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_UpdateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_UpdateWorkspaceRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_Workspace_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::Workspace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_Workspace_Meta_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::Workspace_Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_WorkspaceLimitInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_WorkspaceLimitInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_AutoGeneratorLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_BatchLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_BillingAccountLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CharacterLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
      &scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CommonKnowledgeLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_NarrativeGraphLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_SceneLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {
      &scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_TextListLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_WorkspaceLimit_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static void InitDefaultsscc_info_WorkspaceShareInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_WorkspaceShareInfo_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::WorkspaceShareInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkspaceShareInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkspaceShareInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceRequest, view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, workspace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, workspace_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CloneWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CloneWorkspaceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CloneWorkspaceRequest, target_workspace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ImpressionEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ImpressionEventRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ImpressionEventRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, total_characters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, total_scenes_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, total_common_knowledge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, display_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, experimental_features_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, billing_account_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, meta_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, runtime_access_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, primary_language_code_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, primary_language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesResponse, workspaces_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, workspace_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, display_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, resource_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameResponse, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceShareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceShareInfo, emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit, item_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit, total_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, core_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, example_dialog_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, motivation_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, character_role_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, hobby_or_interests_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, nicknames_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, personality_adjectives_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, flaws_max_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, total_common_knowledge_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, character_description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, user_tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, description_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, total_characters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, display_name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, total_common_knowledge_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, scene_trigger_description_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, user_tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, display_name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, total_characters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, total_scenes_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, total_voices_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, total_common_knowledge_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, total_narrative_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit, total_workspaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, display_name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, description_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, memory_records_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, user_tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit, notes_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit, outline_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit, total_forks_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit, total_files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit, total_nodes_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit, total_connections_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit, display_name_max_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit, total_common_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit, total_image_uploads_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit, total_deploys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, character_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, scene_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, workspace_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, billing_account_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, common_knowledge_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, auto_generator_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, narrative_graph_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, batch_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceRequest)},
  { 7, -1, sizeof(::ai::inworld::studio::v1alpha::ListWorkspacesRequest)},
  { 14, -1, sizeof(::ai::inworld::studio::v1alpha::CreateWorkspaceRequest)},
  { 20, -1, sizeof(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest)},
  { 27, -1, sizeof(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest)},
  { 34, -1, sizeof(::ai::inworld::studio::v1alpha::CloneWorkspaceRequest)},
  { 41, -1, sizeof(::ai::inworld::studio::v1alpha::ImpressionEventRequest)},
  { 48, -1, sizeof(::ai::inworld::studio::v1alpha::Workspace_Meta)},
  { 57, -1, sizeof(::ai::inworld::studio::v1alpha::Workspace)},
  { 70, -1, sizeof(::ai::inworld::studio::v1alpha::ListWorkspacesResponse)},
  { 77, -1, sizeof(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest)},
  { 84, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest)},
  { 92, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateResourceNameResponse)},
  { 98, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest)},
  { 104, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceShareInfo)},
  { 110, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest)},
  { 116, -1, sizeof(::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest)},
  { 122, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit)},
  { 129, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit)},
  { 142, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit)},
  { 152, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit)},
  { 164, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit)},
  { 176, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit)},
  { 182, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit)},
  { 191, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit)},
  { 200, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit)},
  { 208, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit)},
  { 216, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GetWorkspaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_ListWorkspacesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_CreateWorkspaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_UpdateWorkspaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_DeleteWorkspaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_CloneWorkspaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_ImpressionEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_Workspace_Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_Workspace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_ListWorkspacesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_ShareWorkspaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GenerateResourceNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GenerateResourceNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GetWorkspaceShareInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceShareInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GetWorkspaceLimitInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GetRemainWorkspaceLimitInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_TextListLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CharacterLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_SceneLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_WorkspaceLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_BillingAccountLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CommonKnowledgeLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_AutoGeneratorLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_NarrativeGraphLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_BatchLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_default_instance_),
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*ai/inworld/studio/v1alpha/workspaces.p"
  "roto\022\031ai.inworld.studio.v1alpha\0325ai/inwo"
  "rld/studio/v1alpha/impression_event_data"
  ".proto\032-ai/inworld/studio/v1alpha/langua"
  "ge_code.proto\032\034google/api/annotations.pr"
  "oto\032\027google/api/client.proto\032\037google/api"
  "/field_behavior.proto\032\031google/api/resour"
  "ce.proto\032\033google/protobuf/empty.proto\032 g"
  "oogle/protobuf/field_mask.proto\032\037google/"
  "protobuf/timestamp.proto\032 ai/inworld/opt"
  "ions/options.proto\032.ai/inworld/language_"
  "codes/language_codes.proto\"\201\001\n\023GetWorksp"
  "aceRequest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.in"
  "world.ai/Workspace\022:\n\004view\030\002 \001(\0162,.ai.in"
  "world.studio.v1alpha.WorkspaceItemView\">"
  "\n\025ListWorkspacesRequest\022\021\n\tpage_size\030\001 \001"
  "(\005\022\022\n\npage_token\030\002 \001(\t\"V\n\026CreateWorkspac"
  "eRequest\022<\n\tworkspace\030\001 \001(\0132$.ai.inworld"
  ".studio.v1alpha.WorkspaceB\003\340A\002\"\214\001\n\026Updat"
  "eWorkspaceRequest\022<\n\tworkspace\030\001 \001(\0132$.a"
  "i.inworld.studio.v1alpha.WorkspaceB\003\340A\002\022"
  "4\n\013update_mask\030\002 \001(\0132\032.google.protobuf.F"
  "ieldMaskB\003\340A\002\"W\n\026DeleteWorkspaceRequest\022"
  ".\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inworld.ai/Wo"
  "rkspace\022\r\n\005force\030\002 \001(\010\"a\n\025CloneWorkspace"
  "Request\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inwor"
  "ld.ai/Workspace\022\030\n\020target_workspace\030\002 \001("
  "\t\"\206\001\n\026ImpressionEventRequest\022.\n\004name\030\001 \001"
  "(\tB \340A\002\372A\032\n\030api.inworld.ai/Workspace\022<\n\004"
  "data\030\002 \003(\0132..ai.inworld.studio.v1alpha.I"
  "mpressionEventData\"\336\005\n\tWorkspace\022/\n\004name"
  "\030\001 \001(\tB!\340A\002\242\317\"\032\n\030\032\026workspaces/workspace-"
  "1\022\031\n\014display_name\030\002 \001(\tB\003\340A\002\022\035\n\025experime"
  "ntal_features\030\003 \003(\t\022>\n\017billing_account\030\004"
  " \001(\tB%\340A\002\372A\037\n\035api.inworld.ai/BillingAcco"
  "unt\022<\n\004meta\030\005 \001(\0132).ai.inworld.studio.v1"
  "alpha.Workspace.MetaB\003\340A\003\022J\n\016runtime_acc"
  "ess\030\006 \001(\01622.ai.inworld.studio.v1alpha.Wo"
  "rkspace.RuntimeAccess\022J\n\025primary_languag"
  "e_code\030\007 \001(\0162\'.ai.inworld.studio.v1alpha"
  ".LanguageCodeB\002\030\001\022A\n\020primary_language\030\010 "
  "\001(\0162\'.ai.inworld.language_codes.Language"
  "Code\032n\n\004Meta\022\030\n\020total_characters\030\001 \001(\005\022\024"
  "\n\014total_scenes\030\002 \001(\005\022\026\n\016total_triggers\030\003"
  " \001(\005\022\036\n\026total_common_knowledge\030\004 \001(\005\"f\n\r"
  "RuntimeAccess\022\036\n\032RUNTIME_ACCESS_UNSPECIF"
  "IED\020\000\022\032\n\026RUNTIME_ACCESS_PRIVATE\020\001\022\031\n\025RUN"
  "TIME_ACCESS_PUBLIC\020\002:5\352A2\n\030api.inworld.a"
  "i/Workspace\022\026workspaces/{workspace}\"k\n\026L"
  "istWorkspacesResponse\0228\n\nworkspaces\030\001 \003("
  "\0132$.ai.inworld.studio.v1alpha.Workspace\022"
  "\027\n\017next_page_token\030\002 \001(\t\"s\n\025ShareWorkspa"
  "ceRequest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inw"
  "orld.ai/Workspace\022*\n\006emails\030\002 \003(\tB\032\242\317\"\026\n"
  "\0242\022\n\020\032\016user@email.com\"\321\002\n\033GenerateResour"
  "ceNameRequest\0223\n\tworkspace\030\001 \001(\tB \340A\002\372A\032"
  "\n\030api.inworld.ai/Workspace\022\031\n\014display_na"
  "me\030\002 \001(\tB\003\340A\002\022_\n\rresource_type\030\003 \001(\0162C.a"
  "i.inworld.studio.v1alpha.GenerateResourc"
  "eNameRequest.ResourceTypeB\003\340A\002\"\200\001\n\014Resou"
  "rceType\022\035\n\031RESOURCE_TYPE_UNSPECIFIED\020\000\022\033"
  "\n\027RESOURCE_TYPE_WORKSPACE\020\001\022\033\n\027RESOURCE_"
  "TYPE_CHARACTER\020\002\022\027\n\023RESOURCE_TYPE_SCENE\020"
  "\003\"5\n\034GenerateResourceNameResponse\022\025\n\010res"
  "ource\030\001 \001(\tB\003\340A\002\"N\n\034GetWorkspaceShareInf"
  "oRequest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inwo"
  "rld.ai/Workspace\"$\n\022WorkspaceShareInfo\022\016"
  "\n\006emails\030\001 \003(\t\"N\n\034GetWorkspaceLimitInfoR"
  "equest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inworl"
  "d.ai/Workspace\"T\n\"GetRemainWorkspaceLimi"
  "tInfoRequest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api."
  "inworld.ai/Workspace\"\302\024\n\022WorkspaceLimitI"
  "nfo\022O\n\tcharacter\030\001 \001(\0132<.ai.inworld.stud"
  "io.v1alpha.WorkspaceLimitInfo.CharacterL"
  "imit\022G\n\005scene\030\002 \001(\01328.ai.inworld.studio."
  "v1alpha.WorkspaceLimitInfo.SceneLimit\022O\n"
  "\tworkspace\030\003 \001(\0132<.ai.inworld.studio.v1a"
  "lpha.WorkspaceLimitInfo.WorkspaceLimit\022Z"
  "\n\017billing_account\030\004 \001(\0132A.ai.inworld.stu"
  "dio.v1alpha.WorkspaceLimitInfo.BillingAc"
  "countLimit\022\\\n\020common_knowledge\030\005 \001(\0132B.a"
  "i.inworld.studio.v1alpha.WorkspaceLimitI"
  "nfo.CommonKnowledgeLimit\022X\n\016auto_generat"
  "or\030\006 \001(\0132@.ai.inworld.studio.v1alpha.Wor"
  "kspaceLimitInfo.AutoGeneratorLimit\022Z\n\017na"
  "rrative_graph\030\007 \001(\0132A.ai.inworld.studio."
  "v1alpha.WorkspaceLimitInfo.NarrativeGrap"
  "hLimit\022G\n\005batch\030\010 \001(\01328.ai.inworld.studi"
  "o.v1alpha.WorkspaceLimitInfo.BatchLimit\032"
  "=\n\rTextListLimit\022\027\n\017item_max_length\030\001 \001("
  "\005\022\023\n\013total_items\030\002 \001(\005\032\344\005\n\016CharacterLimi"
  "t\022\027\n\017name_max_length\030\001 \001(\005\022\026\n\016total_trig"
  "gers\030\002 \001(\005\022\036\n\026total_common_knowledge\030\003 \001"
  "(\005\022u\n\025character_description\030\004 \001(\0132V.ai.i"
  "nworld.studio.v1alpha.WorkspaceLimitInfo"
  ".CharacterLimit.CharacterDescriptionLimi"
  "t\022N\n\tuser_tags\030\005 \001(\0132;.ai.inworld.studio"
  ".v1alpha.WorkspaceLimitInfo.TextListLimi"
  "t\032\271\003\n\031CharacterDescriptionLimit\022\027\n\017core_"
  "max_length\030\001 \001(\005\022!\n\031example_dialog_max_l"
  "ength\030\002 \001(\005\022\035\n\025motivation_max_length\030\003 \001"
  "(\005\022!\n\031character_role_max_length\030\004 \001(\005\022W\n"
  "\022hobby_or_interests\030\005 \001(\0132;.ai.inworld.s"
  "tudio.v1alpha.WorkspaceLimitInfo.TextLis"
  "tLimit\022N\n\tnicknames\030\006 \001(\0132;.ai.inworld.s"
  "tudio.v1alpha.WorkspaceLimitInfo.TextLis"
  "tLimit\022[\n\026personality_adjectives\030\007 \001(\0132;"
  ".ai.inworld.studio.v1alpha.WorkspaceLimi"
  "tInfo.TextListLimit\022\030\n\020flaws_max_length\030"
  "\010 \001(\005\032\235\002\n\nSceneLimit\022\036\n\026description_max_"
  "length\030\001 \001(\005\022\030\n\020total_characters\030\002 \001(\005\022\026"
  "\n\016total_triggers\030\003 \001(\005\022\037\n\027display_name_m"
  "ax_length\030\004 \001(\005\022\036\n\026total_common_knowledg"
  "e\030\005 \001(\005\022,\n$scene_trigger_description_max"
  "_length\030\006 \001(\005\022N\n\tuser_tags\030\007 \001(\0132;.ai.in"
  "world.studio.v1alpha.WorkspaceLimitInfo."
  "TextListLimit\032\317\001\n\016WorkspaceLimit\022\037\n\027disp"
  "lay_name_max_length\030\001 \001(\005\022\030\n\020total_chara"
  "cters\030\002 \001(\005\022\024\n\014total_scenes\030\003 \001(\005\022\026\n\016tot"
  "al_triggers\030\004 \001(\005\022\024\n\014total_voices\030\005 \001(\005\022"
  "\036\n\026total_common_knowledge\030\006 \001(\005\022\036\n\026total"
  "_narrative_graphs\030\007 \001(\005\032/\n\023BillingAccoun"
  "tLimit\022\030\n\020total_workspaces\030\001 \001(\005\032\374\001\n\024Com"
  "monKnowledgeLimit\022\037\n\027display_name_max_le"
  "ngth\030\001 \001(\005\022\036\n\026description_max_length\030\002 \001"
  "(\005\022S\n\016memory_records\030\003 \001(\0132;.ai.inworld."
  "studio.v1alpha.WorkspaceLimitInfo.TextLi"
  "stLimit\022N\n\tuser_tags\030\004 \001(\0132;.ai.inworld."
  "studio.v1alpha.WorkspaceLimitInfo.TextLi"
  "stLimit\032t\n\022AutoGeneratorLimit\022\030\n\020notes_m"
  "ax_length\030\001 \001(\005\022\032\n\022outline_max_length\030\002 "
  "\001(\005\022\023\n\013total_forks\030\003 \001(\005\022\023\n\013total_files\030"
  "\004 \001(\005\032f\n\023NarrativeGraphLimit\022\023\n\013total_no"
  "des\030\001 \001(\005\022\031\n\021total_connections\030\002 \001(\005\022\037\n\027"
  "display_name_max_length\030\003 \001(\005\032b\n\nBatchLi"
  "mit\022\024\n\014total_common\030\003 \001(\005\022\033\n\023total_image"
  "_uploads\030\004 \001(\005\022\025\n\rtotal_deploys\030\005 \001(\005J\004\010"
  "\001\020\002J\004\010\002\020\003*|\n\021WorkspaceItemView\022#\n\037WORKSP"
  "ACE_ITEM_VIEW_UNSPECIFIED\020\000\022\037\n\033WORKSPACE"
  "_ITEM_VIEW_DEFAULT\020\001\022!\n\035WORKSPACE_ITEM_V"
  "IEW_WITH_META\020\0022\301\020\n\nWorkspaces\022\221\001\n\014GetWo"
  "rkspace\022..ai.inworld.studio.v1alpha.GetW"
  "orkspaceRequest\032$.ai.inworld.studio.v1al"
  "pha.Workspace\"+\202\323\344\223\002\036\022\034/v1alpha/{name=wo"
  "rkspaces/*}\332A\004name\022\225\001\n\016ListWorkspaces\0220."
  "ai.inworld.studio.v1alpha.ListWorkspaces"
  "Request\0321.ai.inworld.studio.v1alpha.List"
  "WorkspacesResponse\"\036\202\323\344\223\002\025\022\023/v1alpha/wor"
  "kspaces\332A\000\022\275\001\n\017UpdateWorkspace\0221.ai.inwo"
  "rld.studio.v1alpha.UpdateWorkspaceReques"
  "t\032$.ai.inworld.studio.v1alpha.Workspace\""
  "Q\202\323\344\223\00232&/v1alpha/{workspace.name=worksp"
  "aces/*}:\tworkspace\332A\025workspace,update_ma"
  "sk\022\236\001\n\017CreateWorkspace\0221.ai.inworld.stud"
  "io.v1alpha.CreateWorkspaceRequest\032$.ai.i"
  "nworld.studio.v1alpha.Workspace\"2\202\323\344\223\002 \""
  "\023/v1alpha/workspaces:\tworkspace\332A\tworksp"
  "ace\022\211\001\n\017DeleteWorkspace\0221.ai.inworld.stu"
  "dio.v1alpha.DeleteWorkspaceRequest\032\026.goo"
  "gle.protobuf.Empty\"+\202\323\344\223\002\036*\034/v1alpha/{na"
  "me=workspaces/*}\332A\004name\022\236\001\n\016CloneWorkspa"
  "ce\0220.ai.inworld.studio.v1alpha.CloneWork"
  "spaceRequest\032$.ai.inworld.studio.v1alpha"
  ".Workspace\"4\202\323\344\223\002\'\"\"/v1alpha/{name=works"
  "paces/*}:clone:\001*\332A\004name\022\220\001\n\016ShareWorksp"
  "ace\0220.ai.inworld.studio.v1alpha.ShareWor"
  "kspaceRequest\032\026.google.protobuf.Empty\"4\202"
  "\323\344\223\002\'\"\"/v1alpha/{name=workspaces/*}:shar"
  "e:\001*\332A\004name\022\361\001\n\024generateResourceName\0226.a"
  "i.inworld.studio.v1alpha.GenerateResourc"
  "eNameRequest\0327.ai.inworld.studio.v1alpha"
  ".GenerateResourceNameResponse\"h\202\323\344\223\002;\"6/"
  "v1alpha/{workspace=workspaces/*}:generat"
  "eResourceName:\001*\332A$workspace,display_nam"
  "e,resource_type\022\277\001\n\025GetWorkspaceShareInf"
  "o\0227.ai.inworld.studio.v1alpha.GetWorkspa"
  "ceShareInfoRequest\032-.ai.inworld.studio.v"
  "1alpha.WorkspaceShareInfo\">\202\323\344\223\0021\022//v1al"
  "pha/{name=workspaces/*/workspaceShareInf"
  "o}\332A\004name\022\277\001\n\025GetWorkspaceLimitInfo\0227.ai"
  ".inworld.studio.v1alpha.GetWorkspaceLimi"
  "tInfoRequest\032-.ai.inworld.studio.v1alpha"
  ".WorkspaceLimitInfo\">\202\323\344\223\0021\022//v1alpha/{n"
  "ame=workspaces/*/workspaceLimitInfo}\332A\004n"
  "ame\022\317\001\n\030RemainWorkspaceLimitInfo\022=.ai.in"
  "world.studio.v1alpha.GetRemainWorkspaceL"
  "imitInfoRequest\032-.ai.inworld.studio.v1al"
  "pha.WorkspaceLimitInfo\"E\202\323\344\223\0028\0226/v1alpha"
  "/{name=workspaces/*/workspaceLimitInfo}:"
  "remain\332A\004name\022\233\001\n\023SendImpressionEvent\0221."
  "ai.inworld.studio.v1alpha.ImpressionEven"
  "tRequest\032\026.google.protobuf.Empty\"9\202\323\344\223\002,"
  "\"\'/v1alpha/{name=workspaces/*}:impressio"
  "n:\001*\332A\004nameB\231\001\n\031ai.inworld.studio.v1alph"
  "aB\017WorkspacesProtoP\001ZMgithub.com/inworld"
  "-ai/inworld/serving/grpc-gateway/build/p"
  "roto/studio/v1alpha\252\002\031Ai.Inworld.Studio."
  "V1Alphab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_deps[11] = {
  &::descriptor_table_ai_2finworld_2flanguage_5fcodes_2flanguage_5fcodes_2eproto,
  &::descriptor_table_ai_2finworld_2foptions_2foptions_2eproto,
  &::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fimpression_5fevent_5fdata_2eproto,
  &::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2flanguage_5fcode_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_sccs[28] = {
  &scc_info_CloneWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_CreateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_DeleteWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_GenerateResourceNameRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_GenerateResourceNameResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_GetRemainWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_GetWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_GetWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_GetWorkspaceShareInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_ImpressionEventRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_ListWorkspacesRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_ListWorkspacesResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_ShareWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_UpdateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
  &scc_info_WorkspaceShareInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto = {
  false, false, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto, "ai/inworld/studio/v1alpha/workspaces.proto", 7895,
  &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_sccs, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_deps, 28, 11,
  schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto::offsets,
  file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto, 28, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto, file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto)), true);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Workspace_RuntimeAccess_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[0];
}
bool Workspace_RuntimeAccess_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Workspace_RuntimeAccess Workspace::RUNTIME_ACCESS_UNSPECIFIED;
constexpr Workspace_RuntimeAccess Workspace::RUNTIME_ACCESS_PRIVATE;
constexpr Workspace_RuntimeAccess Workspace::RUNTIME_ACCESS_PUBLIC;
constexpr Workspace_RuntimeAccess Workspace::RuntimeAccess_MIN;
constexpr Workspace_RuntimeAccess Workspace::RuntimeAccess_MAX;
constexpr int Workspace::RuntimeAccess_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenerateResourceNameRequest_ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[1];
}
bool GenerateResourceNameRequest_ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_UNSPECIFIED;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_WORKSPACE;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_CHARACTER;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_SCENE;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::ResourceType_MIN;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::ResourceType_MAX;
constexpr int GenerateResourceNameRequest::ResourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkspaceItemView_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[2];
}
bool WorkspaceItemView_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetWorkspaceRequest::_Internal {
 public:
};

GetWorkspaceRequest::GetWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
}
GetWorkspaceRequest::GetWorkspaceRequest(const GetWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
}

void GetWorkspaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_ = 0;
}

GetWorkspaceRequest::~GetWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetWorkspaceRequest::ArenaDtor(void* object) {
  GetWorkspaceRequest* _this = reinterpret_cast< GetWorkspaceRequest* >(object);
  (void)_this;
}
void GetWorkspaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkspaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkspaceRequest& GetWorkspaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void GetWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceItemView view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_view(static_cast<::ai::inworld::studio::v1alpha::WorkspaceItemView>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkspaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceItemView view = 2;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  return target;
}

size_t GetWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.studio.v1alpha.WorkspaceItemView view = 2;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkspaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkspaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkspaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
    MergeFrom(*source);
  }
}

void GetWorkspaceRequest::MergeFrom(const GetWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
}

void GetWorkspaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkspaceRequest::CopyFrom(const GetWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceRequest::InternalSwap(GetWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(view_, other->view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListWorkspacesRequest::_Internal {
 public:
};

ListWorkspacesRequest::ListWorkspacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
}
ListWorkspacesRequest::ListWorkspacesRequest(const ListWorkspacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArena());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
}

void ListWorkspacesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWorkspacesRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListWorkspacesRequest::~ListWorkspacesRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListWorkspacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListWorkspacesRequest::ArenaDtor(void* object) {
  ListWorkspacesRequest* _this = reinterpret_cast< ListWorkspacesRequest* >(object);
  (void)_this;
}
void ListWorkspacesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListWorkspacesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWorkspacesRequest& ListWorkspacesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWorkspacesRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void ListWorkspacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkspacesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListWorkspacesRequest.page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWorkspacesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListWorkspacesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  return target;
}

size_t ListWorkspacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWorkspacesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWorkspacesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWorkspacesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
    MergeFrom(*source);
  }
}

void ListWorkspacesRequest::MergeFrom(const ListWorkspacesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListWorkspacesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWorkspacesRequest::CopyFrom(const ListWorkspacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkspacesRequest::IsInitialized() const {
  return true;
}

void ListWorkspacesRequest::InternalSwap(ListWorkspacesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkspacesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateWorkspaceRequest::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::Workspace& workspace(const CreateWorkspaceRequest* msg);
};

const ::ai::inworld::studio::v1alpha::Workspace&
CreateWorkspaceRequest::_Internal::workspace(const CreateWorkspaceRequest* msg) {
  return *msg->workspace_;
}
CreateWorkspaceRequest::CreateWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
}
CreateWorkspaceRequest::CreateWorkspaceRequest(const CreateWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workspace()) {
    workspace_ = new ::ai::inworld::studio::v1alpha::Workspace(*from.workspace_);
  } else {
    workspace_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
}

void CreateWorkspaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  workspace_ = nullptr;
}

CreateWorkspaceRequest::~CreateWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete workspace_;
}

void CreateWorkspaceRequest::ArenaDtor(void* object) {
  CreateWorkspaceRequest* _this = reinterpret_cast< CreateWorkspaceRequest* >(object);
  (void)_this;
}
void CreateWorkspaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateWorkspaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWorkspaceRequest& CreateWorkspaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void CreateWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && workspace_ != nullptr) {
    delete workspace_;
  }
  workspace_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateWorkspaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWorkspaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_workspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::workspace(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  return target;
}

size_t CreateWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_workspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workspace_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWorkspaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorkspaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWorkspaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
    MergeFrom(*source);
  }
}

void CreateWorkspaceRequest::MergeFrom(const CreateWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_workspace()) {
    _internal_mutable_workspace()->::ai::inworld::studio::v1alpha::Workspace::MergeFrom(from._internal_workspace());
  }
}

void CreateWorkspaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkspaceRequest::CopyFrom(const CreateWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkspaceRequest::IsInitialized() const {
  return true;
}

void CreateWorkspaceRequest::InternalSwap(CreateWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(workspace_, other->workspace_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWorkspaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateWorkspaceRequest::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::Workspace& workspace(const UpdateWorkspaceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateWorkspaceRequest* msg);
};

const ::ai::inworld::studio::v1alpha::Workspace&
UpdateWorkspaceRequest::_Internal::workspace(const UpdateWorkspaceRequest* msg) {
  return *msg->workspace_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateWorkspaceRequest::_Internal::update_mask(const UpdateWorkspaceRequest* msg) {
  return *msg->update_mask_;
}
void UpdateWorkspaceRequest::clear_update_mask() {
  if (GetArena() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateWorkspaceRequest::UpdateWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
}
UpdateWorkspaceRequest::UpdateWorkspaceRequest(const UpdateWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workspace()) {
    workspace_ = new ::ai::inworld::studio::v1alpha::Workspace(*from.workspace_);
  } else {
    workspace_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
}

void UpdateWorkspaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&workspace_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&workspace_)) + sizeof(update_mask_));
}

UpdateWorkspaceRequest::~UpdateWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete workspace_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateWorkspaceRequest::ArenaDtor(void* object) {
  UpdateWorkspaceRequest* _this = reinterpret_cast< UpdateWorkspaceRequest* >(object);
  (void)_this;
}
void UpdateWorkspaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateWorkspaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateWorkspaceRequest& UpdateWorkspaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void UpdateWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && workspace_ != nullptr) {
    delete workspace_;
  }
  workspace_ = nullptr;
  if (GetArena() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkspaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateWorkspaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_workspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::workspace(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  return target;
}

size_t UpdateWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_workspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workspace_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateWorkspaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateWorkspaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateWorkspaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
    MergeFrom(*source);
  }
}

void UpdateWorkspaceRequest::MergeFrom(const UpdateWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_workspace()) {
    _internal_mutable_workspace()->::ai::inworld::studio::v1alpha::Workspace::MergeFrom(from._internal_workspace());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
}

void UpdateWorkspaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWorkspaceRequest::CopyFrom(const UpdateWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkspaceRequest::IsInitialized() const {
  return true;
}

void UpdateWorkspaceRequest::InternalSwap(UpdateWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateWorkspaceRequest, update_mask_)
      + sizeof(UpdateWorkspaceRequest::update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateWorkspaceRequest, workspace_)>(
          reinterpret_cast<char*>(&workspace_),
          reinterpret_cast<char*>(&other->workspace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkspaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteWorkspaceRequest::_Internal {
 public:
};

DeleteWorkspaceRequest::DeleteWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
}
DeleteWorkspaceRequest::DeleteWorkspaceRequest(const DeleteWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
}

void DeleteWorkspaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  force_ = false;
}

DeleteWorkspaceRequest::~DeleteWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteWorkspaceRequest::ArenaDtor(void* object) {
  DeleteWorkspaceRequest* _this = reinterpret_cast< DeleteWorkspaceRequest* >(object);
  (void)_this;
}
void DeleteWorkspaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteWorkspaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkspaceRequest& DeleteWorkspaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkspaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.DeleteWorkspaceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkspaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.DeleteWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool force = 2;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  return target;
}

size_t DeleteWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool force = 2;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkspaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkspaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkspaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkspaceRequest::MergeFrom(const DeleteWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
}

void DeleteWorkspaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkspaceRequest::CopyFrom(const DeleteWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkspaceRequest::IsInitialized() const {
  return true;
}

void DeleteWorkspaceRequest::InternalSwap(DeleteWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkspaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloneWorkspaceRequest::_Internal {
 public:
};

CloneWorkspaceRequest::CloneWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
}
CloneWorkspaceRequest::CloneWorkspaceRequest(const CloneWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  target_workspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_workspace().empty()) {
    target_workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_workspace(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
}

void CloneWorkspaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloneWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_workspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CloneWorkspaceRequest::~CloneWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloneWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_workspace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloneWorkspaceRequest::ArenaDtor(void* object) {
  CloneWorkspaceRequest* _this = reinterpret_cast< CloneWorkspaceRequest* >(object);
  (void)_this;
}
void CloneWorkspaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloneWorkspaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloneWorkspaceRequest& CloneWorkspaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloneWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void CloneWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  target_workspace_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloneWorkspaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.CloneWorkspaceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_workspace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_workspace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.CloneWorkspaceRequest.target_workspace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloneWorkspaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.CloneWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string target_workspace = 2;
  if (this->target_workspace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_workspace().data(), static_cast<int>(this->_internal_target_workspace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.CloneWorkspaceRequest.target_workspace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_workspace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  return target;
}

size_t CloneWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string target_workspace = 2;
  if (this->target_workspace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_workspace());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloneWorkspaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloneWorkspaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloneWorkspaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
    MergeFrom(*source);
  }
}

void CloneWorkspaceRequest::MergeFrom(const CloneWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.target_workspace().size() > 0) {
    _internal_set_target_workspace(from._internal_target_workspace());
  }
}

void CloneWorkspaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloneWorkspaceRequest::CopyFrom(const CloneWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.CloneWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloneWorkspaceRequest::IsInitialized() const {
  return true;
}

void CloneWorkspaceRequest::InternalSwap(CloneWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_workspace_.Swap(&other->target_workspace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CloneWorkspaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImpressionEventRequest::_Internal {
 public:
};

void ImpressionEventRequest::clear_data() {
  data_.Clear();
}
ImpressionEventRequest::ImpressionEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ImpressionEventRequest)
}
ImpressionEventRequest::ImpressionEventRequest(const ImpressionEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ImpressionEventRequest)
}

void ImpressionEventRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImpressionEventRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ImpressionEventRequest::~ImpressionEventRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImpressionEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImpressionEventRequest::ArenaDtor(void* object) {
  ImpressionEventRequest* _this = reinterpret_cast< ImpressionEventRequest* >(object);
  (void)_this;
}
void ImpressionEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImpressionEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImpressionEventRequest& ImpressionEventRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImpressionEventRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void ImpressionEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImpressionEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ImpressionEventRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.studio.v1alpha.ImpressionEventData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImpressionEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ImpressionEventRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .ai.inworld.studio.v1alpha.ImpressionEventData data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  return target;
}

size_t ImpressionEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.ImpressionEventData data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImpressionEventRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImpressionEventRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImpressionEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.ImpressionEventRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.ImpressionEventRequest)
    MergeFrom(*source);
  }
}

void ImpressionEventRequest::MergeFrom(const ImpressionEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ImpressionEventRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpressionEventRequest::CopyFrom(const ImpressionEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ImpressionEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpressionEventRequest::IsInitialized() const {
  return true;
}

void ImpressionEventRequest::InternalSwap(ImpressionEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ImpressionEventRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Workspace_Meta::_Internal {
 public:
};

Workspace_Meta::Workspace_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.Workspace.Meta)
}
Workspace_Meta::Workspace_Meta(const Workspace_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_characters_, &from.total_characters_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_common_knowledge_) -
    reinterpret_cast<char*>(&total_characters_)) + sizeof(total_common_knowledge_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.Workspace.Meta)
}

void Workspace_Meta::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_characters_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_common_knowledge_) -
      reinterpret_cast<char*>(&total_characters_)) + sizeof(total_common_knowledge_));
}

Workspace_Meta::~Workspace_Meta() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.Workspace.Meta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Workspace_Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Workspace_Meta::ArenaDtor(void* object) {
  Workspace_Meta* _this = reinterpret_cast< Workspace_Meta* >(object);
  (void)_this;
}
void Workspace_Meta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workspace_Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workspace_Meta& Workspace_Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Workspace_Meta_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void Workspace_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_characters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_common_knowledge_) -
      reinterpret_cast<char*>(&total_characters_)) + sizeof(total_common_knowledge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace_Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_scenes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_scenes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_triggers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workspace_Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_characters = 1;
  if (this->total_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_characters(), target);
  }

  // int32 total_scenes = 2;
  if (this->total_scenes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_scenes(), target);
  }

  // int32 total_triggers = 3;
  if (this->total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_triggers(), target);
  }

  // int32 total_common_knowledge = 4;
  if (this->total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_common_knowledge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.Workspace.Meta)
  return target;
}

size_t Workspace_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_characters = 1;
  if (this->total_characters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_characters());
  }

  // int32 total_scenes = 2;
  if (this->total_scenes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_scenes());
  }

  // int32 total_triggers = 3;
  if (this->total_triggers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_triggers());
  }

  // int32 total_common_knowledge = 4;
  if (this->total_common_knowledge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_common_knowledge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workspace_Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const Workspace_Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workspace_Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.Workspace.Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.Workspace.Meta)
    MergeFrom(*source);
  }
}

void Workspace_Meta::MergeFrom(const Workspace_Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_characters() != 0) {
    _internal_set_total_characters(from._internal_total_characters());
  }
  if (from.total_scenes() != 0) {
    _internal_set_total_scenes(from._internal_total_scenes());
  }
  if (from.total_triggers() != 0) {
    _internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from.total_common_knowledge() != 0) {
    _internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
}

void Workspace_Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workspace_Meta::CopyFrom(const Workspace_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace_Meta::IsInitialized() const {
  return true;
}

void Workspace_Meta::InternalSwap(Workspace_Meta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workspace_Meta, total_common_knowledge_)
      + sizeof(Workspace_Meta::total_common_knowledge_)
      - PROTOBUF_FIELD_OFFSET(Workspace_Meta, total_characters_)>(
          reinterpret_cast<char*>(&total_characters_),
          reinterpret_cast<char*>(&other->total_characters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace_Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Workspace::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::Workspace_Meta& meta(const Workspace* msg);
};

const ::ai::inworld::studio::v1alpha::Workspace_Meta&
Workspace::_Internal::meta(const Workspace* msg) {
  return *msg->meta_;
}
Workspace::Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  experimental_features_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.Workspace)
}
Workspace::Workspace(const Workspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      experimental_features_(from.experimental_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  billing_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_billing_account().empty()) {
    billing_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_billing_account(), 
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::ai::inworld::studio::v1alpha::Workspace_Meta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  ::memcpy(&runtime_access_, &from.runtime_access_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_language_) -
    reinterpret_cast<char*>(&runtime_access_)) + sizeof(primary_language_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.Workspace)
}

void Workspace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  billing_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&primary_language_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(primary_language_));
}

Workspace::~Workspace() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.Workspace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Workspace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  billing_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
}

void Workspace::ArenaDtor(void* object) {
  Workspace* _this = reinterpret_cast< Workspace* >(object);
  (void)_this;
}
void Workspace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workspace& Workspace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Workspace_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void Workspace::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.Workspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experimental_features_.Clear();
  name_.ClearToEmpty();
  display_name_.ClearToEmpty();
  billing_account_.ClearToEmpty();
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  ::memset(&runtime_access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_language_) -
      reinterpret_cast<char*>(&runtime_access_)) + sizeof(primary_language_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string experimental_features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_experimental_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.experimental_features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string billing_account = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_billing_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.billing_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.Workspace.Meta meta = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.Workspace.RuntimeAccess runtime_access = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_runtime_access(static_cast<::ai::inworld::studio::v1alpha::Workspace_RuntimeAccess>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.LanguageCode primary_language_code = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primary_language_code(static_cast<::ai::inworld::studio::v1alpha::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.language_codes.LanguageCode primary_language = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primary_language(static_cast<::ai::inworld::language_codes::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workspace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.Workspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // repeated string experimental_features = 3;
  for (int i = 0, n = this->_internal_experimental_features_size(); i < n; i++) {
    const auto& s = this->_internal_experimental_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.experimental_features");
    target = stream->WriteString(3, s, target);
  }

  // string billing_account = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->billing_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_billing_account().data(), static_cast<int>(this->_internal_billing_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.billing_account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_billing_account(), target);
  }

  // .ai.inworld.studio.v1alpha.Workspace.Meta meta = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::meta(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.Workspace.RuntimeAccess runtime_access = 6;
  if (this->runtime_access() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_runtime_access(), target);
  }

  // .ai.inworld.studio.v1alpha.LanguageCode primary_language_code = 7 [deprecated = true];
  if (this->primary_language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_primary_language_code(), target);
  }

  // .ai.inworld.language_codes.LanguageCode primary_language = 8;
  if (this->primary_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_primary_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.Workspace)
  return target;
}

size_t Workspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.Workspace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string experimental_features = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(experimental_features_.size());
  for (int i = 0, n = experimental_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      experimental_features_.Get(i));
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string billing_account = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->billing_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_billing_account());
  }

  // .ai.inworld.studio.v1alpha.Workspace.Meta meta = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .ai.inworld.studio.v1alpha.Workspace.RuntimeAccess runtime_access = 6;
  if (this->runtime_access() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_runtime_access());
  }

  // .ai.inworld.studio.v1alpha.LanguageCode primary_language_code = 7 [deprecated = true];
  if (this->primary_language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primary_language_code());
  }

  // .ai.inworld.language_codes.LanguageCode primary_language = 8;
  if (this->primary_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primary_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workspace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.Workspace)
  GOOGLE_DCHECK_NE(&from, this);
  const Workspace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workspace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.Workspace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.Workspace)
    MergeFrom(*source);
  }
}

void Workspace::MergeFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.Workspace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  experimental_features_.MergeFrom(from.experimental_features_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.billing_account().size() > 0) {
    _internal_set_billing_account(from._internal_billing_account());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::ai::inworld::studio::v1alpha::Workspace_Meta::MergeFrom(from._internal_meta());
  }
  if (from.runtime_access() != 0) {
    _internal_set_runtime_access(from._internal_runtime_access());
  }
  if (from.primary_language_code() != 0) {
    _internal_set_primary_language_code(from._internal_primary_language_code());
  }
  if (from.primary_language() != 0) {
    _internal_set_primary_language(from._internal_primary_language());
  }
}

void Workspace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workspace::CopyFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace::IsInitialized() const {
  return true;
}

void Workspace::InternalSwap(Workspace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  experimental_features_.InternalSwap(&other->experimental_features_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  billing_account_.Swap(&other->billing_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workspace, primary_language_)
      + sizeof(Workspace::primary_language_)
      - PROTOBUF_FIELD_OFFSET(Workspace, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListWorkspacesResponse::_Internal {
 public:
};

ListWorkspacesResponse::ListWorkspacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  workspaces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
}
ListWorkspacesResponse::ListWorkspacesResponse(const ListWorkspacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workspaces_(from.workspaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
}

void ListWorkspacesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWorkspacesResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListWorkspacesResponse::~ListWorkspacesResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListWorkspacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListWorkspacesResponse::ArenaDtor(void* object) {
  ListWorkspacesResponse* _this = reinterpret_cast< ListWorkspacesResponse* >(object);
  (void)_this;
}
void ListWorkspacesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListWorkspacesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWorkspacesResponse& ListWorkspacesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWorkspacesResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void ListWorkspacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workspaces_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkspacesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.studio.v1alpha.Workspace workspaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workspaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListWorkspacesResponse.next_page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWorkspacesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.Workspace workspaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workspaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_workspaces(i), target, stream);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListWorkspacesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  return target;
}

size_t ListWorkspacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.Workspace workspaces = 1;
  total_size += 1UL * this->_internal_workspaces_size();
  for (const auto& msg : this->workspaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWorkspacesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWorkspacesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWorkspacesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
    MergeFrom(*source);
  }
}

void ListWorkspacesResponse::MergeFrom(const ListWorkspacesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workspaces_.MergeFrom(from.workspaces_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListWorkspacesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWorkspacesResponse::CopyFrom(const ListWorkspacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkspacesResponse::IsInitialized() const {
  return true;
}

void ListWorkspacesResponse::InternalSwap(ListWorkspacesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  workspaces_.InternalSwap(&other->workspaces_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkspacesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShareWorkspaceRequest::_Internal {
 public:
};

ShareWorkspaceRequest::ShareWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
}
ShareWorkspaceRequest::ShareWorkspaceRequest(const ShareWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emails_(from.emails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
}

void ShareWorkspaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShareWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShareWorkspaceRequest::~ShareWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShareWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShareWorkspaceRequest::ArenaDtor(void* object) {
  ShareWorkspaceRequest* _this = reinterpret_cast< ShareWorkspaceRequest* >(object);
  (void)_this;
}
void ShareWorkspaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShareWorkspaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShareWorkspaceRequest& ShareWorkspaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShareWorkspaceRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void ShareWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emails_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareWorkspaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string emails = 2 [(.ai.inworld.options.examples) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_emails();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.emails"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShareWorkspaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string emails = 2 [(.ai.inworld.options.examples) = {
  for (int i = 0, n = this->_internal_emails_size(); i < n; i++) {
    const auto& s = this->_internal_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.emails");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  return target;
}

size_t ShareWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string emails = 2 [(.ai.inworld.options.examples) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(emails_.size());
  for (int i = 0, n = emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      emails_.Get(i));
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareWorkspaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShareWorkspaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShareWorkspaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
    MergeFrom(*source);
  }
}

void ShareWorkspaceRequest::MergeFrom(const ShareWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emails_.MergeFrom(from.emails_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ShareWorkspaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareWorkspaceRequest::CopyFrom(const ShareWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareWorkspaceRequest::IsInitialized() const {
  return true;
}

void ShareWorkspaceRequest::InternalSwap(ShareWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emails_.InternalSwap(&other->emails_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareWorkspaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateResourceNameRequest::_Internal {
 public:
};

GenerateResourceNameRequest::GenerateResourceNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
}
GenerateResourceNameRequest::GenerateResourceNameRequest(const GenerateResourceNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workspace().empty()) {
    workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workspace(), 
      GetArena());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
}

void GenerateResourceNameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateResourceNameRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  workspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
}

GenerateResourceNameRequest::~GenerateResourceNameRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateResourceNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  workspace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateResourceNameRequest::ArenaDtor(void* object) {
  GenerateResourceNameRequest* _this = reinterpret_cast< GenerateResourceNameRequest* >(object);
  (void)_this;
}
void GenerateResourceNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateResourceNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateResourceNameRequest& GenerateResourceNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateResourceNameRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void GenerateResourceNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workspace_.ClearToEmpty();
  display_name_.ClearToEmpty();
  resource_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateResourceNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string workspace = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_workspace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.workspace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.GenerateResourceNameRequest.ResourceType resource_type = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::ai::inworld::studio::v1alpha::GenerateResourceNameRequest_ResourceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateResourceNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string workspace = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->workspace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace().data(), static_cast<int>(this->_internal_workspace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.workspace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workspace(), target);
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // .ai.inworld.studio.v1alpha.GenerateResourceNameRequest.ResourceType resource_type = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resource_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  return target;
}

size_t GenerateResourceNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workspace = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->workspace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace());
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // .ai.inworld.studio.v1alpha.GenerateResourceNameRequest.ResourceType resource_type = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateResourceNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateResourceNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateResourceNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
    MergeFrom(*source);
  }
}

void GenerateResourceNameRequest::MergeFrom(const GenerateResourceNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workspace().size() > 0) {
    _internal_set_workspace(from._internal_workspace());
  }
  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
}

void GenerateResourceNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateResourceNameRequest::CopyFrom(const GenerateResourceNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateResourceNameRequest::IsInitialized() const {
  return true;
}

void GenerateResourceNameRequest::InternalSwap(GenerateResourceNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  workspace_.Swap(&other->workspace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(resource_type_, other->resource_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateResourceNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateResourceNameResponse::_Internal {
 public:
};

GenerateResourceNameResponse::GenerateResourceNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
}
GenerateResourceNameResponse::GenerateResourceNameResponse(const GenerateResourceNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
}

void GenerateResourceNameResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateResourceNameResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenerateResourceNameResponse::~GenerateResourceNameResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateResourceNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateResourceNameResponse::ArenaDtor(void* object) {
  GenerateResourceNameResponse* _this = reinterpret_cast< GenerateResourceNameResponse* >(object);
  (void)_this;
}
void GenerateResourceNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateResourceNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateResourceNameResponse& GenerateResourceNameResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateResourceNameResponse_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void GenerateResourceNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateResourceNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resource = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateResourceNameResponse.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateResourceNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateResourceNameResponse.resource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  return target;
}

size_t GenerateResourceNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateResourceNameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateResourceNameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateResourceNameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
    MergeFrom(*source);
  }
}

void GenerateResourceNameResponse::MergeFrom(const GenerateResourceNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource().size() > 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void GenerateResourceNameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateResourceNameResponse::CopyFrom(const GenerateResourceNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateResourceNameResponse::IsInitialized() const {
  return true;
}

void GenerateResourceNameResponse::InternalSwap(GenerateResourceNameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateResourceNameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetWorkspaceShareInfoRequest::_Internal {
 public:
};

GetWorkspaceShareInfoRequest::GetWorkspaceShareInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
}
GetWorkspaceShareInfoRequest::GetWorkspaceShareInfoRequest(const GetWorkspaceShareInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
}

void GetWorkspaceShareInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkspaceShareInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetWorkspaceShareInfoRequest::~GetWorkspaceShareInfoRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkspaceShareInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetWorkspaceShareInfoRequest::ArenaDtor(void* object) {
  GetWorkspaceShareInfoRequest* _this = reinterpret_cast< GetWorkspaceShareInfoRequest* >(object);
  (void)_this;
}
void GetWorkspaceShareInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkspaceShareInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkspaceShareInfoRequest& GetWorkspaceShareInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkspaceShareInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void GetWorkspaceShareInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceShareInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkspaceShareInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  return target;
}

size_t GetWorkspaceShareInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkspaceShareInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkspaceShareInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkspaceShareInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
    MergeFrom(*source);
  }
}

void GetWorkspaceShareInfoRequest::MergeFrom(const GetWorkspaceShareInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetWorkspaceShareInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkspaceShareInfoRequest::CopyFrom(const GetWorkspaceShareInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceShareInfoRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceShareInfoRequest::InternalSwap(GetWorkspaceShareInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceShareInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceShareInfo::_Internal {
 public:
};

WorkspaceShareInfo::WorkspaceShareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
}
WorkspaceShareInfo::WorkspaceShareInfo(const WorkspaceShareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emails_(from.emails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
}

void WorkspaceShareInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkspaceShareInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
}

WorkspaceShareInfo::~WorkspaceShareInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceShareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceShareInfo::ArenaDtor(void* object) {
  WorkspaceShareInfo* _this = reinterpret_cast< WorkspaceShareInfo* >(object);
  (void)_this;
}
void WorkspaceShareInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceShareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceShareInfo& WorkspaceShareInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceShareInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceShareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceShareInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string emails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_emails();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.WorkspaceShareInfo.emails"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceShareInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string emails = 1;
  for (int i = 0, n = this->_internal_emails_size(); i < n; i++) {
    const auto& s = this->_internal_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.WorkspaceShareInfo.emails");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  return target;
}

size_t WorkspaceShareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string emails = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(emails_.size());
  for (int i = 0, n = emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      emails_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceShareInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceShareInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceShareInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
    MergeFrom(*source);
  }
}

void WorkspaceShareInfo::MergeFrom(const WorkspaceShareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emails_.MergeFrom(from.emails_);
}

void WorkspaceShareInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceShareInfo::CopyFrom(const WorkspaceShareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceShareInfo::IsInitialized() const {
  return true;
}

void WorkspaceShareInfo::InternalSwap(WorkspaceShareInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emails_.InternalSwap(&other->emails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceShareInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetWorkspaceLimitInfoRequest::_Internal {
 public:
};

GetWorkspaceLimitInfoRequest::GetWorkspaceLimitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
}
GetWorkspaceLimitInfoRequest::GetWorkspaceLimitInfoRequest(const GetWorkspaceLimitInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
}

void GetWorkspaceLimitInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetWorkspaceLimitInfoRequest::~GetWorkspaceLimitInfoRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkspaceLimitInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetWorkspaceLimitInfoRequest::ArenaDtor(void* object) {
  GetWorkspaceLimitInfoRequest* _this = reinterpret_cast< GetWorkspaceLimitInfoRequest* >(object);
  (void)_this;
}
void GetWorkspaceLimitInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkspaceLimitInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkspaceLimitInfoRequest& GetWorkspaceLimitInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void GetWorkspaceLimitInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceLimitInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkspaceLimitInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  return target;
}

size_t GetWorkspaceLimitInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkspaceLimitInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkspaceLimitInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkspaceLimitInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
    MergeFrom(*source);
  }
}

void GetWorkspaceLimitInfoRequest::MergeFrom(const GetWorkspaceLimitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetWorkspaceLimitInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkspaceLimitInfoRequest::CopyFrom(const GetWorkspaceLimitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceLimitInfoRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceLimitInfoRequest::InternalSwap(GetWorkspaceLimitInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceLimitInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetRemainWorkspaceLimitInfoRequest::_Internal {
 public:
};

GetRemainWorkspaceLimitInfoRequest::GetRemainWorkspaceLimitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
}
GetRemainWorkspaceLimitInfoRequest::GetRemainWorkspaceLimitInfoRequest(const GetRemainWorkspaceLimitInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
}

void GetRemainWorkspaceLimitInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRemainWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRemainWorkspaceLimitInfoRequest::~GetRemainWorkspaceLimitInfoRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRemainWorkspaceLimitInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRemainWorkspaceLimitInfoRequest::ArenaDtor(void* object) {
  GetRemainWorkspaceLimitInfoRequest* _this = reinterpret_cast< GetRemainWorkspaceLimitInfoRequest* >(object);
  (void)_this;
}
void GetRemainWorkspaceLimitInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRemainWorkspaceLimitInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRemainWorkspaceLimitInfoRequest& GetRemainWorkspaceLimitInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRemainWorkspaceLimitInfoRequest_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void GetRemainWorkspaceLimitInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRemainWorkspaceLimitInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRemainWorkspaceLimitInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  return target;
}

size_t GetRemainWorkspaceLimitInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemainWorkspaceLimitInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemainWorkspaceLimitInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRemainWorkspaceLimitInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
    MergeFrom(*source);
  }
}

void GetRemainWorkspaceLimitInfoRequest::MergeFrom(const GetRemainWorkspaceLimitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetRemainWorkspaceLimitInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemainWorkspaceLimitInfoRequest::CopyFrom(const GetRemainWorkspaceLimitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetRemainWorkspaceLimitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemainWorkspaceLimitInfoRequest::IsInitialized() const {
  return true;
}

void GetRemainWorkspaceLimitInfoRequest::InternalSwap(GetRemainWorkspaceLimitInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRemainWorkspaceLimitInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_TextListLimit::_Internal {
 public:
};

WorkspaceLimitInfo_TextListLimit::WorkspaceLimitInfo_TextListLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
}
WorkspaceLimitInfo_TextListLimit::WorkspaceLimitInfo_TextListLimit(const WorkspaceLimitInfo_TextListLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_max_length_, &from.item_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_items_) -
    reinterpret_cast<char*>(&item_max_length_)) + sizeof(total_items_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
}

void WorkspaceLimitInfo_TextListLimit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_max_length_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_items_) -
      reinterpret_cast<char*>(&item_max_length_)) + sizeof(total_items_));
}

WorkspaceLimitInfo_TextListLimit::~WorkspaceLimitInfo_TextListLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_TextListLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceLimitInfo_TextListLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_TextListLimit* _this = reinterpret_cast< WorkspaceLimitInfo_TextListLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_TextListLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_TextListLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_TextListLimit& WorkspaceLimitInfo_TextListLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_TextListLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_TextListLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_items_) -
      reinterpret_cast<char*>(&item_max_length_)) + sizeof(total_items_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_TextListLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 item_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_TextListLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_max_length = 1;
  if (this->item_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_max_length(), target);
  }

  // int32 total_items = 2;
  if (this->total_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  return target;
}

size_t WorkspaceLimitInfo_TextListLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_max_length = 1;
  if (this->item_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_max_length());
  }

  // int32 total_items = 2;
  if (this->total_items() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_items());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_TextListLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_TextListLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_TextListLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_TextListLimit::MergeFrom(const WorkspaceLimitInfo_TextListLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_max_length() != 0) {
    _internal_set_item_max_length(from._internal_item_max_length());
  }
  if (from.total_items() != 0) {
    _internal_set_total_items(from._internal_total_items());
  }
}

void WorkspaceLimitInfo_TextListLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_TextListLimit::CopyFrom(const WorkspaceLimitInfo_TextListLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_TextListLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_TextListLimit::InternalSwap(WorkspaceLimitInfo_TextListLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_TextListLimit, total_items_)
      + sizeof(WorkspaceLimitInfo_TextListLimit::total_items_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_TextListLimit, item_max_length_)>(
          reinterpret_cast<char*>(&item_max_length_),
          reinterpret_cast<char*>(&other->item_max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_TextListLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& hobby_or_interests(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& nicknames(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& personality_adjectives(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal::hobby_or_interests(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg) {
  return *msg->hobby_or_interests_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal::nicknames(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg) {
  return *msg->nicknames_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal::personality_adjectives(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg) {
  return *msg->personality_adjectives_;
}
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
}
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hobby_or_interests()) {
    hobby_or_interests_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.hobby_or_interests_);
  } else {
    hobby_or_interests_ = nullptr;
  }
  if (from._internal_has_nicknames()) {
    nicknames_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.nicknames_);
  } else {
    nicknames_ = nullptr;
  }
  if (from._internal_has_personality_adjectives()) {
    personality_adjectives_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.personality_adjectives_);
  } else {
    personality_adjectives_ = nullptr;
  }
  ::memcpy(&core_max_length_, &from.core_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&flaws_max_length_) -
    reinterpret_cast<char*>(&core_max_length_)) + sizeof(flaws_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hobby_or_interests_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flaws_max_length_) -
      reinterpret_cast<char*>(&hobby_or_interests_)) + sizeof(flaws_max_length_));
}

WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::~WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hobby_or_interests_;
  if (this != internal_default_instance()) delete nicknames_;
  if (this != internal_default_instance()) delete personality_adjectives_;
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* _this = reinterpret_cast< WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hobby_or_interests_ != nullptr) {
    delete hobby_or_interests_;
  }
  hobby_or_interests_ = nullptr;
  if (GetArena() == nullptr && nicknames_ != nullptr) {
    delete nicknames_;
  }
  nicknames_ = nullptr;
  if (GetArena() == nullptr && personality_adjectives_ != nullptr) {
    delete personality_adjectives_;
  }
  personality_adjectives_ = nullptr;
  ::memset(&core_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flaws_max_length_) -
      reinterpret_cast<char*>(&core_max_length_)) + sizeof(flaws_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 core_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          core_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 example_dialog_max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          example_dialog_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 motivation_max_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          motivation_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 character_role_max_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          character_role_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit hobby_or_interests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hobby_or_interests(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit nicknames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nicknames(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit personality_adjectives = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_personality_adjectives(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flaws_max_length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          flaws_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 core_max_length = 1;
  if (this->core_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_core_max_length(), target);
  }

  // int32 example_dialog_max_length = 2;
  if (this->example_dialog_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_example_dialog_max_length(), target);
  }

  // int32 motivation_max_length = 3;
  if (this->motivation_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_motivation_max_length(), target);
  }

  // int32 character_role_max_length = 4;
  if (this->character_role_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_character_role_max_length(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit hobby_or_interests = 5;
  if (this->has_hobby_or_interests()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hobby_or_interests(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit nicknames = 6;
  if (this->has_nicknames()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::nicknames(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit personality_adjectives = 7;
  if (this->has_personality_adjectives()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::personality_adjectives(this), target, stream);
  }

  // int32 flaws_max_length = 8;
  if (this->flaws_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_flaws_max_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  return target;
}

size_t WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit hobby_or_interests = 5;
  if (this->has_hobby_or_interests()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hobby_or_interests_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit nicknames = 6;
  if (this->has_nicknames()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nicknames_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit personality_adjectives = 7;
  if (this->has_personality_adjectives()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *personality_adjectives_);
  }

  // int32 core_max_length = 1;
  if (this->core_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_core_max_length());
  }

  // int32 example_dialog_max_length = 2;
  if (this->example_dialog_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_example_dialog_max_length());
  }

  // int32 motivation_max_length = 3;
  if (this->motivation_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_motivation_max_length());
  }

  // int32 character_role_max_length = 4;
  if (this->character_role_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_role_max_length());
  }

  // int32 flaws_max_length = 8;
  if (this->flaws_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flaws_max_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::MergeFrom(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hobby_or_interests()) {
    _internal_mutable_hobby_or_interests()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_hobby_or_interests());
  }
  if (from.has_nicknames()) {
    _internal_mutable_nicknames()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_nicknames());
  }
  if (from.has_personality_adjectives()) {
    _internal_mutable_personality_adjectives()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_personality_adjectives());
  }
  if (from.core_max_length() != 0) {
    _internal_set_core_max_length(from._internal_core_max_length());
  }
  if (from.example_dialog_max_length() != 0) {
    _internal_set_example_dialog_max_length(from._internal_example_dialog_max_length());
  }
  if (from.motivation_max_length() != 0) {
    _internal_set_motivation_max_length(from._internal_motivation_max_length());
  }
  if (from.character_role_max_length() != 0) {
    _internal_set_character_role_max_length(from._internal_character_role_max_length());
  }
  if (from.flaws_max_length() != 0) {
    _internal_set_flaws_max_length(from._internal_flaws_max_length());
  }
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::CopyFrom(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::InternalSwap(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, flaws_max_length_)
      + sizeof(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::flaws_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, hobby_or_interests_)>(
          reinterpret_cast<char*>(&hobby_or_interests_),
          reinterpret_cast<char*>(&other->hobby_or_interests_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_CharacterLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& character_description(const WorkspaceLimitInfo_CharacterLimit* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& user_tags(const WorkspaceLimitInfo_CharacterLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit&
WorkspaceLimitInfo_CharacterLimit::_Internal::character_description(const WorkspaceLimitInfo_CharacterLimit* msg) {
  return *msg->character_description_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit::_Internal::user_tags(const WorkspaceLimitInfo_CharacterLimit* msg) {
  return *msg->user_tags_;
}
WorkspaceLimitInfo_CharacterLimit::WorkspaceLimitInfo_CharacterLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
}
WorkspaceLimitInfo_CharacterLimit::WorkspaceLimitInfo_CharacterLimit(const WorkspaceLimitInfo_CharacterLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_description()) {
    character_description_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(*from.character_description_);
  } else {
    character_description_ = nullptr;
  }
  if (from._internal_has_user_tags()) {
    user_tags_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.user_tags_);
  } else {
    user_tags_ = nullptr;
  }
  ::memcpy(&name_max_length_, &from.name_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_common_knowledge_) -
    reinterpret_cast<char*>(&name_max_length_)) + sizeof(total_common_knowledge_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
}

void WorkspaceLimitInfo_CharacterLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&character_description_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_common_knowledge_) -
      reinterpret_cast<char*>(&character_description_)) + sizeof(total_common_knowledge_));
}

WorkspaceLimitInfo_CharacterLimit::~WorkspaceLimitInfo_CharacterLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_CharacterLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete character_description_;
  if (this != internal_default_instance()) delete user_tags_;
}

void WorkspaceLimitInfo_CharacterLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_CharacterLimit* _this = reinterpret_cast< WorkspaceLimitInfo_CharacterLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_CharacterLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_CharacterLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_CharacterLimit& WorkspaceLimitInfo_CharacterLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_CharacterLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_CharacterLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && character_description_ != nullptr) {
    delete character_description_;
  }
  character_description_ = nullptr;
  if (GetArena() == nullptr && user_tags_ != nullptr) {
    delete user_tags_;
  }
  user_tags_ = nullptr;
  ::memset(&name_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_common_knowledge_) -
      reinterpret_cast<char*>(&name_max_length_)) + sizeof(total_common_knowledge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_CharacterLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 name_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit character_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_CharacterLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name_max_length = 1;
  if (this->name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_name_max_length(), target);
  }

  // int32 total_triggers = 2;
  if (this->total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_triggers(), target);
  }

  // int32 total_common_knowledge = 3;
  if (this->total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_common_knowledge(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit character_description = 4;
  if (this->has_character_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::character_description(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 5;
  if (this->has_user_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::user_tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  return target;
}

size_t WorkspaceLimitInfo_CharacterLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit character_description = 4;
  if (this->has_character_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_description_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 5;
  if (this->has_user_tags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_tags_);
  }

  // int32 name_max_length = 1;
  if (this->name_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name_max_length());
  }

  // int32 total_triggers = 2;
  if (this->total_triggers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_triggers());
  }

  // int32 total_common_knowledge = 3;
  if (this->total_common_knowledge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_common_knowledge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_CharacterLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_CharacterLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_CharacterLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_CharacterLimit::MergeFrom(const WorkspaceLimitInfo_CharacterLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_character_description()) {
    _internal_mutable_character_description()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::MergeFrom(from._internal_character_description());
  }
  if (from.has_user_tags()) {
    _internal_mutable_user_tags()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_user_tags());
  }
  if (from.name_max_length() != 0) {
    _internal_set_name_max_length(from._internal_name_max_length());
  }
  if (from.total_triggers() != 0) {
    _internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from.total_common_knowledge() != 0) {
    _internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
}

void WorkspaceLimitInfo_CharacterLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_CharacterLimit::CopyFrom(const WorkspaceLimitInfo_CharacterLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_CharacterLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_CharacterLimit::InternalSwap(WorkspaceLimitInfo_CharacterLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit, total_common_knowledge_)
      + sizeof(WorkspaceLimitInfo_CharacterLimit::total_common_knowledge_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit, character_description_)>(
          reinterpret_cast<char*>(&character_description_),
          reinterpret_cast<char*>(&other->character_description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_CharacterLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_SceneLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& user_tags(const WorkspaceLimitInfo_SceneLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_SceneLimit::_Internal::user_tags(const WorkspaceLimitInfo_SceneLimit* msg) {
  return *msg->user_tags_;
}
WorkspaceLimitInfo_SceneLimit::WorkspaceLimitInfo_SceneLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
}
WorkspaceLimitInfo_SceneLimit::WorkspaceLimitInfo_SceneLimit(const WorkspaceLimitInfo_SceneLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_tags()) {
    user_tags_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.user_tags_);
  } else {
    user_tags_ = nullptr;
  }
  ::memcpy(&description_max_length_, &from.description_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_trigger_description_max_length_) -
    reinterpret_cast<char*>(&description_max_length_)) + sizeof(scene_trigger_description_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
}

void WorkspaceLimitInfo_SceneLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_tags_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scene_trigger_description_max_length_) -
      reinterpret_cast<char*>(&user_tags_)) + sizeof(scene_trigger_description_max_length_));
}

WorkspaceLimitInfo_SceneLimit::~WorkspaceLimitInfo_SceneLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_SceneLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_tags_;
}

void WorkspaceLimitInfo_SceneLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_SceneLimit* _this = reinterpret_cast< WorkspaceLimitInfo_SceneLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_SceneLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_SceneLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_SceneLimit& WorkspaceLimitInfo_SceneLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_SceneLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_SceneLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_tags_ != nullptr) {
    delete user_tags_;
  }
  user_tags_ = nullptr;
  ::memset(&description_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_trigger_description_max_length_) -
      reinterpret_cast<char*>(&description_max_length_)) + sizeof(scene_trigger_description_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_SceneLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 description_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          description_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_triggers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 display_name_max_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_trigger_description_max_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          scene_trigger_description_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_SceneLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 description_max_length = 1;
  if (this->description_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_description_max_length(), target);
  }

  // int32 total_characters = 2;
  if (this->total_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_characters(), target);
  }

  // int32 total_triggers = 3;
  if (this->total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_triggers(), target);
  }

  // int32 display_name_max_length = 4;
  if (this->display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_display_name_max_length(), target);
  }

  // int32 total_common_knowledge = 5;
  if (this->total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_common_knowledge(), target);
  }

  // int32 scene_trigger_description_max_length = 6;
  if (this->scene_trigger_description_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_scene_trigger_description_max_length(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 7;
  if (this->has_user_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::user_tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  return target;
}

size_t WorkspaceLimitInfo_SceneLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 7;
  if (this->has_user_tags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_tags_);
  }

  // int32 description_max_length = 1;
  if (this->description_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_description_max_length());
  }

  // int32 total_characters = 2;
  if (this->total_characters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_characters());
  }

  // int32 total_triggers = 3;
  if (this->total_triggers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_triggers());
  }

  // int32 display_name_max_length = 4;
  if (this->display_name_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_display_name_max_length());
  }

  // int32 total_common_knowledge = 5;
  if (this->total_common_knowledge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_common_knowledge());
  }

  // int32 scene_trigger_description_max_length = 6;
  if (this->scene_trigger_description_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_trigger_description_max_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_SceneLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_SceneLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_SceneLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_SceneLimit::MergeFrom(const WorkspaceLimitInfo_SceneLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_tags()) {
    _internal_mutable_user_tags()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_user_tags());
  }
  if (from.description_max_length() != 0) {
    _internal_set_description_max_length(from._internal_description_max_length());
  }
  if (from.total_characters() != 0) {
    _internal_set_total_characters(from._internal_total_characters());
  }
  if (from.total_triggers() != 0) {
    _internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from.display_name_max_length() != 0) {
    _internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
  if (from.total_common_knowledge() != 0) {
    _internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
  if (from.scene_trigger_description_max_length() != 0) {
    _internal_set_scene_trigger_description_max_length(from._internal_scene_trigger_description_max_length());
  }
}

void WorkspaceLimitInfo_SceneLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_SceneLimit::CopyFrom(const WorkspaceLimitInfo_SceneLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_SceneLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_SceneLimit::InternalSwap(WorkspaceLimitInfo_SceneLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_SceneLimit, scene_trigger_description_max_length_)
      + sizeof(WorkspaceLimitInfo_SceneLimit::scene_trigger_description_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_SceneLimit, user_tags_)>(
          reinterpret_cast<char*>(&user_tags_),
          reinterpret_cast<char*>(&other->user_tags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_SceneLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_WorkspaceLimit::_Internal {
 public:
};

WorkspaceLimitInfo_WorkspaceLimit::WorkspaceLimitInfo_WorkspaceLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
}
WorkspaceLimitInfo_WorkspaceLimit::WorkspaceLimitInfo_WorkspaceLimit(const WorkspaceLimitInfo_WorkspaceLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&display_name_max_length_, &from.display_name_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_narrative_graphs_) -
    reinterpret_cast<char*>(&display_name_max_length_)) + sizeof(total_narrative_graphs_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
}

void WorkspaceLimitInfo_WorkspaceLimit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&display_name_max_length_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_narrative_graphs_) -
      reinterpret_cast<char*>(&display_name_max_length_)) + sizeof(total_narrative_graphs_));
}

WorkspaceLimitInfo_WorkspaceLimit::~WorkspaceLimitInfo_WorkspaceLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_WorkspaceLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceLimitInfo_WorkspaceLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_WorkspaceLimit* _this = reinterpret_cast< WorkspaceLimitInfo_WorkspaceLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_WorkspaceLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_WorkspaceLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_WorkspaceLimit& WorkspaceLimitInfo_WorkspaceLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_WorkspaceLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_WorkspaceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&display_name_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_narrative_graphs_) -
      reinterpret_cast<char*>(&display_name_max_length_)) + sizeof(total_narrative_graphs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_WorkspaceLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 display_name_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_scenes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_scenes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_triggers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_voices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_voices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_narrative_graphs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_narrative_graphs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_WorkspaceLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 display_name_max_length = 1;
  if (this->display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_name_max_length(), target);
  }

  // int32 total_characters = 2;
  if (this->total_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_characters(), target);
  }

  // int32 total_scenes = 3;
  if (this->total_scenes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_scenes(), target);
  }

  // int32 total_triggers = 4;
  if (this->total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_triggers(), target);
  }

  // int32 total_voices = 5;
  if (this->total_voices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_voices(), target);
  }

  // int32 total_common_knowledge = 6;
  if (this->total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_common_knowledge(), target);
  }

  // int32 total_narrative_graphs = 7;
  if (this->total_narrative_graphs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_narrative_graphs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  return target;
}

size_t WorkspaceLimitInfo_WorkspaceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 display_name_max_length = 1;
  if (this->display_name_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_display_name_max_length());
  }

  // int32 total_characters = 2;
  if (this->total_characters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_characters());
  }

  // int32 total_scenes = 3;
  if (this->total_scenes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_scenes());
  }

  // int32 total_triggers = 4;
  if (this->total_triggers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_triggers());
  }

  // int32 total_voices = 5;
  if (this->total_voices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_voices());
  }

  // int32 total_common_knowledge = 6;
  if (this->total_common_knowledge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_common_knowledge());
  }

  // int32 total_narrative_graphs = 7;
  if (this->total_narrative_graphs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_narrative_graphs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_WorkspaceLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_WorkspaceLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_WorkspaceLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_WorkspaceLimit::MergeFrom(const WorkspaceLimitInfo_WorkspaceLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_name_max_length() != 0) {
    _internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
  if (from.total_characters() != 0) {
    _internal_set_total_characters(from._internal_total_characters());
  }
  if (from.total_scenes() != 0) {
    _internal_set_total_scenes(from._internal_total_scenes());
  }
  if (from.total_triggers() != 0) {
    _internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from.total_voices() != 0) {
    _internal_set_total_voices(from._internal_total_voices());
  }
  if (from.total_common_knowledge() != 0) {
    _internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
  if (from.total_narrative_graphs() != 0) {
    _internal_set_total_narrative_graphs(from._internal_total_narrative_graphs());
  }
}

void WorkspaceLimitInfo_WorkspaceLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_WorkspaceLimit::CopyFrom(const WorkspaceLimitInfo_WorkspaceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_WorkspaceLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_WorkspaceLimit::InternalSwap(WorkspaceLimitInfo_WorkspaceLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_WorkspaceLimit, total_narrative_graphs_)
      + sizeof(WorkspaceLimitInfo_WorkspaceLimit::total_narrative_graphs_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_WorkspaceLimit, display_name_max_length_)>(
          reinterpret_cast<char*>(&display_name_max_length_),
          reinterpret_cast<char*>(&other->display_name_max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_WorkspaceLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_BillingAccountLimit::_Internal {
 public:
};

WorkspaceLimitInfo_BillingAccountLimit::WorkspaceLimitInfo_BillingAccountLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
}
WorkspaceLimitInfo_BillingAccountLimit::WorkspaceLimitInfo_BillingAccountLimit(const WorkspaceLimitInfo_BillingAccountLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_workspaces_ = from.total_workspaces_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
}

void WorkspaceLimitInfo_BillingAccountLimit::SharedCtor() {
  total_workspaces_ = 0;
}

WorkspaceLimitInfo_BillingAccountLimit::~WorkspaceLimitInfo_BillingAccountLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_BillingAccountLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceLimitInfo_BillingAccountLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_BillingAccountLimit* _this = reinterpret_cast< WorkspaceLimitInfo_BillingAccountLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_BillingAccountLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_BillingAccountLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_BillingAccountLimit& WorkspaceLimitInfo_BillingAccountLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_BillingAccountLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_BillingAccountLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  total_workspaces_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_BillingAccountLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_workspaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_workspaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_BillingAccountLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_workspaces = 1;
  if (this->total_workspaces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_workspaces(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  return target;
}

size_t WorkspaceLimitInfo_BillingAccountLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_workspaces = 1;
  if (this->total_workspaces() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_workspaces());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_BillingAccountLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_BillingAccountLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_BillingAccountLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_BillingAccountLimit::MergeFrom(const WorkspaceLimitInfo_BillingAccountLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_workspaces() != 0) {
    _internal_set_total_workspaces(from._internal_total_workspaces());
  }
}

void WorkspaceLimitInfo_BillingAccountLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_BillingAccountLimit::CopyFrom(const WorkspaceLimitInfo_BillingAccountLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_BillingAccountLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_BillingAccountLimit::InternalSwap(WorkspaceLimitInfo_BillingAccountLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(total_workspaces_, other->total_workspaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_BillingAccountLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_CommonKnowledgeLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& memory_records(const WorkspaceLimitInfo_CommonKnowledgeLimit* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& user_tags(const WorkspaceLimitInfo_CommonKnowledgeLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CommonKnowledgeLimit::_Internal::memory_records(const WorkspaceLimitInfo_CommonKnowledgeLimit* msg) {
  return *msg->memory_records_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CommonKnowledgeLimit::_Internal::user_tags(const WorkspaceLimitInfo_CommonKnowledgeLimit* msg) {
  return *msg->user_tags_;
}
WorkspaceLimitInfo_CommonKnowledgeLimit::WorkspaceLimitInfo_CommonKnowledgeLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
}
WorkspaceLimitInfo_CommonKnowledgeLimit::WorkspaceLimitInfo_CommonKnowledgeLimit(const WorkspaceLimitInfo_CommonKnowledgeLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_memory_records()) {
    memory_records_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.memory_records_);
  } else {
    memory_records_ = nullptr;
  }
  if (from._internal_has_user_tags()) {
    user_tags_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from.user_tags_);
  } else {
    user_tags_ = nullptr;
  }
  ::memcpy(&display_name_max_length_, &from.display_name_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&description_max_length_) -
    reinterpret_cast<char*>(&display_name_max_length_)) + sizeof(description_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&memory_records_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&description_max_length_) -
      reinterpret_cast<char*>(&memory_records_)) + sizeof(description_max_length_));
}

WorkspaceLimitInfo_CommonKnowledgeLimit::~WorkspaceLimitInfo_CommonKnowledgeLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete memory_records_;
  if (this != internal_default_instance()) delete user_tags_;
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_CommonKnowledgeLimit* _this = reinterpret_cast< WorkspaceLimitInfo_CommonKnowledgeLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_CommonKnowledgeLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_CommonKnowledgeLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_CommonKnowledgeLimit& WorkspaceLimitInfo_CommonKnowledgeLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_CommonKnowledgeLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_CommonKnowledgeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && memory_records_ != nullptr) {
    delete memory_records_;
  }
  memory_records_ = nullptr;
  if (GetArena() == nullptr && user_tags_ != nullptr) {
    delete user_tags_;
  }
  user_tags_ = nullptr;
  ::memset(&display_name_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&description_max_length_) -
      reinterpret_cast<char*>(&display_name_max_length_)) + sizeof(description_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_CommonKnowledgeLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 display_name_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 description_max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          description_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit memory_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_CommonKnowledgeLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 display_name_max_length = 1;
  if (this->display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_name_max_length(), target);
  }

  // int32 description_max_length = 2;
  if (this->description_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_description_max_length(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit memory_records = 3;
  if (this->has_memory_records()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::memory_records(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 4;
  if (this->has_user_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::user_tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  return target;
}

size_t WorkspaceLimitInfo_CommonKnowledgeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit memory_records = 3;
  if (this->has_memory_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_records_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit user_tags = 4;
  if (this->has_user_tags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_tags_);
  }

  // int32 display_name_max_length = 1;
  if (this->display_name_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_display_name_max_length());
  }

  // int32 description_max_length = 2;
  if (this->description_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_description_max_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_CommonKnowledgeLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_CommonKnowledgeLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::MergeFrom(const WorkspaceLimitInfo_CommonKnowledgeLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_memory_records()) {
    _internal_mutable_memory_records()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_memory_records());
  }
  if (from.has_user_tags()) {
    _internal_mutable_user_tags()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(from._internal_user_tags());
  }
  if (from.display_name_max_length() != 0) {
    _internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
  if (from.description_max_length() != 0) {
    _internal_set_description_max_length(from._internal_description_max_length());
  }
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::CopyFrom(const WorkspaceLimitInfo_CommonKnowledgeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_CommonKnowledgeLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::InternalSwap(WorkspaceLimitInfo_CommonKnowledgeLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CommonKnowledgeLimit, description_max_length_)
      + sizeof(WorkspaceLimitInfo_CommonKnowledgeLimit::description_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CommonKnowledgeLimit, memory_records_)>(
          reinterpret_cast<char*>(&memory_records_),
          reinterpret_cast<char*>(&other->memory_records_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_CommonKnowledgeLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_AutoGeneratorLimit::_Internal {
 public:
};

WorkspaceLimitInfo_AutoGeneratorLimit::WorkspaceLimitInfo_AutoGeneratorLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
}
WorkspaceLimitInfo_AutoGeneratorLimit::WorkspaceLimitInfo_AutoGeneratorLimit(const WorkspaceLimitInfo_AutoGeneratorLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&notes_max_length_, &from.notes_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_files_) -
    reinterpret_cast<char*>(&notes_max_length_)) + sizeof(total_files_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
}

void WorkspaceLimitInfo_AutoGeneratorLimit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&notes_max_length_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_files_) -
      reinterpret_cast<char*>(&notes_max_length_)) + sizeof(total_files_));
}

WorkspaceLimitInfo_AutoGeneratorLimit::~WorkspaceLimitInfo_AutoGeneratorLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_AutoGeneratorLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceLimitInfo_AutoGeneratorLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_AutoGeneratorLimit* _this = reinterpret_cast< WorkspaceLimitInfo_AutoGeneratorLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_AutoGeneratorLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_AutoGeneratorLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_AutoGeneratorLimit& WorkspaceLimitInfo_AutoGeneratorLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_AutoGeneratorLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_AutoGeneratorLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&notes_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_files_) -
      reinterpret_cast<char*>(&notes_max_length_)) + sizeof(total_files_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_AutoGeneratorLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 notes_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          notes_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 outline_max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outline_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_forks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_forks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_AutoGeneratorLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 notes_max_length = 1;
  if (this->notes_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_notes_max_length(), target);
  }

  // int32 outline_max_length = 2;
  if (this->outline_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_outline_max_length(), target);
  }

  // int32 total_forks = 3;
  if (this->total_forks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_forks(), target);
  }

  // int32 total_files = 4;
  if (this->total_files() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_files(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  return target;
}

size_t WorkspaceLimitInfo_AutoGeneratorLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 notes_max_length = 1;
  if (this->notes_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_notes_max_length());
  }

  // int32 outline_max_length = 2;
  if (this->outline_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outline_max_length());
  }

  // int32 total_forks = 3;
  if (this->total_forks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_forks());
  }

  // int32 total_files = 4;
  if (this->total_files() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_files());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_AutoGeneratorLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_AutoGeneratorLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_AutoGeneratorLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_AutoGeneratorLimit::MergeFrom(const WorkspaceLimitInfo_AutoGeneratorLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notes_max_length() != 0) {
    _internal_set_notes_max_length(from._internal_notes_max_length());
  }
  if (from.outline_max_length() != 0) {
    _internal_set_outline_max_length(from._internal_outline_max_length());
  }
  if (from.total_forks() != 0) {
    _internal_set_total_forks(from._internal_total_forks());
  }
  if (from.total_files() != 0) {
    _internal_set_total_files(from._internal_total_files());
  }
}

void WorkspaceLimitInfo_AutoGeneratorLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_AutoGeneratorLimit::CopyFrom(const WorkspaceLimitInfo_AutoGeneratorLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_AutoGeneratorLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_AutoGeneratorLimit::InternalSwap(WorkspaceLimitInfo_AutoGeneratorLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_AutoGeneratorLimit, total_files_)
      + sizeof(WorkspaceLimitInfo_AutoGeneratorLimit::total_files_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_AutoGeneratorLimit, notes_max_length_)>(
          reinterpret_cast<char*>(&notes_max_length_),
          reinterpret_cast<char*>(&other->notes_max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_AutoGeneratorLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_NarrativeGraphLimit::_Internal {
 public:
};

WorkspaceLimitInfo_NarrativeGraphLimit::WorkspaceLimitInfo_NarrativeGraphLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
}
WorkspaceLimitInfo_NarrativeGraphLimit::WorkspaceLimitInfo_NarrativeGraphLimit(const WorkspaceLimitInfo_NarrativeGraphLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_nodes_, &from.total_nodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_name_max_length_) -
    reinterpret_cast<char*>(&total_nodes_)) + sizeof(display_name_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
}

void WorkspaceLimitInfo_NarrativeGraphLimit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&display_name_max_length_) -
      reinterpret_cast<char*>(&total_nodes_)) + sizeof(display_name_max_length_));
}

WorkspaceLimitInfo_NarrativeGraphLimit::~WorkspaceLimitInfo_NarrativeGraphLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_NarrativeGraphLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceLimitInfo_NarrativeGraphLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_NarrativeGraphLimit* _this = reinterpret_cast< WorkspaceLimitInfo_NarrativeGraphLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_NarrativeGraphLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_NarrativeGraphLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_NarrativeGraphLimit& WorkspaceLimitInfo_NarrativeGraphLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_NarrativeGraphLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_NarrativeGraphLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_name_max_length_) -
      reinterpret_cast<char*>(&total_nodes_)) + sizeof(display_name_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_NarrativeGraphLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_connections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 display_name_max_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_NarrativeGraphLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_nodes = 1;
  if (this->total_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_nodes(), target);
  }

  // int32 total_connections = 2;
  if (this->total_connections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_connections(), target);
  }

  // int32 display_name_max_length = 3;
  if (this->display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_display_name_max_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  return target;
}

size_t WorkspaceLimitInfo_NarrativeGraphLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_nodes = 1;
  if (this->total_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_nodes());
  }

  // int32 total_connections = 2;
  if (this->total_connections() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_connections());
  }

  // int32 display_name_max_length = 3;
  if (this->display_name_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_display_name_max_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_NarrativeGraphLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_NarrativeGraphLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_NarrativeGraphLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_NarrativeGraphLimit::MergeFrom(const WorkspaceLimitInfo_NarrativeGraphLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_nodes() != 0) {
    _internal_set_total_nodes(from._internal_total_nodes());
  }
  if (from.total_connections() != 0) {
    _internal_set_total_connections(from._internal_total_connections());
  }
  if (from.display_name_max_length() != 0) {
    _internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
}

void WorkspaceLimitInfo_NarrativeGraphLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_NarrativeGraphLimit::CopyFrom(const WorkspaceLimitInfo_NarrativeGraphLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_NarrativeGraphLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_NarrativeGraphLimit::InternalSwap(WorkspaceLimitInfo_NarrativeGraphLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_NarrativeGraphLimit, display_name_max_length_)
      + sizeof(WorkspaceLimitInfo_NarrativeGraphLimit::display_name_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_NarrativeGraphLimit, total_nodes_)>(
          reinterpret_cast<char*>(&total_nodes_),
          reinterpret_cast<char*>(&other->total_nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_NarrativeGraphLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo_BatchLimit::_Internal {
 public:
};

WorkspaceLimitInfo_BatchLimit::WorkspaceLimitInfo_BatchLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
}
WorkspaceLimitInfo_BatchLimit::WorkspaceLimitInfo_BatchLimit(const WorkspaceLimitInfo_BatchLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_common_, &from.total_common_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_deploys_) -
    reinterpret_cast<char*>(&total_common_)) + sizeof(total_deploys_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
}

void WorkspaceLimitInfo_BatchLimit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_deploys_) -
      reinterpret_cast<char*>(&total_common_)) + sizeof(total_deploys_));
}

WorkspaceLimitInfo_BatchLimit::~WorkspaceLimitInfo_BatchLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo_BatchLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkspaceLimitInfo_BatchLimit::ArenaDtor(void* object) {
  WorkspaceLimitInfo_BatchLimit* _this = reinterpret_cast< WorkspaceLimitInfo_BatchLimit* >(object);
  (void)_this;
}
void WorkspaceLimitInfo_BatchLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo_BatchLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo_BatchLimit& WorkspaceLimitInfo_BatchLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_BatchLimit_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo_BatchLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_deploys_) -
      reinterpret_cast<char*>(&total_common_)) + sizeof(total_deploys_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_BatchLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_common = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_common_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_image_uploads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_image_uploads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_deploys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_deploys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo_BatchLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_common = 3;
  if (this->total_common() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_common(), target);
  }

  // int32 total_image_uploads = 4;
  if (this->total_image_uploads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_image_uploads(), target);
  }

  // int32 total_deploys = 5;
  if (this->total_deploys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_deploys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  return target;
}

size_t WorkspaceLimitInfo_BatchLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_common = 3;
  if (this->total_common() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_common());
  }

  // int32 total_image_uploads = 4;
  if (this->total_image_uploads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_image_uploads());
  }

  // int32 total_deploys = 5;
  if (this->total_deploys() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_deploys());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo_BatchLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo_BatchLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo_BatchLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo_BatchLimit::MergeFrom(const WorkspaceLimitInfo_BatchLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_common() != 0) {
    _internal_set_total_common(from._internal_total_common());
  }
  if (from.total_image_uploads() != 0) {
    _internal_set_total_image_uploads(from._internal_total_image_uploads());
  }
  if (from.total_deploys() != 0) {
    _internal_set_total_deploys(from._internal_total_deploys());
  }
}

void WorkspaceLimitInfo_BatchLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo_BatchLimit::CopyFrom(const WorkspaceLimitInfo_BatchLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_BatchLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_BatchLimit::InternalSwap(WorkspaceLimitInfo_BatchLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_BatchLimit, total_deploys_)
      + sizeof(WorkspaceLimitInfo_BatchLimit::total_deploys_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_BatchLimit, total_common_)>(
          reinterpret_cast<char*>(&total_common_),
          reinterpret_cast<char*>(&other->total_common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_BatchLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkspaceLimitInfo::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit& character(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit& scene(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit& workspace(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit& billing_account(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit& common_knowledge(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit& auto_generator(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit& narrative_graph(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit& batch(const WorkspaceLimitInfo* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit&
WorkspaceLimitInfo::_Internal::character(const WorkspaceLimitInfo* msg) {
  return *msg->character_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit&
WorkspaceLimitInfo::_Internal::scene(const WorkspaceLimitInfo* msg) {
  return *msg->scene_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit&
WorkspaceLimitInfo::_Internal::workspace(const WorkspaceLimitInfo* msg) {
  return *msg->workspace_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit&
WorkspaceLimitInfo::_Internal::billing_account(const WorkspaceLimitInfo* msg) {
  return *msg->billing_account_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit&
WorkspaceLimitInfo::_Internal::common_knowledge(const WorkspaceLimitInfo* msg) {
  return *msg->common_knowledge_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit&
WorkspaceLimitInfo::_Internal::auto_generator(const WorkspaceLimitInfo* msg) {
  return *msg->auto_generator_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit&
WorkspaceLimitInfo::_Internal::narrative_graph(const WorkspaceLimitInfo* msg) {
  return *msg->narrative_graph_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit&
WorkspaceLimitInfo::_Internal::batch(const WorkspaceLimitInfo* msg) {
  return *msg->batch_;
}
WorkspaceLimitInfo::WorkspaceLimitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
}
WorkspaceLimitInfo::WorkspaceLimitInfo(const WorkspaceLimitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    character_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit(*from.character_);
  } else {
    character_ = nullptr;
  }
  if (from._internal_has_scene()) {
    scene_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit(*from.scene_);
  } else {
    scene_ = nullptr;
  }
  if (from._internal_has_workspace()) {
    workspace_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit(*from.workspace_);
  } else {
    workspace_ = nullptr;
  }
  if (from._internal_has_billing_account()) {
    billing_account_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit(*from.billing_account_);
  } else {
    billing_account_ = nullptr;
  }
  if (from._internal_has_common_knowledge()) {
    common_knowledge_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit(*from.common_knowledge_);
  } else {
    common_knowledge_ = nullptr;
  }
  if (from._internal_has_auto_generator()) {
    auto_generator_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit(*from.auto_generator_);
  } else {
    auto_generator_ = nullptr;
  }
  if (from._internal_has_narrative_graph()) {
    narrative_graph_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit(*from.narrative_graph_);
  } else {
    narrative_graph_ = nullptr;
  }
  if (from._internal_has_batch()) {
    batch_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit(*from.batch_);
  } else {
    batch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
}

void WorkspaceLimitInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkspaceLimitInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&batch_) -
      reinterpret_cast<char*>(&character_)) + sizeof(batch_));
}

WorkspaceLimitInfo::~WorkspaceLimitInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkspaceLimitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete character_;
  if (this != internal_default_instance()) delete scene_;
  if (this != internal_default_instance()) delete workspace_;
  if (this != internal_default_instance()) delete billing_account_;
  if (this != internal_default_instance()) delete common_knowledge_;
  if (this != internal_default_instance()) delete auto_generator_;
  if (this != internal_default_instance()) delete narrative_graph_;
  if (this != internal_default_instance()) delete batch_;
}

void WorkspaceLimitInfo::ArenaDtor(void* object) {
  WorkspaceLimitInfo* _this = reinterpret_cast< WorkspaceLimitInfo* >(object);
  (void)_this;
}
void WorkspaceLimitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkspaceLimitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkspaceLimitInfo& WorkspaceLimitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkspaceLimitInfo_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto.base);
  return *internal_default_instance();
}


void WorkspaceLimitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  if (GetArena() == nullptr && scene_ != nullptr) {
    delete scene_;
  }
  scene_ = nullptr;
  if (GetArena() == nullptr && workspace_ != nullptr) {
    delete workspace_;
  }
  workspace_ = nullptr;
  if (GetArena() == nullptr && billing_account_ != nullptr) {
    delete billing_account_;
  }
  billing_account_ = nullptr;
  if (GetArena() == nullptr && common_knowledge_ != nullptr) {
    delete common_knowledge_;
  }
  common_knowledge_ = nullptr;
  if (GetArena() == nullptr && auto_generator_ != nullptr) {
    delete auto_generator_;
  }
  auto_generator_ = nullptr;
  if (GetArena() == nullptr && narrative_graph_ != nullptr) {
    delete narrative_graph_;
  }
  narrative_graph_ = nullptr;
  if (GetArena() == nullptr && batch_ != nullptr) {
    delete batch_;
  }
  batch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit workspace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit billing_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit common_knowledge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_knowledge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit auto_generator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit narrative_graph = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_narrative_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit batch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkspaceLimitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit character = 1;
  if (this->has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::character(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit scene = 2;
  if (this->has_scene()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scene(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit workspace = 3;
  if (this->has_workspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::workspace(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit billing_account = 4;
  if (this->has_billing_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::billing_account(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit common_knowledge = 5;
  if (this->has_common_knowledge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::common_knowledge(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit auto_generator = 6;
  if (this->has_auto_generator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::auto_generator(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit narrative_graph = 7;
  if (this->has_narrative_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::narrative_graph(this), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit batch = 8;
  if (this->has_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::batch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  return target;
}

size_t WorkspaceLimitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit character = 1;
  if (this->has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit scene = 2;
  if (this->has_scene()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scene_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit workspace = 3;
  if (this->has_workspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workspace_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit billing_account = 4;
  if (this->has_billing_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billing_account_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit common_knowledge = 5;
  if (this->has_common_knowledge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_knowledge_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.AutoGeneratorLimit auto_generator = 6;
  if (this->has_auto_generator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_generator_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.NarrativeGraphLimit narrative_graph = 7;
  if (this->has_narrative_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *narrative_graph_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BatchLimit batch = 8;
  if (this->has_batch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batch_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceLimitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkspaceLimitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkspaceLimitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
    MergeFrom(*source);
  }
}

void WorkspaceLimitInfo::MergeFrom(const WorkspaceLimitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_character()) {
    _internal_mutable_character()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit::MergeFrom(from._internal_character());
  }
  if (from.has_scene()) {
    _internal_mutable_scene()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit::MergeFrom(from._internal_scene());
  }
  if (from.has_workspace()) {
    _internal_mutable_workspace()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit::MergeFrom(from._internal_workspace());
  }
  if (from.has_billing_account()) {
    _internal_mutable_billing_account()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit::MergeFrom(from._internal_billing_account());
  }
  if (from.has_common_knowledge()) {
    _internal_mutable_common_knowledge()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit::MergeFrom(from._internal_common_knowledge());
  }
  if (from.has_auto_generator()) {
    _internal_mutable_auto_generator()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit::MergeFrom(from._internal_auto_generator());
  }
  if (from.has_narrative_graph()) {
    _internal_mutable_narrative_graph()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit::MergeFrom(from._internal_narrative_graph());
  }
  if (from.has_batch()) {
    _internal_mutable_batch()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit::MergeFrom(from._internal_batch());
  }
}

void WorkspaceLimitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkspaceLimitInfo::CopyFrom(const WorkspaceLimitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo::InternalSwap(WorkspaceLimitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo, batch_)
      + sizeof(WorkspaceLimitInfo::batch_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::CloneWorkspaceRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::CloneWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::CloneWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ImpressionEventRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ImpressionEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ImpressionEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::Workspace_Meta* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::Workspace_Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::Workspace_Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::Workspace* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::Workspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::Workspace >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetRemainWorkspaceLimitInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_AutoGeneratorLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_NarrativeGraphLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BatchLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
