// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/triggers.proto
#ifndef GRPC_ai_2finworld_2fstudio_2fv1alpha_2ftriggers_2eproto__INCLUDED
#define GRPC_ai_2finworld_2fstudio_2fv1alpha_2ftriggers_2eproto__INCLUDED

#include "ai/inworld/studio/v1alpha/triggers.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// Service for triggers management.
class Triggers final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.Triggers";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPC to get one trigger by name.
    virtual ::grpc::Status GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>> AsyncGetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>>(AsyncGetTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>> PrepareAsyncGetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>>(PrepareAsyncGetTriggerRaw(context, request, cq));
    }
    // RPC to get the list of triggers.
    virtual ::grpc::Status ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListTriggersResponse>> AsyncListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListTriggersResponse>>(AsyncListTriggersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListTriggersResponse>> PrepareAsyncListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListTriggersResponse>>(PrepareAsyncListTriggersRaw(context, request, cq));
    }
    // RPC to update a trigger.
    virtual ::grpc::Status UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>> AsyncUpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>>(AsyncUpdateTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>> PrepareAsyncUpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>>(PrepareAsyncUpdateTriggerRaw(context, request, cq));
    }
    // RPC to create a trigger.
    virtual ::grpc::Status CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>> AsyncCreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>>(AsyncCreateTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>> PrepareAsyncCreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>>(PrepareAsyncCreateTriggerRaw(context, request, cq));
    }
    // RPC to delete a trigger.
    virtual ::grpc::Status DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteTriggerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RPC to get one trigger by name.
      virtual void GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to get the list of triggers.
      virtual void ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to update a trigger.
      virtual void UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to create a trigger.
      virtual void CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to delete a trigger.
      virtual void DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>* AsyncGetTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>* PrepareAsyncGetTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* AsyncListTriggersRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* PrepareAsyncListTriggersRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>* AsyncUpdateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>* PrepareAsyncUpdateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>* AsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Trigger>* PrepareAsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>> AsyncGetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>>(AsyncGetTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>> PrepareAsyncGetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>>(PrepareAsyncGetTriggerRaw(context, request, cq));
    }
    ::grpc::Status ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>> AsyncListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>>(AsyncListTriggersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>> PrepareAsyncListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>>(PrepareAsyncListTriggersRaw(context, request, cq));
    }
    ::grpc::Status UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>> AsyncUpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>>(AsyncUpdateTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>> PrepareAsyncUpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>>(PrepareAsyncUpdateTriggerRaw(context, request, cq));
    }
    ::grpc::Status CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::ai::inworld::studio::v1alpha::Trigger* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>> AsyncCreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>>(AsyncCreateTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>> PrepareAsyncCreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>>(PrepareAsyncCreateTriggerRaw(context, request, cq));
    }
    ::grpc::Status DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTriggerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteTriggerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)>) override;
      void GetTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTriggers(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)>) override;
      void UpdateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, std::function<void(::grpc::Status)>) override;
      void CreateTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteTrigger(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* AsyncGetTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* PrepareAsyncGetTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* AsyncListTriggersRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* PrepareAsyncListTriggersRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* AsyncUpdateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* PrepareAsyncUpdateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* AsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Trigger>* PrepareAsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteTriggerRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTrigger_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTriggers_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTrigger_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTrigger_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTrigger_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPC to get one trigger by name.
    virtual ::grpc::Status GetTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response);
    // RPC to get the list of triggers.
    virtual ::grpc::Status ListTriggers(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response);
    // RPC to update a trigger.
    virtual ::grpc::Status UpdateTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response);
    // RPC to create a trigger.
    virtual ::grpc::Status CreateTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response);
    // RPC to delete a trigger.
    virtual ::grpc::Status DeleteTrigger(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTrigger() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrigger(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Trigger>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTriggers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTriggers(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTriggers(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ListTriggersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTrigger() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTrigger(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Trigger>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTrigger() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTrigger(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Trigger>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTrigger() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTrigger(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTrigger<WithAsyncMethod_ListTriggers<WithAsyncMethod_UpdateTrigger<WithAsyncMethod_CreateTrigger<WithAsyncMethod_DeleteTrigger<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTrigger() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response) { return this->GetTrigger(context, request, response); }));}
    void SetMessageAllocatorFor_GetTrigger(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTriggers() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* request, ::ai::inworld::studio::v1alpha::ListTriggersResponse* response) { return this->ListTriggers(context, request, response); }));}
    void SetMessageAllocatorFor_ListTriggers(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTriggers(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTriggers(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTrigger() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response) { return this->UpdateTrigger(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTrigger(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTrigger() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* request, ::ai::inworld::studio::v1alpha::Trigger* response) { return this->CreateTrigger(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTrigger(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTrigger() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* request, ::google::protobuf::Empty* response) { return this->DeleteTrigger(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTrigger(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTrigger<WithCallbackMethod_ListTriggers<WithCallbackMethod_UpdateTrigger<WithCallbackMethod_CreateTrigger<WithCallbackMethod_DeleteTrigger<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTrigger() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTriggers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTriggers(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTrigger() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTrigger() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTrigger() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTrigger() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrigger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTriggers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTriggers(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTriggers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTrigger() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTrigger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTrigger() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTrigger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTrigger() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTrigger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTrigger() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTrigger(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTriggers() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTriggers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTriggers(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTriggers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTrigger() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTrigger(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTrigger() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTrigger(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTrigger() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTrigger(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTrigger(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTrigger() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>* streamer) {
                       return this->StreamedGetTrigger(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTrigger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetTriggerRequest,::ai::inworld::studio::v1alpha::Trigger>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTriggers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ListTriggersRequest, ::ai::inworld::studio::v1alpha::ListTriggersResponse>* streamer) {
                       return this->StreamedListTriggers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTriggers(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListTriggersRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTriggers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ListTriggersRequest,::ai::inworld::studio::v1alpha::ListTriggersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTrigger() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::UpdateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>* streamer) {
                       return this->StreamedUpdateTrigger(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTrigger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::UpdateTriggerRequest,::ai::inworld::studio::v1alpha::Trigger>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTrigger() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::CreateTriggerRequest, ::ai::inworld::studio::v1alpha::Trigger>* streamer) {
                       return this->StreamedCreateTrigger(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateTriggerRequest* /*request*/, ::ai::inworld::studio::v1alpha::Trigger* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTrigger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::CreateTriggerRequest,::ai::inworld::studio::v1alpha::Trigger>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTrigger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTrigger() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeleteTriggerRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteTrigger(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTrigger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTrigger(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteTriggerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTrigger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeleteTriggerRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTrigger<WithStreamedUnaryMethod_ListTriggers<WithStreamedUnaryMethod_UpdateTrigger<WithStreamedUnaryMethod_CreateTrigger<WithStreamedUnaryMethod_DeleteTrigger<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTrigger<WithStreamedUnaryMethod_ListTriggers<WithStreamedUnaryMethod_UpdateTrigger<WithStreamedUnaryMethod_CreateTrigger<WithStreamedUnaryMethod_DeleteTrigger<Service > > > > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_ai_2finworld_2fstudio_2fv1alpha_2ftriggers_2eproto__INCLUDED
