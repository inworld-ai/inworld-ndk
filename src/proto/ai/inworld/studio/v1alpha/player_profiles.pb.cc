// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/player_profiles.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/player_profiles.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
PROTOBUF_CONSTEXPR PlayerProfile_PlayerField::PlayerProfile_PlayerField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_default_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerProfile_PlayerFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerProfile_PlayerFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerProfile_PlayerFieldDefaultTypeInternal() {}
  union {
    PlayerProfile_PlayerField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerProfile_PlayerFieldDefaultTypeInternal _PlayerProfile_PlayerField_default_instance_;
PROTOBUF_CONSTEXPR PlayerProfile::PlayerProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerProfileDefaultTypeInternal() {}
  union {
    PlayerProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerProfileDefaultTypeInternal _PlayerProfile_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerProfileRequest::UpdatePlayerProfileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_profile_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePlayerProfileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerProfileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerProfileRequestDefaultTypeInternal() {}
  union {
    UpdatePlayerProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerProfileRequestDefaultTypeInternal _UpdatePlayerProfileRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPlayerProfileRequest::GetPlayerProfileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPlayerProfileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlayerProfileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlayerProfileRequestDefaultTypeInternal() {}
  union {
    GetPlayerProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlayerProfileRequestDefaultTypeInternal _GetPlayerProfileRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto = nullptr;

const uint32_t TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField, _impl_.field_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField, _impl_.is_default_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::PlayerProfile, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, _impl_.player_profile_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest, _impl_.update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetPlayerProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetPlayerProfileRequest, _impl_.name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField)},
  { 10, -1, -1, sizeof(::ai::inworld::studio::v1alpha::PlayerProfile)},
  { 18, -1, -1, sizeof(::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest)},
  { 26, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GetPlayerProfileRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::studio::v1alpha::_PlayerProfile_PlayerField_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_PlayerProfile_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_UpdatePlayerProfileRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GetPlayerProfileRequest_default_instance_._instance,
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/ai/inworld/studio/v1alpha/player_profi"
  "les.proto\022\031ai.inworld.studio.v1alpha\032\034go"
  "ogle/api/annotations.proto\032\027google/api/c"
  "lient.proto\032\037google/api/field_behavior.p"
  "roto\032\031google/api/resource.proto\032 google/"
  "protobuf/field_mask.proto\"\312\002\n\rPlayerProf"
  "ile\0222\n\004name\030\001 \001(\tB$\340A\002\372A\036\n\034api.inworld.a"
  "i/PlayerProfile\022D\n\006fields\030\002 \003(\01324.ai.inw"
  "orld.studio.v1alpha.PlayerProfile.Player"
  "Field\032v\n\013PlayerField\022\020\n\010field_id\030\001 \001(\t\022\r"
  "\n\005label\030\002 \001(\t\0222\n\004type\030\003 \001(\0162$.ai.inworld"
  ".studio.v1alpha.FieldType\022\022\n\nis_default\030"
  "\004 \001(\010:G\352AD\n\034api.inworld.ai/PlayerProfile"
  "\022$workspaces/{workspace}/playerProfile\"\231"
  "\001\n\032UpdatePlayerProfileRequest\022E\n\016player_"
  "profile\030\001 \001(\0132(.ai.inworld.studio.v1alph"
  "a.PlayerProfileB\003\340A\002\0224\n\013update_mask\030\002 \001("
  "\0132\032.google.protobuf.FieldMaskB\003\340A\002\"M\n\027Ge"
  "tPlayerProfileRequest\0222\n\004name\030\001 \001(\tB$\340A\002"
  "\372A\036\n\034api.inworld.ai/PlayerProfile*R\n\tFie"
  "ldType\022\032\n\026FIELD_TYPE_UNSPECIFIED\020\000\022\n\n\006ST"
  "RING\020\001\022\013\n\007BOOLEAN\020\002\022\n\n\006NUMBER\020\004\"\004\010\003\020\0032\255\003"
  "\n\024PlayerProfileService\022\346\001\n\023UpdatePlayerP"
  "rofile\0225.ai.inworld.studio.v1alpha.Updat"
  "ePlayerProfileRequest\032(.ai.inworld.studi"
  "o.v1alpha.PlayerProfile\"n\202\323\344\223\002K29/v1alph"
  "a/{player_profile.name=workspaces/*/play"
  "erProfile}:\016player_profile\332A\032player_prof"
  "ile,update_mask\022\253\001\n\020GetPlayerProfile\0222.a"
  "i.inworld.studio.v1alpha.GetPlayerProfil"
  "eRequest\032(.ai.inworld.studio.v1alpha.Pla"
  "yerProfile\"9\202\323\344\223\002,\022*/v1alpha/{name=works"
  "paces/*/playerProfile}\332A\004nameB\235\001\n\031ai.inw"
  "orld.studio.v1alphaB\023PlayerProfilesProto"
  "P\001ZMgithub.com/inworld-ai/inworld/servin"
  "g/grpc-gateway/build/proto/studio/v1alph"
  "a\252\002\031Ai.Inworld.Studio.V1Alphab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::_pbi::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto = {
    false, false, 1477, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto,
    "ai/inworld/studio/v1alpha/player_profiles.proto",
    &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_once, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto::offsets,
    file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto,
    file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_getter() {
  return &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[0];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlayerProfile_PlayerField::_Internal {
 public:
};

PlayerProfile_PlayerField::PlayerProfile_PlayerField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
}
PlayerProfile_PlayerField::PlayerProfile_PlayerField(const PlayerProfile_PlayerField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerProfile_PlayerField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_default_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_id().empty()) {
    _this->_impl_.field_id_.Set(from._internal_field_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_default_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_default_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
}

inline void PlayerProfile_PlayerField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_default_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerProfile_PlayerField::~PlayerProfile_PlayerField() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerProfile_PlayerField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_id_.Destroy();
  _impl_.label_.Destroy();
}

void PlayerProfile_PlayerField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerProfile_PlayerField::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_id_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_default_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_default_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerProfile_PlayerField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id"));
        } else
          goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.FieldType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::studio::v1alpha::FieldType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_default = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerProfile_PlayerField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_id = 1;
  if (!this->_internal_field_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_id().data(), static_cast<int>(this->_internal_field_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.field_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field_id(), target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.PlayerProfile.PlayerField.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // .ai.inworld.studio.v1alpha.FieldType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bool is_default = 4;
  if (this->_internal_is_default() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  return target;
}

size_t PlayerProfile_PlayerField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field_id = 1;
  if (!this->_internal_field_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_id());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .ai.inworld.studio.v1alpha.FieldType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_default = 4;
  if (this->_internal_is_default() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerProfile_PlayerField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerProfile_PlayerField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerProfile_PlayerField::GetClassData() const { return &_class_data_; }


void PlayerProfile_PlayerField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerProfile_PlayerField*>(&to_msg);
  auto& from = static_cast<const PlayerProfile_PlayerField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field_id().empty()) {
    _this->_internal_set_field_id(from._internal_field_id());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_default() != 0) {
    _this->_internal_set_is_default(from._internal_is_default());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerProfile_PlayerField::CopyFrom(const PlayerProfile_PlayerField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.PlayerProfile.PlayerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProfile_PlayerField::IsInitialized() const {
  return true;
}

void PlayerProfile_PlayerField::InternalSwap(PlayerProfile_PlayerField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_id_, lhs_arena,
      &other->_impl_.field_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerProfile_PlayerField, _impl_.is_default_)
      + sizeof(PlayerProfile_PlayerField::_impl_.is_default_)
      - PROTOBUF_FIELD_OFFSET(PlayerProfile_PlayerField, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerProfile_PlayerField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[0]);
}

// ===================================================================

class PlayerProfile::_Internal {
 public:
};

PlayerProfile::PlayerProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.PlayerProfile)
}
PlayerProfile::PlayerProfile(const PlayerProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.PlayerProfile)
}

inline void PlayerProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerProfile::~PlayerProfile() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.PlayerProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void PlayerProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.PlayerProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.PlayerProfile.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .ai.inworld.studio.v1alpha.PlayerProfile.PlayerField fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.PlayerProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.PlayerProfile.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .ai.inworld.studio.v1alpha.PlayerProfile.PlayerField fields = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.PlayerProfile)
  return target;
}

size_t PlayerProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.PlayerProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.PlayerProfile.PlayerField fields = 2;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerProfile::GetClassData() const { return &_class_data_; }


void PlayerProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerProfile*>(&to_msg);
  auto& from = static_cast<const PlayerProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.PlayerProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerProfile::CopyFrom(const PlayerProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.PlayerProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProfile::IsInitialized() const {
  return true;
}

void PlayerProfile::InternalSwap(PlayerProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[1]);
}

// ===================================================================

class UpdatePlayerProfileRequest::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::PlayerProfile& player_profile(const UpdatePlayerProfileRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdatePlayerProfileRequest* msg);
};

const ::ai::inworld::studio::v1alpha::PlayerProfile&
UpdatePlayerProfileRequest::_Internal::player_profile(const UpdatePlayerProfileRequest* msg) {
  return *msg->_impl_.player_profile_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdatePlayerProfileRequest::_Internal::update_mask(const UpdatePlayerProfileRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdatePlayerProfileRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
}
UpdatePlayerProfileRequest::UpdatePlayerProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
}
UpdatePlayerProfileRequest::UpdatePlayerProfileRequest(const UpdatePlayerProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePlayerProfileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_profile_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_profile()) {
    _this->_impl_.player_profile_ = new ::ai::inworld::studio::v1alpha::PlayerProfile(*from._impl_.player_profile_);
  }
  if (from._internal_has_update_mask()) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
}

inline void UpdatePlayerProfileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_profile_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdatePlayerProfileRequest::~UpdatePlayerProfileRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePlayerProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_profile_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdatePlayerProfileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePlayerProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_profile_ != nullptr) {
    delete _impl_.player_profile_;
  }
  _impl_.player_profile_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerProfileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.PlayerProfile player_profile = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePlayerProfileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.PlayerProfile player_profile = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_player_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_profile(this),
        _Internal::player_profile(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_update_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  return target;
}

size_t UpdatePlayerProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.PlayerProfile player_profile = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_player_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_profile_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePlayerProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePlayerProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePlayerProfileRequest::GetClassData() const { return &_class_data_; }


void UpdatePlayerProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePlayerProfileRequest*>(&to_msg);
  auto& from = static_cast<const UpdatePlayerProfileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_profile()) {
    _this->_internal_mutable_player_profile()->::ai::inworld::studio::v1alpha::PlayerProfile::MergeFrom(
        from._internal_player_profile());
  }
  if (from._internal_has_update_mask()) {
    _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_update_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePlayerProfileRequest::CopyFrom(const UpdatePlayerProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.UpdatePlayerProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerProfileRequest::IsInitialized() const {
  return true;
}

void UpdatePlayerProfileRequest::InternalSwap(UpdatePlayerProfileRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerProfileRequest, _impl_.update_mask_)
      + sizeof(UpdatePlayerProfileRequest::_impl_.update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerProfileRequest, _impl_.player_profile_)>(
          reinterpret_cast<char*>(&_impl_.player_profile_),
          reinterpret_cast<char*>(&other->_impl_.player_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerProfileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[2]);
}

// ===================================================================

class GetPlayerProfileRequest::_Internal {
 public:
};

GetPlayerProfileRequest::GetPlayerProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
}
GetPlayerProfileRequest::GetPlayerProfileRequest(const GetPlayerProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPlayerProfileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
}

inline void GetPlayerProfileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPlayerProfileRequest::~GetPlayerProfileRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlayerProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetPlayerProfileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPlayerProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlayerProfileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlayerProfileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetPlayerProfileRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  return target;
}

size_t GetPlayerProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlayerProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPlayerProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlayerProfileRequest::GetClassData() const { return &_class_data_; }


void GetPlayerProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPlayerProfileRequest*>(&to_msg);
  auto& from = static_cast<const GetPlayerProfileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlayerProfileRequest::CopyFrom(const GetPlayerProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetPlayerProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerProfileRequest::IsInitialized() const {
  return true;
}

void GetPlayerProfileRequest::InternalSwap(GetPlayerProfileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlayerProfileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fplayer_5fprofiles_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::PlayerProfile_PlayerField >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::PlayerProfile*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::PlayerProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::PlayerProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::UpdatePlayerProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetPlayerProfileRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
