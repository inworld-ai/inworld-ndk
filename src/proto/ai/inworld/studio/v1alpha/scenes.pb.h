// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/scenes.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "ai/inworld/options/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class CreateSceneRequest;
struct CreateSceneRequestDefaultTypeInternal;
extern CreateSceneRequestDefaultTypeInternal _CreateSceneRequest_default_instance_;
class DeleteSceneRequest;
struct DeleteSceneRequestDefaultTypeInternal;
extern DeleteSceneRequestDefaultTypeInternal _DeleteSceneRequest_default_instance_;
class DeploySceneAsyncMetadata;
struct DeploySceneAsyncMetadataDefaultTypeInternal;
extern DeploySceneAsyncMetadataDefaultTypeInternal _DeploySceneAsyncMetadata_default_instance_;
class DeploySceneAsyncResponse;
struct DeploySceneAsyncResponseDefaultTypeInternal;
extern DeploySceneAsyncResponseDefaultTypeInternal _DeploySceneAsyncResponse_default_instance_;
class DeploySceneRequest;
struct DeploySceneRequestDefaultTypeInternal;
extern DeploySceneRequestDefaultTypeInternal _DeploySceneRequest_default_instance_;
class GetSceneRequest;
struct GetSceneRequestDefaultTypeInternal;
extern GetSceneRequestDefaultTypeInternal _GetSceneRequest_default_instance_;
class ListScenesRequest;
struct ListScenesRequestDefaultTypeInternal;
extern ListScenesRequestDefaultTypeInternal _ListScenesRequest_default_instance_;
class ListScenesResponse;
struct ListScenesResponseDefaultTypeInternal;
extern ListScenesResponseDefaultTypeInternal _ListScenesResponse_default_instance_;
class Scene;
struct SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Scene_CharacterReference;
struct Scene_CharacterReferenceDefaultTypeInternal;
extern Scene_CharacterReferenceDefaultTypeInternal _Scene_CharacterReference_default_instance_;
class Scene_CharacterReference_Character;
struct Scene_CharacterReference_CharacterDefaultTypeInternal;
extern Scene_CharacterReference_CharacterDefaultTypeInternal _Scene_CharacterReference_Character_default_instance_;
class Scene_CharacterReference_Character_CharacterAssets;
struct Scene_CharacterReference_Character_CharacterAssetsDefaultTypeInternal;
extern Scene_CharacterReference_Character_CharacterAssetsDefaultTypeInternal _Scene_CharacterReference_Character_CharacterAssets_default_instance_;
class Scene_CharacterReference_Character_CharacterDescription;
struct Scene_CharacterReference_Character_CharacterDescriptionDefaultTypeInternal;
extern Scene_CharacterReference_Character_CharacterDescriptionDefaultTypeInternal _Scene_CharacterReference_Character_CharacterDescription_default_instance_;
class Scene_Meta;
struct Scene_MetaDefaultTypeInternal;
extern Scene_MetaDefaultTypeInternal _Scene_Meta_default_instance_;
class Scene_SceneTrigger;
struct Scene_SceneTriggerDefaultTypeInternal;
extern Scene_SceneTriggerDefaultTypeInternal _Scene_SceneTrigger_default_instance_;
class UpdateSceneRequest;
struct UpdateSceneRequestDefaultTypeInternal;
extern UpdateSceneRequestDefaultTypeInternal _UpdateSceneRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
enum SceneItemView : int {
  SCENE_ITEM_VIEW_UNSPECIFIED = 0,
  SCENE_ITEM_VIEW_DEFAULT = 1,
  SCENE_ITEM_VIEW_WITH_META = 2,
  SceneItemView_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SceneItemView_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SceneItemView_IsValid(int value);
extern const uint32_t SceneItemView_internal_data_[];
constexpr SceneItemView SceneItemView_MIN = static_cast<SceneItemView>(0);
constexpr SceneItemView SceneItemView_MAX = static_cast<SceneItemView>(2);
constexpr int SceneItemView_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SceneItemView_descriptor();
template <typename T>
const std::string& SceneItemView_Name(T value) {
  static_assert(std::is_same<T, SceneItemView>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SceneItemView_Name().");
  return SceneItemView_Name(static_cast<SceneItemView>(value));
}
template <>
inline const std::string& SceneItemView_Name(SceneItemView value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SceneItemView_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SceneItemView_Parse(absl::string_view name, SceneItemView* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SceneItemView>(
      SceneItemView_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Scene_SceneTrigger final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.SceneTrigger) */ {
 public:
  inline Scene_SceneTrigger() : Scene_SceneTrigger(nullptr) {}
  ~Scene_SceneTrigger() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene_SceneTrigger(::google::protobuf::internal::ConstantInitialized);

  inline Scene_SceneTrigger(const Scene_SceneTrigger& from)
      : Scene_SceneTrigger(nullptr, from) {}
  Scene_SceneTrigger(Scene_SceneTrigger&& from) noexcept
    : Scene_SceneTrigger() {
    *this = ::std::move(from);
  }

  inline Scene_SceneTrigger& operator=(const Scene_SceneTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_SceneTrigger& operator=(Scene_SceneTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_SceneTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_SceneTrigger* internal_default_instance() {
    return reinterpret_cast<const Scene_SceneTrigger*>(
               &_Scene_SceneTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Scene_SceneTrigger& a, Scene_SceneTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_SceneTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_SceneTrigger* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_SceneTrigger* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_SceneTrigger>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene_SceneTrigger& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene_SceneTrigger& from) {
    Scene_SceneTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene_SceneTrigger* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.SceneTrigger";
  }
  protected:
  explicit Scene_SceneTrigger(::google::protobuf::Arena* arena);
  Scene_SceneTrigger(::google::protobuf::Arena* arena, const Scene_SceneTrigger& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string trigger = 1 [(.google.api.resource_reference) = {
  void clear_trigger() ;
  const std::string& trigger() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trigger(Arg_&& arg, Args_... args);
  std::string* mutable_trigger();
  PROTOBUF_NODISCARD std::string* release_trigger();
  void set_allocated_trigger(std::string* value);

  private:
  const std::string& _internal_trigger() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger(
      const std::string& value);
  std::string* _internal_mutable_trigger();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.SceneTrigger)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trigger_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class Scene_Meta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.Meta) */ {
 public:
  inline Scene_Meta() : Scene_Meta(nullptr) {}
  ~Scene_Meta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene_Meta(::google::protobuf::internal::ConstantInitialized);

  inline Scene_Meta(const Scene_Meta& from)
      : Scene_Meta(nullptr, from) {}
  Scene_Meta(Scene_Meta&& from) noexcept
    : Scene_Meta() {
    *this = ::std::move(from);
  }

  inline Scene_Meta& operator=(const Scene_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_Meta& operator=(Scene_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_Meta* internal_default_instance() {
    return reinterpret_cast<const Scene_Meta*>(
               &_Scene_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Scene_Meta& a, Scene_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_Meta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_Meta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_Meta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene_Meta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene_Meta& from) {
    Scene_Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene_Meta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.Meta";
  }
  protected:
  explicit Scene_Meta(::google::protobuf::Arena* arena);
  Scene_Meta(::google::protobuf::Arena* arena, const Scene_Meta& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTriggersFieldNumber = 1,
    kTotalCharactersFieldNumber = 2,
    kTotalCommonKnowledgeFieldNumber = 3,
  };
  // int32 total_triggers = 1;
  void clear_total_triggers() ;
  ::int32_t total_triggers() const;
  void set_total_triggers(::int32_t value);

  private:
  ::int32_t _internal_total_triggers() const;
  void _internal_set_total_triggers(::int32_t value);

  public:
  // int32 total_characters = 2;
  void clear_total_characters() ;
  ::int32_t total_characters() const;
  void set_total_characters(::int32_t value);

  private:
  ::int32_t _internal_total_characters() const;
  void _internal_set_total_characters(::int32_t value);

  public:
  // int32 total_common_knowledge = 3;
  void clear_total_common_knowledge() ;
  ::int32_t total_common_knowledge() const;
  void set_total_common_knowledge(::int32_t value);

  private:
  ::int32_t _internal_total_common_knowledge() const;
  void _internal_set_total_common_knowledge(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.Meta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t total_triggers_;
    ::int32_t total_characters_;
    ::int32_t total_common_knowledge_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class Scene_CharacterReference_Character_CharacterDescription final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription) */ {
 public:
  inline Scene_CharacterReference_Character_CharacterDescription() : Scene_CharacterReference_Character_CharacterDescription(nullptr) {}
  ~Scene_CharacterReference_Character_CharacterDescription() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference_Character_CharacterDescription(::google::protobuf::internal::ConstantInitialized);

  inline Scene_CharacterReference_Character_CharacterDescription(const Scene_CharacterReference_Character_CharacterDescription& from)
      : Scene_CharacterReference_Character_CharacterDescription(nullptr, from) {}
  Scene_CharacterReference_Character_CharacterDescription(Scene_CharacterReference_Character_CharacterDescription&& from) noexcept
    : Scene_CharacterReference_Character_CharacterDescription() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference_Character_CharacterDescription& operator=(const Scene_CharacterReference_Character_CharacterDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference_Character_CharacterDescription& operator=(Scene_CharacterReference_Character_CharacterDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference_Character_CharacterDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference_Character_CharacterDescription* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference_Character_CharacterDescription*>(
               &_Scene_CharacterReference_Character_CharacterDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Scene_CharacterReference_Character_CharacterDescription& a, Scene_CharacterReference_Character_CharacterDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference_Character_CharacterDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference_Character_CharacterDescription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference_Character_CharacterDescription* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference_Character_CharacterDescription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference_Character_CharacterDescription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference_Character_CharacterDescription& from) {
    Scene_CharacterReference_Character_CharacterDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene_CharacterReference_Character_CharacterDescription* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription";
  }
  protected:
  explicit Scene_CharacterReference_Character_CharacterDescription(::google::protobuf::Arena* arena);
  Scene_CharacterReference_Character_CharacterDescription(::google::protobuf::Arena* arena, const Scene_CharacterReference_Character_CharacterDescription& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGivenNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string given_name = 1;
  void clear_given_name() ;
  const std::string& given_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_given_name(Arg_&& arg, Args_... args);
  std::string* mutable_given_name();
  PROTOBUF_NODISCARD std::string* release_given_name();
  void set_allocated_given_name(std::string* value);

  private:
  const std::string& _internal_given_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_given_name(
      const std::string& value);
  std::string* _internal_mutable_given_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      111, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr given_name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class Scene_CharacterReference_Character_CharacterAssets final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets) */ {
 public:
  inline Scene_CharacterReference_Character_CharacterAssets() : Scene_CharacterReference_Character_CharacterAssets(nullptr) {}
  ~Scene_CharacterReference_Character_CharacterAssets() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference_Character_CharacterAssets(::google::protobuf::internal::ConstantInitialized);

  inline Scene_CharacterReference_Character_CharacterAssets(const Scene_CharacterReference_Character_CharacterAssets& from)
      : Scene_CharacterReference_Character_CharacterAssets(nullptr, from) {}
  Scene_CharacterReference_Character_CharacterAssets(Scene_CharacterReference_Character_CharacterAssets&& from) noexcept
    : Scene_CharacterReference_Character_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference_Character_CharacterAssets& operator=(const Scene_CharacterReference_Character_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference_Character_CharacterAssets& operator=(Scene_CharacterReference_Character_CharacterAssets&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference_Character_CharacterAssets& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference_Character_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference_Character_CharacterAssets*>(
               &_Scene_CharacterReference_Character_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Scene_CharacterReference_Character_CharacterAssets& a, Scene_CharacterReference_Character_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference_Character_CharacterAssets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference_Character_CharacterAssets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference_Character_CharacterAssets* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference_Character_CharacterAssets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference_Character_CharacterAssets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference_Character_CharacterAssets& from) {
    Scene_CharacterReference_Character_CharacterAssets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene_CharacterReference_Character_CharacterAssets* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets";
  }
  protected:
  explicit Scene_CharacterReference_Character_CharacterAssets(::google::protobuf::Arena* arena);
  Scene_CharacterReference_Character_CharacterAssets(::google::protobuf::Arena* arena, const Scene_CharacterReference_Character_CharacterAssets& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 1,
    kRpmImageUriFieldNumber = 2,
    kRpmImageUriPortraitFieldNumber = 3,
    kRpmImageUriPostureFieldNumber = 4,
    kAvatarImgFieldNumber = 5,
    kAvatarImgOriginalFieldNumber = 6,
  };
  // string rpm_model_uri = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_model_uri() ;
  const std::string& rpm_model_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_model_uri(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_model_uri();
  PROTOBUF_NODISCARD std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* value);

  private:
  const std::string& _internal_rpm_model_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_model_uri(
      const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();

  public:
  // string rpm_image_uri = 2 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  [[deprecated]]  void clear_rpm_image_uri() ;
  [[deprecated]] const std::string& rpm_image_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_rpm_image_uri(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_rpm_image_uri();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_rpm_image_uri();
  [[deprecated]] void set_allocated_rpm_image_uri(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri();

  public:
  // string rpm_image_uri_portrait = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_portrait() ;
  const std::string& rpm_image_uri_portrait() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_image_uri_portrait(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_image_uri_portrait();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_portrait(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();

  public:
  // string rpm_image_uri_posture = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_posture() ;
  const std::string& rpm_image_uri_posture() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_image_uri_posture(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_image_uri_posture();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_posture(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();

  public:
  // string avatar_img = 5;
  void clear_avatar_img() ;
  const std::string& avatar_img() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_img(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_img();
  PROTOBUF_NODISCARD std::string* release_avatar_img();
  void set_allocated_avatar_img(std::string* value);

  private:
  const std::string& _internal_avatar_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_img(
      const std::string& value);
  std::string* _internal_mutable_avatar_img();

  public:
  // string avatar_img_original = 6;
  void clear_avatar_img_original() ;
  const std::string& avatar_img_original() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_img_original(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_img_original();
  PROTOBUF_NODISCARD std::string* release_avatar_img_original();
  void set_allocated_avatar_img_original(std::string* value);

  private:
  const std::string& _internal_avatar_img_original() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_img_original(
      const std::string& value);
  std::string* _internal_mutable_avatar_img_original();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      183, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr rpm_model_uri_;
    ::google::protobuf::internal::ArenaStringPtr rpm_image_uri_;
    ::google::protobuf::internal::ArenaStringPtr rpm_image_uri_portrait_;
    ::google::protobuf::internal::ArenaStringPtr rpm_image_uri_posture_;
    ::google::protobuf::internal::ArenaStringPtr avatar_img_;
    ::google::protobuf::internal::ArenaStringPtr avatar_img_original_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class ListScenesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListScenesRequest) */ {
 public:
  inline ListScenesRequest() : ListScenesRequest(nullptr) {}
  ~ListScenesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListScenesRequest(::google::protobuf::internal::ConstantInitialized);

  inline ListScenesRequest(const ListScenesRequest& from)
      : ListScenesRequest(nullptr, from) {}
  ListScenesRequest(ListScenesRequest&& from) noexcept
    : ListScenesRequest() {
    *this = ::std::move(from);
  }

  inline ListScenesRequest& operator=(const ListScenesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScenesRequest& operator=(ListScenesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScenesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScenesRequest* internal_default_instance() {
    return reinterpret_cast<const ListScenesRequest*>(
               &_ListScenesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListScenesRequest& a, ListScenesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScenesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScenesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScenesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScenesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListScenesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListScenesRequest& from) {
    ListScenesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListScenesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListScenesRequest";
  }
  protected:
  explicit ListScenesRequest(::google::protobuf::Arena* arena);
  ListScenesRequest(::google::protobuf::Arena* arena, const ListScenesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string page_token = 3;
  void clear_page_token() ;
  const std::string& page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* value);

  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(
      const std::string& value);
  std::string* _internal_mutable_page_token();

  public:
  // string filter = 4;
  void clear_filter() ;
  const std::string& filter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filter(Arg_&& arg, Args_... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* value);

  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(
      const std::string& value);
  std::string* _internal_mutable_filter();

  public:
  // int32 page_size = 2;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListScenesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      74, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr parent_;
    ::google::protobuf::internal::ArenaStringPtr page_token_;
    ::google::protobuf::internal::ArenaStringPtr filter_;
    ::int32_t page_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class GetSceneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetSceneRequest) */ {
 public:
  inline GetSceneRequest() : GetSceneRequest(nullptr) {}
  ~GetSceneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSceneRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetSceneRequest(const GetSceneRequest& from)
      : GetSceneRequest(nullptr, from) {}
  GetSceneRequest(GetSceneRequest&& from) noexcept
    : GetSceneRequest() {
    *this = ::std::move(from);
  }

  inline GetSceneRequest& operator=(const GetSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSceneRequest& operator=(GetSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSceneRequest* internal_default_instance() {
    return reinterpret_cast<const GetSceneRequest*>(
               &_GetSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSceneRequest& a, GetSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSceneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetSceneRequest& from) {
    GetSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetSceneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetSceneRequest";
  }
  protected:
  explicit GetSceneRequest(::google::protobuf::Arena* arena);
  GetSceneRequest(::google::protobuf::Arena* arena, const GetSceneRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .ai.inworld.studio.v1alpha.SceneItemView view = 2;
  void clear_view() ;
  ::ai::inworld::studio::v1alpha::SceneItemView view() const;
  void set_view(::ai::inworld::studio::v1alpha::SceneItemView value);

  private:
  ::ai::inworld::studio::v1alpha::SceneItemView _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::SceneItemView value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetSceneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    int view_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class DeploySceneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeploySceneRequest) */ {
 public:
  inline DeploySceneRequest() : DeploySceneRequest(nullptr) {}
  ~DeploySceneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeploySceneRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeploySceneRequest(const DeploySceneRequest& from)
      : DeploySceneRequest(nullptr, from) {}
  DeploySceneRequest(DeploySceneRequest&& from) noexcept
    : DeploySceneRequest() {
    *this = ::std::move(from);
  }

  inline DeploySceneRequest& operator=(const DeploySceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploySceneRequest& operator=(DeploySceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeploySceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeploySceneRequest* internal_default_instance() {
    return reinterpret_cast<const DeploySceneRequest*>(
               &_DeploySceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeploySceneRequest& a, DeploySceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploySceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploySceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeploySceneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeploySceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeploySceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeploySceneRequest& from) {
    DeploySceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeploySceneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeploySceneRequest";
  }
  protected:
  explicit DeploySceneRequest(::google::protobuf::Arena* arena);
  DeploySceneRequest(::google::protobuf::Arena* arena, const DeploySceneRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeploySceneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class DeploySceneAsyncResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeploySceneAsyncResponse) */ {
 public:
  inline DeploySceneAsyncResponse() : DeploySceneAsyncResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeploySceneAsyncResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeploySceneAsyncResponse(const DeploySceneAsyncResponse& from)
      : DeploySceneAsyncResponse(nullptr, from) {}
  DeploySceneAsyncResponse(DeploySceneAsyncResponse&& from) noexcept
    : DeploySceneAsyncResponse() {
    *this = ::std::move(from);
  }

  inline DeploySceneAsyncResponse& operator=(const DeploySceneAsyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploySceneAsyncResponse& operator=(DeploySceneAsyncResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeploySceneAsyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeploySceneAsyncResponse* internal_default_instance() {
    return reinterpret_cast<const DeploySceneAsyncResponse*>(
               &_DeploySceneAsyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeploySceneAsyncResponse& a, DeploySceneAsyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploySceneAsyncResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploySceneAsyncResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeploySceneAsyncResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeploySceneAsyncResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeploySceneAsyncResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeploySceneAsyncResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeploySceneAsyncResponse";
  }
  protected:
  explicit DeploySceneAsyncResponse(::google::protobuf::Arena* arena);
  DeploySceneAsyncResponse(::google::protobuf::Arena* arena, const DeploySceneAsyncResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeploySceneAsyncResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class DeploySceneAsyncMetadata final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeploySceneAsyncMetadata) */ {
 public:
  inline DeploySceneAsyncMetadata() : DeploySceneAsyncMetadata(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeploySceneAsyncMetadata(::google::protobuf::internal::ConstantInitialized);

  inline DeploySceneAsyncMetadata(const DeploySceneAsyncMetadata& from)
      : DeploySceneAsyncMetadata(nullptr, from) {}
  DeploySceneAsyncMetadata(DeploySceneAsyncMetadata&& from) noexcept
    : DeploySceneAsyncMetadata() {
    *this = ::std::move(from);
  }

  inline DeploySceneAsyncMetadata& operator=(const DeploySceneAsyncMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploySceneAsyncMetadata& operator=(DeploySceneAsyncMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeploySceneAsyncMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeploySceneAsyncMetadata* internal_default_instance() {
    return reinterpret_cast<const DeploySceneAsyncMetadata*>(
               &_DeploySceneAsyncMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeploySceneAsyncMetadata& a, DeploySceneAsyncMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploySceneAsyncMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploySceneAsyncMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeploySceneAsyncMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeploySceneAsyncMetadata>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeploySceneAsyncMetadata& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeploySceneAsyncMetadata& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeploySceneAsyncMetadata";
  }
  protected:
  explicit DeploySceneAsyncMetadata(::google::protobuf::Arena* arena);
  DeploySceneAsyncMetadata(::google::protobuf::Arena* arena, const DeploySceneAsyncMetadata& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeploySceneAsyncMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class DeleteSceneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteSceneRequest) */ {
 public:
  inline DeleteSceneRequest() : DeleteSceneRequest(nullptr) {}
  ~DeleteSceneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteSceneRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteSceneRequest(const DeleteSceneRequest& from)
      : DeleteSceneRequest(nullptr, from) {}
  DeleteSceneRequest(DeleteSceneRequest&& from) noexcept
    : DeleteSceneRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSceneRequest& operator=(const DeleteSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSceneRequest& operator=(DeleteSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSceneRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSceneRequest*>(
               &_DeleteSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteSceneRequest& a, DeleteSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSceneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteSceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteSceneRequest& from) {
    DeleteSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteSceneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteSceneRequest";
  }
  protected:
  explicit DeleteSceneRequest(::google::protobuf::Arena* arena);
  DeleteSceneRequest(::google::protobuf::Arena* arena, const DeleteSceneRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteSceneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class Scene_CharacterReference_Character final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character) */ {
 public:
  inline Scene_CharacterReference_Character() : Scene_CharacterReference_Character(nullptr) {}
  ~Scene_CharacterReference_Character() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference_Character(::google::protobuf::internal::ConstantInitialized);

  inline Scene_CharacterReference_Character(const Scene_CharacterReference_Character& from)
      : Scene_CharacterReference_Character(nullptr, from) {}
  Scene_CharacterReference_Character(Scene_CharacterReference_Character&& from) noexcept
    : Scene_CharacterReference_Character() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference_Character& operator=(const Scene_CharacterReference_Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference_Character& operator=(Scene_CharacterReference_Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference_Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference_Character* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference_Character*>(
               &_Scene_CharacterReference_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Scene_CharacterReference_Character& a, Scene_CharacterReference_Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference_Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference_Character* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference_Character* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference_Character>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference_Character& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference_Character& from) {
    Scene_CharacterReference_Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene_CharacterReference_Character* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference.Character";
  }
  protected:
  explicit Scene_CharacterReference_Character(::google::protobuf::Arena* arena);
  Scene_CharacterReference_Character(::google::protobuf::Arena* arena, const Scene_CharacterReference_Character& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CharacterDescription = Scene_CharacterReference_Character_CharacterDescription;
  using CharacterAssets = Scene_CharacterReference_Character_CharacterAssets;

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalAgentInfoFieldNumber = 3,
    kDefaultCharacterDescriptionFieldNumber = 1,
    kDefaultCharacterAssetsFieldNumber = 2,
  };
  // string additional_agent_info = 3;
  void clear_additional_agent_info() ;
  const std::string& additional_agent_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_additional_agent_info(Arg_&& arg, Args_... args);
  std::string* mutable_additional_agent_info();
  PROTOBUF_NODISCARD std::string* release_additional_agent_info();
  void set_allocated_additional_agent_info(std::string* value);

  private:
  const std::string& _internal_additional_agent_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_agent_info(
      const std::string& value);
  std::string* _internal_mutable_additional_agent_info();

  public:
  // .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription default_character_description = 1;
  bool has_default_character_description() const;
  void clear_default_character_description() ;
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& default_character_description() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* release_default_character_description();
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* mutable_default_character_description();
  void set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* value);
  void unsafe_arena_set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* value);
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* unsafe_arena_release_default_character_description();

  private:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& _internal_default_character_description() const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* _internal_mutable_default_character_description();

  public:
  // .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets default_character_assets = 2;
  bool has_default_character_assets() const;
  void clear_default_character_assets() ;
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& default_character_assets() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* release_default_character_assets();
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* mutable_default_character_assets();
  void set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* value);
  void unsafe_arena_set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* value);
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* unsafe_arena_release_default_character_assets();

  private:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& _internal_default_character_assets() const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* _internal_mutable_default_character_assets();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      90, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr additional_agent_info_;
    ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* default_character_description_;
    ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* default_character_assets_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class Scene_CharacterReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference) */ {
 public:
  inline Scene_CharacterReference() : Scene_CharacterReference(nullptr) {}
  ~Scene_CharacterReference() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference(::google::protobuf::internal::ConstantInitialized);

  inline Scene_CharacterReference(const Scene_CharacterReference& from)
      : Scene_CharacterReference(nullptr, from) {}
  Scene_CharacterReference(Scene_CharacterReference&& from) noexcept
    : Scene_CharacterReference() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference& operator=(const Scene_CharacterReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference& operator=(Scene_CharacterReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference*>(
               &_Scene_CharacterReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Scene_CharacterReference& a, Scene_CharacterReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference& from) {
    Scene_CharacterReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene_CharacterReference* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference";
  }
  protected:
  explicit Scene_CharacterReference(::google::protobuf::Arena* arena);
  Scene_CharacterReference(::google::protobuf::Arena* arena, const Scene_CharacterReference& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Character = Scene_CharacterReference_Character;

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterOverloadsFieldNumber = 4,
    kNameFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character character_overloads = 4 [(.google.api.field_behavior) = OPTIONAL];
  int character_overloads_size() const;
  private:
  int _internal_character_overloads_size() const;

  public:
  void clear_character_overloads() ;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* mutable_character_overloads(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character >*
      mutable_character_overloads();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>& _internal_character_overloads() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>* _internal_mutable_character_overloads();
  public:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character& character_overloads(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* add_character_overloads();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character >&
      character_overloads() const;
  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string character = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_character() ;
  const std::string& character() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character(Arg_&& arg, Args_... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* value);

  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(
      const std::string& value);
  std::string* _internal_mutable_character();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      72, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character > character_overloads_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr character_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class Scene final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  ~Scene() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scene(::google::protobuf::internal::ConstantInitialized);

  inline Scene(const Scene& from)
      : Scene(nullptr, from) {}
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Scene& from) {
    Scene::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scene* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene";
  }
  protected:
  explicit Scene(::google::protobuf::Arena* arena);
  Scene(::google::protobuf::Arena* arena, const Scene& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CharacterReference = Scene_CharacterReference;
  using SceneTrigger = Scene_SceneTrigger;
  using Meta = Scene_Meta;

  // accessors -------------------------------------------------------

  enum : int {
    kSceneTriggersFieldNumber = 3,
    kCharacterReferencesFieldNumber = 4,
    kCommonKnowledgesFieldNumber = 7,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDisplayNameFieldNumber = 5,
    kTimePeriodFieldNumber = 8,
    kMetaFieldNumber = 6,
  };
  // repeated .ai.inworld.studio.v1alpha.Scene.SceneTrigger scene_triggers = 3;
  int scene_triggers_size() const;
  private:
  int _internal_scene_triggers_size() const;

  public:
  void clear_scene_triggers() ;
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* mutable_scene_triggers(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger >*
      mutable_scene_triggers();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>& _internal_scene_triggers() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>* _internal_mutable_scene_triggers();
  public:
  const ::ai::inworld::studio::v1alpha::Scene_SceneTrigger& scene_triggers(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* add_scene_triggers();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger >&
      scene_triggers() const;
  // repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference character_references = 4;
  int character_references_size() const;
  private:
  int _internal_character_references_size() const;

  public:
  void clear_character_references() ;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* mutable_character_references(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference >*
      mutable_character_references();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference>& _internal_character_references() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference>* _internal_mutable_character_references();
  public:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference& character_references(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* add_character_references();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference >&
      character_references() const;
  // repeated string common_knowledges = 7 [(.ai.inworld.options.examples) = {
  int common_knowledges_size() const;
  private:
  int _internal_common_knowledges_size() const;

  public:
  void clear_common_knowledges() ;
  const std::string& common_knowledges(int index) const;
  std::string* mutable_common_knowledges(int index);
  void set_common_knowledges(int index, const std::string& value);
  void set_common_knowledges(int index, std::string&& value);
  void set_common_knowledges(int index, const char* value);
  void set_common_knowledges(int index, const char* value, std::size_t size);
  void set_common_knowledges(int index, absl::string_view value);
  std::string* add_common_knowledges();
  void add_common_knowledges(const std::string& value);
  void add_common_knowledges(std::string&& value);
  void add_common_knowledges(const char* value);
  void add_common_knowledges(const char* value, std::size_t size);
  void add_common_knowledges(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& common_knowledges() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_common_knowledges();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_common_knowledges() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_common_knowledges();

  public:
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string display_name = 5 [(.ai.inworld.options.examples) = {
  void clear_display_name() ;
  const std::string& display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* value);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // string time_period = 8;
  void clear_time_period() ;
  const std::string& time_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_period(Arg_&& arg, Args_... args);
  std::string* mutable_time_period();
  PROTOBUF_NODISCARD std::string* release_time_period();
  void set_allocated_time_period(std::string* value);

  private:
  const std::string& _internal_time_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_period(
      const std::string& value);
  std::string* _internal_mutable_time_period();

  public:
  // .ai.inworld.studio.v1alpha.Scene.Meta meta = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_meta() const;
  void clear_meta() ;
  const ::ai::inworld::studio::v1alpha::Scene_Meta& meta() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene_Meta* release_meta();
  ::ai::inworld::studio::v1alpha::Scene_Meta* mutable_meta();
  void set_allocated_meta(::ai::inworld::studio::v1alpha::Scene_Meta* value);
  void unsafe_arena_set_allocated_meta(::ai::inworld::studio::v1alpha::Scene_Meta* value);
  ::ai::inworld::studio::v1alpha::Scene_Meta* unsafe_arena_release_meta();

  private:
  const ::ai::inworld::studio::v1alpha::Scene_Meta& _internal_meta() const;
  ::ai::inworld::studio::v1alpha::Scene_Meta* _internal_mutable_meta();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      103, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger > scene_triggers_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference > character_references_;
    ::google::protobuf::RepeatedPtrField<std::string> common_knowledges_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr display_name_;
    ::google::protobuf::internal::ArenaStringPtr time_period_;
    ::ai::inworld::studio::v1alpha::Scene_Meta* meta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class UpdateSceneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateSceneRequest) */ {
 public:
  inline UpdateSceneRequest() : UpdateSceneRequest(nullptr) {}
  ~UpdateSceneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSceneRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateSceneRequest(const UpdateSceneRequest& from)
      : UpdateSceneRequest(nullptr, from) {}
  UpdateSceneRequest(UpdateSceneRequest&& from) noexcept
    : UpdateSceneRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSceneRequest& operator=(const UpdateSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSceneRequest& operator=(UpdateSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSceneRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSceneRequest*>(
               &_UpdateSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateSceneRequest& a, UpdateSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSceneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateSceneRequest& from) {
    UpdateSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateSceneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateSceneRequest";
  }
  protected:
  explicit UpdateSceneRequest(::google::protobuf::Arena* arena);
  UpdateSceneRequest(::google::protobuf::Arena* arena, const UpdateSceneRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.Scene scene = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_scene() const;
  void clear_scene() ;
  const ::ai::inworld::studio::v1alpha::Scene& scene() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene* release_scene();
  ::ai::inworld::studio::v1alpha::Scene* mutable_scene();
  void set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value);
  void unsafe_arena_set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value);
  ::ai::inworld::studio::v1alpha::Scene* unsafe_arena_release_scene();

  private:
  const ::ai::inworld::studio::v1alpha::Scene& _internal_scene() const;
  ::ai::inworld::studio::v1alpha::Scene* _internal_mutable_scene();

  public:
  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask() ;
  const ::google::protobuf::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* value);
  void unsafe_arena_set_allocated_update_mask(::google::protobuf::FieldMask* value);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  ::google::protobuf::FieldMask* _internal_mutable_update_mask();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateSceneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::ai::inworld::studio::v1alpha::Scene* scene_;
    ::google::protobuf::FieldMask* update_mask_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class ListScenesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListScenesResponse) */ {
 public:
  inline ListScenesResponse() : ListScenesResponse(nullptr) {}
  ~ListScenesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListScenesResponse(::google::protobuf::internal::ConstantInitialized);

  inline ListScenesResponse(const ListScenesResponse& from)
      : ListScenesResponse(nullptr, from) {}
  ListScenesResponse(ListScenesResponse&& from) noexcept
    : ListScenesResponse() {
    *this = ::std::move(from);
  }

  inline ListScenesResponse& operator=(const ListScenesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScenesResponse& operator=(ListScenesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScenesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScenesResponse* internal_default_instance() {
    return reinterpret_cast<const ListScenesResponse*>(
               &_ListScenesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListScenesResponse& a, ListScenesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScenesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScenesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScenesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScenesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListScenesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListScenesResponse& from) {
    ListScenesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListScenesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListScenesResponse";
  }
  protected:
  explicit ListScenesResponse(::google::protobuf::Arena* arena);
  ListScenesResponse(::google::protobuf::Arena* arena, const ListScenesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Scene scenes = 1;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;

  public:
  void clear_scenes() ;
  ::ai::inworld::studio::v1alpha::Scene* mutable_scenes(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >*
      mutable_scenes();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>& _internal_scenes() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>* _internal_mutable_scenes();
  public:
  const ::ai::inworld::studio::v1alpha::Scene& scenes(int index) const;
  ::ai::inworld::studio::v1alpha::Scene* add_scenes();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >&
      scenes() const;
  // string next_page_token = 2;
  void clear_next_page_token() ;
  const std::string& next_page_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* value);

  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(
      const std::string& value);
  std::string* _internal_mutable_next_page_token();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListScenesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene > scenes_;
    ::google::protobuf::internal::ArenaStringPtr next_page_token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};// -------------------------------------------------------------------

class CreateSceneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateSceneRequest) */ {
 public:
  inline CreateSceneRequest() : CreateSceneRequest(nullptr) {}
  ~CreateSceneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateSceneRequest(::google::protobuf::internal::ConstantInitialized);

  inline CreateSceneRequest(const CreateSceneRequest& from)
      : CreateSceneRequest(nullptr, from) {}
  CreateSceneRequest(CreateSceneRequest&& from) noexcept
    : CreateSceneRequest() {
    *this = ::std::move(from);
  }

  inline CreateSceneRequest& operator=(const CreateSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSceneRequest& operator=(CreateSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSceneRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSceneRequest*>(
               &_CreateSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateSceneRequest& a, CreateSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSceneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateSceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateSceneRequest& from) {
    CreateSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateSceneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateSceneRequest";
  }
  protected:
  explicit CreateSceneRequest(::google::protobuf::Arena* arena);
  CreateSceneRequest(::google::protobuf::Arena* arena, const CreateSceneRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSceneFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // .ai.inworld.studio.v1alpha.Scene scene = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_scene() const;
  void clear_scene() ;
  const ::ai::inworld::studio::v1alpha::Scene& scene() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene* release_scene();
  ::ai::inworld::studio::v1alpha::Scene* mutable_scene();
  void set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value);
  void unsafe_arena_set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value);
  ::ai::inworld::studio::v1alpha::Scene* unsafe_arena_release_scene();

  private:
  const ::ai::inworld::studio::v1alpha::Scene& _internal_scene() const;
  ::ai::inworld::studio::v1alpha::Scene* _internal_mutable_scene();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateSceneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr parent_;
    ::ai::inworld::studio::v1alpha::Scene* scene_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetSceneRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSceneRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetSceneRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetSceneRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSceneRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetSceneRequest.name)
}
inline std::string* GetSceneRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetSceneRequest.name)
  return _s;
}
inline const std::string& GetSceneRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetSceneRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetSceneRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetSceneRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetSceneRequest.name)
  return _impl_.name_.Release();
}
inline void GetSceneRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetSceneRequest.name)
}

// .ai.inworld.studio.v1alpha.SceneItemView view = 2;
inline void GetSceneRequest::clear_view() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::SceneItemView GetSceneRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetSceneRequest.view)
  return _internal_view();
}
inline void GetSceneRequest::set_view(::ai::inworld::studio::v1alpha::SceneItemView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetSceneRequest.view)
}
inline ::ai::inworld::studio::v1alpha::SceneItemView GetSceneRequest::_internal_view() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::studio::v1alpha::SceneItemView>(_impl_.view_);
}
inline void GetSceneRequest::_internal_set_view(::ai::inworld::studio::v1alpha::SceneItemView value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_ = value;
}

// -------------------------------------------------------------------

// ListScenesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListScenesRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListScenesRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListScenesRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
}
inline std::string* ListScenesRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
  return _s;
}
inline const std::string& ListScenesRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void ListScenesRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* ListScenesRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* ListScenesRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListScenesRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
}

// int32 page_size = 2;
inline void ListScenesRequest::clear_page_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_size_ = 0;
}
inline ::int32_t ListScenesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.page_size)
  return _internal_page_size();
}
inline void ListScenesRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.page_size)
}
inline ::int32_t ListScenesRequest::_internal_page_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_size_;
}
inline void ListScenesRequest::_internal_set_page_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_size_ = value;
}

// string page_token = 3;
inline void ListScenesRequest::clear_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListScenesRequest::page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
  return _internal_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListScenesRequest::set_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
}
inline std::string* ListScenesRequest::mutable_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
  return _s;
}
inline const std::string& ListScenesRequest::_internal_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_token_.Get();
}
inline void ListScenesRequest::_internal_set_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_token_.Set(value, GetArena());
}
inline std::string* ListScenesRequest::_internal_mutable_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.page_token_.Mutable( GetArena());
}
inline std::string* ListScenesRequest::release_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListScenesRequest::set_allocated_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_token_.IsDefault()) {
          _impl_.page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
}

// string filter = 4;
inline void ListScenesRequest::clear_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListScenesRequest::filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
  return _internal_filter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListScenesRequest::set_filter(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
}
inline std::string* ListScenesRequest::mutable_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
  return _s;
}
inline const std::string& ListScenesRequest::_internal_filter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filter_.Get();
}
inline void ListScenesRequest::_internal_set_filter(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filter_.Set(value, GetArena());
}
inline std::string* ListScenesRequest::_internal_mutable_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filter_.Mutable( GetArena());
}
inline std::string* ListScenesRequest::release_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListScenesRequest::set_allocated_filter(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filter_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filter_.IsDefault()) {
          _impl_.filter_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
}

// -------------------------------------------------------------------

// CreateSceneRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSceneRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateSceneRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateSceneRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
}
inline std::string* CreateSceneRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
  return _s;
}
inline const std::string& CreateSceneRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void CreateSceneRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* CreateSceneRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* CreateSceneRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateSceneRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
}

// .ai.inworld.studio.v1alpha.Scene scene = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSceneRequest::has_scene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scene_ != nullptr);
  return value;
}
inline void CreateSceneRequest::clear_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scene_ != nullptr) _impl_.scene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Scene& CreateSceneRequest::_internal_scene() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Scene* p = _impl_.scene_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene&>(::ai::inworld::studio::v1alpha::_Scene_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene& CreateSceneRequest::scene() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
  return _internal_scene();
}
inline void CreateSceneRequest::unsafe_arena_set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scene_);
  }
  _impl_.scene_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::release_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene* released = _impl_.scene_;
  _impl_.scene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::unsafe_arena_release_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene* temp = _impl_.scene_;
  _impl_.scene_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::_internal_mutable_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene>(GetArena());
    _impl_.scene_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(p);
  }
  return _impl_.scene_;
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::mutable_scene() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Scene* _msg = _internal_mutable_scene();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
  return _msg;
}
inline void CreateSceneRequest::set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(_impl_.scene_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scene_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
}

// -------------------------------------------------------------------

// UpdateSceneRequest

// .ai.inworld.studio.v1alpha.Scene scene = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSceneRequest::has_scene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scene_ != nullptr);
  return value;
}
inline void UpdateSceneRequest::clear_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scene_ != nullptr) _impl_.scene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Scene& UpdateSceneRequest::_internal_scene() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Scene* p = _impl_.scene_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene&>(::ai::inworld::studio::v1alpha::_Scene_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene& UpdateSceneRequest::scene() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
  return _internal_scene();
}
inline void UpdateSceneRequest::unsafe_arena_set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scene_);
  }
  _impl_.scene_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::release_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene* released = _impl_.scene_;
  _impl_.scene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::unsafe_arena_release_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene* temp = _impl_.scene_;
  _impl_.scene_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::_internal_mutable_scene() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene>(GetArena());
    _impl_.scene_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(p);
  }
  return _impl_.scene_;
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::mutable_scene() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Scene* _msg = _internal_mutable_scene();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
  return _msg;
}
inline void UpdateSceneRequest::set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(_impl_.scene_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scene_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSceneRequest::has_update_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_mask_ != nullptr);
  return value;
}
inline const ::google::protobuf::FieldMask& UpdateSceneRequest::_internal_update_mask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::FieldMask&>(::google::protobuf::_FieldMask_default_instance_);
}
inline const ::google::protobuf::FieldMask& UpdateSceneRequest::update_mask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSceneRequest::unsafe_arena_set_allocated_update_mask(::google::protobuf::FieldMask* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = reinterpret_cast<::google::protobuf::FieldMask*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
}
inline ::google::protobuf::FieldMask* UpdateSceneRequest::release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::FieldMask* released = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::FieldMask* UpdateSceneRequest::unsafe_arena_release_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSceneRequest::_internal_mutable_update_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArena());
    _impl_.update_mask_ = reinterpret_cast<::google::protobuf::FieldMask*>(p);
  }
  return _impl_.update_mask_;
}
inline ::google::protobuf::FieldMask* UpdateSceneRequest::mutable_update_mask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
  return _msg;
}
inline void UpdateSceneRequest::set_allocated_update_mask(::google::protobuf::FieldMask* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_mask_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.update_mask_ = reinterpret_cast<::google::protobuf::FieldMask*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteSceneRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSceneRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteSceneRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteSceneRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
}
inline std::string* DeleteSceneRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
  return _s;
}
inline const std::string& DeleteSceneRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void DeleteSceneRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeleteSceneRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeleteSceneRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteSceneRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
}

// -------------------------------------------------------------------

// Scene_CharacterReference_Character_CharacterDescription

// string given_name = 1;
inline void Scene_CharacterReference_Character_CharacterDescription::clear_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.given_name_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::given_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
  return _internal_given_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterDescription::set_given_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.given_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::mutable_given_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_given_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::_internal_given_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.given_name_.Get();
}
inline void Scene_CharacterReference_Character_CharacterDescription::_internal_set_given_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.given_name_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::_internal_mutable_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.given_name_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::release_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
  return _impl_.given_name_.Release();
}
inline void Scene_CharacterReference_Character_CharacterDescription::set_allocated_given_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.given_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.given_name_.IsDefault()) {
          _impl_.given_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
}

// string description = 2;
inline void Scene_CharacterReference_Character_CharacterDescription::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterDescription::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Scene_CharacterReference_Character_CharacterDescription::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
  return _impl_.description_.Release();
}
inline void Scene_CharacterReference_Character_CharacterDescription::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
}

// -------------------------------------------------------------------

// Scene_CharacterReference_Character_CharacterAssets

// string rpm_model_uri = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_model_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterAssets::set_rpm_model_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_model_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_model_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_model_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_model_uri_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_model_uri_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
  return _impl_.rpm_model_uri_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_model_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_model_uri_.IsDefault()) {
          _impl_.rpm_model_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri = 2 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_image_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_image_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
  return _internal_rpm_image_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterAssets::set_rpm_image_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_image_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_image_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_image_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_image_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_image_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
  return _impl_.rpm_image_uri_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_image_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_.IsDefault()) {
          _impl_.rpm_image_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
}

// string rpm_image_uri_portrait = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_image_uri_portrait() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterAssets::set_rpm_image_uri_portrait(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_portrait_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_image_uri_portrait() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri_portrait();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_portrait_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_portrait_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_portrait_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
  return _impl_.rpm_image_uri_portrait_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_portrait_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_portrait_.IsDefault()) {
          _impl_.rpm_image_uri_portrait_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_image_uri_posture() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterAssets::set_rpm_image_uri_posture(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_posture_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_image_uri_posture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri_posture();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_image_uri_posture() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_posture_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_posture_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_posture_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
  return _impl_.rpm_image_uri_posture_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_posture_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_posture_.IsDefault()) {
          _impl_.rpm_image_uri_posture_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
}

// string avatar_img = 5;
inline void Scene_CharacterReference_Character_CharacterAssets::clear_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::avatar_img() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img)
  return _internal_avatar_img();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterAssets::set_avatar_img(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_avatar_img() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_img();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_avatar_img() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_img_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_avatar_img(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_img_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img)
  return _impl_.avatar_img_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_avatar_img(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_img_.IsDefault()) {
          _impl_.avatar_img_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img)
}

// string avatar_img_original = 6;
inline void Scene_CharacterReference_Character_CharacterAssets::clear_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_original_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::avatar_img_original() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img_original)
  return _internal_avatar_img_original();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character_CharacterAssets::set_avatar_img_original(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_original_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img_original)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_avatar_img_original() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_img_original();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img_original)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_avatar_img_original() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_img_original_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_avatar_img_original(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_original_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_img_original_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img_original)
  return _impl_.avatar_img_original_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_avatar_img_original(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_original_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_img_original_.IsDefault()) {
          _impl_.avatar_img_original_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.avatar_img_original)
}

// -------------------------------------------------------------------

// Scene_CharacterReference_Character

// .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription default_character_description = 1;
inline bool Scene_CharacterReference_Character::has_default_character_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_character_description_ != nullptr);
  return value;
}
inline void Scene_CharacterReference_Character::clear_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.default_character_description_ != nullptr) _impl_.default_character_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& Scene_CharacterReference_Character::_internal_default_character_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* p = _impl_.default_character_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription&>(::ai::inworld::studio::v1alpha::_Scene_CharacterReference_Character_CharacterDescription_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& Scene_CharacterReference_Character::default_character_description() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
  return _internal_default_character_description();
}
inline void Scene_CharacterReference_Character::unsafe_arena_set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_character_description_);
  }
  _impl_.default_character_description_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::release_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* released = _impl_.default_character_description_;
  _impl_.default_character_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::unsafe_arena_release_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* temp = _impl_.default_character_description_;
  _impl_.default_character_description_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::_internal_mutable_default_character_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_character_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription>(GetArena());
    _impl_.default_character_description_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription*>(p);
  }
  return _impl_.default_character_description_;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::mutable_default_character_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* _msg = _internal_mutable_default_character_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
  return _msg;
}
inline void Scene_CharacterReference_Character::set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription*>(_impl_.default_character_description_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.default_character_description_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
}

// .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets default_character_assets = 2;
inline bool Scene_CharacterReference_Character::has_default_character_assets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_character_assets_ != nullptr);
  return value;
}
inline void Scene_CharacterReference_Character::clear_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.default_character_assets_ != nullptr) _impl_.default_character_assets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& Scene_CharacterReference_Character::_internal_default_character_assets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* p = _impl_.default_character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets&>(::ai::inworld::studio::v1alpha::_Scene_CharacterReference_Character_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& Scene_CharacterReference_Character::default_character_assets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
  return _internal_default_character_assets();
}
inline void Scene_CharacterReference_Character::unsafe_arena_set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_character_assets_);
  }
  _impl_.default_character_assets_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::release_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* released = _impl_.default_character_assets_;
  _impl_.default_character_assets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::unsafe_arena_release_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* temp = _impl_.default_character_assets_;
  _impl_.default_character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::_internal_mutable_default_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.default_character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets>(GetArena());
    _impl_.default_character_assets_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets*>(p);
  }
  return _impl_.default_character_assets_;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::mutable_default_character_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* _msg = _internal_mutable_default_character_assets();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
  return _msg;
}
inline void Scene_CharacterReference_Character::set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets*>(_impl_.default_character_assets_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.default_character_assets_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
}

// string additional_agent_info = 3;
inline void Scene_CharacterReference_Character::clear_additional_agent_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.additional_agent_info_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character::additional_agent_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.additional_agent_info)
  return _internal_additional_agent_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference_Character::set_additional_agent_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.additional_agent_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.additional_agent_info)
}
inline std::string* Scene_CharacterReference_Character::mutable_additional_agent_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_additional_agent_info();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.additional_agent_info)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character::_internal_additional_agent_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.additional_agent_info_.Get();
}
inline void Scene_CharacterReference_Character::_internal_set_additional_agent_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.additional_agent_info_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference_Character::_internal_mutable_additional_agent_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.additional_agent_info_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference_Character::release_additional_agent_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.additional_agent_info)
  return _impl_.additional_agent_info_.Release();
}
inline void Scene_CharacterReference_Character::set_allocated_additional_agent_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.additional_agent_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.additional_agent_info_.IsDefault()) {
          _impl_.additional_agent_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.additional_agent_info)
}

// -------------------------------------------------------------------

// Scene_CharacterReference

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Scene_CharacterReference::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
}
inline std::string* Scene_CharacterReference::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
  return _s;
}
inline const std::string& Scene_CharacterReference::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Scene_CharacterReference::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
  return _impl_.name_.Release();
}
inline void Scene_CharacterReference::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
}

// string character = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void Scene_CharacterReference::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference::character() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
  return _internal_character();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_CharacterReference::set_character(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
}
inline std::string* Scene_CharacterReference::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
  return _s;
}
inline const std::string& Scene_CharacterReference::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_.Get();
}
inline void Scene_CharacterReference::_internal_set_character(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_.Set(value, GetArena());
}
inline std::string* Scene_CharacterReference::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_.Mutable( GetArena());
}
inline std::string* Scene_CharacterReference::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
  return _impl_.character_.Release();
}
inline void Scene_CharacterReference::set_allocated_character(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_.IsDefault()) {
          _impl_.character_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
}

// repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character character_overloads = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Scene_CharacterReference::_internal_character_overloads_size() const {
  return _internal_character_overloads().size();
}
inline int Scene_CharacterReference::character_overloads_size() const {
  return _internal_character_overloads_size();
}
inline void Scene_CharacterReference::clear_character_overloads() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_overloads_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* Scene_CharacterReference::mutable_character_overloads(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _internal_mutable_character_overloads()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>* Scene_CharacterReference::mutable_character_overloads()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_character_overloads();
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character& Scene_CharacterReference::character_overloads(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _internal_character_overloads().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* Scene_CharacterReference::add_character_overloads() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* _add = _internal_mutable_character_overloads()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>& Scene_CharacterReference::character_overloads() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _internal_character_overloads();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>&
Scene_CharacterReference::_internal_character_overloads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_overloads_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>*
Scene_CharacterReference::_internal_mutable_character_overloads() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.character_overloads_;
}

// -------------------------------------------------------------------

// Scene_SceneTrigger

// string trigger = 1 [(.google.api.resource_reference) = {
inline void Scene_SceneTrigger::clear_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trigger_.ClearToEmpty();
}
inline const std::string& Scene_SceneTrigger::trigger() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
  return _internal_trigger();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_SceneTrigger::set_trigger(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trigger_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
}
inline std::string* Scene_SceneTrigger::mutable_trigger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
  return _s;
}
inline const std::string& Scene_SceneTrigger::_internal_trigger() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trigger_.Get();
}
inline void Scene_SceneTrigger::_internal_set_trigger(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trigger_.Set(value, GetArena());
}
inline std::string* Scene_SceneTrigger::_internal_mutable_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trigger_.Mutable( GetArena());
}
inline std::string* Scene_SceneTrigger::release_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
  return _impl_.trigger_.Release();
}
inline void Scene_SceneTrigger::set_allocated_trigger(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trigger_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trigger_.IsDefault()) {
          _impl_.trigger_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
}

// string description = 2;
inline void Scene_SceneTrigger::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Scene_SceneTrigger::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene_SceneTrigger::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
}
inline std::string* Scene_SceneTrigger::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
  return _s;
}
inline const std::string& Scene_SceneTrigger::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Scene_SceneTrigger::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Scene_SceneTrigger::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Scene_SceneTrigger::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
  return _impl_.description_.Release();
}
inline void Scene_SceneTrigger::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
}

// -------------------------------------------------------------------

// Scene_Meta

// int32 total_triggers = 1;
inline void Scene_Meta::clear_total_triggers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_triggers_ = 0;
}
inline ::int32_t Scene_Meta::total_triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.Meta.total_triggers)
  return _internal_total_triggers();
}
inline void Scene_Meta::set_total_triggers(::int32_t value) {
  _internal_set_total_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.Meta.total_triggers)
}
inline ::int32_t Scene_Meta::_internal_total_triggers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_triggers_;
}
inline void Scene_Meta::_internal_set_total_triggers(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_triggers_ = value;
}

// int32 total_characters = 2;
inline void Scene_Meta::clear_total_characters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_characters_ = 0;
}
inline ::int32_t Scene_Meta::total_characters() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.Meta.total_characters)
  return _internal_total_characters();
}
inline void Scene_Meta::set_total_characters(::int32_t value) {
  _internal_set_total_characters(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.Meta.total_characters)
}
inline ::int32_t Scene_Meta::_internal_total_characters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_characters_;
}
inline void Scene_Meta::_internal_set_total_characters(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_characters_ = value;
}

// int32 total_common_knowledge = 3;
inline void Scene_Meta::clear_total_common_knowledge() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_common_knowledge_ = 0;
}
inline ::int32_t Scene_Meta::total_common_knowledge() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.Meta.total_common_knowledge)
  return _internal_total_common_knowledge();
}
inline void Scene_Meta::set_total_common_knowledge(::int32_t value) {
  _internal_set_total_common_knowledge(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.Meta.total_common_knowledge)
}
inline ::int32_t Scene_Meta::_internal_total_common_knowledge() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_common_knowledge_;
}
inline void Scene_Meta::_internal_set_total_common_knowledge(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_common_knowledge_ = value;
}

// -------------------------------------------------------------------

// Scene

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Scene::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Scene::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.name)
}
inline std::string* Scene::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.name)
  return _s;
}
inline const std::string& Scene::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Scene::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Scene::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Scene::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.name)
  return _impl_.name_.Release();
}
inline void Scene::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.name)
}

// string description = 2;
inline void Scene::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Scene::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.description)
}
inline std::string* Scene::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.description)
  return _s;
}
inline const std::string& Scene::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Scene::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Scene::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Scene::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.description)
  return _impl_.description_.Release();
}
inline void Scene::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.description)
}

// repeated .ai.inworld.studio.v1alpha.Scene.SceneTrigger scene_triggers = 3;
inline int Scene::_internal_scene_triggers_size() const {
  return _internal_scene_triggers().size();
}
inline int Scene::scene_triggers_size() const {
  return _internal_scene_triggers_size();
}
inline void Scene::clear_scene_triggers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_triggers_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* Scene::mutable_scene_triggers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _internal_mutable_scene_triggers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>* Scene::mutable_scene_triggers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scene_triggers();
}
inline const ::ai::inworld::studio::v1alpha::Scene_SceneTrigger& Scene::scene_triggers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _internal_scene_triggers().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* Scene::add_scene_triggers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* _add = _internal_mutable_scene_triggers()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>& Scene::scene_triggers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _internal_scene_triggers();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>&
Scene::_internal_scene_triggers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scene_triggers_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>*
Scene::_internal_mutable_scene_triggers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scene_triggers_;
}

// repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference character_references = 4;
inline int Scene::_internal_character_references_size() const {
  return _internal_character_references().size();
}
inline int Scene::character_references_size() const {
  return _internal_character_references_size();
}
inline void Scene::clear_character_references() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_references_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference* Scene::mutable_character_references(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.character_references)
  return _internal_mutable_character_references()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference>* Scene::mutable_character_references()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.character_references)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_character_references();
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference& Scene::character_references(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.character_references)
  return _internal_character_references().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference* Scene::add_character_references() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* _add = _internal_mutable_character_references()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.character_references)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference>& Scene::character_references() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.character_references)
  return _internal_character_references();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference>&
Scene::_internal_character_references() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_references_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene_CharacterReference>*
Scene::_internal_mutable_character_references() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.character_references_;
}

// string display_name = 5 [(.ai.inworld.options.examples) = {
inline void Scene::clear_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Scene::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.display_name)
}
inline std::string* Scene::mutable_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.display_name)
  return _s;
}
inline const std::string& Scene::_internal_display_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_name_.Get();
}
inline void Scene::_internal_set_display_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(value, GetArena());
}
inline std::string* Scene::_internal_mutable_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.display_name_.Mutable( GetArena());
}
inline std::string* Scene::release_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.display_name)
  return _impl_.display_name_.Release();
}
inline void Scene::set_allocated_display_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_name_.IsDefault()) {
          _impl_.display_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.display_name)
}

// .ai.inworld.studio.v1alpha.Scene.Meta meta = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Scene::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void Scene::clear_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::studio::v1alpha::Scene_Meta& Scene::_internal_meta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::studio::v1alpha::Scene_Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene_Meta&>(::ai::inworld::studio::v1alpha::_Scene_Meta_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene_Meta& Scene::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.meta)
  return _internal_meta();
}
inline void Scene::unsafe_arena_set_allocated_meta(::ai::inworld::studio::v1alpha::Scene_Meta* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_Meta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Scene.meta)
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::release_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene_Meta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::unsafe_arena_release_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.meta)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::studio::v1alpha::Scene_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::_internal_mutable_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_Meta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_Meta*>(p);
  }
  return _impl_.meta_;
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::studio::v1alpha::Scene_Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.meta)
  return _msg;
}
inline void Scene::set_allocated_meta(::ai::inworld::studio::v1alpha::Scene_Meta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_Meta*>(_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_Meta*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_ = reinterpret_cast<::ai::inworld::studio::v1alpha::Scene_Meta*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.meta)
}

// repeated string common_knowledges = 7 [(.ai.inworld.options.examples) = {
inline int Scene::_internal_common_knowledges_size() const {
  return _internal_common_knowledges().size();
}
inline int Scene::common_knowledges_size() const {
  return _internal_common_knowledges_size();
}
inline void Scene::clear_common_knowledges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.common_knowledges_.Clear();
}
inline std::string* Scene::add_common_knowledges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_common_knowledges()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Scene.common_knowledges)
  return _s;
}
inline const std::string& Scene::common_knowledges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.common_knowledges)
  return _internal_common_knowledges().Get(index);
}
inline std::string* Scene::mutable_common_knowledges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.common_knowledges)
  return _internal_mutable_common_knowledges()->Mutable(index);
}
inline void Scene::set_common_knowledges(int index, const std::string& value) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::set_common_knowledges(int index, std::string&& value) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::set_common_knowledges(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_common_knowledges()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::set_common_knowledges(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::set_common_knowledges(int index, absl::string_view value) {
  _internal_mutable_common_knowledges()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::add_common_knowledges(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::add_common_knowledges(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::add_common_knowledges(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::add_common_knowledges(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline void Scene::add_common_knowledges(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_common_knowledges()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.studio.v1alpha.Scene.common_knowledges)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Scene::common_knowledges() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.common_knowledges)
  return _internal_common_knowledges();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Scene::mutable_common_knowledges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.common_knowledges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_common_knowledges();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Scene::_internal_common_knowledges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.common_knowledges_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Scene::_internal_mutable_common_knowledges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.common_knowledges_;
}

// string time_period = 8;
inline void Scene::clear_time_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_period_.ClearToEmpty();
}
inline const std::string& Scene::time_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.time_period)
  return _internal_time_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene::set_time_period(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.time_period)
}
inline std::string* Scene::mutable_time_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time_period();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.time_period)
  return _s;
}
inline const std::string& Scene::_internal_time_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_period_.Get();
}
inline void Scene::_internal_set_time_period(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_period_.Set(value, GetArena());
}
inline std::string* Scene::_internal_mutable_time_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.time_period_.Mutable( GetArena());
}
inline std::string* Scene::release_time_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.time_period)
  return _impl_.time_period_.Release();
}
inline void Scene::set_allocated_time_period(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_period_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.time_period_.IsDefault()) {
          _impl_.time_period_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.time_period)
}

// -------------------------------------------------------------------

// ListScenesResponse

// repeated .ai.inworld.studio.v1alpha.Scene scenes = 1;
inline int ListScenesResponse::_internal_scenes_size() const {
  return _internal_scenes().size();
}
inline int ListScenesResponse::scenes_size() const {
  return _internal_scenes_size();
}
inline void ListScenesResponse::clear_scenes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scenes_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene* ListScenesResponse::mutable_scenes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _internal_mutable_scenes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>* ListScenesResponse::mutable_scenes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scenes();
}
inline const ::ai::inworld::studio::v1alpha::Scene& ListScenesResponse::scenes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _internal_scenes().Get(index);
}
inline ::ai::inworld::studio::v1alpha::Scene* ListScenesResponse::add_scenes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::studio::v1alpha::Scene* _add = _internal_mutable_scenes()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>& ListScenesResponse::scenes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _internal_scenes();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>&
ListScenesResponse::_internal_scenes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scenes_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::studio::v1alpha::Scene>*
ListScenesResponse::_internal_mutable_scenes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scenes_;
}

// string next_page_token = 2;
inline void ListScenesResponse::clear_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListScenesResponse::next_page_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListScenesResponse::set_next_page_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
}
inline std::string* ListScenesResponse::mutable_next_page_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
  return _s;
}
inline const std::string& ListScenesResponse::_internal_next_page_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.next_page_token_.Get();
}
inline void ListScenesResponse::_internal_set_next_page_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.next_page_token_.Set(value, GetArena());
}
inline std::string* ListScenesResponse::_internal_mutable_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.next_page_token_.Mutable( GetArena());
}
inline std::string* ListScenesResponse::release_next_page_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListScenesResponse::set_allocated_next_page_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.next_page_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_page_token_.IsDefault()) {
          _impl_.next_page_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeploySceneRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeploySceneRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeploySceneRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeploySceneRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
}
inline std::string* DeploySceneRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
  return _s;
}
inline const std::string& DeploySceneRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void DeploySceneRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeploySceneRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeploySceneRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
  return _impl_.name_.Release();
}
inline void DeploySceneRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
}

// -------------------------------------------------------------------

// DeploySceneAsyncMetadata

// -------------------------------------------------------------------

// DeploySceneAsyncResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ai::inworld::studio::v1alpha::SceneItemView> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::studio::v1alpha::SceneItemView>() {
  return ::ai::inworld::studio::v1alpha::SceneItemView_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto_2epb_2eh
