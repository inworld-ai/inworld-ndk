// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/common_knowledges.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class CommonKnowledge;
struct CommonKnowledgeDefaultTypeInternal;
extern CommonKnowledgeDefaultTypeInternal _CommonKnowledge_default_instance_;
class CreateCommonKnowledgeRequest;
struct CreateCommonKnowledgeRequestDefaultTypeInternal;
extern CreateCommonKnowledgeRequestDefaultTypeInternal _CreateCommonKnowledgeRequest_default_instance_;
class DeleteCommonKnowledgeRequest;
struct DeleteCommonKnowledgeRequestDefaultTypeInternal;
extern DeleteCommonKnowledgeRequestDefaultTypeInternal _DeleteCommonKnowledgeRequest_default_instance_;
class GetCommonKnowledgeRequest;
struct GetCommonKnowledgeRequestDefaultTypeInternal;
extern GetCommonKnowledgeRequestDefaultTypeInternal _GetCommonKnowledgeRequest_default_instance_;
class ListCommonKnowledgesRequest;
struct ListCommonKnowledgesRequestDefaultTypeInternal;
extern ListCommonKnowledgesRequestDefaultTypeInternal _ListCommonKnowledgesRequest_default_instance_;
class ListCommonKnowledgesResponse;
struct ListCommonKnowledgesResponseDefaultTypeInternal;
extern ListCommonKnowledgesResponseDefaultTypeInternal _ListCommonKnowledgesResponse_default_instance_;
class UpdateCommonKnowledgeRequest;
struct UpdateCommonKnowledgeRequestDefaultTypeInternal;
extern UpdateCommonKnowledgeRequestDefaultTypeInternal _UpdateCommonKnowledgeRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::CommonKnowledge* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CommonKnowledge>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CreateCommonKnowledgeRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeleteCommonKnowledgeRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetCommonKnowledgeRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListCommonKnowledgesRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListCommonKnowledgesResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdateCommonKnowledgeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================

class GetCommonKnowledgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest) */ {
 public:
  inline GetCommonKnowledgeRequest() : GetCommonKnowledgeRequest(nullptr) {}
  ~GetCommonKnowledgeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommonKnowledgeRequest(const GetCommonKnowledgeRequest& from);
  GetCommonKnowledgeRequest(GetCommonKnowledgeRequest&& from) noexcept
    : GetCommonKnowledgeRequest() {
    *this = ::std::move(from);
  }

  inline GetCommonKnowledgeRequest& operator=(const GetCommonKnowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommonKnowledgeRequest& operator=(GetCommonKnowledgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommonKnowledgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommonKnowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommonKnowledgeRequest*>(
               &_GetCommonKnowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetCommonKnowledgeRequest& a, GetCommonKnowledgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommonKnowledgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommonKnowledgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCommonKnowledgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCommonKnowledgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCommonKnowledgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCommonKnowledgeRequest& from) {
    GetCommonKnowledgeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommonKnowledgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest";
  }
  protected:
  explicit GetCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// -------------------------------------------------------------------

class ListCommonKnowledgesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest) */ {
 public:
  inline ListCommonKnowledgesRequest() : ListCommonKnowledgesRequest(nullptr) {}
  ~ListCommonKnowledgesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListCommonKnowledgesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCommonKnowledgesRequest(const ListCommonKnowledgesRequest& from);
  ListCommonKnowledgesRequest(ListCommonKnowledgesRequest&& from) noexcept
    : ListCommonKnowledgesRequest() {
    *this = ::std::move(from);
  }

  inline ListCommonKnowledgesRequest& operator=(const ListCommonKnowledgesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCommonKnowledgesRequest& operator=(ListCommonKnowledgesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCommonKnowledgesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCommonKnowledgesRequest* internal_default_instance() {
    return reinterpret_cast<const ListCommonKnowledgesRequest*>(
               &_ListCommonKnowledgesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListCommonKnowledgesRequest& a, ListCommonKnowledgesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCommonKnowledgesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCommonKnowledgesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCommonKnowledgesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCommonKnowledgesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCommonKnowledgesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCommonKnowledgesRequest& from) {
    ListCommonKnowledgesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCommonKnowledgesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest";
  }
  protected:
  explicit ListCommonKnowledgesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// -------------------------------------------------------------------

class CreateCommonKnowledgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest) */ {
 public:
  inline CreateCommonKnowledgeRequest() : CreateCommonKnowledgeRequest(nullptr) {}
  ~CreateCommonKnowledgeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCommonKnowledgeRequest(const CreateCommonKnowledgeRequest& from);
  CreateCommonKnowledgeRequest(CreateCommonKnowledgeRequest&& from) noexcept
    : CreateCommonKnowledgeRequest() {
    *this = ::std::move(from);
  }

  inline CreateCommonKnowledgeRequest& operator=(const CreateCommonKnowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCommonKnowledgeRequest& operator=(CreateCommonKnowledgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCommonKnowledgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCommonKnowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCommonKnowledgeRequest*>(
               &_CreateCommonKnowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateCommonKnowledgeRequest& a, CreateCommonKnowledgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCommonKnowledgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCommonKnowledgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCommonKnowledgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCommonKnowledgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCommonKnowledgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCommonKnowledgeRequest& from) {
    CreateCommonKnowledgeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCommonKnowledgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest";
  }
  protected:
  explicit CreateCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kCommonKnowledgeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .ai.inworld.studio.v1alpha.CommonKnowledge common_knowledge = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_common_knowledge() const;
  private:
  bool _internal_has_common_knowledge() const;
  public:
  void clear_common_knowledge();
  const ::ai::inworld::studio::v1alpha::CommonKnowledge& common_knowledge() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::CommonKnowledge* release_common_knowledge();
  ::ai::inworld::studio::v1alpha::CommonKnowledge* mutable_common_knowledge();
  void set_allocated_common_knowledge(::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge);
  private:
  const ::ai::inworld::studio::v1alpha::CommonKnowledge& _internal_common_knowledge() const;
  ::ai::inworld::studio::v1alpha::CommonKnowledge* _internal_mutable_common_knowledge();
  public:
  void unsafe_arena_set_allocated_common_knowledge(
      ::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge);
  ::ai::inworld::studio::v1alpha::CommonKnowledge* unsafe_arena_release_common_knowledge();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// -------------------------------------------------------------------

class UpdateCommonKnowledgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest) */ {
 public:
  inline UpdateCommonKnowledgeRequest() : UpdateCommonKnowledgeRequest(nullptr) {}
  ~UpdateCommonKnowledgeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCommonKnowledgeRequest(const UpdateCommonKnowledgeRequest& from);
  UpdateCommonKnowledgeRequest(UpdateCommonKnowledgeRequest&& from) noexcept
    : UpdateCommonKnowledgeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCommonKnowledgeRequest& operator=(const UpdateCommonKnowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCommonKnowledgeRequest& operator=(UpdateCommonKnowledgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCommonKnowledgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCommonKnowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCommonKnowledgeRequest*>(
               &_UpdateCommonKnowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateCommonKnowledgeRequest& a, UpdateCommonKnowledgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCommonKnowledgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCommonKnowledgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCommonKnowledgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCommonKnowledgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCommonKnowledgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateCommonKnowledgeRequest& from) {
    UpdateCommonKnowledgeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCommonKnowledgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest";
  }
  protected:
  explicit UpdateCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonKnowledgeFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.CommonKnowledge common_knowledge = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_common_knowledge() const;
  private:
  bool _internal_has_common_knowledge() const;
  public:
  void clear_common_knowledge();
  const ::ai::inworld::studio::v1alpha::CommonKnowledge& common_knowledge() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::CommonKnowledge* release_common_knowledge();
  ::ai::inworld::studio::v1alpha::CommonKnowledge* mutable_common_knowledge();
  void set_allocated_common_knowledge(::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge);
  private:
  const ::ai::inworld::studio::v1alpha::CommonKnowledge& _internal_common_knowledge() const;
  ::ai::inworld::studio::v1alpha::CommonKnowledge* _internal_mutable_common_knowledge();
  public:
  void unsafe_arena_set_allocated_common_knowledge(
      ::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge);
  ::ai::inworld::studio::v1alpha::CommonKnowledge* unsafe_arena_release_common_knowledge();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// -------------------------------------------------------------------

class DeleteCommonKnowledgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest) */ {
 public:
  inline DeleteCommonKnowledgeRequest() : DeleteCommonKnowledgeRequest(nullptr) {}
  ~DeleteCommonKnowledgeRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCommonKnowledgeRequest(const DeleteCommonKnowledgeRequest& from);
  DeleteCommonKnowledgeRequest(DeleteCommonKnowledgeRequest&& from) noexcept
    : DeleteCommonKnowledgeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCommonKnowledgeRequest& operator=(const DeleteCommonKnowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCommonKnowledgeRequest& operator=(DeleteCommonKnowledgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCommonKnowledgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCommonKnowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCommonKnowledgeRequest*>(
               &_DeleteCommonKnowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteCommonKnowledgeRequest& a, DeleteCommonKnowledgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCommonKnowledgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCommonKnowledgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCommonKnowledgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCommonKnowledgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCommonKnowledgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteCommonKnowledgeRequest& from) {
    DeleteCommonKnowledgeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCommonKnowledgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest";
  }
  protected:
  explicit DeleteCommonKnowledgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// -------------------------------------------------------------------

class CommonKnowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CommonKnowledge) */ {
 public:
  inline CommonKnowledge() : CommonKnowledge(nullptr) {}
  ~CommonKnowledge() override;
  explicit PROTOBUF_CONSTEXPR CommonKnowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonKnowledge(const CommonKnowledge& from);
  CommonKnowledge(CommonKnowledge&& from) noexcept
    : CommonKnowledge() {
    *this = ::std::move(from);
  }

  inline CommonKnowledge& operator=(const CommonKnowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonKnowledge& operator=(CommonKnowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonKnowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonKnowledge* internal_default_instance() {
    return reinterpret_cast<const CommonKnowledge*>(
               &_CommonKnowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommonKnowledge& a, CommonKnowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonKnowledge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonKnowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonKnowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonKnowledge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonKnowledge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonKnowledge& from) {
    CommonKnowledge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonKnowledge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CommonKnowledge";
  }
  protected:
  explicit CommonKnowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryRecordsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // repeated string memory_records = 4;
  int memory_records_size() const;
  private:
  int _internal_memory_records_size() const;
  public:
  void clear_memory_records();
  const std::string& memory_records(int index) const;
  std::string* mutable_memory_records(int index);
  void set_memory_records(int index, const std::string& value);
  void set_memory_records(int index, std::string&& value);
  void set_memory_records(int index, const char* value);
  void set_memory_records(int index, const char* value, size_t size);
  std::string* add_memory_records();
  void add_memory_records(const std::string& value);
  void add_memory_records(std::string&& value);
  void add_memory_records(const char* value);
  void add_memory_records(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& memory_records() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_memory_records();
  private:
  const std::string& _internal_memory_records(int index) const;
  std::string* _internal_add_memory_records();
  public:

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CommonKnowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> memory_records_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// -------------------------------------------------------------------

class ListCommonKnowledgesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse) */ {
 public:
  inline ListCommonKnowledgesResponse() : ListCommonKnowledgesResponse(nullptr) {}
  ~ListCommonKnowledgesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListCommonKnowledgesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCommonKnowledgesResponse(const ListCommonKnowledgesResponse& from);
  ListCommonKnowledgesResponse(ListCommonKnowledgesResponse&& from) noexcept
    : ListCommonKnowledgesResponse() {
    *this = ::std::move(from);
  }

  inline ListCommonKnowledgesResponse& operator=(const ListCommonKnowledgesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCommonKnowledgesResponse& operator=(ListCommonKnowledgesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCommonKnowledgesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCommonKnowledgesResponse* internal_default_instance() {
    return reinterpret_cast<const ListCommonKnowledgesResponse*>(
               &_ListCommonKnowledgesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListCommonKnowledgesResponse& a, ListCommonKnowledgesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCommonKnowledgesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCommonKnowledgesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCommonKnowledgesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCommonKnowledgesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCommonKnowledgesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCommonKnowledgesResponse& from) {
    ListCommonKnowledgesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCommonKnowledgesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse";
  }
  protected:
  explicit ListCommonKnowledgesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonKnowledgesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.CommonKnowledge common_knowledges = 1;
  int common_knowledges_size() const;
  private:
  int _internal_common_knowledges_size() const;
  public:
  void clear_common_knowledges();
  ::ai::inworld::studio::v1alpha::CommonKnowledge* mutable_common_knowledges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::CommonKnowledge >*
      mutable_common_knowledges();
  private:
  const ::ai::inworld::studio::v1alpha::CommonKnowledge& _internal_common_knowledges(int index) const;
  ::ai::inworld::studio::v1alpha::CommonKnowledge* _internal_add_common_knowledges();
  public:
  const ::ai::inworld::studio::v1alpha::CommonKnowledge& common_knowledges(int index) const;
  ::ai::inworld::studio::v1alpha::CommonKnowledge* add_common_knowledges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::CommonKnowledge >&
      common_knowledges() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::CommonKnowledge > common_knowledges_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetCommonKnowledgeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCommonKnowledgeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCommonKnowledgeRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCommonKnowledgeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest.name)
}
inline std::string* GetCommonKnowledgeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest.name)
  return _s;
}
inline const std::string& GetCommonKnowledgeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetCommonKnowledgeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCommonKnowledgeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCommonKnowledgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest.name)
  return _impl_.name_.Release();
}
inline void GetCommonKnowledgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCommonKnowledgeRequest.name)
}

// -------------------------------------------------------------------

// ListCommonKnowledgesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListCommonKnowledgesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListCommonKnowledgesRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCommonKnowledgesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.parent)
}
inline std::string* ListCommonKnowledgesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.parent)
  return _s;
}
inline const std::string& ListCommonKnowledgesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListCommonKnowledgesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListCommonKnowledgesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.parent)
}

// int32 page_size = 2;
inline void ListCommonKnowledgesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListCommonKnowledgesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListCommonKnowledgesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_size)
  return _internal_page_size();
}
inline void ListCommonKnowledgesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListCommonKnowledgesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_size)
}

// string page_token = 3;
inline void ListCommonKnowledgesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListCommonKnowledgesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCommonKnowledgesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_token)
}
inline std::string* ListCommonKnowledgesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_token)
  return _s;
}
inline const std::string& ListCommonKnowledgesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListCommonKnowledgesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListCommonKnowledgesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.page_token)
}

// string filter = 4;
inline void ListCommonKnowledgesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListCommonKnowledgesRequest::filter() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCommonKnowledgesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.filter)
}
inline std::string* ListCommonKnowledgesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.filter)
  return _s;
}
inline const std::string& ListCommonKnowledgesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListCommonKnowledgesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListCommonKnowledgesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCommonKnowledgesRequest.filter)
}

// -------------------------------------------------------------------

// CreateCommonKnowledgeRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateCommonKnowledgeRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateCommonKnowledgeRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCommonKnowledgeRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.parent)
}
inline std::string* CreateCommonKnowledgeRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.parent)
  return _s;
}
inline const std::string& CreateCommonKnowledgeRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateCommonKnowledgeRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCommonKnowledgeRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCommonKnowledgeRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateCommonKnowledgeRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.parent)
}

// .ai.inworld.studio.v1alpha.CommonKnowledge common_knowledge = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateCommonKnowledgeRequest::_internal_has_common_knowledge() const {
  return this != internal_default_instance() && _impl_.common_knowledge_ != nullptr;
}
inline bool CreateCommonKnowledgeRequest::has_common_knowledge() const {
  return _internal_has_common_knowledge();
}
inline void CreateCommonKnowledgeRequest::clear_common_knowledge() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_knowledge_ != nullptr) {
    delete _impl_.common_knowledge_;
  }
  _impl_.common_knowledge_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::CommonKnowledge& CreateCommonKnowledgeRequest::_internal_common_knowledge() const {
  const ::ai::inworld::studio::v1alpha::CommonKnowledge* p = _impl_.common_knowledge_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CommonKnowledge&>(
      ::ai::inworld::studio::v1alpha::_CommonKnowledge_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CommonKnowledge& CreateCommonKnowledgeRequest::common_knowledge() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.common_knowledge)
  return _internal_common_knowledge();
}
inline void CreateCommonKnowledgeRequest::unsafe_arena_set_allocated_common_knowledge(
    ::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_knowledge_);
  }
  _impl_.common_knowledge_ = common_knowledge;
  if (common_knowledge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.common_knowledge)
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* CreateCommonKnowledgeRequest::release_common_knowledge() {
  
  ::ai::inworld::studio::v1alpha::CommonKnowledge* temp = _impl_.common_knowledge_;
  _impl_.common_knowledge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* CreateCommonKnowledgeRequest::unsafe_arena_release_common_knowledge() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.common_knowledge)
  
  ::ai::inworld::studio::v1alpha::CommonKnowledge* temp = _impl_.common_knowledge_;
  _impl_.common_knowledge_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* CreateCommonKnowledgeRequest::_internal_mutable_common_knowledge() {
  
  if (_impl_.common_knowledge_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CommonKnowledge>(GetArenaForAllocation());
    _impl_.common_knowledge_ = p;
  }
  return _impl_.common_knowledge_;
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* CreateCommonKnowledgeRequest::mutable_common_knowledge() {
  ::ai::inworld::studio::v1alpha::CommonKnowledge* _msg = _internal_mutable_common_knowledge();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.common_knowledge)
  return _msg;
}
inline void CreateCommonKnowledgeRequest::set_allocated_common_knowledge(::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_knowledge_;
  }
  if (common_knowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_knowledge);
    if (message_arena != submessage_arena) {
      common_knowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_knowledge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_knowledge_ = common_knowledge;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateCommonKnowledgeRequest.common_knowledge)
}

// -------------------------------------------------------------------

// UpdateCommonKnowledgeRequest

// .ai.inworld.studio.v1alpha.CommonKnowledge common_knowledge = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCommonKnowledgeRequest::_internal_has_common_knowledge() const {
  return this != internal_default_instance() && _impl_.common_knowledge_ != nullptr;
}
inline bool UpdateCommonKnowledgeRequest::has_common_knowledge() const {
  return _internal_has_common_knowledge();
}
inline void UpdateCommonKnowledgeRequest::clear_common_knowledge() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_knowledge_ != nullptr) {
    delete _impl_.common_knowledge_;
  }
  _impl_.common_knowledge_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::CommonKnowledge& UpdateCommonKnowledgeRequest::_internal_common_knowledge() const {
  const ::ai::inworld::studio::v1alpha::CommonKnowledge* p = _impl_.common_knowledge_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CommonKnowledge&>(
      ::ai::inworld::studio::v1alpha::_CommonKnowledge_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CommonKnowledge& UpdateCommonKnowledgeRequest::common_knowledge() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.common_knowledge)
  return _internal_common_knowledge();
}
inline void UpdateCommonKnowledgeRequest::unsafe_arena_set_allocated_common_knowledge(
    ::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_knowledge_);
  }
  _impl_.common_knowledge_ = common_knowledge;
  if (common_knowledge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.common_knowledge)
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* UpdateCommonKnowledgeRequest::release_common_knowledge() {
  
  ::ai::inworld::studio::v1alpha::CommonKnowledge* temp = _impl_.common_knowledge_;
  _impl_.common_knowledge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* UpdateCommonKnowledgeRequest::unsafe_arena_release_common_knowledge() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.common_knowledge)
  
  ::ai::inworld::studio::v1alpha::CommonKnowledge* temp = _impl_.common_knowledge_;
  _impl_.common_knowledge_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* UpdateCommonKnowledgeRequest::_internal_mutable_common_knowledge() {
  
  if (_impl_.common_knowledge_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CommonKnowledge>(GetArenaForAllocation());
    _impl_.common_knowledge_ = p;
  }
  return _impl_.common_knowledge_;
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* UpdateCommonKnowledgeRequest::mutable_common_knowledge() {
  ::ai::inworld::studio::v1alpha::CommonKnowledge* _msg = _internal_mutable_common_knowledge();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.common_knowledge)
  return _msg;
}
inline void UpdateCommonKnowledgeRequest::set_allocated_common_knowledge(::ai::inworld::studio::v1alpha::CommonKnowledge* common_knowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_knowledge_;
  }
  if (common_knowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_knowledge);
    if (message_arena != submessage_arena) {
      common_knowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_knowledge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_knowledge_ = common_knowledge;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.common_knowledge)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCommonKnowledgeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateCommonKnowledgeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCommonKnowledgeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCommonKnowledgeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCommonKnowledgeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCommonKnowledgeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCommonKnowledgeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCommonKnowledgeRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCommonKnowledgeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.update_mask)
  return _msg;
}
inline void UpdateCommonKnowledgeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCommonKnowledgeRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteCommonKnowledgeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteCommonKnowledgeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteCommonKnowledgeRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCommonKnowledgeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest.name)
}
inline std::string* DeleteCommonKnowledgeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest.name)
  return _s;
}
inline const std::string& DeleteCommonKnowledgeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteCommonKnowledgeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteCommonKnowledgeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteCommonKnowledgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteCommonKnowledgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteCommonKnowledgeRequest.name)
}

// -------------------------------------------------------------------

// CommonKnowledge

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CommonKnowledge::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CommonKnowledge::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CommonKnowledge.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonKnowledge::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CommonKnowledge.name)
}
inline std::string* CommonKnowledge::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CommonKnowledge.name)
  return _s;
}
inline const std::string& CommonKnowledge::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CommonKnowledge::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonKnowledge::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonKnowledge::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CommonKnowledge.name)
  return _impl_.name_.Release();
}
inline void CommonKnowledge::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CommonKnowledge.name)
}

// string display_name = 2;
inline void CommonKnowledge::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& CommonKnowledge::display_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CommonKnowledge.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonKnowledge::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CommonKnowledge.display_name)
}
inline std::string* CommonKnowledge::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CommonKnowledge.display_name)
  return _s;
}
inline const std::string& CommonKnowledge::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void CommonKnowledge::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonKnowledge::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonKnowledge::release_display_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CommonKnowledge.display_name)
  return _impl_.display_name_.Release();
}
inline void CommonKnowledge::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CommonKnowledge.display_name)
}

// string description = 3;
inline void CommonKnowledge::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CommonKnowledge::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CommonKnowledge.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonKnowledge::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CommonKnowledge.description)
}
inline std::string* CommonKnowledge::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CommonKnowledge.description)
  return _s;
}
inline const std::string& CommonKnowledge::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CommonKnowledge::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonKnowledge::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonKnowledge::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CommonKnowledge.description)
  return _impl_.description_.Release();
}
inline void CommonKnowledge::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CommonKnowledge.description)
}

// repeated string memory_records = 4;
inline int CommonKnowledge::_internal_memory_records_size() const {
  return _impl_.memory_records_.size();
}
inline int CommonKnowledge::memory_records_size() const {
  return _internal_memory_records_size();
}
inline void CommonKnowledge::clear_memory_records() {
  _impl_.memory_records_.Clear();
}
inline std::string* CommonKnowledge::add_memory_records() {
  std::string* _s = _internal_add_memory_records();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
  return _s;
}
inline const std::string& CommonKnowledge::_internal_memory_records(int index) const {
  return _impl_.memory_records_.Get(index);
}
inline const std::string& CommonKnowledge::memory_records(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
  return _internal_memory_records(index);
}
inline std::string* CommonKnowledge::mutable_memory_records(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
  return _impl_.memory_records_.Mutable(index);
}
inline void CommonKnowledge::set_memory_records(int index, const std::string& value) {
  _impl_.memory_records_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline void CommonKnowledge::set_memory_records(int index, std::string&& value) {
  _impl_.memory_records_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline void CommonKnowledge::set_memory_records(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.memory_records_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline void CommonKnowledge::set_memory_records(int index, const char* value, size_t size) {
  _impl_.memory_records_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline std::string* CommonKnowledge::_internal_add_memory_records() {
  return _impl_.memory_records_.Add();
}
inline void CommonKnowledge::add_memory_records(const std::string& value) {
  _impl_.memory_records_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline void CommonKnowledge::add_memory_records(std::string&& value) {
  _impl_.memory_records_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline void CommonKnowledge::add_memory_records(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.memory_records_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline void CommonKnowledge::add_memory_records(const char* value, size_t size) {
  _impl_.memory_records_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommonKnowledge::memory_records() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
  return _impl_.memory_records_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommonKnowledge::mutable_memory_records() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.CommonKnowledge.memory_records)
  return &_impl_.memory_records_;
}

// -------------------------------------------------------------------

// ListCommonKnowledgesResponse

// repeated .ai.inworld.studio.v1alpha.CommonKnowledge common_knowledges = 1;
inline int ListCommonKnowledgesResponse::_internal_common_knowledges_size() const {
  return _impl_.common_knowledges_.size();
}
inline int ListCommonKnowledgesResponse::common_knowledges_size() const {
  return _internal_common_knowledges_size();
}
inline void ListCommonKnowledgesResponse::clear_common_knowledges() {
  _impl_.common_knowledges_.Clear();
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* ListCommonKnowledgesResponse::mutable_common_knowledges(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.common_knowledges)
  return _impl_.common_knowledges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::CommonKnowledge >*
ListCommonKnowledgesResponse::mutable_common_knowledges() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.common_knowledges)
  return &_impl_.common_knowledges_;
}
inline const ::ai::inworld::studio::v1alpha::CommonKnowledge& ListCommonKnowledgesResponse::_internal_common_knowledges(int index) const {
  return _impl_.common_knowledges_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::CommonKnowledge& ListCommonKnowledgesResponse::common_knowledges(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.common_knowledges)
  return _internal_common_knowledges(index);
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* ListCommonKnowledgesResponse::_internal_add_common_knowledges() {
  return _impl_.common_knowledges_.Add();
}
inline ::ai::inworld::studio::v1alpha::CommonKnowledge* ListCommonKnowledgesResponse::add_common_knowledges() {
  ::ai::inworld::studio::v1alpha::CommonKnowledge* _add = _internal_add_common_knowledges();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.common_knowledges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::CommonKnowledge >&
ListCommonKnowledgesResponse::common_knowledges() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.common_knowledges)
  return _impl_.common_knowledges_;
}

// string next_page_token = 2;
inline void ListCommonKnowledgesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListCommonKnowledgesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCommonKnowledgesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.next_page_token)
}
inline std::string* ListCommonKnowledgesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.next_page_token)
  return _s;
}
inline const std::string& ListCommonKnowledgesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListCommonKnowledgesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCommonKnowledgesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListCommonKnowledgesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCommonKnowledgesResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fcommon_5fknowledges_2eproto
