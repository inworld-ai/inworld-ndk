// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/engine/world-engine.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fworld_2dengine_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fworld_2dengine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "ai/inworld/packets/packets.pb.h"
#include "ai/inworld/voices/voices.pb.h"
#include "ai/inworld/voices/base_voice.pb.h"
#include "ai/inworld/language_codes/language_codes.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
namespace ai {
namespace inworld {
namespace engine {
class AccessToken;
struct AccessTokenDefaultTypeInternal;
extern AccessTokenDefaultTypeInternal _AccessToken_default_instance_;
class ActorRelations;
struct ActorRelationsDefaultTypeInternal;
extern ActorRelationsDefaultTypeInternal _ActorRelations_default_instance_;
class ActorRelations_Relation;
struct ActorRelations_RelationDefaultTypeInternal;
extern ActorRelations_RelationDefaultTypeInternal _ActorRelations_Relation_default_instance_;
class AudioSettings;
struct AudioSettingsDefaultTypeInternal;
extern AudioSettingsDefaultTypeInternal _AudioSettings_default_instance_;
class CapabilitiesRequest;
struct CapabilitiesRequestDefaultTypeInternal;
extern CapabilitiesRequestDefaultTypeInternal _CapabilitiesRequest_default_instance_;
class ClientRequest;
struct ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class GenerateTokenRequest;
struct GenerateTokenRequestDefaultTypeInternal;
extern GenerateTokenRequestDefaultTypeInternal _GenerateTokenRequest_default_instance_;
class ListBaseVoicesRequest;
struct ListBaseVoicesRequestDefaultTypeInternal;
extern ListBaseVoicesRequestDefaultTypeInternal _ListBaseVoicesRequest_default_instance_;
class ListBaseVoicesResponce;
struct ListBaseVoicesResponceDefaultTypeInternal;
extern ListBaseVoicesResponceDefaultTypeInternal _ListBaseVoicesResponce_default_instance_;
class LoadSceneRequest;
struct LoadSceneRequestDefaultTypeInternal;
extern LoadSceneRequestDefaultTypeInternal _LoadSceneRequest_default_instance_;
class LoadSceneResponse;
struct LoadSceneResponseDefaultTypeInternal;
extern LoadSceneResponseDefaultTypeInternal _LoadSceneResponse_default_instance_;
class LoadSceneResponse_Agent;
struct LoadSceneResponse_AgentDefaultTypeInternal;
extern LoadSceneResponse_AgentDefaultTypeInternal _LoadSceneResponse_Agent_default_instance_;
class LoadSceneResponse_Agent_CharacterAssets;
struct LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal;
extern LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal _LoadSceneResponse_Agent_CharacterAssets_default_instance_;
class LogErrorRequest;
struct LogErrorRequestDefaultTypeInternal;
extern LogErrorRequestDefaultTypeInternal _LogErrorRequest_default_instance_;
class PreviousDialog;
struct PreviousDialogDefaultTypeInternal;
extern PreviousDialogDefaultTypeInternal _PreviousDialog_default_instance_;
class PreviousDialog_Phrase;
struct PreviousDialog_PhraseDefaultTypeInternal;
extern PreviousDialog_PhraseDefaultTypeInternal _PreviousDialog_Phrase_default_instance_;
class PreviousState;
struct PreviousStateDefaultTypeInternal;
extern PreviousStateDefaultTypeInternal _PreviousState_default_instance_;
class PreviousState_StateHolder;
struct PreviousState_StateHolderDefaultTypeInternal;
extern PreviousState_StateHolderDefaultTypeInternal _PreviousState_StateHolder_default_instance_;
class SessionContinuation;
struct SessionContinuationDefaultTypeInternal;
extern SessionContinuationDefaultTypeInternal _SessionContinuation_default_instance_;
class SessionContinuation_ContinuationInfo;
struct SessionContinuation_ContinuationInfoDefaultTypeInternal;
extern SessionContinuation_ContinuationInfoDefaultTypeInternal _SessionContinuation_ContinuationInfo_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserSettings;
struct UserSettingsDefaultTypeInternal;
extern UserSettingsDefaultTypeInternal _UserSettings_default_instance_;
class UserSettings_PlayerProfile;
struct UserSettings_PlayerProfileDefaultTypeInternal;
extern UserSettings_PlayerProfileDefaultTypeInternal _UserSettings_PlayerProfile_default_instance_;
class UserSettings_PlayerProfile_PlayerField;
struct UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal;
extern UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal _UserSettings_PlayerProfile_PlayerField_default_instance_;
class VoicePreviewRequest;
struct VoicePreviewRequestDefaultTypeInternal;
extern VoicePreviewRequestDefaultTypeInternal _VoicePreviewRequest_default_instance_;
class VoicePreviewResponse;
struct VoicePreviewResponseDefaultTypeInternal;
extern VoicePreviewResponseDefaultTypeInternal _VoicePreviewResponse_default_instance_;
}  // namespace engine
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace engine {
enum PreviousDialog_DialogParticipant : int {
  PreviousDialog_DialogParticipant_UNKNOWN = 0,
  PreviousDialog_DialogParticipant_PLAYER = 1,
  PreviousDialog_DialogParticipant_CHARACTER = 2,
  PreviousDialog_DialogParticipant_PreviousDialog_DialogParticipant_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PreviousDialog_DialogParticipant_PreviousDialog_DialogParticipant_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PreviousDialog_DialogParticipant_IsValid(int value);
extern const uint32_t PreviousDialog_DialogParticipant_internal_data_[];
constexpr PreviousDialog_DialogParticipant PreviousDialog_DialogParticipant_DialogParticipant_MIN = static_cast<PreviousDialog_DialogParticipant>(0);
constexpr PreviousDialog_DialogParticipant PreviousDialog_DialogParticipant_DialogParticipant_MAX = static_cast<PreviousDialog_DialogParticipant>(2);
constexpr int PreviousDialog_DialogParticipant_DialogParticipant_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PreviousDialog_DialogParticipant_descriptor();
template <typename T>
const std::string& PreviousDialog_DialogParticipant_Name(T value) {
  static_assert(std::is_same<T, PreviousDialog_DialogParticipant>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DialogParticipant_Name().");
  return PreviousDialog_DialogParticipant_Name(static_cast<PreviousDialog_DialogParticipant>(value));
}
template <>
inline const std::string& PreviousDialog_DialogParticipant_Name(PreviousDialog_DialogParticipant value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PreviousDialog_DialogParticipant_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PreviousDialog_DialogParticipant_Parse(absl::string_view name, PreviousDialog_DialogParticipant* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreviousDialog_DialogParticipant>(
      PreviousDialog_DialogParticipant_descriptor(), name, value);
}
enum PreviousState_StateHolder_StateFormat : int {
  PreviousState_StateHolder_StateFormat_STATE_FORMAT_UNKNOWN = 0,
  PreviousState_StateHolder_StateFormat_STATE_FORMAT_SESSION_BRAIN_STATE = 1,
  PreviousState_StateHolder_StateFormat_STATE_FORMAT_EXTERNAL_BRAIN_STATE = 2,
  PreviousState_StateHolder_StateFormat_PreviousState_StateHolder_StateFormat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PreviousState_StateHolder_StateFormat_PreviousState_StateHolder_StateFormat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PreviousState_StateHolder_StateFormat_IsValid(int value);
extern const uint32_t PreviousState_StateHolder_StateFormat_internal_data_[];
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder_StateFormat_StateFormat_MIN = static_cast<PreviousState_StateHolder_StateFormat>(0);
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder_StateFormat_StateFormat_MAX = static_cast<PreviousState_StateHolder_StateFormat>(2);
constexpr int PreviousState_StateHolder_StateFormat_StateFormat_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PreviousState_StateHolder_StateFormat_descriptor();
template <typename T>
const std::string& PreviousState_StateHolder_StateFormat_Name(T value) {
  static_assert(std::is_same<T, PreviousState_StateHolder_StateFormat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StateFormat_Name().");
  return PreviousState_StateHolder_StateFormat_Name(static_cast<PreviousState_StateHolder_StateFormat>(value));
}
template <>
inline const std::string& PreviousState_StateHolder_StateFormat_Name(PreviousState_StateHolder_StateFormat value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PreviousState_StateHolder_StateFormat_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PreviousState_StateHolder_StateFormat_Parse(absl::string_view name, PreviousState_StateHolder_StateFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreviousState_StateHolder_StateFormat>(
      PreviousState_StateHolder_StateFormat_descriptor(), name, value);
}
enum VoicePreset : int {
  VOICE_PRESET_UNSPECIFIED = 0,
  VOICE_PRESET_FEMALE_1 = 1,
  VOICE_PRESET_FEMALE_2 = 2,
  VOICE_PRESET_FEMALE_3 = 3,
  VOICE_PRESET_FEMALE_4 = 4,
  VOICE_PRESET_FEMALE_5 = 5,
  VOICE_PRESET_MALE_1 = 6,
  VOICE_PRESET_MALE_2 = 7,
  VOICE_PRESET_MALE_3 = 8,
  VOICE_PRESET_MALE_4 = 9,
  VOICE_PRESET_MALE_5 = 10,
  INWORLD_VOICE_PRESET_MALE_1 = 11,
  INWORLD_VOICE_PRESET_MALE_2 = 12,
  INWORLD_VOICE_PRESET_FEMALE_1 = 13,
  INWORLD_VOICE_PRESET_FEMALE_2 = 14,
  INWORLD_VOICE_PRESET_MALE_3 = 15,
  INWORLD_VOICE_PRESET_MALE_4 = 16,
  INWORLD_VOICE_PRESET_MALE_5 = 17,
  INWORLD_VOICE_PRESET_FEMALE_3 = 18,
  INWORLD_VOICE_PRESET_FEMALE_4 = 19,
  INWORLD_VOICE_PRESET_ROBOT_MALE_1 = 20,
  INWORLD_VOICE_PRESET_ROBOT_MALE_2 = 21,
  INWORLD_VOICE_PRESET_ROBOT_MALE_3 = 22,
  INWORLD_VOICE_PRESET_ROBOT_MALE_4 = 23,
  INWORLD_VOICE_PRESET_ROBOT_MALE_5 = 24,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_1 = 25,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_2 = 26,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_3 = 27,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_4 = 28,
  INWORLD_VOICE_PRESET_SPIKE = 29,
  INWORLD_VOICE_PRESET_TWILIGHT = 30,
  INWORLD_VOICE_PRESET_FLUTTERSHY = 31,
  INWORLD_VOICE_PRESET_ROBOT_SPIKE = 32,
  INWORLD_VOICE_PRESET_ROBOT_TWILIGHT = 33,
  INWORLD_VOICE_PRESET_ROBOT_FLUTTERSHY = 34,
  VoicePreset_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VoicePreset_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VoicePreset_IsValid(int value);
extern const uint32_t VoicePreset_internal_data_[];
constexpr VoicePreset VoicePreset_MIN = static_cast<VoicePreset>(0);
constexpr VoicePreset VoicePreset_MAX = static_cast<VoicePreset>(34);
constexpr int VoicePreset_ARRAYSIZE = 34 + 1;
const ::google::protobuf::EnumDescriptor*
VoicePreset_descriptor();
template <typename T>
const std::string& VoicePreset_Name(T value) {
  static_assert(std::is_same<T, VoicePreset>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VoicePreset_Name().");
  return VoicePreset_Name(static_cast<VoicePreset>(value));
}
template <>
inline const std::string& VoicePreset_Name(VoicePreset value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VoicePreset_descriptor,
                                                 0, 34>(
      static_cast<int>(value));
}
inline bool VoicePreset_Parse(absl::string_view name, VoicePreset* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoicePreset>(
      VoicePreset_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VoicePreviewResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.VoicePreviewResponse) */ {
 public:
  inline VoicePreviewResponse() : VoicePreviewResponse(nullptr) {}
  ~VoicePreviewResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VoicePreviewResponse(::google::protobuf::internal::ConstantInitialized);

  inline VoicePreviewResponse(const VoicePreviewResponse& from)
      : VoicePreviewResponse(nullptr, from) {}
  VoicePreviewResponse(VoicePreviewResponse&& from) noexcept
    : VoicePreviewResponse() {
    *this = ::std::move(from);
  }

  inline VoicePreviewResponse& operator=(const VoicePreviewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoicePreviewResponse& operator=(VoicePreviewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoicePreviewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoicePreviewResponse* internal_default_instance() {
    return reinterpret_cast<const VoicePreviewResponse*>(
               &_VoicePreviewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VoicePreviewResponse& a, VoicePreviewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VoicePreviewResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoicePreviewResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoicePreviewResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoicePreviewResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoicePreviewResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VoicePreviewResponse& from) {
    VoicePreviewResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VoicePreviewResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.VoicePreviewResponse";
  }
  protected:
  explicit VoicePreviewResponse(::google::protobuf::Arena* arena);
  VoicePreviewResponse(::google::protobuf::Arena* arena, const VoicePreviewResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
  };
  // bytes audio = 1;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* value);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.VoicePreviewResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr audio_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class UserSettings_PlayerProfile_PlayerField final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField) */ {
 public:
  inline UserSettings_PlayerProfile_PlayerField() : UserSettings_PlayerProfile_PlayerField(nullptr) {}
  ~UserSettings_PlayerProfile_PlayerField() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSettings_PlayerProfile_PlayerField(::google::protobuf::internal::ConstantInitialized);

  inline UserSettings_PlayerProfile_PlayerField(const UserSettings_PlayerProfile_PlayerField& from)
      : UserSettings_PlayerProfile_PlayerField(nullptr, from) {}
  UserSettings_PlayerProfile_PlayerField(UserSettings_PlayerProfile_PlayerField&& from) noexcept
    : UserSettings_PlayerProfile_PlayerField() {
    *this = ::std::move(from);
  }

  inline UserSettings_PlayerProfile_PlayerField& operator=(const UserSettings_PlayerProfile_PlayerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSettings_PlayerProfile_PlayerField& operator=(UserSettings_PlayerProfile_PlayerField&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSettings_PlayerProfile_PlayerField& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSettings_PlayerProfile_PlayerField* internal_default_instance() {
    return reinterpret_cast<const UserSettings_PlayerProfile_PlayerField*>(
               &_UserSettings_PlayerProfile_PlayerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserSettings_PlayerProfile_PlayerField& a, UserSettings_PlayerProfile_PlayerField& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSettings_PlayerProfile_PlayerField* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSettings_PlayerProfile_PlayerField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSettings_PlayerProfile_PlayerField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSettings_PlayerProfile_PlayerField& from) {
    UserSettings_PlayerProfile_PlayerField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserSettings_PlayerProfile_PlayerField* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.UserSettings.PlayerProfile.PlayerField";
  }
  protected:
  explicit UserSettings_PlayerProfile_PlayerField(::google::protobuf::Arena* arena);
  UserSettings_PlayerProfile_PlayerField(::google::protobuf::Arena* arena, const UserSettings_PlayerProfile_PlayerField& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIdFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // string field_id = 1;
  void clear_field_id() ;
  const std::string& field_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_id(Arg_&& arg, Args_... args);
  std::string* mutable_field_id();
  PROTOBUF_NODISCARD std::string* release_field_id();
  void set_allocated_field_id(std::string* value);

  private:
  const std::string& _internal_field_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_id(
      const std::string& value);
  std::string* _internal_mutable_field_id();

  public:
  // string field_value = 2;
  void clear_field_value() ;
  const std::string& field_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_value(Arg_&& arg, Args_... args);
  std::string* mutable_field_value();
  PROTOBUF_NODISCARD std::string* release_field_value();
  void set_allocated_field_value(std::string* value);

  private:
  const std::string& _internal_field_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_value(
      const std::string& value);
  std::string* _internal_mutable_field_value();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr field_id_;
    ::google::protobuf::internal::ArenaStringPtr field_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class UserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserRequest(::google::protobuf::internal::ConstantInitialized);

  inline UserRequest(const UserRequest& from)
      : UserRequest(nullptr, from) {}
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserRequest& from) {
    UserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.UserRequest";
  }
  protected:
  explicit UserRequest(::google::protobuf::Arena* arena);
  UserRequest(::google::protobuf::Arena* arena, const UserRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string id = 2;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class SessionContinuation_ContinuationInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.SessionContinuation.ContinuationInfo) */ {
 public:
  inline SessionContinuation_ContinuationInfo() : SessionContinuation_ContinuationInfo(nullptr) {}
  ~SessionContinuation_ContinuationInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SessionContinuation_ContinuationInfo(::google::protobuf::internal::ConstantInitialized);

  inline SessionContinuation_ContinuationInfo(const SessionContinuation_ContinuationInfo& from)
      : SessionContinuation_ContinuationInfo(nullptr, from) {}
  SessionContinuation_ContinuationInfo(SessionContinuation_ContinuationInfo&& from) noexcept
    : SessionContinuation_ContinuationInfo() {
    *this = ::std::move(from);
  }

  inline SessionContinuation_ContinuationInfo& operator=(const SessionContinuation_ContinuationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionContinuation_ContinuationInfo& operator=(SessionContinuation_ContinuationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionContinuation_ContinuationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionContinuation_ContinuationInfo* internal_default_instance() {
    return reinterpret_cast<const SessionContinuation_ContinuationInfo*>(
               &_SessionContinuation_ContinuationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SessionContinuation_ContinuationInfo& a, SessionContinuation_ContinuationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionContinuation_ContinuationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionContinuation_ContinuationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionContinuation_ContinuationInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionContinuation_ContinuationInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionContinuation_ContinuationInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SessionContinuation_ContinuationInfo& from) {
    SessionContinuation_ContinuationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SessionContinuation_ContinuationInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.SessionContinuation.ContinuationInfo";
  }
  protected:
  explicit SessionContinuation_ContinuationInfo(::google::protobuf::Arena* arena);
  SessionContinuation_ContinuationInfo(::google::protobuf::Arena* arena, const SessionContinuation_ContinuationInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMillisPassedFieldNumber = 1,
  };
  // int64 millis_passed = 1;
  void clear_millis_passed() ;
  ::int64_t millis_passed() const;
  void set_millis_passed(::int64_t value);

  private:
  ::int64_t _internal_millis_passed() const;
  void _internal_set_millis_passed(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.SessionContinuation.ContinuationInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t millis_passed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class PreviousDialog_Phrase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousDialog.Phrase) */ {
 public:
  inline PreviousDialog_Phrase() : PreviousDialog_Phrase(nullptr) {}
  ~PreviousDialog_Phrase() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PreviousDialog_Phrase(::google::protobuf::internal::ConstantInitialized);

  inline PreviousDialog_Phrase(const PreviousDialog_Phrase& from)
      : PreviousDialog_Phrase(nullptr, from) {}
  PreviousDialog_Phrase(PreviousDialog_Phrase&& from) noexcept
    : PreviousDialog_Phrase() {
    *this = ::std::move(from);
  }

  inline PreviousDialog_Phrase& operator=(const PreviousDialog_Phrase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousDialog_Phrase& operator=(PreviousDialog_Phrase&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreviousDialog_Phrase& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreviousDialog_Phrase* internal_default_instance() {
    return reinterpret_cast<const PreviousDialog_Phrase*>(
               &_PreviousDialog_Phrase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PreviousDialog_Phrase& a, PreviousDialog_Phrase& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousDialog_Phrase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousDialog_Phrase* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreviousDialog_Phrase* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreviousDialog_Phrase>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PreviousDialog_Phrase& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PreviousDialog_Phrase& from) {
    PreviousDialog_Phrase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreviousDialog_Phrase* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.PreviousDialog.Phrase";
  }
  protected:
  explicit PreviousDialog_Phrase(::google::protobuf::Arena* arena);
  PreviousDialog_Phrase(::google::protobuf::Arena* arena, const PreviousDialog_Phrase& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseFieldNumber = 2,
    kTalkerFieldNumber = 1,
  };
  // string phrase = 2;
  void clear_phrase() ;
  const std::string& phrase() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phrase(Arg_&& arg, Args_... args);
  std::string* mutable_phrase();
  PROTOBUF_NODISCARD std::string* release_phrase();
  void set_allocated_phrase(std::string* value);

  private:
  const std::string& _internal_phrase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phrase(
      const std::string& value);
  std::string* _internal_mutable_phrase();

  public:
  // .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
  void clear_talker() ;
  ::ai::inworld::engine::PreviousDialog_DialogParticipant talker() const;
  void set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value);

  private:
  ::ai::inworld::engine::PreviousDialog_DialogParticipant _internal_talker() const;
  void _internal_set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousDialog.Phrase)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr phrase_;
    int talker_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class LogErrorRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LogErrorRequest) */ {
 public:
  inline LogErrorRequest() : LogErrorRequest(nullptr) {}
  ~LogErrorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogErrorRequest(::google::protobuf::internal::ConstantInitialized);

  inline LogErrorRequest(const LogErrorRequest& from)
      : LogErrorRequest(nullptr, from) {}
  LogErrorRequest(LogErrorRequest&& from) noexcept
    : LogErrorRequest() {
    *this = ::std::move(from);
  }

  inline LogErrorRequest& operator=(const LogErrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogErrorRequest& operator=(LogErrorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogErrorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogErrorRequest* internal_default_instance() {
    return reinterpret_cast<const LogErrorRequest*>(
               &_LogErrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LogErrorRequest& a, LogErrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogErrorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogErrorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogErrorRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogErrorRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogErrorRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogErrorRequest& from) {
    LogErrorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogErrorRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.LogErrorRequest";
  }
  protected:
  explicit LogErrorRequest(::google::protobuf::Arena* arena);
  LogErrorRequest(::google::protobuf::Arena* arena, const LogErrorRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LogErrorRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class LoadSceneResponse_Agent_CharacterAssets final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets) */ {
 public:
  inline LoadSceneResponse_Agent_CharacterAssets() : LoadSceneResponse_Agent_CharacterAssets(nullptr) {}
  ~LoadSceneResponse_Agent_CharacterAssets() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoadSceneResponse_Agent_CharacterAssets(::google::protobuf::internal::ConstantInitialized);

  inline LoadSceneResponse_Agent_CharacterAssets(const LoadSceneResponse_Agent_CharacterAssets& from)
      : LoadSceneResponse_Agent_CharacterAssets(nullptr, from) {}
  LoadSceneResponse_Agent_CharacterAssets(LoadSceneResponse_Agent_CharacterAssets&& from) noexcept
    : LoadSceneResponse_Agent_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse_Agent_CharacterAssets& operator=(const LoadSceneResponse_Agent_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse_Agent_CharacterAssets& operator=(LoadSceneResponse_Agent_CharacterAssets&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse_Agent_CharacterAssets& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse_Agent_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse_Agent_CharacterAssets*>(
               &_LoadSceneResponse_Agent_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoadSceneResponse_Agent_CharacterAssets& a, LoadSceneResponse_Agent_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse_Agent_CharacterAssets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse_Agent_CharacterAssets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneResponse_Agent_CharacterAssets* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent_CharacterAssets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse_Agent_CharacterAssets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoadSceneResponse_Agent_CharacterAssets& from) {
    LoadSceneResponse_Agent_CharacterAssets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoadSceneResponse_Agent_CharacterAssets* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets";
  }
  protected:
  explicit LoadSceneResponse_Agent_CharacterAssets(::google::protobuf::Arena* arena);
  LoadSceneResponse_Agent_CharacterAssets(::google::protobuf::Arena* arena, const LoadSceneResponse_Agent_CharacterAssets& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 1,
    kRpmImageUriPortraitFieldNumber = 2,
    kRpmImageUriPostureFieldNumber = 3,
    kAvatarImgFieldNumber = 4,
    kAvatarImgOriginalFieldNumber = 5,
  };
  // string rpm_model_uri = 1;
  void clear_rpm_model_uri() ;
  const std::string& rpm_model_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_model_uri(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_model_uri();
  PROTOBUF_NODISCARD std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* value);

  private:
  const std::string& _internal_rpm_model_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_model_uri(
      const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();

  public:
  // string rpm_image_uri_portrait = 2;
  void clear_rpm_image_uri_portrait() ;
  const std::string& rpm_image_uri_portrait() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_image_uri_portrait(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_image_uri_portrait();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_portrait(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();

  public:
  // string rpm_image_uri_posture = 3;
  void clear_rpm_image_uri_posture() ;
  const std::string& rpm_image_uri_posture() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpm_image_uri_posture(Arg_&& arg, Args_... args);
  std::string* mutable_rpm_image_uri_posture();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* value);

  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_posture(
      const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();

  public:
  // string avatar_img = 4;
  void clear_avatar_img() ;
  const std::string& avatar_img() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_img(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_img();
  PROTOBUF_NODISCARD std::string* release_avatar_img();
  void set_allocated_avatar_img(std::string* value);

  private:
  const std::string& _internal_avatar_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_img(
      const std::string& value);
  std::string* _internal_mutable_avatar_img();

  public:
  // string avatar_img_original = 5;
  void clear_avatar_img_original() ;
  const std::string& avatar_img_original() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_img_original(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_img_original();
  PROTOBUF_NODISCARD std::string* release_avatar_img_original();
  void set_allocated_avatar_img_original(std::string* value);

  private:
  const std::string& _internal_avatar_img_original() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_img_original(
      const std::string& value);
  std::string* _internal_mutable_avatar_img_original();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      151, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr rpm_model_uri_;
    ::google::protobuf::internal::ArenaStringPtr rpm_image_uri_portrait_;
    ::google::protobuf::internal::ArenaStringPtr rpm_image_uri_posture_;
    ::google::protobuf::internal::ArenaStringPtr avatar_img_;
    ::google::protobuf::internal::ArenaStringPtr avatar_img_original_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class ListBaseVoicesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesRequest) */ {
 public:
  inline ListBaseVoicesRequest() : ListBaseVoicesRequest(nullptr) {}
  ~ListBaseVoicesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListBaseVoicesRequest(::google::protobuf::internal::ConstantInitialized);

  inline ListBaseVoicesRequest(const ListBaseVoicesRequest& from)
      : ListBaseVoicesRequest(nullptr, from) {}
  ListBaseVoicesRequest(ListBaseVoicesRequest&& from) noexcept
    : ListBaseVoicesRequest() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesRequest& operator=(const ListBaseVoicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesRequest& operator=(ListBaseVoicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseVoicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseVoicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesRequest*>(
               &_ListBaseVoicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListBaseVoicesRequest& a, ListBaseVoicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseVoicesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseVoicesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListBaseVoicesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListBaseVoicesRequest& from) {
    ListBaseVoicesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListBaseVoicesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesRequest";
  }
  protected:
  explicit ListBaseVoicesRequest(::google::protobuf::Arena* arena);
  ListBaseVoicesRequest(::google::protobuf::Arena* arena, const ListBaseVoicesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtsTypesFieldNumber = 2,
    kLanguageCodeFieldNumber = 1,
    kLanguageFieldNumber = 3,
  };
  // repeated .ai.inworld.voices.TTSType tts_types = 2;
  int tts_types_size() const;
  private:
  int _internal_tts_types_size() const;

  public:
  void clear_tts_types() ;
  public:
  ::ai::inworld::voices::TTSType tts_types(int index) const;
  void set_tts_types(int index, ::ai::inworld::voices::TTSType value);
  void add_tts_types(::ai::inworld::voices::TTSType value);
  const ::google::protobuf::RepeatedField<int>& tts_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_tts_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_tts_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_tts_types();

  public:
  // string language_code = 1 [deprecated = true];
  [[deprecated]]  void clear_language_code() ;
  [[deprecated]] const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_language_code(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_language_code();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_language_code();
  [[deprecated]] void set_allocated_language_code(std::string* value);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // .ai.inworld.language_codes.LanguageCode language = 3;
  void clear_language() ;
  ::ai::inworld::language_codes::LanguageCode language() const;
  void set_language(::ai::inworld::language_codes::LanguageCode value);

  private:
  ::ai::inworld::language_codes::LanguageCode _internal_language() const;
  void _internal_set_language(::ai::inworld::language_codes::LanguageCode value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> tts_types_;
    mutable ::google::protobuf::internal::CachedSize _tts_types_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    int language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class GenerateTokenRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.GenerateTokenRequest) */ {
 public:
  inline GenerateTokenRequest() : GenerateTokenRequest(nullptr) {}
  ~GenerateTokenRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenerateTokenRequest(::google::protobuf::internal::ConstantInitialized);

  inline GenerateTokenRequest(const GenerateTokenRequest& from)
      : GenerateTokenRequest(nullptr, from) {}
  GenerateTokenRequest(GenerateTokenRequest&& from) noexcept
    : GenerateTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateTokenRequest& operator=(const GenerateTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenRequest& operator=(GenerateTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenRequest*>(
               &_GenerateTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GenerateTokenRequest& a, GenerateTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenerateTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GenerateTokenRequest& from) {
    GenerateTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GenerateTokenRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.GenerateTokenRequest";
  }
  protected:
  explicit GenerateTokenRequest(::google::protobuf::Arena* arena);
  GenerateTokenRequest(::google::protobuf::Arena* arena, const GenerateTokenRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string resources = 2;
  int resources_size() const;
  private:
  int _internal_resources_size() const;

  public:
  void clear_resources() ;
  const std::string& resources(int index) const;
  std::string* mutable_resources(int index);
  void set_resources(int index, const std::string& value);
  void set_resources(int index, std::string&& value);
  void set_resources(int index, const char* value);
  void set_resources(int index, const char* value, std::size_t size);
  void set_resources(int index, absl::string_view value);
  std::string* add_resources();
  void add_resources(const std::string& value);
  void add_resources(std::string&& value);
  void add_resources(const char* value);
  void add_resources(const char* value, std::size_t size);
  void add_resources(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& resources() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_resources();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_resources() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_resources();

  public:
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.GenerateTokenRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> resources_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class ClientRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {}
  ~ClientRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientRequest(::google::protobuf::internal::ConstantInitialized);

  inline ClientRequest(const ClientRequest& from)
      : ClientRequest(nullptr, from) {}
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientRequest& from) {
    ClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.ClientRequest";
  }
  protected:
  explicit ClientRequest(::google::protobuf::Arena* arena);
  ClientRequest(::google::protobuf::Arena* arena, const ClientRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ClientRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class CapabilitiesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CapabilitiesRequest) */ {
 public:
  inline CapabilitiesRequest() : CapabilitiesRequest(nullptr) {}
  ~CapabilitiesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilitiesRequest(::google::protobuf::internal::ConstantInitialized);

  inline CapabilitiesRequest(const CapabilitiesRequest& from)
      : CapabilitiesRequest(nullptr, from) {}
  CapabilitiesRequest(CapabilitiesRequest&& from) noexcept
    : CapabilitiesRequest() {
    *this = ::std::move(from);
  }

  inline CapabilitiesRequest& operator=(const CapabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesRequest& operator=(CapabilitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilitiesRequest* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesRequest*>(
               &_CapabilitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CapabilitiesRequest& a, CapabilitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilitiesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilitiesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapabilitiesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapabilitiesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CapabilitiesRequest& from) {
    CapabilitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapabilitiesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.CapabilitiesRequest";
  }
  protected:
  explicit CapabilitiesRequest(::google::protobuf::Arena* arena);
  CapabilitiesRequest(::google::protobuf::Arena* arena, const CapabilitiesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kTextFieldNumber = 2,
    kGesturesFieldNumber = 3,
    kInterruptionsFieldNumber = 4,
    kTriggersFieldNumber = 5,
    kEmotionsFieldNumber = 6,
    kTurnBasedSttFieldNumber = 8,
    kEmotionStreamingFieldNumber = 9,
    kSilenceEventsFieldNumber = 10,
    kPhonemeInfoFieldNumber = 11,
    kContinuationFieldNumber = 12,
    kSessionCancellationFieldNumber = 13,
    kNarratedActionsFieldNumber = 14,
    kRegenerateResponseFieldNumber = 15,
    kLoadSceneInSessionFieldNumber = 16,
    kRelationsFieldNumber = 17,
    kDebugInfoFieldNumber = 18,
    kTtsMp3FieldNumber = 19,
    kMultiAgentFieldNumber = 20,
  };
  // bool audio = 1;
  void clear_audio() ;
  bool audio() const;
  void set_audio(bool value);

  private:
  bool _internal_audio() const;
  void _internal_set_audio(bool value);

  public:
  // bool text = 2;
  void clear_text() ;
  bool text() const;
  void set_text(bool value);

  private:
  bool _internal_text() const;
  void _internal_set_text(bool value);

  public:
  // bool gestures = 3 [deprecated = true];
  [[deprecated]]  void clear_gestures() ;
  [[deprecated]] bool gestures() const;
  [[deprecated]] void set_gestures(bool value);

  private:
  bool _internal_gestures() const;
  void _internal_set_gestures(bool value);

  public:
  // bool interruptions = 4;
  void clear_interruptions() ;
  bool interruptions() const;
  void set_interruptions(bool value);

  private:
  bool _internal_interruptions() const;
  void _internal_set_interruptions(bool value);

  public:
  // bool triggers = 5 [deprecated = true];
  [[deprecated]]  void clear_triggers() ;
  [[deprecated]] bool triggers() const;
  [[deprecated]] void set_triggers(bool value);

  private:
  bool _internal_triggers() const;
  void _internal_set_triggers(bool value);

  public:
  // bool emotions = 6;
  void clear_emotions() ;
  bool emotions() const;
  void set_emotions(bool value);

  private:
  bool _internal_emotions() const;
  void _internal_set_emotions(bool value);

  public:
  // bool turn_based_stt = 8;
  void clear_turn_based_stt() ;
  bool turn_based_stt() const;
  void set_turn_based_stt(bool value);

  private:
  bool _internal_turn_based_stt() const;
  void _internal_set_turn_based_stt(bool value);

  public:
  // bool emotion_streaming = 9;
  void clear_emotion_streaming() ;
  bool emotion_streaming() const;
  void set_emotion_streaming(bool value);

  private:
  bool _internal_emotion_streaming() const;
  void _internal_set_emotion_streaming(bool value);

  public:
  // bool silence_events = 10;
  void clear_silence_events() ;
  bool silence_events() const;
  void set_silence_events(bool value);

  private:
  bool _internal_silence_events() const;
  void _internal_set_silence_events(bool value);

  public:
  // bool phoneme_info = 11;
  void clear_phoneme_info() ;
  bool phoneme_info() const;
  void set_phoneme_info(bool value);

  private:
  bool _internal_phoneme_info() const;
  void _internal_set_phoneme_info(bool value);

  public:
  // bool continuation = 12;
  void clear_continuation() ;
  bool continuation() const;
  void set_continuation(bool value);

  private:
  bool _internal_continuation() const;
  void _internal_set_continuation(bool value);

  public:
  // bool session_cancellation = 13;
  void clear_session_cancellation() ;
  bool session_cancellation() const;
  void set_session_cancellation(bool value);

  private:
  bool _internal_session_cancellation() const;
  void _internal_set_session_cancellation(bool value);

  public:
  // bool narrated_actions = 14;
  void clear_narrated_actions() ;
  bool narrated_actions() const;
  void set_narrated_actions(bool value);

  private:
  bool _internal_narrated_actions() const;
  void _internal_set_narrated_actions(bool value);

  public:
  // bool regenerate_response = 15;
  void clear_regenerate_response() ;
  bool regenerate_response() const;
  void set_regenerate_response(bool value);

  private:
  bool _internal_regenerate_response() const;
  void _internal_set_regenerate_response(bool value);

  public:
  // bool load_scene_in_session = 16;
  void clear_load_scene_in_session() ;
  bool load_scene_in_session() const;
  void set_load_scene_in_session(bool value);

  private:
  bool _internal_load_scene_in_session() const;
  void _internal_set_load_scene_in_session(bool value);

  public:
  // bool relations = 17;
  void clear_relations() ;
  bool relations() const;
  void set_relations(bool value);

  private:
  bool _internal_relations() const;
  void _internal_set_relations(bool value);

  public:
  // bool debug_info = 18;
  void clear_debug_info() ;
  bool debug_info() const;
  void set_debug_info(bool value);

  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);

  public:
  // bool tts_mp3 = 19;
  void clear_tts_mp3() ;
  bool tts_mp3() const;
  void set_tts_mp3(bool value);

  private:
  bool _internal_tts_mp3() const;
  void _internal_set_tts_mp3(bool value);

  public:
  // bool multi_agent = 20;
  void clear_multi_agent() ;
  bool multi_agent() const;
  void set_multi_agent(bool value);

  private:
  bool _internal_multi_agent() const;
  void _internal_set_multi_agent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CapabilitiesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool audio_;
    bool text_;
    bool gestures_;
    bool interruptions_;
    bool triggers_;
    bool emotions_;
    bool turn_based_stt_;
    bool emotion_streaming_;
    bool silence_events_;
    bool phoneme_info_;
    bool continuation_;
    bool session_cancellation_;
    bool narrated_actions_;
    bool regenerate_response_;
    bool load_scene_in_session_;
    bool relations_;
    bool debug_info_;
    bool tts_mp3_;
    bool multi_agent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class AudioSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.AudioSettings) */ {
 public:
  inline AudioSettings() : AudioSettings(nullptr) {}
  ~AudioSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioSettings(::google::protobuf::internal::ConstantInitialized);

  inline AudioSettings(const AudioSettings& from)
      : AudioSettings(nullptr, from) {}
  AudioSettings(AudioSettings&& from) noexcept
    : AudioSettings() {
    *this = ::std::move(from);
  }

  inline AudioSettings& operator=(const AudioSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSettings& operator=(AudioSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioSettings* internal_default_instance() {
    return reinterpret_cast<const AudioSettings*>(
               &_AudioSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioSettings& a, AudioSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AudioSettings& from) {
    AudioSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.AudioSettings";
  }
  protected:
  explicit AudioSettings(::google::protobuf::Arena* arena);
  AudioSettings(::google::protobuf::Arena* arena, const AudioSettings& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSttSampleRateHertzFieldNumber = 1,
    kTtsSampleRateHertzFieldNumber = 2,
  };
  // uint32 stt_sample_rate_hertz = 1;
  void clear_stt_sample_rate_hertz() ;
  ::uint32_t stt_sample_rate_hertz() const;
  void set_stt_sample_rate_hertz(::uint32_t value);

  private:
  ::uint32_t _internal_stt_sample_rate_hertz() const;
  void _internal_set_stt_sample_rate_hertz(::uint32_t value);

  public:
  // uint32 tts_sample_rate_hertz = 2;
  void clear_tts_sample_rate_hertz() ;
  ::uint32_t tts_sample_rate_hertz() const;
  void set_tts_sample_rate_hertz(::uint32_t value);

  private:
  ::uint32_t _internal_tts_sample_rate_hertz() const;
  void _internal_set_tts_sample_rate_hertz(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.AudioSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t stt_sample_rate_hertz_;
    ::uint32_t tts_sample_rate_hertz_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class ActorRelations_Relation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ActorRelations.Relation) */ {
 public:
  inline ActorRelations_Relation() : ActorRelations_Relation(nullptr) {}
  ~ActorRelations_Relation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorRelations_Relation(::google::protobuf::internal::ConstantInitialized);

  inline ActorRelations_Relation(const ActorRelations_Relation& from)
      : ActorRelations_Relation(nullptr, from) {}
  ActorRelations_Relation(ActorRelations_Relation&& from) noexcept
    : ActorRelations_Relation() {
    *this = ::std::move(from);
  }

  inline ActorRelations_Relation& operator=(const ActorRelations_Relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorRelations_Relation& operator=(ActorRelations_Relation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorRelations_Relation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorRelations_Relation* internal_default_instance() {
    return reinterpret_cast<const ActorRelations_Relation*>(
               &_ActorRelations_Relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ActorRelations_Relation& a, ActorRelations_Relation& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorRelations_Relation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorRelations_Relation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorRelations_Relation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorRelations_Relation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActorRelations_Relation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ActorRelations_Relation& from) {
    ActorRelations_Relation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorRelations_Relation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.ActorRelations.Relation";
  }
  protected:
  explicit ActorRelations_Relation(::google::protobuf::Arena* arena);
  ActorRelations_Relation(::google::protobuf::Arena* arena, const ActorRelations_Relation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ActorRelations.Relation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class UserSettings_PlayerProfile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserSettings.PlayerProfile) */ {
 public:
  inline UserSettings_PlayerProfile() : UserSettings_PlayerProfile(nullptr) {}
  ~UserSettings_PlayerProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSettings_PlayerProfile(::google::protobuf::internal::ConstantInitialized);

  inline UserSettings_PlayerProfile(const UserSettings_PlayerProfile& from)
      : UserSettings_PlayerProfile(nullptr, from) {}
  UserSettings_PlayerProfile(UserSettings_PlayerProfile&& from) noexcept
    : UserSettings_PlayerProfile() {
    *this = ::std::move(from);
  }

  inline UserSettings_PlayerProfile& operator=(const UserSettings_PlayerProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSettings_PlayerProfile& operator=(UserSettings_PlayerProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSettings_PlayerProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSettings_PlayerProfile* internal_default_instance() {
    return reinterpret_cast<const UserSettings_PlayerProfile*>(
               &_UserSettings_PlayerProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserSettings_PlayerProfile& a, UserSettings_PlayerProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSettings_PlayerProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSettings_PlayerProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSettings_PlayerProfile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSettings_PlayerProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSettings_PlayerProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSettings_PlayerProfile& from) {
    UserSettings_PlayerProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserSettings_PlayerProfile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.UserSettings.PlayerProfile";
  }
  protected:
  explicit UserSettings_PlayerProfile(::google::protobuf::Arena* arena);
  UserSettings_PlayerProfile(::google::protobuf::Arena* arena, const UserSettings_PlayerProfile& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PlayerField = UserSettings_PlayerProfile_PlayerField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >*
      mutable_fields();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>& _internal_fields() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>* _internal_mutable_fields();
  public:
  const ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField& fields(int index) const;
  ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >&
      fields() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserSettings.PlayerProfile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField > fields_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class PreviousDialog final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousDialog) */ {
 public:
  inline PreviousDialog() : PreviousDialog(nullptr) {}
  ~PreviousDialog() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PreviousDialog(::google::protobuf::internal::ConstantInitialized);

  inline PreviousDialog(const PreviousDialog& from)
      : PreviousDialog(nullptr, from) {}
  PreviousDialog(PreviousDialog&& from) noexcept
    : PreviousDialog() {
    *this = ::std::move(from);
  }

  inline PreviousDialog& operator=(const PreviousDialog& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousDialog& operator=(PreviousDialog&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreviousDialog& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreviousDialog* internal_default_instance() {
    return reinterpret_cast<const PreviousDialog*>(
               &_PreviousDialog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PreviousDialog& a, PreviousDialog& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousDialog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousDialog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreviousDialog* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreviousDialog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PreviousDialog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PreviousDialog& from) {
    PreviousDialog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreviousDialog* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.PreviousDialog";
  }
  protected:
  explicit PreviousDialog(::google::protobuf::Arena* arena);
  PreviousDialog(::google::protobuf::Arena* arena, const PreviousDialog& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Phrase = PreviousDialog_Phrase;

  using DialogParticipant = PreviousDialog_DialogParticipant;
  static constexpr DialogParticipant UNKNOWN = PreviousDialog_DialogParticipant_UNKNOWN;
  static constexpr DialogParticipant PLAYER = PreviousDialog_DialogParticipant_PLAYER;
  static constexpr DialogParticipant CHARACTER = PreviousDialog_DialogParticipant_CHARACTER;
  static inline bool DialogParticipant_IsValid(int value) {
    return PreviousDialog_DialogParticipant_IsValid(value);
  }
  static constexpr DialogParticipant DialogParticipant_MIN = PreviousDialog_DialogParticipant_DialogParticipant_MIN;
  static constexpr DialogParticipant DialogParticipant_MAX = PreviousDialog_DialogParticipant_DialogParticipant_MAX;
  static constexpr int DialogParticipant_ARRAYSIZE = PreviousDialog_DialogParticipant_DialogParticipant_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DialogParticipant_descriptor() {
    return PreviousDialog_DialogParticipant_descriptor();
  }
  template <typename T>
  static inline const std::string& DialogParticipant_Name(T value) {
    return PreviousDialog_DialogParticipant_Name(value);
  }
  static inline bool DialogParticipant_Parse(absl::string_view name, DialogParticipant* value) {
    return PreviousDialog_DialogParticipant_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhrasesFieldNumber = 1,
  };
  // repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;

  public:
  void clear_phrases() ;
  ::ai::inworld::engine::PreviousDialog_Phrase* mutable_phrases(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase >*
      mutable_phrases();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousDialog_Phrase>& _internal_phrases() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousDialog_Phrase>* _internal_mutable_phrases();
  public:
  const ::ai::inworld::engine::PreviousDialog_Phrase& phrases(int index) const;
  ::ai::inworld::engine::PreviousDialog_Phrase* add_phrases();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase >&
      phrases() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousDialog)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase > phrases_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class LoadSceneResponse_Agent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse.Agent) */ {
 public:
  inline LoadSceneResponse_Agent() : LoadSceneResponse_Agent(nullptr) {}
  ~LoadSceneResponse_Agent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoadSceneResponse_Agent(::google::protobuf::internal::ConstantInitialized);

  inline LoadSceneResponse_Agent(const LoadSceneResponse_Agent& from)
      : LoadSceneResponse_Agent(nullptr, from) {}
  LoadSceneResponse_Agent(LoadSceneResponse_Agent&& from) noexcept
    : LoadSceneResponse_Agent() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse_Agent& operator=(const LoadSceneResponse_Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse_Agent& operator=(LoadSceneResponse_Agent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse_Agent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse_Agent* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse_Agent*>(
               &_LoadSceneResponse_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LoadSceneResponse_Agent& a, LoadSceneResponse_Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse_Agent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse_Agent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneResponse_Agent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse_Agent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoadSceneResponse_Agent& from) {
    LoadSceneResponse_Agent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoadSceneResponse_Agent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse.Agent";
  }
  protected:
  explicit LoadSceneResponse_Agent(::google::protobuf::Arena* arena);
  LoadSceneResponse_Agent(::google::protobuf::Arena* arena, const LoadSceneResponse_Agent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CharacterAssets = LoadSceneResponse_Agent_CharacterAssets;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kBrainNameFieldNumber = 2,
    kGivenNameFieldNumber = 3,
    kCharacterAssetsFieldNumber = 4,
  };
  // string agent_id = 1;
  void clear_agent_id() ;
  const std::string& agent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_agent_id(Arg_&& arg, Args_... args);
  std::string* mutable_agent_id();
  PROTOBUF_NODISCARD std::string* release_agent_id();
  void set_allocated_agent_id(std::string* value);

  private:
  const std::string& _internal_agent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_id(
      const std::string& value);
  std::string* _internal_mutable_agent_id();

  public:
  // string brain_name = 2;
  void clear_brain_name() ;
  const std::string& brain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_brain_name(Arg_&& arg, Args_... args);
  std::string* mutable_brain_name();
  PROTOBUF_NODISCARD std::string* release_brain_name();
  void set_allocated_brain_name(std::string* value);

  private:
  const std::string& _internal_brain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brain_name(
      const std::string& value);
  std::string* _internal_mutable_brain_name();

  public:
  // string given_name = 3;
  void clear_given_name() ;
  const std::string& given_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_given_name(Arg_&& arg, Args_... args);
  std::string* mutable_given_name();
  PROTOBUF_NODISCARD std::string* release_given_name();
  void set_allocated_given_name(std::string* value);

  private:
  const std::string& _internal_given_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_given_name(
      const std::string& value);
  std::string* _internal_mutable_given_name();

  public:
  // .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
  bool has_character_assets() const;
  void clear_character_assets() ;
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& character_assets() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* release_character_assets();
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* mutable_character_assets();
  void set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* value);
  void unsafe_arena_set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* value);
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* unsafe_arena_release_character_assets();

  private:
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& _internal_character_assets() const;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* _internal_mutable_character_assets();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse.Agent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr agent_id_;
    ::google::protobuf::internal::ArenaStringPtr brain_name_;
    ::google::protobuf::internal::ArenaStringPtr given_name_;
    ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class ActorRelations final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ActorRelations) */ {
 public:
  inline ActorRelations() : ActorRelations(nullptr) {}
  ~ActorRelations() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorRelations(::google::protobuf::internal::ConstantInitialized);

  inline ActorRelations(const ActorRelations& from)
      : ActorRelations(nullptr, from) {}
  ActorRelations(ActorRelations&& from) noexcept
    : ActorRelations() {
    *this = ::std::move(from);
  }

  inline ActorRelations& operator=(const ActorRelations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorRelations& operator=(ActorRelations&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorRelations& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorRelations* internal_default_instance() {
    return reinterpret_cast<const ActorRelations*>(
               &_ActorRelations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ActorRelations& a, ActorRelations& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorRelations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorRelations* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorRelations* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorRelations>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActorRelations& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ActorRelations& from) {
    ActorRelations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorRelations* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.ActorRelations";
  }
  protected:
  explicit ActorRelations(::google::protobuf::Arena* arena);
  ActorRelations(::google::protobuf::Arena* arena, const ActorRelations& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Relation = ActorRelations_Relation;

  // accessors -------------------------------------------------------

  enum : int {
    kRelationsFieldNumber = 2,
    kActorIdFieldNumber = 1,
  };
  // repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
  int relations_size() const;
  private:
  int _internal_relations_size() const;

  public:
  void clear_relations() ;
  ::ai::inworld::engine::ActorRelations_Relation* mutable_relations(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation >*
      mutable_relations();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations_Relation>& _internal_relations() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations_Relation>* _internal_mutable_relations();
  public:
  const ::ai::inworld::engine::ActorRelations_Relation& relations(int index) const;
  ::ai::inworld::engine::ActorRelations_Relation* add_relations();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation >&
      relations() const;
  // string actor_id = 1;
  void clear_actor_id() ;
  const std::string& actor_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor_id(Arg_&& arg, Args_... args);
  std::string* mutable_actor_id();
  PROTOBUF_NODISCARD std::string* release_actor_id();
  void set_allocated_actor_id(std::string* value);

  private:
  const std::string& _internal_actor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_id(
      const std::string& value);
  std::string* _internal_mutable_actor_id();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ActorRelations)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation > relations_;
    ::google::protobuf::internal::ArenaStringPtr actor_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class AccessToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.AccessToken) */ {
 public:
  inline AccessToken() : AccessToken(nullptr) {}
  ~AccessToken() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccessToken(::google::protobuf::internal::ConstantInitialized);

  inline AccessToken(const AccessToken& from)
      : AccessToken(nullptr, from) {}
  AccessToken(AccessToken&& from) noexcept
    : AccessToken() {
    *this = ::std::move(from);
  }

  inline AccessToken& operator=(const AccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessToken& operator=(AccessToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessToken* internal_default_instance() {
    return reinterpret_cast<const AccessToken*>(
               &_AccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AccessToken& a, AccessToken& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessToken* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessToken* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessToken>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccessToken& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AccessToken& from) {
    AccessToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AccessToken* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.AccessToken";
  }
  protected:
  explicit AccessToken(::google::protobuf::Arena* arena);
  AccessToken(::google::protobuf::Arena* arena, const AccessToken& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kExpirationTimeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string session_id = 4;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  void clear_expiration_time() ;
  const ::google::protobuf::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiration_time();
  ::google::protobuf::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiration_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration_time();

  private:
  const ::google::protobuf::Timestamp& _internal_expiration_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiration_time();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.AccessToken)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::Timestamp* expiration_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class VoicePreviewRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.VoicePreviewRequest) */ {
 public:
  inline VoicePreviewRequest() : VoicePreviewRequest(nullptr) {}
  ~VoicePreviewRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VoicePreviewRequest(::google::protobuf::internal::ConstantInitialized);

  inline VoicePreviewRequest(const VoicePreviewRequest& from)
      : VoicePreviewRequest(nullptr, from) {}
  VoicePreviewRequest(VoicePreviewRequest&& from) noexcept
    : VoicePreviewRequest() {
    *this = ::std::move(from);
  }

  inline VoicePreviewRequest& operator=(const VoicePreviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoicePreviewRequest& operator=(VoicePreviewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoicePreviewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoicePreviewRequest* internal_default_instance() {
    return reinterpret_cast<const VoicePreviewRequest*>(
               &_VoicePreviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VoicePreviewRequest& a, VoicePreviewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoicePreviewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoicePreviewRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoicePreviewRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoicePreviewRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoicePreviewRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VoicePreviewRequest& from) {
    VoicePreviewRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VoicePreviewRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.VoicePreviewRequest";
  }
  protected:
  explicit VoicePreviewRequest(::google::protobuf::Arena* arena);
  VoicePreviewRequest(::google::protobuf::Arena* arena, const VoicePreviewRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kEmotionsFieldNumber = 2,
    kVoiceFieldNumber = 3,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .ai.inworld.packets.EmotionEvent emotions = 2;
  bool has_emotions() const;
  void clear_emotions() ;
  const ::ai::inworld::packets::EmotionEvent& emotions() const;
  PROTOBUF_NODISCARD ::ai::inworld::packets::EmotionEvent* release_emotions();
  ::ai::inworld::packets::EmotionEvent* mutable_emotions();
  void set_allocated_emotions(::ai::inworld::packets::EmotionEvent* value);
  void unsafe_arena_set_allocated_emotions(::ai::inworld::packets::EmotionEvent* value);
  ::ai::inworld::packets::EmotionEvent* unsafe_arena_release_emotions();

  private:
  const ::ai::inworld::packets::EmotionEvent& _internal_emotions() const;
  ::ai::inworld::packets::EmotionEvent* _internal_mutable_emotions();

  public:
  // .ai.inworld.voices.Voice voice = 3;
  bool has_voice() const;
  void clear_voice() ;
  const ::ai::inworld::voices::Voice& voice() const;
  PROTOBUF_NODISCARD ::ai::inworld::voices::Voice* release_voice();
  ::ai::inworld::voices::Voice* mutable_voice();
  void set_allocated_voice(::ai::inworld::voices::Voice* value);
  void unsafe_arena_set_allocated_voice(::ai::inworld::voices::Voice* value);
  ::ai::inworld::voices::Voice* unsafe_arena_release_voice();

  private:
  const ::ai::inworld::voices::Voice& _internal_voice() const;
  ::ai::inworld::voices::Voice* _internal_mutable_voice();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.VoicePreviewRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::ai::inworld::packets::EmotionEvent* emotions_;
    ::ai::inworld::voices::Voice* voice_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class UserSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserSettings) */ {
 public:
  inline UserSettings() : UserSettings(nullptr) {}
  ~UserSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSettings(::google::protobuf::internal::ConstantInitialized);

  inline UserSettings(const UserSettings& from)
      : UserSettings(nullptr, from) {}
  UserSettings(UserSettings&& from) noexcept
    : UserSettings() {
    *this = ::std::move(from);
  }

  inline UserSettings& operator=(const UserSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSettings& operator=(UserSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSettings* internal_default_instance() {
    return reinterpret_cast<const UserSettings*>(
               &_UserSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserSettings& a, UserSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSettings& from) {
    UserSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.UserSettings";
  }
  protected:
  explicit UserSettings(::google::protobuf::Arena* arena);
  UserSettings(::google::protobuf::Arena* arena, const UserSettings& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PlayerProfile = UserSettings_PlayerProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerProfileFieldNumber = 2,
    kViewTranscriptConsentFieldNumber = 1,
  };
  // .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
  bool has_player_profile() const;
  void clear_player_profile() ;
  const ::ai::inworld::engine::UserSettings_PlayerProfile& player_profile() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::UserSettings_PlayerProfile* release_player_profile();
  ::ai::inworld::engine::UserSettings_PlayerProfile* mutable_player_profile();
  void set_allocated_player_profile(::ai::inworld::engine::UserSettings_PlayerProfile* value);
  void unsafe_arena_set_allocated_player_profile(::ai::inworld::engine::UserSettings_PlayerProfile* value);
  ::ai::inworld::engine::UserSettings_PlayerProfile* unsafe_arena_release_player_profile();

  private:
  const ::ai::inworld::engine::UserSettings_PlayerProfile& _internal_player_profile() const;
  ::ai::inworld::engine::UserSettings_PlayerProfile* _internal_mutable_player_profile();

  public:
  // bool view_transcript_consent = 1;
  void clear_view_transcript_consent() ;
  bool view_transcript_consent() const;
  void set_view_transcript_consent(bool value);

  private:
  bool _internal_view_transcript_consent() const;
  void _internal_set_view_transcript_consent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::ai::inworld::engine::UserSettings_PlayerProfile* player_profile_;
    bool view_transcript_consent_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class SessionContinuation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.SessionContinuation) */ {
 public:
  inline SessionContinuation() : SessionContinuation(nullptr) {}
  ~SessionContinuation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SessionContinuation(::google::protobuf::internal::ConstantInitialized);

  inline SessionContinuation(const SessionContinuation& from)
      : SessionContinuation(nullptr, from) {}
  SessionContinuation(SessionContinuation&& from) noexcept
    : SessionContinuation() {
    *this = ::std::move(from);
  }

  inline SessionContinuation& operator=(const SessionContinuation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionContinuation& operator=(SessionContinuation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionContinuation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionContinuation* internal_default_instance() {
    return reinterpret_cast<const SessionContinuation*>(
               &_SessionContinuation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SessionContinuation& a, SessionContinuation& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionContinuation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionContinuation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionContinuation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionContinuation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionContinuation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SessionContinuation& from) {
    SessionContinuation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SessionContinuation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.SessionContinuation";
  }
  protected:
  explicit SessionContinuation(::google::protobuf::Arena* arena);
  SessionContinuation(::google::protobuf::Arena* arena, const SessionContinuation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ContinuationInfo = SessionContinuation_ContinuationInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousStateFieldNumber = 3,
    kContinuationInfoFieldNumber = 1,
    kPreviousDialogFieldNumber = 2,
  };
  // bytes previous_state = 3;
  void clear_previous_state() ;
  const std::string& previous_state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_previous_state(Arg_&& arg, Args_... args);
  std::string* mutable_previous_state();
  PROTOBUF_NODISCARD std::string* release_previous_state();
  void set_allocated_previous_state(std::string* value);

  private:
  const std::string& _internal_previous_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_state(
      const std::string& value);
  std::string* _internal_mutable_previous_state();

  public:
  // .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
  bool has_continuation_info() const;
  void clear_continuation_info() ;
  const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& continuation_info() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::SessionContinuation_ContinuationInfo* release_continuation_info();
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* mutable_continuation_info();
  void set_allocated_continuation_info(::ai::inworld::engine::SessionContinuation_ContinuationInfo* value);
  void unsafe_arena_set_allocated_continuation_info(::ai::inworld::engine::SessionContinuation_ContinuationInfo* value);
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* unsafe_arena_release_continuation_info();

  private:
  const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& _internal_continuation_info() const;
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* _internal_mutable_continuation_info();

  public:
  // .ai.inworld.engine.PreviousDialog previous_dialog = 2;
  bool has_previous_dialog() const;
  void clear_previous_dialog() ;
  const ::ai::inworld::engine::PreviousDialog& previous_dialog() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::PreviousDialog* release_previous_dialog();
  ::ai::inworld::engine::PreviousDialog* mutable_previous_dialog();
  void set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value);
  void unsafe_arena_set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value);
  ::ai::inworld::engine::PreviousDialog* unsafe_arena_release_previous_dialog();

  private:
  const ::ai::inworld::engine::PreviousDialog& _internal_previous_dialog() const;
  ::ai::inworld::engine::PreviousDialog* _internal_mutable_previous_dialog();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.SessionContinuation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr previous_state_;
    ::ai::inworld::engine::SessionContinuation_ContinuationInfo* continuation_info_;
    ::ai::inworld::engine::PreviousDialog* previous_dialog_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class ListBaseVoicesResponce final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesResponce) */ {
 public:
  inline ListBaseVoicesResponce() : ListBaseVoicesResponce(nullptr) {}
  ~ListBaseVoicesResponce() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListBaseVoicesResponce(::google::protobuf::internal::ConstantInitialized);

  inline ListBaseVoicesResponce(const ListBaseVoicesResponce& from)
      : ListBaseVoicesResponce(nullptr, from) {}
  ListBaseVoicesResponce(ListBaseVoicesResponce&& from) noexcept
    : ListBaseVoicesResponce() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesResponce& operator=(const ListBaseVoicesResponce& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesResponce& operator=(ListBaseVoicesResponce&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseVoicesResponce& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseVoicesResponce* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesResponce*>(
               &_ListBaseVoicesResponce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListBaseVoicesResponce& a, ListBaseVoicesResponce& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesResponce* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesResponce* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseVoicesResponce* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseVoicesResponce>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListBaseVoicesResponce& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListBaseVoicesResponce& from) {
    ListBaseVoicesResponce::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListBaseVoicesResponce* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesResponce";
  }
  protected:
  explicit ListBaseVoicesResponce(::google::protobuf::Arena* arena);
  ListBaseVoicesResponce(::google::protobuf::Arena* arena, const ListBaseVoicesResponce& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoogleVoicesFieldNumber = 1,
    kInworldVoicesFieldNumber = 2,
    kElevenLabsVoicesFieldNumber = 3,
    kInworldV2VoicesFieldNumber = 4,
  };
  // repeated .ai.inworld.voices.BaseVoice google_voices = 1;
  int google_voices_size() const;
  private:
  int _internal_google_voices_size() const;

  public:
  void clear_google_voices() ;
  ::ai::inworld::voices::BaseVoice* mutable_google_voices(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >*
      mutable_google_voices();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& _internal_google_voices() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* _internal_mutable_google_voices();
  public:
  const ::ai::inworld::voices::BaseVoice& google_voices(int index) const;
  ::ai::inworld::voices::BaseVoice* add_google_voices();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >&
      google_voices() const;
  // repeated .ai.inworld.voices.BaseVoice inworld_voices = 2;
  int inworld_voices_size() const;
  private:
  int _internal_inworld_voices_size() const;

  public:
  void clear_inworld_voices() ;
  ::ai::inworld::voices::BaseVoice* mutable_inworld_voices(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >*
      mutable_inworld_voices();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& _internal_inworld_voices() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* _internal_mutable_inworld_voices();
  public:
  const ::ai::inworld::voices::BaseVoice& inworld_voices(int index) const;
  ::ai::inworld::voices::BaseVoice* add_inworld_voices();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >&
      inworld_voices() const;
  // repeated .ai.inworld.voices.BaseVoice eleven_labs_voices = 3;
  int eleven_labs_voices_size() const;
  private:
  int _internal_eleven_labs_voices_size() const;

  public:
  void clear_eleven_labs_voices() ;
  ::ai::inworld::voices::BaseVoice* mutable_eleven_labs_voices(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >*
      mutable_eleven_labs_voices();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& _internal_eleven_labs_voices() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* _internal_mutable_eleven_labs_voices();
  public:
  const ::ai::inworld::voices::BaseVoice& eleven_labs_voices(int index) const;
  ::ai::inworld::voices::BaseVoice* add_eleven_labs_voices();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >&
      eleven_labs_voices() const;
  // repeated .ai.inworld.voices.BaseVoice inworld_v2_voices = 4;
  int inworld_v2_voices_size() const;
  private:
  int _internal_inworld_v2_voices_size() const;

  public:
  void clear_inworld_v2_voices() ;
  ::ai::inworld::voices::BaseVoice* mutable_inworld_v2_voices(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >*
      mutable_inworld_v2_voices();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& _internal_inworld_v2_voices() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* _internal_mutable_inworld_v2_voices();
  public:
  const ::ai::inworld::voices::BaseVoice& inworld_v2_voices(int index) const;
  ::ai::inworld::voices::BaseVoice* add_inworld_v2_voices();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice >&
      inworld_v2_voices() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesResponce)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice > google_voices_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice > inworld_voices_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice > eleven_labs_voices_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::voices::BaseVoice > inworld_v2_voices_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class LoadSceneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneRequest) */ {
 public:
  inline LoadSceneRequest() : LoadSceneRequest(nullptr) {}
  ~LoadSceneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoadSceneRequest(::google::protobuf::internal::ConstantInitialized);

  inline LoadSceneRequest(const LoadSceneRequest& from)
      : LoadSceneRequest(nullptr, from) {}
  LoadSceneRequest(LoadSceneRequest&& from) noexcept
    : LoadSceneRequest() {
    *this = ::std::move(from);
  }

  inline LoadSceneRequest& operator=(const LoadSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneRequest& operator=(LoadSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneRequest* internal_default_instance() {
    return reinterpret_cast<const LoadSceneRequest*>(
               &_LoadSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoadSceneRequest& a, LoadSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoadSceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoadSceneRequest& from) {
    LoadSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoadSceneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.LoadSceneRequest";
  }
  protected:
  explicit LoadSceneRequest(::google::protobuf::Arena* arena);
  LoadSceneRequest(::google::protobuf::Arena* arena, const LoadSceneRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCapabilitiesFieldNumber = 2,
    kUserFieldNumber = 3,
    kClientFieldNumber = 4,
    kAudioSettingsFieldNumber = 5,
    kUserSettingsFieldNumber = 6,
    kSessionContinuationFieldNumber = 7,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
  bool has_capabilities() const;
  void clear_capabilities() ;
  const ::ai::inworld::engine::CapabilitiesRequest& capabilities() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::CapabilitiesRequest* release_capabilities();
  ::ai::inworld::engine::CapabilitiesRequest* mutable_capabilities();
  void set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* value);
  void unsafe_arena_set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* value);
  ::ai::inworld::engine::CapabilitiesRequest* unsafe_arena_release_capabilities();

  private:
  const ::ai::inworld::engine::CapabilitiesRequest& _internal_capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* _internal_mutable_capabilities();

  public:
  // .ai.inworld.engine.UserRequest user = 3;
  bool has_user() const;
  void clear_user() ;
  const ::ai::inworld::engine::UserRequest& user() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::UserRequest* release_user();
  ::ai::inworld::engine::UserRequest* mutable_user();
  void set_allocated_user(::ai::inworld::engine::UserRequest* value);
  void unsafe_arena_set_allocated_user(::ai::inworld::engine::UserRequest* value);
  ::ai::inworld::engine::UserRequest* unsafe_arena_release_user();

  private:
  const ::ai::inworld::engine::UserRequest& _internal_user() const;
  ::ai::inworld::engine::UserRequest* _internal_mutable_user();

  public:
  // .ai.inworld.engine.ClientRequest client = 4;
  bool has_client() const;
  void clear_client() ;
  const ::ai::inworld::engine::ClientRequest& client() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::ClientRequest* release_client();
  ::ai::inworld::engine::ClientRequest* mutable_client();
  void set_allocated_client(::ai::inworld::engine::ClientRequest* value);
  void unsafe_arena_set_allocated_client(::ai::inworld::engine::ClientRequest* value);
  ::ai::inworld::engine::ClientRequest* unsafe_arena_release_client();

  private:
  const ::ai::inworld::engine::ClientRequest& _internal_client() const;
  ::ai::inworld::engine::ClientRequest* _internal_mutable_client();

  public:
  // .ai.inworld.engine.AudioSettings audio_settings = 5;
  bool has_audio_settings() const;
  void clear_audio_settings() ;
  const ::ai::inworld::engine::AudioSettings& audio_settings() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::AudioSettings* release_audio_settings();
  ::ai::inworld::engine::AudioSettings* mutable_audio_settings();
  void set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* value);
  void unsafe_arena_set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* value);
  ::ai::inworld::engine::AudioSettings* unsafe_arena_release_audio_settings();

  private:
  const ::ai::inworld::engine::AudioSettings& _internal_audio_settings() const;
  ::ai::inworld::engine::AudioSettings* _internal_mutable_audio_settings();

  public:
  // .ai.inworld.engine.UserSettings user_settings = 6;
  bool has_user_settings() const;
  void clear_user_settings() ;
  const ::ai::inworld::engine::UserSettings& user_settings() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::UserSettings* release_user_settings();
  ::ai::inworld::engine::UserSettings* mutable_user_settings();
  void set_allocated_user_settings(::ai::inworld::engine::UserSettings* value);
  void unsafe_arena_set_allocated_user_settings(::ai::inworld::engine::UserSettings* value);
  ::ai::inworld::engine::UserSettings* unsafe_arena_release_user_settings();

  private:
  const ::ai::inworld::engine::UserSettings& _internal_user_settings() const;
  ::ai::inworld::engine::UserSettings* _internal_mutable_user_settings();

  public:
  // .ai.inworld.engine.SessionContinuation session_continuation = 7;
  bool has_session_continuation() const;
  void clear_session_continuation() ;
  const ::ai::inworld::engine::SessionContinuation& session_continuation() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::SessionContinuation* release_session_continuation();
  ::ai::inworld::engine::SessionContinuation* mutable_session_continuation();
  void set_allocated_session_continuation(::ai::inworld::engine::SessionContinuation* value);
  void unsafe_arena_set_allocated_session_continuation(::ai::inworld::engine::SessionContinuation* value);
  ::ai::inworld::engine::SessionContinuation* unsafe_arena_release_session_continuation();

  private:
  const ::ai::inworld::engine::SessionContinuation& _internal_session_continuation() const;
  ::ai::inworld::engine::SessionContinuation* _internal_mutable_session_continuation();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 6,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::ai::inworld::engine::CapabilitiesRequest* capabilities_;
    ::ai::inworld::engine::UserRequest* user_;
    ::ai::inworld::engine::ClientRequest* client_;
    ::ai::inworld::engine::AudioSettings* audio_settings_;
    ::ai::inworld::engine::UserSettings* user_settings_;
    ::ai::inworld::engine::SessionContinuation* session_continuation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class PreviousState_StateHolder final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousState.StateHolder) */ {
 public:
  inline PreviousState_StateHolder() : PreviousState_StateHolder(nullptr) {}
  ~PreviousState_StateHolder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PreviousState_StateHolder(::google::protobuf::internal::ConstantInitialized);

  inline PreviousState_StateHolder(const PreviousState_StateHolder& from)
      : PreviousState_StateHolder(nullptr, from) {}
  PreviousState_StateHolder(PreviousState_StateHolder&& from) noexcept
    : PreviousState_StateHolder() {
    *this = ::std::move(from);
  }

  inline PreviousState_StateHolder& operator=(const PreviousState_StateHolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousState_StateHolder& operator=(PreviousState_StateHolder&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreviousState_StateHolder& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreviousState_StateHolder* internal_default_instance() {
    return reinterpret_cast<const PreviousState_StateHolder*>(
               &_PreviousState_StateHolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PreviousState_StateHolder& a, PreviousState_StateHolder& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousState_StateHolder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousState_StateHolder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreviousState_StateHolder* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreviousState_StateHolder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PreviousState_StateHolder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PreviousState_StateHolder& from) {
    PreviousState_StateHolder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreviousState_StateHolder* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.PreviousState.StateHolder";
  }
  protected:
  explicit PreviousState_StateHolder(::google::protobuf::Arena* arena);
  PreviousState_StateHolder(::google::protobuf::Arena* arena, const PreviousState_StateHolder& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StateFormat = PreviousState_StateHolder_StateFormat;
  static constexpr StateFormat STATE_FORMAT_UNKNOWN = PreviousState_StateHolder_StateFormat_STATE_FORMAT_UNKNOWN;
  static constexpr StateFormat STATE_FORMAT_SESSION_BRAIN_STATE = PreviousState_StateHolder_StateFormat_STATE_FORMAT_SESSION_BRAIN_STATE;
  static constexpr StateFormat STATE_FORMAT_EXTERNAL_BRAIN_STATE = PreviousState_StateHolder_StateFormat_STATE_FORMAT_EXTERNAL_BRAIN_STATE;
  static inline bool StateFormat_IsValid(int value) {
    return PreviousState_StateHolder_StateFormat_IsValid(value);
  }
  static constexpr StateFormat StateFormat_MIN = PreviousState_StateHolder_StateFormat_StateFormat_MIN;
  static constexpr StateFormat StateFormat_MAX = PreviousState_StateHolder_StateFormat_StateFormat_MAX;
  static constexpr int StateFormat_ARRAYSIZE = PreviousState_StateHolder_StateFormat_StateFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* StateFormat_descriptor() {
    return PreviousState_StateHolder_StateFormat_descriptor();
  }
  template <typename T>
  static inline const std::string& StateFormat_Name(T value) {
    return PreviousState_StateHolder_StateFormat_Name(value);
  }
  static inline bool StateFormat_Parse(absl::string_view name, StateFormat* value) {
    return PreviousState_StateHolder_StateFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPacketsFieldNumber = 4,
    kRelationsToActorsFieldNumber = 5,
    kBrainNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kPreviousDialogFieldNumber = 3,
    kStateFormatFieldNumber = 6,
  };
  // repeated .ai.inworld.packets.InworldPacket packets = 4;
  int packets_size() const;
  private:
  int _internal_packets_size() const;

  public:
  void clear_packets() ;
  ::ai::inworld::packets::InworldPacket* mutable_packets(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::packets::InworldPacket >*
      mutable_packets();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::packets::InworldPacket>& _internal_packets() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::packets::InworldPacket>* _internal_mutable_packets();
  public:
  const ::ai::inworld::packets::InworldPacket& packets(int index) const;
  ::ai::inworld::packets::InworldPacket* add_packets();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::packets::InworldPacket >&
      packets() const;
  // repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
  int relations_to_actors_size() const;
  private:
  int _internal_relations_to_actors_size() const;

  public:
  void clear_relations_to_actors() ;
  ::ai::inworld::engine::ActorRelations* mutable_relations_to_actors(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::ActorRelations >*
      mutable_relations_to_actors();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations>& _internal_relations_to_actors() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations>* _internal_mutable_relations_to_actors();
  public:
  const ::ai::inworld::engine::ActorRelations& relations_to_actors(int index) const;
  ::ai::inworld::engine::ActorRelations* add_relations_to_actors();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::ActorRelations >&
      relations_to_actors() const;
  // string brain_name = 1;
  void clear_brain_name() ;
  const std::string& brain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_brain_name(Arg_&& arg, Args_... args);
  std::string* mutable_brain_name();
  PROTOBUF_NODISCARD std::string* release_brain_name();
  void set_allocated_brain_name(std::string* value);

  private:
  const std::string& _internal_brain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brain_name(
      const std::string& value);
  std::string* _internal_mutable_brain_name();

  public:
  // bytes state = 2;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
  [[deprecated]]  bool has_previous_dialog() const;
  [[deprecated]]  void clear_previous_dialog() ;
  [[deprecated]] const ::ai::inworld::engine::PreviousDialog& previous_dialog() const;
  [[deprecated]] PROTOBUF_NODISCARD ::ai::inworld::engine::PreviousDialog* release_previous_dialog();
  [[deprecated]] ::ai::inworld::engine::PreviousDialog* mutable_previous_dialog();
  [[deprecated]] void set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value);
  [[deprecated]] void unsafe_arena_set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value);
  [[deprecated]] ::ai::inworld::engine::PreviousDialog* unsafe_arena_release_previous_dialog();

  private:
  const ::ai::inworld::engine::PreviousDialog& _internal_previous_dialog() const;
  ::ai::inworld::engine::PreviousDialog* _internal_mutable_previous_dialog();

  public:
  // .ai.inworld.engine.PreviousState.StateHolder.StateFormat state_format = 6;
  void clear_state_format() ;
  ::ai::inworld::engine::PreviousState_StateHolder_StateFormat state_format() const;
  void set_state_format(::ai::inworld::engine::PreviousState_StateHolder_StateFormat value);

  private:
  ::ai::inworld::engine::PreviousState_StateHolder_StateFormat _internal_state_format() const;
  void _internal_set_state_format(::ai::inworld::engine::PreviousState_StateHolder_StateFormat value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousState.StateHolder)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::packets::InworldPacket > packets_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::ActorRelations > relations_to_actors_;
    ::google::protobuf::internal::ArenaStringPtr brain_name_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::ai::inworld::engine::PreviousDialog* previous_dialog_;
    int state_format_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class PreviousState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousState) */ {
 public:
  inline PreviousState() : PreviousState(nullptr) {}
  ~PreviousState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PreviousState(::google::protobuf::internal::ConstantInitialized);

  inline PreviousState(const PreviousState& from)
      : PreviousState(nullptr, from) {}
  PreviousState(PreviousState&& from) noexcept
    : PreviousState() {
    *this = ::std::move(from);
  }

  inline PreviousState& operator=(const PreviousState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousState& operator=(PreviousState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreviousState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreviousState* internal_default_instance() {
    return reinterpret_cast<const PreviousState*>(
               &_PreviousState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PreviousState& a, PreviousState& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreviousState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreviousState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PreviousState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PreviousState& from) {
    PreviousState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreviousState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.PreviousState";
  }
  protected:
  explicit PreviousState(::google::protobuf::Arena* arena);
  PreviousState(::google::protobuf::Arena* arena, const PreviousState& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StateHolder = PreviousState_StateHolder;

  // accessors -------------------------------------------------------

  enum : int {
    kStateHoldersFieldNumber = 1,
    kGameSessionIdFieldNumber = 2,
  };
  // repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
  int state_holders_size() const;
  private:
  int _internal_state_holders_size() const;

  public:
  void clear_state_holders() ;
  ::ai::inworld::engine::PreviousState_StateHolder* mutable_state_holders(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder >*
      mutable_state_holders();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousState_StateHolder>& _internal_state_holders() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousState_StateHolder>* _internal_mutable_state_holders();
  public:
  const ::ai::inworld::engine::PreviousState_StateHolder& state_holders(int index) const;
  ::ai::inworld::engine::PreviousState_StateHolder* add_state_holders();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder >&
      state_holders() const;
  // string game_session_id = 2;
  void clear_game_session_id() ;
  const std::string& game_session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_game_session_id();
  PROTOBUF_NODISCARD std::string* release_game_session_id();
  void set_allocated_game_session_id(std::string* value);

  private:
  const std::string& _internal_game_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_session_id(
      const std::string& value);
  std::string* _internal_mutable_game_session_id();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder > state_holders_;
    ::google::protobuf::internal::ArenaStringPtr game_session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};// -------------------------------------------------------------------

class LoadSceneResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse) */ {
 public:
  inline LoadSceneResponse() : LoadSceneResponse(nullptr) {}
  ~LoadSceneResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoadSceneResponse(::google::protobuf::internal::ConstantInitialized);

  inline LoadSceneResponse(const LoadSceneResponse& from)
      : LoadSceneResponse(nullptr, from) {}
  LoadSceneResponse(LoadSceneResponse&& from) noexcept
    : LoadSceneResponse() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse& operator=(const LoadSceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse& operator=(LoadSceneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse*>(
               &_LoadSceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LoadSceneResponse& a, LoadSceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoadSceneResponse& from) {
    LoadSceneResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoadSceneResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse";
  }
  protected:
  explicit LoadSceneResponse(::google::protobuf::Arena* arena);
  LoadSceneResponse(::google::protobuf::Arena* arena, const LoadSceneResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Agent = LoadSceneResponse_Agent;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kKeyFieldNumber = 2,
    kPreviousStateFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;

  public:
  void clear_agents() ;
  ::ai::inworld::engine::LoadSceneResponse_Agent* mutable_agents(int index);
  ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >*
      mutable_agents();
  private:
  const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::LoadSceneResponse_Agent>& _internal_agents() const;
  ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::LoadSceneResponse_Agent>* _internal_mutable_agents();
  public:
  const ::ai::inworld::engine::LoadSceneResponse_Agent& agents(int index) const;
  ::ai::inworld::engine::LoadSceneResponse_Agent* add_agents();
  const ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >&
      agents() const;
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .ai.inworld.engine.PreviousState previous_state = 3;
  bool has_previous_state() const;
  void clear_previous_state() ;
  const ::ai::inworld::engine::PreviousState& previous_state() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::PreviousState* release_previous_state();
  ::ai::inworld::engine::PreviousState* mutable_previous_state();
  void set_allocated_previous_state(::ai::inworld::engine::PreviousState* value);
  void unsafe_arena_set_allocated_previous_state(::ai::inworld::engine::PreviousState* value);
  ::ai::inworld::engine::PreviousState* unsafe_arena_release_previous_state();

  private:
  const ::ai::inworld::engine::PreviousState& _internal_previous_state() const;
  ::ai::inworld::engine::PreviousState* _internal_mutable_previous_state();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent > agents_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::ai::inworld::engine::PreviousState* previous_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CapabilitiesRequest

// bool audio = 1;
inline void CapabilitiesRequest::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_ = false;
}
inline bool CapabilitiesRequest::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.audio)
  return _internal_audio();
}
inline void CapabilitiesRequest::set_audio(bool value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.audio)
}
inline bool CapabilitiesRequest::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_;
}
inline void CapabilitiesRequest::_internal_set_audio(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_ = value;
}

// bool text = 2;
inline void CapabilitiesRequest::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_ = false;
}
inline bool CapabilitiesRequest::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.text)
  return _internal_text();
}
inline void CapabilitiesRequest::set_text(bool value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.text)
}
inline bool CapabilitiesRequest::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_;
}
inline void CapabilitiesRequest::_internal_set_text(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_ = value;
}

// bool gestures = 3 [deprecated = true];
inline void CapabilitiesRequest::clear_gestures() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gestures_ = false;
}
inline bool CapabilitiesRequest::gestures() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.gestures)
  return _internal_gestures();
}
inline void CapabilitiesRequest::set_gestures(bool value) {
  _internal_set_gestures(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.gestures)
}
inline bool CapabilitiesRequest::_internal_gestures() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gestures_;
}
inline void CapabilitiesRequest::_internal_set_gestures(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gestures_ = value;
}

// bool interruptions = 4;
inline void CapabilitiesRequest::clear_interruptions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interruptions_ = false;
}
inline bool CapabilitiesRequest::interruptions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.interruptions)
  return _internal_interruptions();
}
inline void CapabilitiesRequest::set_interruptions(bool value) {
  _internal_set_interruptions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.interruptions)
}
inline bool CapabilitiesRequest::_internal_interruptions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interruptions_;
}
inline void CapabilitiesRequest::_internal_set_interruptions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.interruptions_ = value;
}

// bool triggers = 5 [deprecated = true];
inline void CapabilitiesRequest::clear_triggers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.triggers_ = false;
}
inline bool CapabilitiesRequest::triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.triggers)
  return _internal_triggers();
}
inline void CapabilitiesRequest::set_triggers(bool value) {
  _internal_set_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.triggers)
}
inline bool CapabilitiesRequest::_internal_triggers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.triggers_;
}
inline void CapabilitiesRequest::_internal_set_triggers(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.triggers_ = value;
}

// bool emotions = 6;
inline void CapabilitiesRequest::clear_emotions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotions_ = false;
}
inline bool CapabilitiesRequest::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.emotions)
  return _internal_emotions();
}
inline void CapabilitiesRequest::set_emotions(bool value) {
  _internal_set_emotions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.emotions)
}
inline bool CapabilitiesRequest::_internal_emotions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotions_;
}
inline void CapabilitiesRequest::_internal_set_emotions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.emotions_ = value;
}

// bool turn_based_stt = 8;
inline void CapabilitiesRequest::clear_turn_based_stt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turn_based_stt_ = false;
}
inline bool CapabilitiesRequest::turn_based_stt() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.turn_based_stt)
  return _internal_turn_based_stt();
}
inline void CapabilitiesRequest::set_turn_based_stt(bool value) {
  _internal_set_turn_based_stt(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.turn_based_stt)
}
inline bool CapabilitiesRequest::_internal_turn_based_stt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turn_based_stt_;
}
inline void CapabilitiesRequest::_internal_set_turn_based_stt(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turn_based_stt_ = value;
}

// bool emotion_streaming = 9;
inline void CapabilitiesRequest::clear_emotion_streaming() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotion_streaming_ = false;
}
inline bool CapabilitiesRequest::emotion_streaming() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.emotion_streaming)
  return _internal_emotion_streaming();
}
inline void CapabilitiesRequest::set_emotion_streaming(bool value) {
  _internal_set_emotion_streaming(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.emotion_streaming)
}
inline bool CapabilitiesRequest::_internal_emotion_streaming() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotion_streaming_;
}
inline void CapabilitiesRequest::_internal_set_emotion_streaming(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.emotion_streaming_ = value;
}

// bool silence_events = 10;
inline void CapabilitiesRequest::clear_silence_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.silence_events_ = false;
}
inline bool CapabilitiesRequest::silence_events() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.silence_events)
  return _internal_silence_events();
}
inline void CapabilitiesRequest::set_silence_events(bool value) {
  _internal_set_silence_events(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.silence_events)
}
inline bool CapabilitiesRequest::_internal_silence_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.silence_events_;
}
inline void CapabilitiesRequest::_internal_set_silence_events(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.silence_events_ = value;
}

// bool phoneme_info = 11;
inline void CapabilitiesRequest::clear_phoneme_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phoneme_info_ = false;
}
inline bool CapabilitiesRequest::phoneme_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.phoneme_info)
  return _internal_phoneme_info();
}
inline void CapabilitiesRequest::set_phoneme_info(bool value) {
  _internal_set_phoneme_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.phoneme_info)
}
inline bool CapabilitiesRequest::_internal_phoneme_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phoneme_info_;
}
inline void CapabilitiesRequest::_internal_set_phoneme_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phoneme_info_ = value;
}

// bool continuation = 12;
inline void CapabilitiesRequest::clear_continuation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.continuation_ = false;
}
inline bool CapabilitiesRequest::continuation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.continuation)
  return _internal_continuation();
}
inline void CapabilitiesRequest::set_continuation(bool value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.continuation)
}
inline bool CapabilitiesRequest::_internal_continuation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.continuation_;
}
inline void CapabilitiesRequest::_internal_set_continuation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.continuation_ = value;
}

// bool session_cancellation = 13;
inline void CapabilitiesRequest::clear_session_cancellation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_cancellation_ = false;
}
inline bool CapabilitiesRequest::session_cancellation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.session_cancellation)
  return _internal_session_cancellation();
}
inline void CapabilitiesRequest::set_session_cancellation(bool value) {
  _internal_set_session_cancellation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.session_cancellation)
}
inline bool CapabilitiesRequest::_internal_session_cancellation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_cancellation_;
}
inline void CapabilitiesRequest::_internal_set_session_cancellation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_cancellation_ = value;
}

// bool narrated_actions = 14;
inline void CapabilitiesRequest::clear_narrated_actions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.narrated_actions_ = false;
}
inline bool CapabilitiesRequest::narrated_actions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.narrated_actions)
  return _internal_narrated_actions();
}
inline void CapabilitiesRequest::set_narrated_actions(bool value) {
  _internal_set_narrated_actions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.narrated_actions)
}
inline bool CapabilitiesRequest::_internal_narrated_actions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.narrated_actions_;
}
inline void CapabilitiesRequest::_internal_set_narrated_actions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.narrated_actions_ = value;
}

// bool regenerate_response = 15;
inline void CapabilitiesRequest::clear_regenerate_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.regenerate_response_ = false;
}
inline bool CapabilitiesRequest::regenerate_response() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.regenerate_response)
  return _internal_regenerate_response();
}
inline void CapabilitiesRequest::set_regenerate_response(bool value) {
  _internal_set_regenerate_response(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.regenerate_response)
}
inline bool CapabilitiesRequest::_internal_regenerate_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.regenerate_response_;
}
inline void CapabilitiesRequest::_internal_set_regenerate_response(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.regenerate_response_ = value;
}

// bool load_scene_in_session = 16;
inline void CapabilitiesRequest::clear_load_scene_in_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.load_scene_in_session_ = false;
}
inline bool CapabilitiesRequest::load_scene_in_session() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.load_scene_in_session)
  return _internal_load_scene_in_session();
}
inline void CapabilitiesRequest::set_load_scene_in_session(bool value) {
  _internal_set_load_scene_in_session(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.load_scene_in_session)
}
inline bool CapabilitiesRequest::_internal_load_scene_in_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.load_scene_in_session_;
}
inline void CapabilitiesRequest::_internal_set_load_scene_in_session(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.load_scene_in_session_ = value;
}

// bool relations = 17;
inline void CapabilitiesRequest::clear_relations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relations_ = false;
}
inline bool CapabilitiesRequest::relations() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.relations)
  return _internal_relations();
}
inline void CapabilitiesRequest::set_relations(bool value) {
  _internal_set_relations(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.relations)
}
inline bool CapabilitiesRequest::_internal_relations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relations_;
}
inline void CapabilitiesRequest::_internal_set_relations(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relations_ = value;
}

// bool debug_info = 18;
inline void CapabilitiesRequest::clear_debug_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.debug_info_ = false;
}
inline bool CapabilitiesRequest::debug_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.debug_info)
  return _internal_debug_info();
}
inline void CapabilitiesRequest::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.debug_info)
}
inline bool CapabilitiesRequest::_internal_debug_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.debug_info_;
}
inline void CapabilitiesRequest::_internal_set_debug_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.debug_info_ = value;
}

// bool tts_mp3 = 19;
inline void CapabilitiesRequest::clear_tts_mp3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tts_mp3_ = false;
}
inline bool CapabilitiesRequest::tts_mp3() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.tts_mp3)
  return _internal_tts_mp3();
}
inline void CapabilitiesRequest::set_tts_mp3(bool value) {
  _internal_set_tts_mp3(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.tts_mp3)
}
inline bool CapabilitiesRequest::_internal_tts_mp3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tts_mp3_;
}
inline void CapabilitiesRequest::_internal_set_tts_mp3(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tts_mp3_ = value;
}

// bool multi_agent = 20;
inline void CapabilitiesRequest::clear_multi_agent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.multi_agent_ = false;
}
inline bool CapabilitiesRequest::multi_agent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.multi_agent)
  return _internal_multi_agent();
}
inline void CapabilitiesRequest::set_multi_agent(bool value) {
  _internal_set_multi_agent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.multi_agent)
}
inline bool CapabilitiesRequest::_internal_multi_agent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.multi_agent_;
}
inline void CapabilitiesRequest::_internal_set_multi_agent(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.multi_agent_ = value;
}

// -------------------------------------------------------------------

// UserRequest

// string name = 1;
inline void UserRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserRequest.name)
}
inline std::string* UserRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserRequest.name)
  return _s;
}
inline const std::string& UserRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UserRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UserRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UserRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserRequest.name)
  return _impl_.name_.Release();
}
inline void UserRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserRequest.name)
}

// string id = 2;
inline void UserRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserRequest.id)
}
inline std::string* UserRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserRequest.id)
  return _s;
}
inline const std::string& UserRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void UserRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* UserRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* UserRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserRequest.id)
  return _impl_.id_.Release();
}
inline void UserRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserRequest.id)
}

// -------------------------------------------------------------------

// ClientRequest

// string id = 1;
inline void ClientRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ClientRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.id)
}
inline std::string* ClientRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.id)
  return _s;
}
inline const std::string& ClientRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void ClientRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ClientRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ClientRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.id)
  return _impl_.id_.Release();
}
inline void ClientRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.id)
}

// string version = 2;
inline void ClientRequest::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ClientRequest::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.version)
}
inline std::string* ClientRequest::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.version)
  return _s;
}
inline const std::string& ClientRequest::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ClientRequest::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ClientRequest::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ClientRequest::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.version)
  return _impl_.version_.Release();
}
inline void ClientRequest::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.version)
}

// string description = 3;
inline void ClientRequest::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ClientRequest::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.description)
}
inline std::string* ClientRequest::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.description)
  return _s;
}
inline const std::string& ClientRequest::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void ClientRequest::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* ClientRequest::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* ClientRequest::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.description)
  return _impl_.description_.Release();
}
inline void ClientRequest::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.description)
}

// -------------------------------------------------------------------

// LoadSceneRequest

// string name = 1;
inline void LoadSceneRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LoadSceneRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneRequest.name)
}
inline std::string* LoadSceneRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.name)
  return _s;
}
inline const std::string& LoadSceneRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void LoadSceneRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LoadSceneRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LoadSceneRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.name)
  return _impl_.name_.Release();
}
inline void LoadSceneRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.name)
}

// .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
inline bool LoadSceneRequest::has_capabilities() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capabilities_ != nullptr);
  return value;
}
inline void LoadSceneRequest::clear_capabilities() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.capabilities_ != nullptr) _impl_.capabilities_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::CapabilitiesRequest& LoadSceneRequest::_internal_capabilities() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::CapabilitiesRequest* p = _impl_.capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CapabilitiesRequest&>(::ai::inworld::engine::_CapabilitiesRequest_default_instance_);
}
inline const ::ai::inworld::engine::CapabilitiesRequest& LoadSceneRequest::capabilities() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.capabilities)
  return _internal_capabilities();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capabilities_);
  }
  _impl_.capabilities_ = reinterpret_cast<::ai::inworld::engine::CapabilitiesRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.capabilities)
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::release_capabilities() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::CapabilitiesRequest* released = _impl_.capabilities_;
  _impl_.capabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::unsafe_arena_release_capabilities() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.capabilities)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::CapabilitiesRequest* temp = _impl_.capabilities_;
  _impl_.capabilities_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::_internal_mutable_capabilities() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(GetArena());
    _impl_.capabilities_ = reinterpret_cast<::ai::inworld::engine::CapabilitiesRequest*>(p);
  }
  return _impl_.capabilities_;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::mutable_capabilities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::CapabilitiesRequest* _msg = _internal_mutable_capabilities();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.capabilities)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::CapabilitiesRequest*>(_impl_.capabilities_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::CapabilitiesRequest*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.capabilities_ = reinterpret_cast<::ai::inworld::engine::CapabilitiesRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.capabilities)
}

// .ai.inworld.engine.UserRequest user = 3;
inline bool LoadSceneRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void LoadSceneRequest::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ai::inworld::engine::UserRequest& LoadSceneRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::UserRequest* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserRequest&>(::ai::inworld::engine::_UserRequest_default_instance_);
}
inline const ::ai::inworld::engine::UserRequest& LoadSceneRequest::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.user)
  return _internal_user();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_user(::ai::inworld::engine::UserRequest* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::ai::inworld::engine::UserRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.user)
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::engine::UserRequest* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.user)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::engine::UserRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserRequest>(GetArena());
    _impl_.user_ = reinterpret_cast<::ai::inworld::engine::UserRequest*>(p);
  }
  return _impl_.user_;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::UserRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.user)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_user(::ai::inworld::engine::UserRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::UserRequest*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::UserRequest*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.user_ = reinterpret_cast<::ai::inworld::engine::UserRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.user)
}

// .ai.inworld.engine.ClientRequest client = 4;
inline bool LoadSceneRequest::has_client() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_ != nullptr);
  return value;
}
inline void LoadSceneRequest::clear_client() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.client_ != nullptr) _impl_.client_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ai::inworld::engine::ClientRequest& LoadSceneRequest::_internal_client() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::ClientRequest* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::ClientRequest&>(::ai::inworld::engine::_ClientRequest_default_instance_);
}
inline const ::ai::inworld::engine::ClientRequest& LoadSceneRequest::client() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.client)
  return _internal_client();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_client(::ai::inworld::engine::ClientRequest* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = reinterpret_cast<::ai::inworld::engine::ClientRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.client)
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::release_client() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ai::inworld::engine::ClientRequest* released = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::unsafe_arena_release_client() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.client)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ai::inworld::engine::ClientRequest* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::_internal_mutable_client() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::ClientRequest>(GetArena());
    _impl_.client_ = reinterpret_cast<::ai::inworld::engine::ClientRequest*>(p);
  }
  return _impl_.client_;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::mutable_client() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::ClientRequest* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.client)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_client(::ai::inworld::engine::ClientRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::ClientRequest*>(_impl_.client_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::ClientRequest*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.client_ = reinterpret_cast<::ai::inworld::engine::ClientRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.client)
}

// .ai.inworld.engine.AudioSettings audio_settings = 5;
inline bool LoadSceneRequest::has_audio_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_settings_ != nullptr);
  return value;
}
inline void LoadSceneRequest::clear_audio_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_settings_ != nullptr) _impl_.audio_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::ai::inworld::engine::AudioSettings& LoadSceneRequest::_internal_audio_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::AudioSettings* p = _impl_.audio_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::AudioSettings&>(::ai::inworld::engine::_AudioSettings_default_instance_);
}
inline const ::ai::inworld::engine::AudioSettings& LoadSceneRequest::audio_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.audio_settings)
  return _internal_audio_settings();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_settings_);
  }
  _impl_.audio_settings_ = reinterpret_cast<::ai::inworld::engine::AudioSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.audio_settings)
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::release_audio_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ai::inworld::engine::AudioSettings* released = _impl_.audio_settings_;
  _impl_.audio_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::unsafe_arena_release_audio_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.audio_settings)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ai::inworld::engine::AudioSettings* temp = _impl_.audio_settings_;
  _impl_.audio_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::_internal_mutable_audio_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.audio_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::AudioSettings>(GetArena());
    _impl_.audio_settings_ = reinterpret_cast<::ai::inworld::engine::AudioSettings*>(p);
  }
  return _impl_.audio_settings_;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::mutable_audio_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::AudioSettings* _msg = _internal_mutable_audio_settings();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.audio_settings)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::AudioSettings*>(_impl_.audio_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::AudioSettings*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.audio_settings_ = reinterpret_cast<::ai::inworld::engine::AudioSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.audio_settings)
}

// .ai.inworld.engine.UserSettings user_settings = 6;
inline bool LoadSceneRequest::has_user_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_settings_ != nullptr);
  return value;
}
inline void LoadSceneRequest::clear_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_settings_ != nullptr) _impl_.user_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::ai::inworld::engine::UserSettings& LoadSceneRequest::_internal_user_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::UserSettings* p = _impl_.user_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserSettings&>(::ai::inworld::engine::_UserSettings_default_instance_);
}
inline const ::ai::inworld::engine::UserSettings& LoadSceneRequest::user_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.user_settings)
  return _internal_user_settings();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_user_settings(::ai::inworld::engine::UserSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_settings_);
  }
  _impl_.user_settings_ = reinterpret_cast<::ai::inworld::engine::UserSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.user_settings)
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::release_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ai::inworld::engine::UserSettings* released = _impl_.user_settings_;
  _impl_.user_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::unsafe_arena_release_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.user_settings)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ai::inworld::engine::UserSettings* temp = _impl_.user_settings_;
  _impl_.user_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::_internal_mutable_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.user_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserSettings>(GetArena());
    _impl_.user_settings_ = reinterpret_cast<::ai::inworld::engine::UserSettings*>(p);
  }
  return _impl_.user_settings_;
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::mutable_user_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::UserSettings* _msg = _internal_mutable_user_settings();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.user_settings)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_user_settings(::ai::inworld::engine::UserSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::UserSettings*>(_impl_.user_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::UserSettings*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.user_settings_ = reinterpret_cast<::ai::inworld::engine::UserSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.user_settings)
}

// .ai.inworld.engine.SessionContinuation session_continuation = 7;
inline bool LoadSceneRequest::has_session_continuation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_continuation_ != nullptr);
  return value;
}
inline void LoadSceneRequest::clear_session_continuation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.session_continuation_ != nullptr) _impl_.session_continuation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::ai::inworld::engine::SessionContinuation& LoadSceneRequest::_internal_session_continuation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::SessionContinuation* p = _impl_.session_continuation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::SessionContinuation&>(::ai::inworld::engine::_SessionContinuation_default_instance_);
}
inline const ::ai::inworld::engine::SessionContinuation& LoadSceneRequest::session_continuation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.session_continuation)
  return _internal_session_continuation();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_session_continuation(::ai::inworld::engine::SessionContinuation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_continuation_);
  }
  _impl_.session_continuation_ = reinterpret_cast<::ai::inworld::engine::SessionContinuation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.session_continuation)
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::release_session_continuation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::ai::inworld::engine::SessionContinuation* released = _impl_.session_continuation_;
  _impl_.session_continuation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::unsafe_arena_release_session_continuation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.session_continuation)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::ai::inworld::engine::SessionContinuation* temp = _impl_.session_continuation_;
  _impl_.session_continuation_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::_internal_mutable_session_continuation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.session_continuation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::SessionContinuation>(GetArena());
    _impl_.session_continuation_ = reinterpret_cast<::ai::inworld::engine::SessionContinuation*>(p);
  }
  return _impl_.session_continuation_;
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::mutable_session_continuation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::SessionContinuation* _msg = _internal_mutable_session_continuation();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.session_continuation)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_session_continuation(::ai::inworld::engine::SessionContinuation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::SessionContinuation*>(_impl_.session_continuation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::SessionContinuation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.session_continuation_ = reinterpret_cast<::ai::inworld::engine::SessionContinuation*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.session_continuation)
}

// -------------------------------------------------------------------

// AudioSettings

// uint32 stt_sample_rate_hertz = 1;
inline void AudioSettings::clear_stt_sample_rate_hertz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stt_sample_rate_hertz_ = 0u;
}
inline ::uint32_t AudioSettings::stt_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AudioSettings.stt_sample_rate_hertz)
  return _internal_stt_sample_rate_hertz();
}
inline void AudioSettings::set_stt_sample_rate_hertz(::uint32_t value) {
  _internal_set_stt_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AudioSettings.stt_sample_rate_hertz)
}
inline ::uint32_t AudioSettings::_internal_stt_sample_rate_hertz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stt_sample_rate_hertz_;
}
inline void AudioSettings::_internal_set_stt_sample_rate_hertz(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stt_sample_rate_hertz_ = value;
}

// uint32 tts_sample_rate_hertz = 2;
inline void AudioSettings::clear_tts_sample_rate_hertz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tts_sample_rate_hertz_ = 0u;
}
inline ::uint32_t AudioSettings::tts_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AudioSettings.tts_sample_rate_hertz)
  return _internal_tts_sample_rate_hertz();
}
inline void AudioSettings::set_tts_sample_rate_hertz(::uint32_t value) {
  _internal_set_tts_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AudioSettings.tts_sample_rate_hertz)
}
inline ::uint32_t AudioSettings::_internal_tts_sample_rate_hertz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tts_sample_rate_hertz_;
}
inline void AudioSettings::_internal_set_tts_sample_rate_hertz(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tts_sample_rate_hertz_ = value;
}

// -------------------------------------------------------------------

// UserSettings_PlayerProfile_PlayerField

// string field_id = 1;
inline void UserSettings_PlayerProfile_PlayerField::clear_field_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_id_.ClearToEmpty();
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::field_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
  return _internal_field_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSettings_PlayerProfile_PlayerField::set_field_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline std::string* UserSettings_PlayerProfile_PlayerField::mutable_field_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
  return _s;
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::_internal_field_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_id_.Get();
}
inline void UserSettings_PlayerProfile_PlayerField::_internal_set_field_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_id_.Set(value, GetArena());
}
inline std::string* UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_id_.Mutable( GetArena());
}
inline std::string* UserSettings_PlayerProfile_PlayerField::release_field_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
  return _impl_.field_id_.Release();
}
inline void UserSettings_PlayerProfile_PlayerField::set_allocated_field_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_id_.IsDefault()) {
          _impl_.field_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}

// string field_value = 2;
inline void UserSettings_PlayerProfile_PlayerField::clear_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_value_.ClearToEmpty();
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::field_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
  return _internal_field_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSettings_PlayerProfile_PlayerField::set_field_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline std::string* UserSettings_PlayerProfile_PlayerField::mutable_field_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_value();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
  return _s;
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::_internal_field_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_value_.Get();
}
inline void UserSettings_PlayerProfile_PlayerField::_internal_set_field_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_value_.Set(value, GetArena());
}
inline std::string* UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_value_.Mutable( GetArena());
}
inline std::string* UserSettings_PlayerProfile_PlayerField::release_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
  return _impl_.field_value_.Release();
}
inline void UserSettings_PlayerProfile_PlayerField::set_allocated_field_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_value_.IsDefault()) {
          _impl_.field_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}

// -------------------------------------------------------------------

// UserSettings_PlayerProfile

// repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
inline int UserSettings_PlayerProfile::_internal_fields_size() const {
  return _internal_fields().size();
}
inline int UserSettings_PlayerProfile::fields_size() const {
  return _internal_fields_size();
}
inline void UserSettings_PlayerProfile::clear_fields() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fields_.Clear();
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* UserSettings_PlayerProfile::mutable_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>* UserSettings_PlayerProfile::mutable_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fields();
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField& UserSettings_PlayerProfile::fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return _internal_fields().Get(index);
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* UserSettings_PlayerProfile::add_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* _add = _internal_mutable_fields()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>& UserSettings_PlayerProfile::fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return _internal_fields();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>&
UserSettings_PlayerProfile::_internal_fields() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fields_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>*
UserSettings_PlayerProfile::_internal_mutable_fields() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// UserSettings

// bool view_transcript_consent = 1;
inline void UserSettings::clear_view_transcript_consent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_transcript_consent_ = false;
}
inline bool UserSettings::view_transcript_consent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.view_transcript_consent)
  return _internal_view_transcript_consent();
}
inline void UserSettings::set_view_transcript_consent(bool value) {
  _internal_set_view_transcript_consent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserSettings.view_transcript_consent)
}
inline bool UserSettings::_internal_view_transcript_consent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.view_transcript_consent_;
}
inline void UserSettings::_internal_set_view_transcript_consent(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_transcript_consent_ = value;
}

// .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
inline bool UserSettings::has_player_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_profile_ != nullptr);
  return value;
}
inline void UserSettings::clear_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.player_profile_ != nullptr) _impl_.player_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile& UserSettings::_internal_player_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::UserSettings_PlayerProfile* p = _impl_.player_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserSettings_PlayerProfile&>(::ai::inworld::engine::_UserSettings_PlayerProfile_default_instance_);
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile& UserSettings::player_profile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.player_profile)
  return _internal_player_profile();
}
inline void UserSettings::unsafe_arena_set_allocated_player_profile(::ai::inworld::engine::UserSettings_PlayerProfile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_profile_);
  }
  _impl_.player_profile_ = reinterpret_cast<::ai::inworld::engine::UserSettings_PlayerProfile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.UserSettings.player_profile)
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::release_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::UserSettings_PlayerProfile* released = _impl_.player_profile_;
  _impl_.player_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::unsafe_arena_release_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserSettings.player_profile)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::UserSettings_PlayerProfile* temp = _impl_.player_profile_;
  _impl_.player_profile_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::_internal_mutable_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserSettings_PlayerProfile>(GetArena());
    _impl_.player_profile_ = reinterpret_cast<::ai::inworld::engine::UserSettings_PlayerProfile*>(p);
  }
  return _impl_.player_profile_;
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::mutable_player_profile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::UserSettings_PlayerProfile* _msg = _internal_mutable_player_profile();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.player_profile)
  return _msg;
}
inline void UserSettings::set_allocated_player_profile(::ai::inworld::engine::UserSettings_PlayerProfile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::UserSettings_PlayerProfile*>(_impl_.player_profile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::UserSettings_PlayerProfile*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_profile_ = reinterpret_cast<::ai::inworld::engine::UserSettings_PlayerProfile*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserSettings.player_profile)
}

// -------------------------------------------------------------------

// SessionContinuation_ContinuationInfo

// int64 millis_passed = 1;
inline void SessionContinuation_ContinuationInfo::clear_millis_passed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.millis_passed_ = ::int64_t{0};
}
inline ::int64_t SessionContinuation_ContinuationInfo::millis_passed() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.ContinuationInfo.millis_passed)
  return _internal_millis_passed();
}
inline void SessionContinuation_ContinuationInfo::set_millis_passed(::int64_t value) {
  _internal_set_millis_passed(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.SessionContinuation.ContinuationInfo.millis_passed)
}
inline ::int64_t SessionContinuation_ContinuationInfo::_internal_millis_passed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.millis_passed_;
}
inline void SessionContinuation_ContinuationInfo::_internal_set_millis_passed(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.millis_passed_ = value;
}

// -------------------------------------------------------------------

// SessionContinuation

// .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
inline bool SessionContinuation::has_continuation_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.continuation_info_ != nullptr);
  return value;
}
inline void SessionContinuation::clear_continuation_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.continuation_info_ != nullptr) _impl_.continuation_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& SessionContinuation::_internal_continuation_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::SessionContinuation_ContinuationInfo* p = _impl_.continuation_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::SessionContinuation_ContinuationInfo&>(::ai::inworld::engine::_SessionContinuation_ContinuationInfo_default_instance_);
}
inline const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& SessionContinuation::continuation_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.continuation_info)
  return _internal_continuation_info();
}
inline void SessionContinuation::unsafe_arena_set_allocated_continuation_info(::ai::inworld::engine::SessionContinuation_ContinuationInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.continuation_info_);
  }
  _impl_.continuation_info_ = reinterpret_cast<::ai::inworld::engine::SessionContinuation_ContinuationInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.SessionContinuation.continuation_info)
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::release_continuation_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* released = _impl_.continuation_info_;
  _impl_.continuation_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::unsafe_arena_release_continuation_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.SessionContinuation.continuation_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* temp = _impl_.continuation_info_;
  _impl_.continuation_info_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::_internal_mutable_continuation_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.continuation_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::SessionContinuation_ContinuationInfo>(GetArena());
    _impl_.continuation_info_ = reinterpret_cast<::ai::inworld::engine::SessionContinuation_ContinuationInfo*>(p);
  }
  return _impl_.continuation_info_;
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::mutable_continuation_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* _msg = _internal_mutable_continuation_info();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.SessionContinuation.continuation_info)
  return _msg;
}
inline void SessionContinuation::set_allocated_continuation_info(::ai::inworld::engine::SessionContinuation_ContinuationInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::SessionContinuation_ContinuationInfo*>(_impl_.continuation_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::SessionContinuation_ContinuationInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.continuation_info_ = reinterpret_cast<::ai::inworld::engine::SessionContinuation_ContinuationInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.SessionContinuation.continuation_info)
}

// .ai.inworld.engine.PreviousDialog previous_dialog = 2;
inline bool SessionContinuation::has_previous_dialog() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previous_dialog_ != nullptr);
  return value;
}
inline void SessionContinuation::clear_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.previous_dialog_ != nullptr) _impl_.previous_dialog_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ai::inworld::engine::PreviousDialog& SessionContinuation::_internal_previous_dialog() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::PreviousDialog* p = _impl_.previous_dialog_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::PreviousDialog&>(::ai::inworld::engine::_PreviousDialog_default_instance_);
}
inline const ::ai::inworld::engine::PreviousDialog& SessionContinuation::previous_dialog() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.previous_dialog)
  return _internal_previous_dialog();
}
inline void SessionContinuation::unsafe_arena_set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.previous_dialog_);
  }
  _impl_.previous_dialog_ = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.SessionContinuation.previous_dialog)
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::release_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::engine::PreviousDialog* released = _impl_.previous_dialog_;
  _impl_.previous_dialog_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::unsafe_arena_release_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.SessionContinuation.previous_dialog)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::engine::PreviousDialog* temp = _impl_.previous_dialog_;
  _impl_.previous_dialog_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::_internal_mutable_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.previous_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::PreviousDialog>(GetArena());
    _impl_.previous_dialog_ = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(p);
  }
  return _impl_.previous_dialog_;
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::mutable_previous_dialog() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::PreviousDialog* _msg = _internal_mutable_previous_dialog();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.SessionContinuation.previous_dialog)
  return _msg;
}
inline void SessionContinuation::set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(_impl_.previous_dialog_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.previous_dialog_ = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.SessionContinuation.previous_dialog)
}

// bytes previous_state = 3;
inline void SessionContinuation::clear_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.previous_state_.ClearToEmpty();
}
inline const std::string& SessionContinuation::previous_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.previous_state)
  return _internal_previous_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionContinuation::set_previous_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.previous_state_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.SessionContinuation.previous_state)
}
inline std::string* SessionContinuation::mutable_previous_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_previous_state();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.SessionContinuation.previous_state)
  return _s;
}
inline const std::string& SessionContinuation::_internal_previous_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.previous_state_.Get();
}
inline void SessionContinuation::_internal_set_previous_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.previous_state_.Set(value, GetArena());
}
inline std::string* SessionContinuation::_internal_mutable_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.previous_state_.Mutable( GetArena());
}
inline std::string* SessionContinuation::release_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.SessionContinuation.previous_state)
  return _impl_.previous_state_.Release();
}
inline void SessionContinuation::set_allocated_previous_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.previous_state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.previous_state_.IsDefault()) {
          _impl_.previous_state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.SessionContinuation.previous_state)
}

// -------------------------------------------------------------------

// PreviousDialog_Phrase

// .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
inline void PreviousDialog_Phrase::clear_talker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.talker_ = 0;
}
inline ::ai::inworld::engine::PreviousDialog_DialogParticipant PreviousDialog_Phrase::talker() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousDialog.Phrase.talker)
  return _internal_talker();
}
inline void PreviousDialog_Phrase::set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value) {
  _internal_set_talker(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousDialog.Phrase.talker)
}
inline ::ai::inworld::engine::PreviousDialog_DialogParticipant PreviousDialog_Phrase::_internal_talker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::engine::PreviousDialog_DialogParticipant>(_impl_.talker_);
}
inline void PreviousDialog_Phrase::_internal_set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.talker_ = value;
}

// string phrase = 2;
inline void PreviousDialog_Phrase::clear_phrase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phrase_.ClearToEmpty();
}
inline const std::string& PreviousDialog_Phrase::phrase() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousDialog.Phrase.phrase)
  return _internal_phrase();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviousDialog_Phrase::set_phrase(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phrase_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}
inline std::string* PreviousDialog_Phrase::mutable_phrase() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_phrase();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousDialog.Phrase.phrase)
  return _s;
}
inline const std::string& PreviousDialog_Phrase::_internal_phrase() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phrase_.Get();
}
inline void PreviousDialog_Phrase::_internal_set_phrase(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phrase_.Set(value, GetArena());
}
inline std::string* PreviousDialog_Phrase::_internal_mutable_phrase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.phrase_.Mutable( GetArena());
}
inline std::string* PreviousDialog_Phrase::release_phrase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousDialog.Phrase.phrase)
  return _impl_.phrase_.Release();
}
inline void PreviousDialog_Phrase::set_allocated_phrase(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phrase_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phrase_.IsDefault()) {
          _impl_.phrase_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}

// -------------------------------------------------------------------

// PreviousDialog

// repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
inline int PreviousDialog::_internal_phrases_size() const {
  return _internal_phrases().size();
}
inline int PreviousDialog::phrases_size() const {
  return _internal_phrases_size();
}
inline void PreviousDialog::clear_phrases() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phrases_.Clear();
}
inline ::ai::inworld::engine::PreviousDialog_Phrase* PreviousDialog::mutable_phrases(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousDialog.phrases)
  return _internal_mutable_phrases()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousDialog_Phrase>* PreviousDialog::mutable_phrases()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousDialog.phrases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_phrases();
}
inline const ::ai::inworld::engine::PreviousDialog_Phrase& PreviousDialog::phrases(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousDialog.phrases)
  return _internal_phrases().Get(index);
}
inline ::ai::inworld::engine::PreviousDialog_Phrase* PreviousDialog::add_phrases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::PreviousDialog_Phrase* _add = _internal_mutable_phrases()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousDialog.phrases)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousDialog_Phrase>& PreviousDialog::phrases() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousDialog.phrases)
  return _internal_phrases();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousDialog_Phrase>&
PreviousDialog::_internal_phrases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phrases_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousDialog_Phrase>*
PreviousDialog::_internal_mutable_phrases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.phrases_;
}

// -------------------------------------------------------------------

// PreviousState_StateHolder

// string brain_name = 1;
inline void PreviousState_StateHolder::clear_brain_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brain_name_.ClearToEmpty();
}
inline const std::string& PreviousState_StateHolder::brain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.brain_name)
  return _internal_brain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviousState_StateHolder::set_brain_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}
inline std::string* PreviousState_StateHolder::mutable_brain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_brain_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.brain_name)
  return _s;
}
inline const std::string& PreviousState_StateHolder::_internal_brain_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brain_name_.Get();
}
inline void PreviousState_StateHolder::_internal_set_brain_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brain_name_.Set(value, GetArena());
}
inline std::string* PreviousState_StateHolder::_internal_mutable_brain_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.brain_name_.Mutable( GetArena());
}
inline std::string* PreviousState_StateHolder::release_brain_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.StateHolder.brain_name)
  return _impl_.brain_name_.Release();
}
inline void PreviousState_StateHolder::set_allocated_brain_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brain_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.brain_name_.IsDefault()) {
          _impl_.brain_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}

// bytes state = 2;
inline void PreviousState_StateHolder::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& PreviousState_StateHolder::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviousState_StateHolder::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousState.StateHolder.state)
}
inline std::string* PreviousState_StateHolder::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.state)
  return _s;
}
inline const std::string& PreviousState_StateHolder::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void PreviousState_StateHolder::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArena());
}
inline std::string* PreviousState_StateHolder::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* PreviousState_StateHolder::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.StateHolder.state)
  return _impl_.state_.Release();
}
inline void PreviousState_StateHolder::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.StateHolder.state)
}

// .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
inline bool PreviousState_StateHolder::has_previous_dialog() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previous_dialog_ != nullptr);
  return value;
}
inline void PreviousState_StateHolder::clear_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.previous_dialog_ != nullptr) _impl_.previous_dialog_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::PreviousDialog& PreviousState_StateHolder::_internal_previous_dialog() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::PreviousDialog* p = _impl_.previous_dialog_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::PreviousDialog&>(::ai::inworld::engine::_PreviousDialog_default_instance_);
}
inline const ::ai::inworld::engine::PreviousDialog& PreviousState_StateHolder::previous_dialog() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
  return _internal_previous_dialog();
}
inline void PreviousState_StateHolder::unsafe_arena_set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.previous_dialog_);
  }
  _impl_.previous_dialog_ = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::release_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::PreviousDialog* released = _impl_.previous_dialog_;
  _impl_.previous_dialog_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::unsafe_arena_release_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::PreviousDialog* temp = _impl_.previous_dialog_;
  _impl_.previous_dialog_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::_internal_mutable_previous_dialog() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.previous_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::PreviousDialog>(GetArena());
    _impl_.previous_dialog_ = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(p);
  }
  return _impl_.previous_dialog_;
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::mutable_previous_dialog() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::PreviousDialog* _msg = _internal_mutable_previous_dialog();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
  return _msg;
}
inline void PreviousState_StateHolder::set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(_impl_.previous_dialog_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.previous_dialog_ = reinterpret_cast<::ai::inworld::engine::PreviousDialog*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
}

// repeated .ai.inworld.packets.InworldPacket packets = 4;
inline int PreviousState_StateHolder::_internal_packets_size() const {
  return _internal_packets().size();
}
inline int PreviousState_StateHolder::packets_size() const {
  return _internal_packets_size();
}
inline ::ai::inworld::packets::InworldPacket* PreviousState_StateHolder::mutable_packets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.packets)
  return _internal_mutable_packets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::packets::InworldPacket>* PreviousState_StateHolder::mutable_packets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousState.StateHolder.packets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_packets();
}
inline const ::ai::inworld::packets::InworldPacket& PreviousState_StateHolder::packets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.packets)
  return _internal_packets().Get(index);
}
inline ::ai::inworld::packets::InworldPacket* PreviousState_StateHolder::add_packets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::packets::InworldPacket* _add = _internal_mutable_packets()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousState.StateHolder.packets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::packets::InworldPacket>& PreviousState_StateHolder::packets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousState.StateHolder.packets)
  return _internal_packets();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::packets::InworldPacket>&
PreviousState_StateHolder::_internal_packets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packets_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::packets::InworldPacket>*
PreviousState_StateHolder::_internal_mutable_packets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.packets_;
}

// repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
inline int PreviousState_StateHolder::_internal_relations_to_actors_size() const {
  return _internal_relations_to_actors().size();
}
inline int PreviousState_StateHolder::relations_to_actors_size() const {
  return _internal_relations_to_actors_size();
}
inline void PreviousState_StateHolder::clear_relations_to_actors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relations_to_actors_.Clear();
}
inline ::ai::inworld::engine::ActorRelations* PreviousState_StateHolder::mutable_relations_to_actors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return _internal_mutable_relations_to_actors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations>* PreviousState_StateHolder::mutable_relations_to_actors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_relations_to_actors();
}
inline const ::ai::inworld::engine::ActorRelations& PreviousState_StateHolder::relations_to_actors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return _internal_relations_to_actors().Get(index);
}
inline ::ai::inworld::engine::ActorRelations* PreviousState_StateHolder::add_relations_to_actors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::ActorRelations* _add = _internal_mutable_relations_to_actors()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations>& PreviousState_StateHolder::relations_to_actors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return _internal_relations_to_actors();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations>&
PreviousState_StateHolder::_internal_relations_to_actors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relations_to_actors_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations>*
PreviousState_StateHolder::_internal_mutable_relations_to_actors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.relations_to_actors_;
}

// .ai.inworld.engine.PreviousState.StateHolder.StateFormat state_format = 6;
inline void PreviousState_StateHolder::clear_state_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_format_ = 0;
}
inline ::ai::inworld::engine::PreviousState_StateHolder_StateFormat PreviousState_StateHolder::state_format() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.state_format)
  return _internal_state_format();
}
inline void PreviousState_StateHolder::set_state_format(::ai::inworld::engine::PreviousState_StateHolder_StateFormat value) {
  _internal_set_state_format(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousState.StateHolder.state_format)
}
inline ::ai::inworld::engine::PreviousState_StateHolder_StateFormat PreviousState_StateHolder::_internal_state_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::engine::PreviousState_StateHolder_StateFormat>(_impl_.state_format_);
}
inline void PreviousState_StateHolder::_internal_set_state_format(::ai::inworld::engine::PreviousState_StateHolder_StateFormat value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_format_ = value;
}

// -------------------------------------------------------------------

// PreviousState

// repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
inline int PreviousState::_internal_state_holders_size() const {
  return _internal_state_holders().size();
}
inline int PreviousState::state_holders_size() const {
  return _internal_state_holders_size();
}
inline void PreviousState::clear_state_holders() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_holders_.Clear();
}
inline ::ai::inworld::engine::PreviousState_StateHolder* PreviousState::mutable_state_holders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.state_holders)
  return _internal_mutable_state_holders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousState_StateHolder>* PreviousState::mutable_state_holders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousState.state_holders)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_state_holders();
}
inline const ::ai::inworld::engine::PreviousState_StateHolder& PreviousState::state_holders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.state_holders)
  return _internal_state_holders().Get(index);
}
inline ::ai::inworld::engine::PreviousState_StateHolder* PreviousState::add_state_holders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::PreviousState_StateHolder* _add = _internal_mutable_state_holders()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousState.state_holders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousState_StateHolder>& PreviousState::state_holders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousState.state_holders)
  return _internal_state_holders();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousState_StateHolder>&
PreviousState::_internal_state_holders() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_holders_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::PreviousState_StateHolder>*
PreviousState::_internal_mutable_state_holders() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.state_holders_;
}

// string game_session_id = 2;
inline void PreviousState::clear_game_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.game_session_id_.ClearToEmpty();
}
inline const std::string& PreviousState::game_session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.game_session_id)
  return _internal_game_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PreviousState::set_game_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.game_session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousState.game_session_id)
}
inline std::string* PreviousState::mutable_game_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_session_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.game_session_id)
  return _s;
}
inline const std::string& PreviousState::_internal_game_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.game_session_id_.Get();
}
inline void PreviousState::_internal_set_game_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.game_session_id_.Set(value, GetArena());
}
inline std::string* PreviousState::_internal_mutable_game_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.game_session_id_.Mutable( GetArena());
}
inline std::string* PreviousState::release_game_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.game_session_id)
  return _impl_.game_session_id_.Release();
}
inline void PreviousState::set_allocated_game_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.game_session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.game_session_id_.IsDefault()) {
          _impl_.game_session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.game_session_id)
}

// -------------------------------------------------------------------

// LoadSceneResponse_Agent_CharacterAssets

// string rpm_model_uri = 1;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_model_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent_CharacterAssets::set_rpm_model_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_model_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_model_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_model_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_model_uri_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_model_uri_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_model_uri_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_model_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _impl_.rpm_model_uri_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_model_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_model_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_model_uri_.IsDefault()) {
          _impl_.rpm_model_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri_portrait = 2;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_image_uri_portrait() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_portrait(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_portrait_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_image_uri_portrait() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri_portrait();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_portrait_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_portrait_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_portrait_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_image_uri_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _impl_.rpm_image_uri_portrait_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_portrait_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_portrait_.IsDefault()) {
          _impl_.rpm_image_uri_portrait_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 3;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_image_uri_posture() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_posture(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_posture_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_image_uri_posture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpm_image_uri_posture();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_image_uri_posture() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rpm_image_uri_posture_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rpm_image_uri_posture_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rpm_image_uri_posture_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_image_uri_posture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _impl_.rpm_image_uri_posture_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rpm_image_uri_posture_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpm_image_uri_posture_.IsDefault()) {
          _impl_.rpm_image_uri_posture_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}

// string avatar_img = 4;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::avatar_img() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
  return _internal_avatar_img();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_avatar_img() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_img();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_avatar_img() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_img_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_avatar_img(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_img_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_avatar_img() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
  return _impl_.avatar_img_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_avatar_img(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_img_.IsDefault()) {
          _impl_.avatar_img_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}

// string avatar_img_original = 5;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_original_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::avatar_img_original() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
  return _internal_avatar_img_original();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img_original(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_original_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_avatar_img_original() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avatar_img_original();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_avatar_img_original() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_img_original_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_avatar_img_original(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_img_original_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_img_original_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_avatar_img_original() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
  return _impl_.avatar_img_original_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_avatar_img_original(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_img_original_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_img_original_.IsDefault()) {
          _impl_.avatar_img_original_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}

// -------------------------------------------------------------------

// LoadSceneResponse_Agent

// string agent_id = 1;
inline void LoadSceneResponse_Agent::clear_agent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agent_id_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::agent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _internal_agent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent::set_agent_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.agent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}
inline std::string* LoadSceneResponse_Agent::mutable_agent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_agent_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent::_internal_agent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agent_id_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_agent_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.agent_id_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_agent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.agent_id_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent::release_agent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _impl_.agent_id_.Release();
}
inline void LoadSceneResponse_Agent::set_allocated_agent_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agent_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.agent_id_.IsDefault()) {
          _impl_.agent_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}

// string brain_name = 2;
inline void LoadSceneResponse_Agent::clear_brain_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brain_name_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::brain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _internal_brain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent::set_brain_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}
inline std::string* LoadSceneResponse_Agent::mutable_brain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_brain_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent::_internal_brain_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brain_name_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_brain_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brain_name_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_brain_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.brain_name_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent::release_brain_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _impl_.brain_name_.Release();
}
inline void LoadSceneResponse_Agent::set_allocated_brain_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brain_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.brain_name_.IsDefault()) {
          _impl_.brain_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}

// string given_name = 3;
inline void LoadSceneResponse_Agent::clear_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.given_name_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::given_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _internal_given_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse_Agent::set_given_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.given_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}
inline std::string* LoadSceneResponse_Agent::mutable_given_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_given_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent::_internal_given_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.given_name_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_given_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.given_name_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.given_name_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse_Agent::release_given_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _impl_.given_name_.Release();
}
inline void LoadSceneResponse_Agent::set_allocated_given_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.given_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.given_name_.IsDefault()) {
          _impl_.given_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}

// .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
inline bool LoadSceneResponse_Agent::has_character_assets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_assets_ != nullptr);
  return value;
}
inline void LoadSceneResponse_Agent::clear_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.character_assets_ != nullptr) _impl_.character_assets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent::_internal_character_assets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* p = _impl_.character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets&>(::ai::inworld::engine::_LoadSceneResponse_Agent_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent::character_assets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  return _internal_character_assets();
}
inline void LoadSceneResponse_Agent::unsafe_arena_set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.character_assets_);
  }
  _impl_.character_assets_ = reinterpret_cast<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::release_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* released = _impl_.character_assets_;
  _impl_.character_assets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::unsafe_arena_release_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* temp = _impl_.character_assets_;
  _impl_.character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::_internal_mutable_character_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets>(GetArena());
    _impl_.character_assets_ = reinterpret_cast<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets*>(p);
  }
  return _impl_.character_assets_;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::mutable_character_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* _msg = _internal_mutable_character_assets();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  return _msg;
}
inline void LoadSceneResponse_Agent::set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets*>(_impl_.character_assets_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.character_assets_ = reinterpret_cast<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
}

// -------------------------------------------------------------------

// LoadSceneResponse

// repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
inline int LoadSceneResponse::_internal_agents_size() const {
  return _internal_agents().size();
}
inline int LoadSceneResponse::agents_size() const {
  return _internal_agents_size();
}
inline void LoadSceneResponse::clear_agents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agents_.Clear();
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::mutable_agents(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.agents)
  return _internal_mutable_agents()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::LoadSceneResponse_Agent>* LoadSceneResponse::mutable_agents()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.LoadSceneResponse.agents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_agents();
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent& LoadSceneResponse::agents(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.agents)
  return _internal_agents().Get(index);
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::add_agents() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::LoadSceneResponse_Agent* _add = _internal_mutable_agents()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.LoadSceneResponse.agents)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::LoadSceneResponse_Agent>& LoadSceneResponse::agents() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.LoadSceneResponse.agents)
  return _internal_agents();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::LoadSceneResponse_Agent>&
LoadSceneResponse::_internal_agents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agents_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::LoadSceneResponse_Agent>*
LoadSceneResponse::_internal_mutable_agents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.agents_;
}

// string key = 2;
inline void LoadSceneResponse::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoadSceneResponse::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.key)
}
inline std::string* LoadSceneResponse::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.key)
  return _s;
}
inline const std::string& LoadSceneResponse::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void LoadSceneResponse::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* LoadSceneResponse::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* LoadSceneResponse::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.key)
  return _impl_.key_.Release();
}
inline void LoadSceneResponse::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.key)
}

// .ai.inworld.engine.PreviousState previous_state = 3;
inline bool LoadSceneResponse::has_previous_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previous_state_ != nullptr);
  return value;
}
inline void LoadSceneResponse::clear_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.previous_state_ != nullptr) _impl_.previous_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::PreviousState& LoadSceneResponse::_internal_previous_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::PreviousState* p = _impl_.previous_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::PreviousState&>(::ai::inworld::engine::_PreviousState_default_instance_);
}
inline const ::ai::inworld::engine::PreviousState& LoadSceneResponse::previous_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.previous_state)
  return _internal_previous_state();
}
inline void LoadSceneResponse::unsafe_arena_set_allocated_previous_state(::ai::inworld::engine::PreviousState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.previous_state_);
  }
  _impl_.previous_state_ = reinterpret_cast<::ai::inworld::engine::PreviousState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneResponse.previous_state)
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::release_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::PreviousState* released = _impl_.previous_state_;
  _impl_.previous_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::unsafe_arena_release_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.previous_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::PreviousState* temp = _impl_.previous_state_;
  _impl_.previous_state_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::_internal_mutable_previous_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.previous_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::PreviousState>(GetArena());
    _impl_.previous_state_ = reinterpret_cast<::ai::inworld::engine::PreviousState*>(p);
  }
  return _impl_.previous_state_;
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::mutable_previous_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::PreviousState* _msg = _internal_mutable_previous_state();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.previous_state)
  return _msg;
}
inline void LoadSceneResponse::set_allocated_previous_state(::ai::inworld::engine::PreviousState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::PreviousState*>(_impl_.previous_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::PreviousState*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.previous_state_ = reinterpret_cast<::ai::inworld::engine::PreviousState*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.previous_state)
}

// -------------------------------------------------------------------

// LogErrorRequest

// string key = 1;
inline void LogErrorRequest::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LogErrorRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LogErrorRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogErrorRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LogErrorRequest.key)
}
inline std::string* LogErrorRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LogErrorRequest.key)
  return _s;
}
inline const std::string& LogErrorRequest::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void LogErrorRequest::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* LogErrorRequest::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* LogErrorRequest::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LogErrorRequest.key)
  return _impl_.key_.Release();
}
inline void LogErrorRequest::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LogErrorRequest.key)
}

// string message = 2;
inline void LogErrorRequest::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogErrorRequest::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LogErrorRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogErrorRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LogErrorRequest.message)
}
inline std::string* LogErrorRequest::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LogErrorRequest.message)
  return _s;
}
inline const std::string& LogErrorRequest::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void LogErrorRequest::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LogErrorRequest::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LogErrorRequest::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LogErrorRequest.message)
  return _impl_.message_.Release();
}
inline void LogErrorRequest::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LogErrorRequest.message)
}

// -------------------------------------------------------------------

// VoicePreviewRequest

// string text = 1;
inline void VoicePreviewRequest::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& VoicePreviewRequest::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoicePreviewRequest::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.VoicePreviewRequest.text)
}
inline std::string* VoicePreviewRequest::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.text)
  return _s;
}
inline const std::string& VoicePreviewRequest::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void VoicePreviewRequest::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* VoicePreviewRequest::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* VoicePreviewRequest::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.text)
  return _impl_.text_.Release();
}
inline void VoicePreviewRequest::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.text)
}

// .ai.inworld.packets.EmotionEvent emotions = 2;
inline bool VoicePreviewRequest::has_emotions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emotions_ != nullptr);
  return value;
}
inline const ::ai::inworld::packets::EmotionEvent& VoicePreviewRequest::_internal_emotions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::packets::EmotionEvent* p = _impl_.emotions_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::packets::EmotionEvent&>(::ai::inworld::packets::_EmotionEvent_default_instance_);
}
inline const ::ai::inworld::packets::EmotionEvent& VoicePreviewRequest::emotions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.emotions)
  return _internal_emotions();
}
inline void VoicePreviewRequest::unsafe_arena_set_allocated_emotions(::ai::inworld::packets::EmotionEvent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emotions_);
  }
  _impl_.emotions_ = reinterpret_cast<::ai::inworld::packets::EmotionEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.VoicePreviewRequest.emotions)
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::release_emotions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::packets::EmotionEvent* released = _impl_.emotions_;
  _impl_.emotions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::unsafe_arena_release_emotions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.emotions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::packets::EmotionEvent* temp = _impl_.emotions_;
  _impl_.emotions_ = nullptr;
  return temp;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::_internal_mutable_emotions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.emotions_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::packets::EmotionEvent>(GetArena());
    _impl_.emotions_ = reinterpret_cast<::ai::inworld::packets::EmotionEvent*>(p);
  }
  return _impl_.emotions_;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::mutable_emotions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::packets::EmotionEvent* _msg = _internal_mutable_emotions();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.emotions)
  return _msg;
}
inline void VoicePreviewRequest::set_allocated_emotions(::ai::inworld::packets::EmotionEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emotions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.emotions_ = reinterpret_cast<::ai::inworld::packets::EmotionEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.emotions)
}

// .ai.inworld.voices.Voice voice = 3;
inline bool VoicePreviewRequest::has_voice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voice_ != nullptr);
  return value;
}
inline const ::ai::inworld::voices::Voice& VoicePreviewRequest::_internal_voice() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::voices::Voice* p = _impl_.voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::voices::Voice&>(::ai::inworld::voices::_Voice_default_instance_);
}
inline const ::ai::inworld::voices::Voice& VoicePreviewRequest::voice() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.voice)
  return _internal_voice();
}
inline void VoicePreviewRequest::unsafe_arena_set_allocated_voice(::ai::inworld::voices::Voice* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voice_);
  }
  _impl_.voice_ = reinterpret_cast<::ai::inworld::voices::Voice*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.VoicePreviewRequest.voice)
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::release_voice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::voices::Voice* released = _impl_.voice_;
  _impl_.voice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::unsafe_arena_release_voice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.voice)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ai::inworld::voices::Voice* temp = _impl_.voice_;
  _impl_.voice_ = nullptr;
  return temp;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::_internal_mutable_voice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::voices::Voice>(GetArena());
    _impl_.voice_ = reinterpret_cast<::ai::inworld::voices::Voice*>(p);
  }
  return _impl_.voice_;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::mutable_voice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::voices::Voice* _msg = _internal_mutable_voice();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.voice)
  return _msg;
}
inline void VoicePreviewRequest::set_allocated_voice(::ai::inworld::voices::Voice* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voice_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.voice_ = reinterpret_cast<::ai::inworld::voices::Voice*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.voice)
}

// -------------------------------------------------------------------

// VoicePreviewResponse

// bytes audio = 1;
inline void VoicePreviewResponse::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_.ClearToEmpty();
}
inline const std::string& VoicePreviewResponse::audio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewResponse.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoicePreviewResponse::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.VoicePreviewResponse.audio)
}
inline std::string* VoicePreviewResponse::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewResponse.audio)
  return _s;
}
inline const std::string& VoicePreviewResponse::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_.Get();
}
inline void VoicePreviewResponse::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_.Set(value, GetArena());
}
inline std::string* VoicePreviewResponse::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.audio_.Mutable( GetArena());
}
inline std::string* VoicePreviewResponse::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewResponse.audio)
  return _impl_.audio_.Release();
}
inline void VoicePreviewResponse::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_.IsDefault()) {
          _impl_.audio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewResponse.audio)
}

// -------------------------------------------------------------------

// ListBaseVoicesRequest

// string language_code = 1 [deprecated = true];
inline void ListBaseVoicesRequest::clear_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& ListBaseVoicesRequest::language_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListBaseVoicesRequest::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}
inline std::string* ListBaseVoicesRequest::mutable_language_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _s;
}
inline const std::string& ListBaseVoicesRequest::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void ListBaseVoicesRequest::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArena());
}
inline std::string* ListBaseVoicesRequest::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArena());
}
inline std::string* ListBaseVoicesRequest::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void ListBaseVoicesRequest::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}

// repeated .ai.inworld.voices.TTSType tts_types = 2;
inline int ListBaseVoicesRequest::_internal_tts_types_size() const {
  return _internal_tts_types().size();
}
inline int ListBaseVoicesRequest::tts_types_size() const {
  return _internal_tts_types_size();
}
inline void ListBaseVoicesRequest::clear_tts_types() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tts_types_.Clear();
}
inline ::ai::inworld::voices::TTSType ListBaseVoicesRequest::tts_types(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return static_cast<::ai::inworld::voices::TTSType>(_internal_tts_types().Get(index));
}
inline void ListBaseVoicesRequest::set_tts_types(int index, ::ai::inworld::voices::TTSType value) {
  _internal_mutable_tts_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
}
inline void ListBaseVoicesRequest::add_tts_types(::ai::inworld::voices::TTSType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tts_types()->Add(value);
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
}
inline const ::google::protobuf::RepeatedField<int>& ListBaseVoicesRequest::tts_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return _internal_tts_types();
}
inline ::google::protobuf::RepeatedField<int>* ListBaseVoicesRequest::mutable_tts_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tts_types();
}
inline const ::google::protobuf::RepeatedField<int>& ListBaseVoicesRequest::_internal_tts_types() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tts_types_;
}
inline ::google::protobuf::RepeatedField<int>* ListBaseVoicesRequest::_internal_mutable_tts_types() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tts_types_;
}

// .ai.inworld.language_codes.LanguageCode language = 3;
inline void ListBaseVoicesRequest::clear_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_ = 0;
}
inline ::ai::inworld::language_codes::LanguageCode ListBaseVoicesRequest::language() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.language)
  return _internal_language();
}
inline void ListBaseVoicesRequest::set_language(::ai::inworld::language_codes::LanguageCode value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.language)
}
inline ::ai::inworld::language_codes::LanguageCode ListBaseVoicesRequest::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::language_codes::LanguageCode>(_impl_.language_);
}
inline void ListBaseVoicesRequest::_internal_set_language(::ai::inworld::language_codes::LanguageCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_ = value;
}

// -------------------------------------------------------------------

// ListBaseVoicesResponce

// repeated .ai.inworld.voices.BaseVoice google_voices = 1;
inline int ListBaseVoicesResponce::_internal_google_voices_size() const {
  return _internal_google_voices().size();
}
inline int ListBaseVoicesResponce::google_voices_size() const {
  return _internal_google_voices_size();
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::mutable_google_voices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.google_voices)
  return _internal_mutable_google_voices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* ListBaseVoicesResponce::mutable_google_voices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.google_voices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_google_voices();
}
inline const ::ai::inworld::voices::BaseVoice& ListBaseVoicesResponce::google_voices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.google_voices)
  return _internal_google_voices().Get(index);
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::add_google_voices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::voices::BaseVoice* _add = _internal_mutable_google_voices()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.google_voices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& ListBaseVoicesResponce::google_voices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.google_voices)
  return _internal_google_voices();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>&
ListBaseVoicesResponce::_internal_google_voices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.google_voices_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>*
ListBaseVoicesResponce::_internal_mutable_google_voices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.google_voices_;
}

// repeated .ai.inworld.voices.BaseVoice inworld_voices = 2;
inline int ListBaseVoicesResponce::_internal_inworld_voices_size() const {
  return _internal_inworld_voices().size();
}
inline int ListBaseVoicesResponce::inworld_voices_size() const {
  return _internal_inworld_voices_size();
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::mutable_inworld_voices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.inworld_voices)
  return _internal_mutable_inworld_voices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* ListBaseVoicesResponce::mutable_inworld_voices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.inworld_voices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inworld_voices();
}
inline const ::ai::inworld::voices::BaseVoice& ListBaseVoicesResponce::inworld_voices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.inworld_voices)
  return _internal_inworld_voices().Get(index);
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::add_inworld_voices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::voices::BaseVoice* _add = _internal_mutable_inworld_voices()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.inworld_voices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& ListBaseVoicesResponce::inworld_voices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.inworld_voices)
  return _internal_inworld_voices();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>&
ListBaseVoicesResponce::_internal_inworld_voices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inworld_voices_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>*
ListBaseVoicesResponce::_internal_mutable_inworld_voices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inworld_voices_;
}

// repeated .ai.inworld.voices.BaseVoice eleven_labs_voices = 3;
inline int ListBaseVoicesResponce::_internal_eleven_labs_voices_size() const {
  return _internal_eleven_labs_voices().size();
}
inline int ListBaseVoicesResponce::eleven_labs_voices_size() const {
  return _internal_eleven_labs_voices_size();
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::mutable_eleven_labs_voices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.eleven_labs_voices)
  return _internal_mutable_eleven_labs_voices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* ListBaseVoicesResponce::mutable_eleven_labs_voices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.eleven_labs_voices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_eleven_labs_voices();
}
inline const ::ai::inworld::voices::BaseVoice& ListBaseVoicesResponce::eleven_labs_voices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.eleven_labs_voices)
  return _internal_eleven_labs_voices().Get(index);
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::add_eleven_labs_voices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::voices::BaseVoice* _add = _internal_mutable_eleven_labs_voices()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.eleven_labs_voices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& ListBaseVoicesResponce::eleven_labs_voices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.eleven_labs_voices)
  return _internal_eleven_labs_voices();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>&
ListBaseVoicesResponce::_internal_eleven_labs_voices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eleven_labs_voices_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>*
ListBaseVoicesResponce::_internal_mutable_eleven_labs_voices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.eleven_labs_voices_;
}

// repeated .ai.inworld.voices.BaseVoice inworld_v2_voices = 4;
inline int ListBaseVoicesResponce::_internal_inworld_v2_voices_size() const {
  return _internal_inworld_v2_voices().size();
}
inline int ListBaseVoicesResponce::inworld_v2_voices_size() const {
  return _internal_inworld_v2_voices_size();
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::mutable_inworld_v2_voices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.inworld_v2_voices)
  return _internal_mutable_inworld_v2_voices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>* ListBaseVoicesResponce::mutable_inworld_v2_voices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.inworld_v2_voices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inworld_v2_voices();
}
inline const ::ai::inworld::voices::BaseVoice& ListBaseVoicesResponce::inworld_v2_voices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.inworld_v2_voices)
  return _internal_inworld_v2_voices().Get(index);
}
inline ::ai::inworld::voices::BaseVoice* ListBaseVoicesResponce::add_inworld_v2_voices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::voices::BaseVoice* _add = _internal_mutable_inworld_v2_voices()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.inworld_v2_voices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>& ListBaseVoicesResponce::inworld_v2_voices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.inworld_v2_voices)
  return _internal_inworld_v2_voices();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>&
ListBaseVoicesResponce::_internal_inworld_v2_voices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inworld_v2_voices_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::voices::BaseVoice>*
ListBaseVoicesResponce::_internal_mutable_inworld_v2_voices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inworld_v2_voices_;
}

// -------------------------------------------------------------------

// AccessToken

// string token = 1;
inline void AccessToken::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AccessToken::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessToken::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.token)
}
inline std::string* AccessToken::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.token)
  return _s;
}
inline const std::string& AccessToken::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void AccessToken::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* AccessToken::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* AccessToken::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.token)
  return _impl_.token_.Release();
}
inline void AccessToken::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.token)
}

// string type = 2;
inline void AccessToken::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& AccessToken::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessToken::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.type)
}
inline std::string* AccessToken::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.type)
  return _s;
}
inline const std::string& AccessToken::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void AccessToken::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* AccessToken::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* AccessToken::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.type)
  return _impl_.type_.Release();
}
inline void AccessToken::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool AccessToken::has_expiration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AccessToken::_internal_expiration_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AccessToken::expiration_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.expiration_time)
  return _internal_expiration_time();
}
inline void AccessToken::unsafe_arena_set_allocated_expiration_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.AccessToken.expiration_time)
}
inline ::google::protobuf::Timestamp* AccessToken::release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AccessToken::unsafe_arena_release_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.expiration_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AccessToken::_internal_mutable_expiration_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiration_time_;
}
inline ::google::protobuf::Timestamp* AccessToken::mutable_expiration_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.expiration_time)
  return _msg;
}
inline void AccessToken::set_allocated_expiration_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expiration_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.expiration_time)
}

// string session_id = 4;
inline void AccessToken::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& AccessToken::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessToken::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.session_id)
}
inline std::string* AccessToken::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.session_id)
  return _s;
}
inline const std::string& AccessToken::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void AccessToken::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* AccessToken::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* AccessToken::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.session_id)
  return _impl_.session_id_.Release();
}
inline void AccessToken::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.session_id)
}

// -------------------------------------------------------------------

// GenerateTokenRequest

// string key = 1;
inline void GenerateTokenRequest::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GenerateTokenRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.GenerateTokenRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateTokenRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.key)
}
inline std::string* GenerateTokenRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.GenerateTokenRequest.key)
  return _s;
}
inline const std::string& GenerateTokenRequest::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void GenerateTokenRequest::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GenerateTokenRequest::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GenerateTokenRequest::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.GenerateTokenRequest.key)
  return _impl_.key_.Release();
}
inline void GenerateTokenRequest::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.GenerateTokenRequest.key)
}

// repeated string resources = 2;
inline int GenerateTokenRequest::_internal_resources_size() const {
  return _internal_resources().size();
}
inline int GenerateTokenRequest::resources_size() const {
  return _internal_resources_size();
}
inline void GenerateTokenRequest::clear_resources() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resources_.Clear();
}
inline std::string* GenerateTokenRequest::add_resources()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_resources()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.engine.GenerateTokenRequest.resources)
  return _s;
}
inline const std::string& GenerateTokenRequest::resources(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.GenerateTokenRequest.resources)
  return _internal_resources().Get(index);
}
inline std::string* GenerateTokenRequest::mutable_resources(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.GenerateTokenRequest.resources)
  return _internal_mutable_resources()->Mutable(index);
}
inline void GenerateTokenRequest::set_resources(int index, const std::string& value) {
  _internal_mutable_resources()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::set_resources(int index, std::string&& value) {
  _internal_mutable_resources()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::set_resources(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_resources()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::set_resources(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_resources()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::set_resources(int index, absl::string_view value) {
  _internal_mutable_resources()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resources()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resources()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resources()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resources()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resources()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GenerateTokenRequest::resources() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.GenerateTokenRequest.resources)
  return _internal_resources();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GenerateTokenRequest::mutable_resources() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.GenerateTokenRequest.resources)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resources();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GenerateTokenRequest::_internal_resources() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resources_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GenerateTokenRequest::_internal_mutable_resources() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resources_;
}

// -------------------------------------------------------------------

// ActorRelations_Relation

// string type = 1;
inline void ActorRelations_Relation::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ActorRelations_Relation::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.Relation.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorRelations_Relation::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ActorRelations.Relation.type)
}
inline std::string* ActorRelations_Relation::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.Relation.type)
  return _s;
}
inline const std::string& ActorRelations_Relation::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void ActorRelations_Relation::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* ActorRelations_Relation::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* ActorRelations_Relation::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ActorRelations.Relation.type)
  return _impl_.type_.Release();
}
inline void ActorRelations_Relation::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ActorRelations.Relation.type)
}

// string label = 2;
inline void ActorRelations_Relation::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& ActorRelations_Relation::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.Relation.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorRelations_Relation::set_label(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ActorRelations.Relation.label)
}
inline std::string* ActorRelations_Relation::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.Relation.label)
  return _s;
}
inline const std::string& ActorRelations_Relation::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_.Get();
}
inline void ActorRelations_Relation::_internal_set_label(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* ActorRelations_Relation::_internal_mutable_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* ActorRelations_Relation::release_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ActorRelations.Relation.label)
  return _impl_.label_.Release();
}
inline void ActorRelations_Relation::set_allocated_label(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ActorRelations.Relation.label)
}

// -------------------------------------------------------------------

// ActorRelations

// string actor_id = 1;
inline void ActorRelations::clear_actor_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_id_.ClearToEmpty();
}
inline const std::string& ActorRelations::actor_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.actor_id)
  return _internal_actor_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorRelations::set_actor_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ActorRelations.actor_id)
}
inline std::string* ActorRelations::mutable_actor_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.actor_id)
  return _s;
}
inline const std::string& ActorRelations::_internal_actor_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_id_.Get();
}
inline void ActorRelations::_internal_set_actor_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_id_.Set(value, GetArena());
}
inline std::string* ActorRelations::_internal_mutable_actor_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_id_.Mutable( GetArena());
}
inline std::string* ActorRelations::release_actor_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ActorRelations.actor_id)
  return _impl_.actor_id_.Release();
}
inline void ActorRelations::set_allocated_actor_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_id_.IsDefault()) {
          _impl_.actor_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ActorRelations.actor_id)
}

// repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
inline int ActorRelations::_internal_relations_size() const {
  return _internal_relations().size();
}
inline int ActorRelations::relations_size() const {
  return _internal_relations_size();
}
inline void ActorRelations::clear_relations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relations_.Clear();
}
inline ::ai::inworld::engine::ActorRelations_Relation* ActorRelations::mutable_relations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.relations)
  return _internal_mutable_relations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations_Relation>* ActorRelations::mutable_relations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ActorRelations.relations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_relations();
}
inline const ::ai::inworld::engine::ActorRelations_Relation& ActorRelations::relations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.relations)
  return _internal_relations().Get(index);
}
inline ::ai::inworld::engine::ActorRelations_Relation* ActorRelations::add_relations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::ActorRelations_Relation* _add = _internal_mutable_relations()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ActorRelations.relations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations_Relation>& ActorRelations::relations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ActorRelations.relations)
  return _internal_relations();
}
inline const ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations_Relation>&
ActorRelations::_internal_relations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relations_;
}
inline ::google::protobuf::RepeatedPtrField<::ai::inworld::engine::ActorRelations_Relation>*
ActorRelations::_internal_mutable_relations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.relations_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace engine
}  // namespace inworld
}  // namespace ai


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ai::inworld::engine::PreviousDialog_DialogParticipant> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::engine::PreviousDialog_DialogParticipant>() {
  return ::ai::inworld::engine::PreviousDialog_DialogParticipant_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::engine::PreviousState_StateHolder_StateFormat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::engine::PreviousState_StateHolder_StateFormat>() {
  return ::ai::inworld::engine::PreviousState_StateHolder_StateFormat_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::engine::VoicePreset> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::engine::VoicePreset>() {
  return ::ai::inworld::engine::VoicePreset_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fworld_2dengine_2eproto_2epb_2eh
