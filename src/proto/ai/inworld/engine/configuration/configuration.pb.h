// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/engine/configuration/configuration.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf_inworld::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
namespace ai {
namespace inworld {
namespace engine {
namespace configuration {
class CapabilitiesConfiguration;
struct CapabilitiesConfigurationDefaultTypeInternal;
extern CapabilitiesConfigurationDefaultTypeInternal _CapabilitiesConfiguration_default_instance_;
class ClientConfiguration;
struct ClientConfigurationDefaultTypeInternal;
extern ClientConfigurationDefaultTypeInternal _ClientConfiguration_default_instance_;
class SessionConfiguration;
struct SessionConfigurationDefaultTypeInternal;
extern SessionConfigurationDefaultTypeInternal _SessionConfiguration_default_instance_;
class UserConfiguration;
struct UserConfigurationDefaultTypeInternal;
extern UserConfigurationDefaultTypeInternal _UserConfiguration_default_instance_;
class UserConfiguration_UserSettings;
struct UserConfiguration_UserSettingsDefaultTypeInternal;
extern UserConfiguration_UserSettingsDefaultTypeInternal _UserConfiguration_UserSettings_default_instance_;
class UserConfiguration_UserSettings_PlayerProfile;
struct UserConfiguration_UserSettings_PlayerProfileDefaultTypeInternal;
extern UserConfiguration_UserSettings_PlayerProfileDefaultTypeInternal _UserConfiguration_UserSettings_PlayerProfile_default_instance_;
class UserConfiguration_UserSettings_PlayerProfile_PlayerField;
struct UserConfiguration_UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal;
extern UserConfiguration_UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal _UserConfiguration_UserSettings_PlayerProfile_PlayerField_default_instance_;
}  // namespace configuration
}  // namespace engine
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace engine {
namespace configuration {

// ===================================================================


// -------------------------------------------------------------------

class UserConfiguration_UserSettings_PlayerProfile_PlayerField final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField) */ {
 public:
  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField() : UserConfiguration_UserSettings_PlayerProfile_PlayerField(nullptr) {}
  ~UserConfiguration_UserSettings_PlayerProfile_PlayerField() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserConfiguration_UserSettings_PlayerProfile_PlayerField(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from)
      : UserConfiguration_UserSettings_PlayerProfile_PlayerField(nullptr, from) {}
  UserConfiguration_UserSettings_PlayerProfile_PlayerField(UserConfiguration_UserSettings_PlayerProfile_PlayerField&& from) noexcept
    : UserConfiguration_UserSettings_PlayerProfile_PlayerField() {
    *this = ::std::move(from);
  }

  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField& operator=(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField& operator=(UserConfiguration_UserSettings_PlayerProfile_PlayerField&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserConfiguration_UserSettings_PlayerProfile_PlayerField& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserConfiguration_UserSettings_PlayerProfile_PlayerField* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration_UserSettings_PlayerProfile_PlayerField*>(
               &_UserConfiguration_UserSettings_PlayerProfile_PlayerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserConfiguration_UserSettings_PlayerProfile_PlayerField& a, UserConfiguration_UserSettings_PlayerProfile_PlayerField& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration_UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration_UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserConfiguration_UserSettings_PlayerProfile_PlayerField* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings_PlayerProfile_PlayerField>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from) {
    UserConfiguration_UserSettings_PlayerProfile_PlayerField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserConfiguration_UserSettings_PlayerProfile_PlayerField* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField";
  }
  protected:
  explicit UserConfiguration_UserSettings_PlayerProfile_PlayerField(::google::protobuf_inworld::Arena* arena);
  UserConfiguration_UserSettings_PlayerProfile_PlayerField(::google::protobuf_inworld::Arena* arena, const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIdFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // string field_id = 1;
  void clear_field_id() ;
  const std::string& field_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_id(Arg_&& arg, Args_... args);
  std::string* mutable_field_id();
  PROTOBUF_NODISCARD std::string* release_field_id();
  void set_allocated_field_id(std::string* value);

  private:
  const std::string& _internal_field_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_id(
      const std::string& value);
  std::string* _internal_mutable_field_id();

  public:
  // string field_value = 2;
  void clear_field_value() ;
  const std::string& field_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_value(Arg_&& arg, Args_... args);
  std::string* mutable_field_value();
  PROTOBUF_NODISCARD std::string* release_field_value();
  void set_allocated_field_value(std::string* value);

  private:
  const std::string& _internal_field_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_value(
      const std::string& value);
  std::string* _internal_mutable_field_value();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 0,
      116, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr field_id_;
    ::google::protobuf_inworld::internal::ArenaStringPtr field_value_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class SessionConfiguration final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.SessionConfiguration) */ {
 public:
  inline SessionConfiguration() : SessionConfiguration(nullptr) {}
  ~SessionConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SessionConfiguration(::google::protobuf_inworld::internal::ConstantInitialized);

  inline SessionConfiguration(const SessionConfiguration& from)
      : SessionConfiguration(nullptr, from) {}
  SessionConfiguration(SessionConfiguration&& from) noexcept
    : SessionConfiguration() {
    *this = ::std::move(from);
  }

  inline SessionConfiguration& operator=(const SessionConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionConfiguration& operator=(SessionConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionConfiguration* internal_default_instance() {
    return reinterpret_cast<const SessionConfiguration*>(
               &_SessionConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SessionConfiguration& a, SessionConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionConfiguration* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionConfiguration>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const SessionConfiguration& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const SessionConfiguration& from) {
    SessionConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(SessionConfiguration* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.SessionConfiguration";
  }
  protected:
  explicit SessionConfiguration(::google::protobuf_inworld::Arena* arena);
  SessionConfiguration(::google::protobuf_inworld::Arena* arena, const SessionConfiguration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameSessionIdFieldNumber = 2,
  };
  // string game_session_id = 2;
  void clear_game_session_id() ;
  const std::string& game_session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_game_session_id();
  PROTOBUF_NODISCARD std::string* release_game_session_id();
  void set_allocated_game_session_id(std::string* value);

  private:
  const std::string& _internal_game_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_session_id(
      const std::string& value);
  std::string* _internal_mutable_game_session_id();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.SessionConfiguration)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr game_session_id_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class ClientConfiguration final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.ClientConfiguration) */ {
 public:
  inline ClientConfiguration() : ClientConfiguration(nullptr) {}
  ~ClientConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientConfiguration(::google::protobuf_inworld::internal::ConstantInitialized);

  inline ClientConfiguration(const ClientConfiguration& from)
      : ClientConfiguration(nullptr, from) {}
  ClientConfiguration(ClientConfiguration&& from) noexcept
    : ClientConfiguration() {
    *this = ::std::move(from);
  }

  inline ClientConfiguration& operator=(const ClientConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfiguration& operator=(ClientConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConfiguration* internal_default_instance() {
    return reinterpret_cast<const ClientConfiguration*>(
               &_ClientConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientConfiguration& a, ClientConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConfiguration* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConfiguration>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const ClientConfiguration& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const ClientConfiguration& from) {
    ClientConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientConfiguration* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.ClientConfiguration";
  }
  protected:
  explicit ClientConfiguration(::google::protobuf_inworld::Arena* arena);
  ClientConfiguration(::google::protobuf_inworld::Arena* arena, const ClientConfiguration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.ClientConfiguration)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 0,
      80, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr id_;
    ::google::protobuf_inworld::internal::ArenaStringPtr version_;
    ::google::protobuf_inworld::internal::ArenaStringPtr description_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class CapabilitiesConfiguration final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.CapabilitiesConfiguration) */ {
 public:
  inline CapabilitiesConfiguration() : CapabilitiesConfiguration(nullptr) {}
  ~CapabilitiesConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilitiesConfiguration(::google::protobuf_inworld::internal::ConstantInitialized);

  inline CapabilitiesConfiguration(const CapabilitiesConfiguration& from)
      : CapabilitiesConfiguration(nullptr, from) {}
  CapabilitiesConfiguration(CapabilitiesConfiguration&& from) noexcept
    : CapabilitiesConfiguration() {
    *this = ::std::move(from);
  }

  inline CapabilitiesConfiguration& operator=(const CapabilitiesConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesConfiguration& operator=(CapabilitiesConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilitiesConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilitiesConfiguration* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesConfiguration*>(
               &_CapabilitiesConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CapabilitiesConfiguration& a, CapabilitiesConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilitiesConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilitiesConfiguration* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapabilitiesConfiguration>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const CapabilitiesConfiguration& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const CapabilitiesConfiguration& from) {
    CapabilitiesConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapabilitiesConfiguration* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.CapabilitiesConfiguration";
  }
  protected:
  explicit CapabilitiesConfiguration(::google::protobuf_inworld::Arena* arena);
  CapabilitiesConfiguration(::google::protobuf_inworld::Arena* arena, const CapabilitiesConfiguration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kInterruptionsFieldNumber = 3,
    kEmotionsFieldNumber = 4,
    kTurnBasedSttFieldNumber = 5,
    kEmotionStreamingFieldNumber = 6,
    kSilenceEventsFieldNumber = 7,
    kPhonemeInfoFieldNumber = 8,
    kContinuationFieldNumber = 9,
    kSessionCancellationFieldNumber = 10,
    kNarratedActionsFieldNumber = 11,
    kRegenerateResponseFieldNumber = 12,
    kRelationsFieldNumber = 13,
    kDebugInfoFieldNumber = 14,
    kTtsMp3FieldNumber = 15,
    kMultiAgentFieldNumber = 20,
  };
  // bool audio = 1;
  void clear_audio() ;
  bool audio() const;
  void set_audio(bool value);

  private:
  bool _internal_audio() const;
  void _internal_set_audio(bool value);

  public:
  // bool interruptions = 3;
  void clear_interruptions() ;
  bool interruptions() const;
  void set_interruptions(bool value);

  private:
  bool _internal_interruptions() const;
  void _internal_set_interruptions(bool value);

  public:
  // bool emotions = 4;
  void clear_emotions() ;
  bool emotions() const;
  void set_emotions(bool value);

  private:
  bool _internal_emotions() const;
  void _internal_set_emotions(bool value);

  public:
  // bool turn_based_stt = 5 [deprecated = true];
  [[deprecated]]  void clear_turn_based_stt() ;
  [[deprecated]] bool turn_based_stt() const;
  [[deprecated]] void set_turn_based_stt(bool value);

  private:
  bool _internal_turn_based_stt() const;
  void _internal_set_turn_based_stt(bool value);

  public:
  // bool emotion_streaming = 6;
  void clear_emotion_streaming() ;
  bool emotion_streaming() const;
  void set_emotion_streaming(bool value);

  private:
  bool _internal_emotion_streaming() const;
  void _internal_set_emotion_streaming(bool value);

  public:
  // bool silence_events = 7 [deprecated = true];
  [[deprecated]]  void clear_silence_events() ;
  [[deprecated]] bool silence_events() const;
  [[deprecated]] void set_silence_events(bool value);

  private:
  bool _internal_silence_events() const;
  void _internal_set_silence_events(bool value);

  public:
  // bool phoneme_info = 8;
  void clear_phoneme_info() ;
  bool phoneme_info() const;
  void set_phoneme_info(bool value);

  private:
  bool _internal_phoneme_info() const;
  void _internal_set_phoneme_info(bool value);

  public:
  // bool continuation = 9;
  void clear_continuation() ;
  bool continuation() const;
  void set_continuation(bool value);

  private:
  bool _internal_continuation() const;
  void _internal_set_continuation(bool value);

  public:
  // bool session_cancellation = 10;
  void clear_session_cancellation() ;
  bool session_cancellation() const;
  void set_session_cancellation(bool value);

  private:
  bool _internal_session_cancellation() const;
  void _internal_set_session_cancellation(bool value);

  public:
  // bool narrated_actions = 11;
  void clear_narrated_actions() ;
  bool narrated_actions() const;
  void set_narrated_actions(bool value);

  private:
  bool _internal_narrated_actions() const;
  void _internal_set_narrated_actions(bool value);

  public:
  // bool regenerate_response = 12;
  void clear_regenerate_response() ;
  bool regenerate_response() const;
  void set_regenerate_response(bool value);

  private:
  bool _internal_regenerate_response() const;
  void _internal_set_regenerate_response(bool value);

  public:
  // bool relations = 13;
  void clear_relations() ;
  bool relations() const;
  void set_relations(bool value);

  private:
  bool _internal_relations() const;
  void _internal_set_relations(bool value);

  public:
  // bool debug_info = 14;
  void clear_debug_info() ;
  bool debug_info() const;
  void set_debug_info(bool value);

  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);

  public:
  // bool tts_mp3 = 15;
  void clear_tts_mp3() ;
  bool tts_mp3() const;
  void set_tts_mp3(bool value);

  private:
  bool _internal_tts_mp3() const;
  void _internal_set_tts_mp3(bool value);

  public:
  // bool multi_agent = 20;
  void clear_multi_agent() ;
  bool multi_agent() const;
  void set_multi_agent(bool value);

  private:
  bool _internal_multi_agent() const;
  void _internal_set_multi_agent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.CapabilitiesConfiguration)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      4, 15, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    bool audio_;
    bool interruptions_;
    bool emotions_;
    bool turn_based_stt_;
    bool emotion_streaming_;
    bool silence_events_;
    bool phoneme_info_;
    bool continuation_;
    bool session_cancellation_;
    bool narrated_actions_;
    bool regenerate_response_;
    bool relations_;
    bool debug_info_;
    bool tts_mp3_;
    bool multi_agent_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class UserConfiguration_UserSettings_PlayerProfile final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile) */ {
 public:
  inline UserConfiguration_UserSettings_PlayerProfile() : UserConfiguration_UserSettings_PlayerProfile(nullptr) {}
  ~UserConfiguration_UserSettings_PlayerProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserConfiguration_UserSettings_PlayerProfile(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UserConfiguration_UserSettings_PlayerProfile(const UserConfiguration_UserSettings_PlayerProfile& from)
      : UserConfiguration_UserSettings_PlayerProfile(nullptr, from) {}
  UserConfiguration_UserSettings_PlayerProfile(UserConfiguration_UserSettings_PlayerProfile&& from) noexcept
    : UserConfiguration_UserSettings_PlayerProfile() {
    *this = ::std::move(from);
  }

  inline UserConfiguration_UserSettings_PlayerProfile& operator=(const UserConfiguration_UserSettings_PlayerProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration_UserSettings_PlayerProfile& operator=(UserConfiguration_UserSettings_PlayerProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserConfiguration_UserSettings_PlayerProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserConfiguration_UserSettings_PlayerProfile* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration_UserSettings_PlayerProfile*>(
               &_UserConfiguration_UserSettings_PlayerProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserConfiguration_UserSettings_PlayerProfile& a, UserConfiguration_UserSettings_PlayerProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration_UserSettings_PlayerProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration_UserSettings_PlayerProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserConfiguration_UserSettings_PlayerProfile* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings_PlayerProfile>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UserConfiguration_UserSettings_PlayerProfile& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UserConfiguration_UserSettings_PlayerProfile& from) {
    UserConfiguration_UserSettings_PlayerProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserConfiguration_UserSettings_PlayerProfile* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile";
  }
  protected:
  explicit UserConfiguration_UserSettings_PlayerProfile(::google::protobuf_inworld::Arena* arena);
  UserConfiguration_UserSettings_PlayerProfile(::google::protobuf_inworld::Arena* arena, const UserConfiguration_UserSettings_PlayerProfile& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PlayerField = UserConfiguration_UserSettings_PlayerProfile_PlayerField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* mutable_fields(int index);
  ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField >*
      mutable_fields();
  private:
  const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>& _internal_fields() const;
  ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>* _internal_mutable_fields();
  public:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField& fields(int index) const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* add_fields();
  const ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField >&
      fields() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField > fields_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class UserConfiguration_UserSettings final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration.UserSettings) */ {
 public:
  inline UserConfiguration_UserSettings() : UserConfiguration_UserSettings(nullptr) {}
  ~UserConfiguration_UserSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserConfiguration_UserSettings(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UserConfiguration_UserSettings(const UserConfiguration_UserSettings& from)
      : UserConfiguration_UserSettings(nullptr, from) {}
  UserConfiguration_UserSettings(UserConfiguration_UserSettings&& from) noexcept
    : UserConfiguration_UserSettings() {
    *this = ::std::move(from);
  }

  inline UserConfiguration_UserSettings& operator=(const UserConfiguration_UserSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration_UserSettings& operator=(UserConfiguration_UserSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserConfiguration_UserSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserConfiguration_UserSettings* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration_UserSettings*>(
               &_UserConfiguration_UserSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserConfiguration_UserSettings& a, UserConfiguration_UserSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration_UserSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration_UserSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserConfiguration_UserSettings* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UserConfiguration_UserSettings& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UserConfiguration_UserSettings& from) {
    UserConfiguration_UserSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserConfiguration_UserSettings* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration.UserSettings";
  }
  protected:
  explicit UserConfiguration_UserSettings(::google::protobuf_inworld::Arena* arena);
  UserConfiguration_UserSettings(::google::protobuf_inworld::Arena* arena, const UserConfiguration_UserSettings& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PlayerProfile = UserConfiguration_UserSettings_PlayerProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerProfileFieldNumber = 2,
    kViewTranscriptConsentFieldNumber = 1,
  };
  // .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile player_profile = 2;
  bool has_player_profile() const;
  void clear_player_profile() ;
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& player_profile() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* release_player_profile();
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* mutable_player_profile();
  void set_allocated_player_profile(::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* value);
  void unsafe_arena_set_allocated_player_profile(::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* value);
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* unsafe_arena_release_player_profile();

  private:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& _internal_player_profile() const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* _internal_mutable_player_profile();

  public:
  // bool view_transcript_consent = 1;
  void clear_view_transcript_consent() ;
  bool view_transcript_consent() const;
  void set_view_transcript_consent(bool value);

  private:
  bool _internal_view_transcript_consent() const;
  void _internal_set_view_transcript_consent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration.UserSettings)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* player_profile_;
    bool view_transcript_consent_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class UserConfiguration final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration) */ {
 public:
  inline UserConfiguration() : UserConfiguration(nullptr) {}
  ~UserConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserConfiguration(::google::protobuf_inworld::internal::ConstantInitialized);

  inline UserConfiguration(const UserConfiguration& from)
      : UserConfiguration(nullptr, from) {}
  UserConfiguration(UserConfiguration&& from) noexcept
    : UserConfiguration() {
    *this = ::std::move(from);
  }

  inline UserConfiguration& operator=(const UserConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration& operator=(UserConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserConfiguration* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration*>(
               &_UserConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserConfiguration& a, UserConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserConfiguration* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserConfiguration>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const UserConfiguration& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const UserConfiguration& from) {
    UserConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserConfiguration* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration";
  }
  protected:
  explicit UserConfiguration(::google::protobuf_inworld::Arena* arena);
  UserConfiguration(::google::protobuf_inworld::Arena* arena, const UserConfiguration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using UserSettings = UserConfiguration_UserSettings;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kUserSettingsFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string id = 2;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .ai.inworld.engine.configuration.UserConfiguration.UserSettings user_settings = 3;
  bool has_user_settings() const;
  void clear_user_settings() ;
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& user_settings() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* release_user_settings();
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* mutable_user_settings();
  void set_allocated_user_settings(::ai::inworld::engine::configuration::UserConfiguration_UserSettings* value);
  void unsafe_arena_set_allocated_user_settings(::ai::inworld::engine::configuration::UserConfiguration_UserSettings* value);
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* unsafe_arena_release_user_settings();

  private:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& _internal_user_settings() const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* _internal_mutable_user_settings();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      2, 3, 1,
      64, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::google::protobuf_inworld::internal::ArenaStringPtr name_;
    ::google::protobuf_inworld::internal::ArenaStringPtr id_;
    ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* user_settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CapabilitiesConfiguration

// bool audio = 1;
inline void CapabilitiesConfiguration::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_ = false;
}
inline bool CapabilitiesConfiguration::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.audio)
  return _internal_audio();
}
inline void CapabilitiesConfiguration::set_audio(bool value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.audio)
}
inline bool CapabilitiesConfiguration::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_;
}
inline void CapabilitiesConfiguration::_internal_set_audio(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_ = value;
}

// bool interruptions = 3;
inline void CapabilitiesConfiguration::clear_interruptions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interruptions_ = false;
}
inline bool CapabilitiesConfiguration::interruptions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.interruptions)
  return _internal_interruptions();
}
inline void CapabilitiesConfiguration::set_interruptions(bool value) {
  _internal_set_interruptions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.interruptions)
}
inline bool CapabilitiesConfiguration::_internal_interruptions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interruptions_;
}
inline void CapabilitiesConfiguration::_internal_set_interruptions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.interruptions_ = value;
}

// bool emotions = 4;
inline void CapabilitiesConfiguration::clear_emotions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotions_ = false;
}
inline bool CapabilitiesConfiguration::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotions)
  return _internal_emotions();
}
inline void CapabilitiesConfiguration::set_emotions(bool value) {
  _internal_set_emotions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotions)
}
inline bool CapabilitiesConfiguration::_internal_emotions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotions_;
}
inline void CapabilitiesConfiguration::_internal_set_emotions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.emotions_ = value;
}

// bool turn_based_stt = 5 [deprecated = true];
inline void CapabilitiesConfiguration::clear_turn_based_stt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turn_based_stt_ = false;
}
inline bool CapabilitiesConfiguration::turn_based_stt() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.turn_based_stt)
  return _internal_turn_based_stt();
}
inline void CapabilitiesConfiguration::set_turn_based_stt(bool value) {
  _internal_set_turn_based_stt(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.turn_based_stt)
}
inline bool CapabilitiesConfiguration::_internal_turn_based_stt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turn_based_stt_;
}
inline void CapabilitiesConfiguration::_internal_set_turn_based_stt(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turn_based_stt_ = value;
}

// bool emotion_streaming = 6;
inline void CapabilitiesConfiguration::clear_emotion_streaming() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotion_streaming_ = false;
}
inline bool CapabilitiesConfiguration::emotion_streaming() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotion_streaming)
  return _internal_emotion_streaming();
}
inline void CapabilitiesConfiguration::set_emotion_streaming(bool value) {
  _internal_set_emotion_streaming(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotion_streaming)
}
inline bool CapabilitiesConfiguration::_internal_emotion_streaming() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotion_streaming_;
}
inline void CapabilitiesConfiguration::_internal_set_emotion_streaming(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.emotion_streaming_ = value;
}

// bool silence_events = 7 [deprecated = true];
inline void CapabilitiesConfiguration::clear_silence_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.silence_events_ = false;
}
inline bool CapabilitiesConfiguration::silence_events() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.silence_events)
  return _internal_silence_events();
}
inline void CapabilitiesConfiguration::set_silence_events(bool value) {
  _internal_set_silence_events(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.silence_events)
}
inline bool CapabilitiesConfiguration::_internal_silence_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.silence_events_;
}
inline void CapabilitiesConfiguration::_internal_set_silence_events(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.silence_events_ = value;
}

// bool phoneme_info = 8;
inline void CapabilitiesConfiguration::clear_phoneme_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phoneme_info_ = false;
}
inline bool CapabilitiesConfiguration::phoneme_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.phoneme_info)
  return _internal_phoneme_info();
}
inline void CapabilitiesConfiguration::set_phoneme_info(bool value) {
  _internal_set_phoneme_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.phoneme_info)
}
inline bool CapabilitiesConfiguration::_internal_phoneme_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phoneme_info_;
}
inline void CapabilitiesConfiguration::_internal_set_phoneme_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phoneme_info_ = value;
}

// bool continuation = 9;
inline void CapabilitiesConfiguration::clear_continuation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.continuation_ = false;
}
inline bool CapabilitiesConfiguration::continuation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.continuation)
  return _internal_continuation();
}
inline void CapabilitiesConfiguration::set_continuation(bool value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.continuation)
}
inline bool CapabilitiesConfiguration::_internal_continuation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.continuation_;
}
inline void CapabilitiesConfiguration::_internal_set_continuation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.continuation_ = value;
}

// bool session_cancellation = 10;
inline void CapabilitiesConfiguration::clear_session_cancellation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_cancellation_ = false;
}
inline bool CapabilitiesConfiguration::session_cancellation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.session_cancellation)
  return _internal_session_cancellation();
}
inline void CapabilitiesConfiguration::set_session_cancellation(bool value) {
  _internal_set_session_cancellation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.session_cancellation)
}
inline bool CapabilitiesConfiguration::_internal_session_cancellation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_cancellation_;
}
inline void CapabilitiesConfiguration::_internal_set_session_cancellation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_cancellation_ = value;
}

// bool narrated_actions = 11;
inline void CapabilitiesConfiguration::clear_narrated_actions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.narrated_actions_ = false;
}
inline bool CapabilitiesConfiguration::narrated_actions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.narrated_actions)
  return _internal_narrated_actions();
}
inline void CapabilitiesConfiguration::set_narrated_actions(bool value) {
  _internal_set_narrated_actions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.narrated_actions)
}
inline bool CapabilitiesConfiguration::_internal_narrated_actions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.narrated_actions_;
}
inline void CapabilitiesConfiguration::_internal_set_narrated_actions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.narrated_actions_ = value;
}

// bool regenerate_response = 12;
inline void CapabilitiesConfiguration::clear_regenerate_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.regenerate_response_ = false;
}
inline bool CapabilitiesConfiguration::regenerate_response() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.regenerate_response)
  return _internal_regenerate_response();
}
inline void CapabilitiesConfiguration::set_regenerate_response(bool value) {
  _internal_set_regenerate_response(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.regenerate_response)
}
inline bool CapabilitiesConfiguration::_internal_regenerate_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.regenerate_response_;
}
inline void CapabilitiesConfiguration::_internal_set_regenerate_response(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.regenerate_response_ = value;
}

// bool relations = 13;
inline void CapabilitiesConfiguration::clear_relations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relations_ = false;
}
inline bool CapabilitiesConfiguration::relations() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.relations)
  return _internal_relations();
}
inline void CapabilitiesConfiguration::set_relations(bool value) {
  _internal_set_relations(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.relations)
}
inline bool CapabilitiesConfiguration::_internal_relations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relations_;
}
inline void CapabilitiesConfiguration::_internal_set_relations(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relations_ = value;
}

// bool debug_info = 14;
inline void CapabilitiesConfiguration::clear_debug_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.debug_info_ = false;
}
inline bool CapabilitiesConfiguration::debug_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.debug_info)
  return _internal_debug_info();
}
inline void CapabilitiesConfiguration::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.debug_info)
}
inline bool CapabilitiesConfiguration::_internal_debug_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.debug_info_;
}
inline void CapabilitiesConfiguration::_internal_set_debug_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.debug_info_ = value;
}

// bool tts_mp3 = 15;
inline void CapabilitiesConfiguration::clear_tts_mp3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tts_mp3_ = false;
}
inline bool CapabilitiesConfiguration::tts_mp3() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.tts_mp3)
  return _internal_tts_mp3();
}
inline void CapabilitiesConfiguration::set_tts_mp3(bool value) {
  _internal_set_tts_mp3(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.tts_mp3)
}
inline bool CapabilitiesConfiguration::_internal_tts_mp3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tts_mp3_;
}
inline void CapabilitiesConfiguration::_internal_set_tts_mp3(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tts_mp3_ = value;
}

// bool multi_agent = 20;
inline void CapabilitiesConfiguration::clear_multi_agent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.multi_agent_ = false;
}
inline bool CapabilitiesConfiguration::multi_agent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.multi_agent)
  return _internal_multi_agent();
}
inline void CapabilitiesConfiguration::set_multi_agent(bool value) {
  _internal_set_multi_agent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.multi_agent)
}
inline bool CapabilitiesConfiguration::_internal_multi_agent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.multi_agent_;
}
inline void CapabilitiesConfiguration::_internal_set_multi_agent(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.multi_agent_ = value;
}

// -------------------------------------------------------------------

// UserConfiguration_UserSettings_PlayerProfile_PlayerField

// string field_id = 1;
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::clear_field_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_id_.ClearToEmpty();
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::field_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
  return _internal_field_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::mutable_field_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
  return _s;
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_field_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_id_.Get();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_set_field_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_id_.Set(value, GetArena());
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_id_.Mutable( GetArena());
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::release_field_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
  return _impl_.field_id_.Release();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_allocated_field_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_id_.IsDefault()) {
          _impl_.field_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}

// string field_value = 2;
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::clear_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_value_.ClearToEmpty();
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::field_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
  return _internal_field_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::mutable_field_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_value();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
  return _s;
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_field_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_value_.Get();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_set_field_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_value_.Set(value, GetArena());
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_value_.Mutable( GetArena());
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::release_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
  return _impl_.field_value_.Release();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_allocated_field_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_value_.IsDefault()) {
          _impl_.field_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}

// -------------------------------------------------------------------

// UserConfiguration_UserSettings_PlayerProfile

// repeated .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField fields = 3;
inline int UserConfiguration_UserSettings_PlayerProfile::_internal_fields_size() const {
  return _internal_fields().size();
}
inline int UserConfiguration_UserSettings_PlayerProfile::fields_size() const {
  return _internal_fields_size();
}
inline void UserConfiguration_UserSettings_PlayerProfile::clear_fields() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fields_.Clear();
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* UserConfiguration_UserSettings_PlayerProfile::mutable_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>* UserConfiguration_UserSettings_PlayerProfile::mutable_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fields();
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField& UserConfiguration_UserSettings_PlayerProfile::fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return _internal_fields().Get(index);
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* UserConfiguration_UserSettings_PlayerProfile::add_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* _add = _internal_mutable_fields()->Add();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return _add;
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>& UserConfiguration_UserSettings_PlayerProfile::fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return _internal_fields();
}
inline const ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>&
UserConfiguration_UserSettings_PlayerProfile::_internal_fields() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fields_;
}
inline ::google::protobuf_inworld::RepeatedPtrField<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>*
UserConfiguration_UserSettings_PlayerProfile::_internal_mutable_fields() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// UserConfiguration_UserSettings

// bool view_transcript_consent = 1;
inline void UserConfiguration_UserSettings::clear_view_transcript_consent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_transcript_consent_ = false;
}
inline bool UserConfiguration_UserSettings::view_transcript_consent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.view_transcript_consent)
  return _internal_view_transcript_consent();
}
inline void UserConfiguration_UserSettings::set_view_transcript_consent(bool value) {
  _internal_set_view_transcript_consent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.UserSettings.view_transcript_consent)
}
inline bool UserConfiguration_UserSettings::_internal_view_transcript_consent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.view_transcript_consent_;
}
inline void UserConfiguration_UserSettings::_internal_set_view_transcript_consent(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_transcript_consent_ = value;
}

// .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile player_profile = 2;
inline bool UserConfiguration_UserSettings::has_player_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_profile_ != nullptr);
  return value;
}
inline void UserConfiguration_UserSettings::clear_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.player_profile_ != nullptr) _impl_.player_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& UserConfiguration_UserSettings::_internal_player_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* p = _impl_.player_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile&>(::ai::inworld::engine::configuration::_UserConfiguration_UserSettings_PlayerProfile_default_instance_);
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& UserConfiguration_UserSettings::player_profile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
  return _internal_player_profile();
}
inline void UserConfiguration_UserSettings::unsafe_arena_set_allocated_player_profile(::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.player_profile_);
  }
  _impl_.player_profile_ = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::release_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* released = _impl_.player_profile_;
  _impl_.player_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::unsafe_arena_release_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* temp = _impl_.player_profile_;
  _impl_.player_profile_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::_internal_mutable_player_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile>(GetArena());
    _impl_.player_profile_ = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile*>(p);
  }
  return _impl_.player_profile_;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::mutable_player_profile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* _msg = _internal_mutable_player_profile();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
  return _msg;
}
inline void UserConfiguration_UserSettings::set_allocated_player_profile(::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile*>(_impl_.player_profile_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_profile_ = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
}

// -------------------------------------------------------------------

// UserConfiguration

// string name = 1;
inline void UserConfiguration::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserConfiguration::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserConfiguration::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.name)
}
inline std::string* UserConfiguration::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.name)
  return _s;
}
inline const std::string& UserConfiguration::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UserConfiguration::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UserConfiguration::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UserConfiguration::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.name)
  return _impl_.name_.Release();
}
inline void UserConfiguration::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.name)
}

// string id = 2;
inline void UserConfiguration::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserConfiguration::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserConfiguration::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.id)
}
inline std::string* UserConfiguration::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.id)
  return _s;
}
inline const std::string& UserConfiguration::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void UserConfiguration::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* UserConfiguration::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* UserConfiguration::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.id)
  return _impl_.id_.Release();
}
inline void UserConfiguration::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.id)
}

// .ai.inworld.engine.configuration.UserConfiguration.UserSettings user_settings = 3;
inline bool UserConfiguration::has_user_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_settings_ != nullptr);
  return value;
}
inline void UserConfiguration::clear_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_settings_ != nullptr) _impl_.user_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& UserConfiguration::_internal_user_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* p = _impl_.user_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings&>(::ai::inworld::engine::configuration::_UserConfiguration_UserSettings_default_instance_);
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& UserConfiguration::user_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.user_settings)
  return _internal_user_settings();
}
inline void UserConfiguration::unsafe_arena_set_allocated_user_settings(::ai::inworld::engine::configuration::UserConfiguration_UserSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_inworld::MessageLite*>(_impl_.user_settings_);
  }
  _impl_.user_settings_ = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.configuration.UserConfiguration.user_settings)
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::release_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* released = _impl_.user_settings_;
  _impl_.user_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_inworld::MessageLite*>(released);
  released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_inworld::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::unsafe_arena_release_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.user_settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* temp = _impl_.user_settings_;
  _impl_.user_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::_internal_mutable_user_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings>(GetArena());
    _impl_.user_settings_ = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings*>(p);
  }
  return _impl_.user_settings_;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::mutable_user_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* _msg = _internal_mutable_user_settings();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.user_settings)
  return _msg;
}
inline void UserConfiguration::set_allocated_user_settings(::ai::inworld::engine::configuration::UserConfiguration_UserSettings* value) {
  ::google::protobuf_inworld::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings*>(_impl_.user_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf_inworld::Arena* submessage_arena = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_inworld::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_settings_ = reinterpret_cast<::ai::inworld::engine::configuration::UserConfiguration_UserSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.user_settings)
}

// -------------------------------------------------------------------

// ClientConfiguration

// string id = 1;
inline void ClientConfiguration::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ClientConfiguration::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.ClientConfiguration.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientConfiguration::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.ClientConfiguration.id)
}
inline std::string* ClientConfiguration::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.ClientConfiguration.id)
  return _s;
}
inline const std::string& ClientConfiguration::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void ClientConfiguration::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ClientConfiguration::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ClientConfiguration::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.ClientConfiguration.id)
  return _impl_.id_.Release();
}
inline void ClientConfiguration::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.ClientConfiguration.id)
}

// string version = 2;
inline void ClientConfiguration::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ClientConfiguration::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.ClientConfiguration.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientConfiguration::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.ClientConfiguration.version)
}
inline std::string* ClientConfiguration::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.ClientConfiguration.version)
  return _s;
}
inline const std::string& ClientConfiguration::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ClientConfiguration::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ClientConfiguration::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ClientConfiguration::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.ClientConfiguration.version)
  return _impl_.version_.Release();
}
inline void ClientConfiguration::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.ClientConfiguration.version)
}

// string description = 3;
inline void ClientConfiguration::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ClientConfiguration::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.ClientConfiguration.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientConfiguration::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.ClientConfiguration.description)
}
inline std::string* ClientConfiguration::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.ClientConfiguration.description)
  return _s;
}
inline const std::string& ClientConfiguration::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void ClientConfiguration::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* ClientConfiguration::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* ClientConfiguration::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.ClientConfiguration.description)
  return _impl_.description_.Release();
}
inline void ClientConfiguration::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.ClientConfiguration.description)
}

// -------------------------------------------------------------------

// SessionConfiguration

// string game_session_id = 2;
inline void SessionConfiguration::clear_game_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.game_session_id_.ClearToEmpty();
}
inline const std::string& SessionConfiguration::game_session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
  return _internal_game_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionConfiguration::set_game_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.game_session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}
inline std::string* SessionConfiguration::mutable_game_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_session_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
  return _s;
}
inline const std::string& SessionConfiguration::_internal_game_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.game_session_id_.Get();
}
inline void SessionConfiguration::_internal_set_game_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.game_session_id_.Set(value, GetArena());
}
inline std::string* SessionConfiguration::_internal_mutable_game_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.game_session_id_.Mutable( GetArena());
}
inline std::string* SessionConfiguration::release_game_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
  return _impl_.game_session_id_.Release();
}
inline void SessionConfiguration::set_allocated_game_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.game_session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.game_session_id_.IsDefault()) {
          _impl_.game_session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace configuration
}  // namespace engine
}  // namespace inworld
}  // namespace ai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto_2epb_2eh
