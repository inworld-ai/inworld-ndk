// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/voices/voices.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fvoices_2fvoices_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fvoices_2fvoices_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ai/inworld/language_codes/language_codes.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fvoices_2fvoices_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fvoices_2fvoices_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf_inworld::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fvoices_2fvoices_2eproto;
namespace ai {
namespace inworld {
namespace voices {
class Voice;
struct VoiceDefaultTypeInternal;
extern VoiceDefaultTypeInternal _Voice_default_instance_;
class Voice_ElevenLabsMetadata;
struct Voice_ElevenLabsMetadataDefaultTypeInternal;
extern Voice_ElevenLabsMetadataDefaultTypeInternal _Voice_ElevenLabsMetadata_default_instance_;
class Voice_PhonemesOverridesEntry_DoNotUse;
struct Voice_PhonemesOverridesEntry_DoNotUseDefaultTypeInternal;
extern Voice_PhonemesOverridesEntry_DoNotUseDefaultTypeInternal _Voice_PhonemesOverridesEntry_DoNotUse_default_instance_;
}  // namespace voices
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace voices {
enum Gender : int {
  VOICE_GENDER_UNSPECIFIED = 0,
  VOICE_GENDER_MALE = 1,
  VOICE_GENDER_FEMALE = 2,
  VOICE_GENDER_NEUTRAL = 3,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Gender_IsValid(int value);
extern const uint32_t Gender_internal_data_[];
constexpr Gender Gender_MIN = static_cast<Gender>(0);
constexpr Gender Gender_MAX = static_cast<Gender>(3);
constexpr int Gender_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Gender_descriptor();
template <typename T>
const std::string& Gender_Name(T value) {
  static_assert(std::is_same<T, Gender>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Gender_Name(static_cast<Gender>(value));
}
template <>
inline const std::string& Gender_Name(Gender value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Gender_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Gender_Parse(absl::string_view name, Gender* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Gender>(
      Gender_descriptor(), name, value);
}
enum Age : int {
  VOICE_AGE_UNSPECIFIED = 0,
  VOICE_AGE_YOUNG = 1,
  VOICE_AGE_MIDDLE_AGED = 2,
  VOICE_AGE_OLD = 3,
  Age_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Age_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Age_IsValid(int value);
extern const uint32_t Age_internal_data_[];
constexpr Age Age_MIN = static_cast<Age>(0);
constexpr Age Age_MAX = static_cast<Age>(3);
constexpr int Age_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
Age_descriptor();
template <typename T>
const std::string& Age_Name(T value) {
  static_assert(std::is_same<T, Age>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Age_Name().");
  return Age_Name(static_cast<Age>(value));
}
template <>
inline const std::string& Age_Name(Age value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<Age_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Age_Parse(absl::string_view name, Age* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<Age>(
      Age_descriptor(), name, value);
}
enum TTSType : int {
  TTS_TYPE_STANDARD [[deprecated]] = 0,
  TTS_TYPE_ADVANCED = 1,
  TTS_TYPE_ELEVEN_LABS = 2,
  TTS_TYPE_ADVANCED_V2 = 3,
  TTSType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TTSType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TTSType_IsValid(int value);
extern const uint32_t TTSType_internal_data_[];
constexpr TTSType TTSType_MIN = static_cast<TTSType>(0);
constexpr TTSType TTSType_MAX = static_cast<TTSType>(3);
constexpr int TTSType_ARRAYSIZE = 3 + 1;
const ::google::protobuf_inworld::EnumDescriptor*
TTSType_descriptor();
template <typename T>
const std::string& TTSType_Name(T value) {
  static_assert(std::is_same<T, TTSType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TTSType_Name().");
  return TTSType_Name(static_cast<TTSType>(value));
}
template <>
inline const std::string& TTSType_Name(TTSType value) {
  return ::google::protobuf_inworld::internal::NameOfDenseEnum<TTSType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TTSType_Parse(absl::string_view name, TTSType* value) {
  return ::google::protobuf_inworld::internal::ParseNamedEnum<TTSType>(
      TTSType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Voice_PhonemesOverridesEntry_DoNotUse final
    : public ::google::protobuf_inworld::internal::MapEntry<
          Voice_PhonemesOverridesEntry_DoNotUse, std::string, std::string,
          ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf_inworld::internal::MapEntry<
      Voice_PhonemesOverridesEntry_DoNotUse, std::string, std::string,
      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING>;
  Voice_PhonemesOverridesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Voice_PhonemesOverridesEntry_DoNotUse(
      ::google::protobuf_inworld::internal::ConstantInitialized);
  explicit Voice_PhonemesOverridesEntry_DoNotUse(::google::protobuf_inworld::Arena* arena);
  static const Voice_PhonemesOverridesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Voice_PhonemesOverridesEntry_DoNotUse*>(
        &_Voice_PhonemesOverridesEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf_inworld::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf_inworld::internal::WireFormatLite::PARSE, "ai.inworld.voices.Voice.PhonemesOverridesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf_inworld::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf_inworld::internal::WireFormatLite::PARSE, "ai.inworld.voices.Voice.PhonemesOverridesEntry.value");
 }
  ::google::protobuf_inworld::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ai_2finworld_2fvoices_2fvoices_2eproto;
};
// -------------------------------------------------------------------

class Voice_ElevenLabsMetadata final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.voices.Voice.ElevenLabsMetadata) */ {
 public:
  inline Voice_ElevenLabsMetadata() : Voice_ElevenLabsMetadata(nullptr) {}
  ~Voice_ElevenLabsMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Voice_ElevenLabsMetadata(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Voice_ElevenLabsMetadata(const Voice_ElevenLabsMetadata& from)
      : Voice_ElevenLabsMetadata(nullptr, from) {}
  Voice_ElevenLabsMetadata(Voice_ElevenLabsMetadata&& from) noexcept
    : Voice_ElevenLabsMetadata() {
    *this = ::std::move(from);
  }

  inline Voice_ElevenLabsMetadata& operator=(const Voice_ElevenLabsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Voice_ElevenLabsMetadata& operator=(Voice_ElevenLabsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Voice_ElevenLabsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Voice_ElevenLabsMetadata* internal_default_instance() {
    return reinterpret_cast<const Voice_ElevenLabsMetadata*>(
               &_Voice_ElevenLabsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Voice_ElevenLabsMetadata& a, Voice_ElevenLabsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Voice_ElevenLabsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Voice_ElevenLabsMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Voice_ElevenLabsMetadata* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Voice_ElevenLabsMetadata>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Voice_ElevenLabsMetadata& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Voice_ElevenLabsMetadata& from) {
    Voice_ElevenLabsMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Voice_ElevenLabsMetadata* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.voices.Voice.ElevenLabsMetadata";
  }
  protected:
  explicit Voice_ElevenLabsMetadata(::google::protobuf_inworld::Arena* arena);
  Voice_ElevenLabsMetadata(::google::protobuf_inworld::Arena* arena, const Voice_ElevenLabsMetadata& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceIdFieldNumber = 1,
  };
  // string voice_id = 1;
  void clear_voice_id() ;
  const std::string& voice_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voice_id(Arg_&& arg, Args_... args);
  std::string* mutable_voice_id();
  PROTOBUF_NODISCARD std::string* release_voice_id();
  void set_allocated_voice_id(std::string* value);

  private:
  const std::string& _internal_voice_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voice_id(
      const std::string& value);
  std::string* _internal_mutable_voice_id();

  public:
  // @@protoc_insertion_point(class_scope:ai.inworld.voices.Voice.ElevenLabsMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      0, 1, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::ArenaStringPtr voice_id_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fvoices_2fvoices_2eproto;
};// -------------------------------------------------------------------

class Voice final :
    public ::google::protobuf_inworld::Message /* @@protoc_insertion_point(class_definition:ai.inworld.voices.Voice) */ {
 public:
  inline Voice() : Voice(nullptr) {}
  ~Voice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Voice(::google::protobuf_inworld::internal::ConstantInitialized);

  inline Voice(const Voice& from)
      : Voice(nullptr, from) {}
  Voice(Voice&& from) noexcept
    : Voice() {
    *this = ::std::move(from);
  }

  inline Voice& operator=(const Voice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Voice& operator=(Voice&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_inworld::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_inworld::UnknownFieldSet>(::google::protobuf_inworld::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_inworld::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_inworld::UnknownFieldSet>();
  }

  static const ::google::protobuf_inworld::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_inworld::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_inworld::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Voice& default_instance() {
    return *internal_default_instance();
  }
  enum TtsMetadataCase {
    kElevenlabsMetadata = 100,
    TTS_METADATA_NOT_SET = 0,
  };

  static inline const Voice* internal_default_instance() {
    return reinterpret_cast<const Voice*>(
               &_Voice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Voice& a, Voice& b) {
    a.Swap(&b);
  }
  inline void Swap(Voice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_inworld::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Voice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Voice* New(::google::protobuf_inworld::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Voice>(arena);
  }
  using ::google::protobuf_inworld::Message::CopyFrom;
  void CopyFrom(const Voice& from);
  using ::google::protobuf_inworld::Message::MergeFrom;
  void MergeFrom( const Voice& from) {
    Voice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_inworld::Message& to_msg, const ::google::protobuf_inworld::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_inworld::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_inworld::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_inworld::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_inworld::Arena* arena);
  void SharedDtor();
  void InternalSwap(Voice* other);

  private:
  friend class ::google::protobuf_inworld::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.voices.Voice";
  }
  protected:
  explicit Voice(::google::protobuf_inworld::Arena* arena);
  Voice(::google::protobuf_inworld::Arena* arena, const Voice& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_inworld::Message::ClassData*GetClassData() const final;

  ::google::protobuf_inworld::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ElevenLabsMetadata = Voice_ElevenLabsMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kPhonemesOverridesFieldNumber = 7,
    kBaseNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 9,
    kTtsTypeFieldNumber = 2,
    kGenderFieldNumber = 3,
    kPitchFieldNumber = 4,
    kSpeakingRateFieldNumber = 5,
    kRoboticVoiceFilterLevelFieldNumber = 6,
    kAgeFieldNumber = 8,
    kLanguageFieldNumber = 10,
    kElevenlabsMetadataFieldNumber = 100,
  };
  // map<string, string> phonemes_overrides = 7;
  int phonemes_overrides_size() const;
  private:
  int _internal_phonemes_overrides_size() const;

  public:
  void clear_phonemes_overrides() ;
  const ::google::protobuf_inworld::Map<std::string, std::string>& phonemes_overrides() const;
  ::google::protobuf_inworld::Map<std::string, std::string>* mutable_phonemes_overrides();

  private:
  const ::google::protobuf_inworld::Map<std::string, std::string>& _internal_phonemes_overrides() const;
  ::google::protobuf_inworld::Map<std::string, std::string>* _internal_mutable_phonemes_overrides();

  public:
  // string baseName = 1;
  void clear_basename() ;
  const std::string& basename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basename(Arg_&& arg, Args_... args);
  std::string* mutable_basename();
  PROTOBUF_NODISCARD std::string* release_basename();
  void set_allocated_basename(std::string* value);

  private:
  const std::string& _internal_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basename(
      const std::string& value);
  std::string* _internal_mutable_basename();

  public:
  // string language_code = 9 [deprecated = true];
  [[deprecated]]  void clear_language_code() ;
  [[deprecated]] const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_language_code(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_language_code();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_language_code();
  [[deprecated]] void set_allocated_language_code(std::string* value);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // .ai.inworld.voices.TTSType tts_type = 2;
  void clear_tts_type() ;
  ::ai::inworld::voices::TTSType tts_type() const;
  void set_tts_type(::ai::inworld::voices::TTSType value);

  private:
  ::ai::inworld::voices::TTSType _internal_tts_type() const;
  void _internal_set_tts_type(::ai::inworld::voices::TTSType value);

  public:
  // .ai.inworld.voices.Gender gender = 3;
  void clear_gender() ;
  ::ai::inworld::voices::Gender gender() const;
  void set_gender(::ai::inworld::voices::Gender value);

  private:
  ::ai::inworld::voices::Gender _internal_gender() const;
  void _internal_set_gender(::ai::inworld::voices::Gender value);

  public:
  // double pitch = 4;
  void clear_pitch() ;
  double pitch() const;
  void set_pitch(double value);

  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);

  public:
  // double speaking_rate = 5;
  void clear_speaking_rate() ;
  double speaking_rate() const;
  void set_speaking_rate(double value);

  private:
  double _internal_speaking_rate() const;
  void _internal_set_speaking_rate(double value);

  public:
  // double robotic_voice_filter_level = 6;
  void clear_robotic_voice_filter_level() ;
  double robotic_voice_filter_level() const;
  void set_robotic_voice_filter_level(double value);

  private:
  double _internal_robotic_voice_filter_level() const;
  void _internal_set_robotic_voice_filter_level(double value);

  public:
  // .ai.inworld.voices.Age age = 8;
  void clear_age() ;
  ::ai::inworld::voices::Age age() const;
  void set_age(::ai::inworld::voices::Age value);

  private:
  ::ai::inworld::voices::Age _internal_age() const;
  void _internal_set_age(::ai::inworld::voices::Age value);

  public:
  // .ai.inworld.language_codes.LanguageCode language = 10;
  void clear_language() ;
  ::ai::inworld::language_codes::LanguageCode language() const;
  void set_language(::ai::inworld::language_codes::LanguageCode value);

  private:
  ::ai::inworld::language_codes::LanguageCode _internal_language() const;
  void _internal_set_language(::ai::inworld::language_codes::LanguageCode value);

  public:
  // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
  bool has_elevenlabs_metadata() const;
  private:
  bool _internal_has_elevenlabs_metadata() const;

  public:
  void clear_elevenlabs_metadata() ;
  const ::ai::inworld::voices::Voice_ElevenLabsMetadata& elevenlabs_metadata() const;
  PROTOBUF_NODISCARD ::ai::inworld::voices::Voice_ElevenLabsMetadata* release_elevenlabs_metadata();
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* mutable_elevenlabs_metadata();
  void set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* value);
  void unsafe_arena_set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* value);
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* unsafe_arena_release_elevenlabs_metadata();

  private:
  const ::ai::inworld::voices::Voice_ElevenLabsMetadata& _internal_elevenlabs_metadata() const;
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* _internal_mutable_elevenlabs_metadata();

  public:
  void clear_tts_metadata();
  TtsMetadataCase tts_metadata_case() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.voices.Voice)
 private:
  class _Internal;
  void set_has_elevenlabs_metadata();

  inline bool has_tts_metadata() const;
  inline void clear_has_tts_metadata();

  friend class ::google::protobuf_inworld::internal::TcParser;
  static const ::google::protobuf_inworld::internal::TcParseTable<
      4, 11, 2,
      79, 7>
      _table_;
  friend class ::google::protobuf_inworld::MessageLite;
  friend class ::google::protobuf_inworld::Arena;
  template <typename T>
  friend class ::google::protobuf_inworld::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_inworld::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena);
        inline explicit Impl_(::google::protobuf_inworld::internal::InternalVisibility visibility,
                              ::google::protobuf_inworld::Arena* arena, const Impl_& from);
    ::google::protobuf_inworld::internal::MapField<Voice_PhonemesOverridesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf_inworld::internal::WireFormatLite::TYPE_STRING>
        phonemes_overrides_;
    ::google::protobuf_inworld::internal::ArenaStringPtr basename_;
    ::google::protobuf_inworld::internal::ArenaStringPtr language_code_;
    int tts_type_;
    int gender_;
    double pitch_;
    double speaking_rate_;
    double robotic_voice_filter_level_;
    int age_;
    int language_;
    union TtsMetadataUnion {
      constexpr TtsMetadataUnion() : _constinit_{} {}
        ::google::protobuf_inworld::internal::ConstantInitialized _constinit_;
      ::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata_;
    } tts_metadata_;
    mutable ::google::protobuf_inworld::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fvoices_2fvoices_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Voice_ElevenLabsMetadata

// string voice_id = 1;
inline void Voice_ElevenLabsMetadata::clear_voice_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voice_id_.ClearToEmpty();
}
inline const std::string& Voice_ElevenLabsMetadata::voice_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id)
  return _internal_voice_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Voice_ElevenLabsMetadata::set_voice_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voice_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id)
}
inline std::string* Voice_ElevenLabsMetadata::mutable_voice_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_voice_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id)
  return _s;
}
inline const std::string& Voice_ElevenLabsMetadata::_internal_voice_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voice_id_.Get();
}
inline void Voice_ElevenLabsMetadata::_internal_set_voice_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voice_id_.Set(value, GetArena());
}
inline std::string* Voice_ElevenLabsMetadata::_internal_mutable_voice_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.voice_id_.Mutable( GetArena());
}
inline std::string* Voice_ElevenLabsMetadata::release_voice_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id)
  return _impl_.voice_id_.Release();
}
inline void Voice_ElevenLabsMetadata::set_allocated_voice_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voice_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voice_id_.IsDefault()) {
          _impl_.voice_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id)
}

// -------------------------------------------------------------------

// Voice

// string baseName = 1;
inline void Voice::clear_basename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basename_.ClearToEmpty();
}
inline const std::string& Voice::basename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.baseName)
  return _internal_basename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Voice::set_basename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.baseName)
}
inline std::string* Voice::mutable_basename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basename();
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.Voice.baseName)
  return _s;
}
inline const std::string& Voice::_internal_basename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basename_.Get();
}
inline void Voice::_internal_set_basename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basename_.Set(value, GetArena());
}
inline std::string* Voice::_internal_mutable_basename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basename_.Mutable( GetArena());
}
inline std::string* Voice::release_basename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.voices.Voice.baseName)
  return _impl_.basename_.Release();
}
inline void Voice::set_allocated_basename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basename_.IsDefault()) {
          _impl_.basename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.Voice.baseName)
}

// .ai.inworld.voices.TTSType tts_type = 2;
inline void Voice::clear_tts_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tts_type_ = 0;
}
inline ::ai::inworld::voices::TTSType Voice::tts_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.tts_type)
  return _internal_tts_type();
}
inline void Voice::set_tts_type(::ai::inworld::voices::TTSType value) {
  _internal_set_tts_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.tts_type)
}
inline ::ai::inworld::voices::TTSType Voice::_internal_tts_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::voices::TTSType>(_impl_.tts_type_);
}
inline void Voice::_internal_set_tts_type(::ai::inworld::voices::TTSType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tts_type_ = value;
}

// .ai.inworld.voices.Gender gender = 3;
inline void Voice::clear_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = 0;
}
inline ::ai::inworld::voices::Gender Voice::gender() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.gender)
  return _internal_gender();
}
inline void Voice::set_gender(::ai::inworld::voices::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.gender)
}
inline ::ai::inworld::voices::Gender Voice::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::voices::Gender>(_impl_.gender_);
}
inline void Voice::_internal_set_gender(::ai::inworld::voices::Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// double pitch = 4;
inline void Voice::clear_pitch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_ = 0;
}
inline double Voice::pitch() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.pitch)
  return _internal_pitch();
}
inline void Voice::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.pitch)
}
inline double Voice::_internal_pitch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_;
}
inline void Voice::_internal_set_pitch(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_ = value;
}

// double speaking_rate = 5;
inline void Voice::clear_speaking_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.speaking_rate_ = 0;
}
inline double Voice::speaking_rate() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.speaking_rate)
  return _internal_speaking_rate();
}
inline void Voice::set_speaking_rate(double value) {
  _internal_set_speaking_rate(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.speaking_rate)
}
inline double Voice::_internal_speaking_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speaking_rate_;
}
inline void Voice::_internal_set_speaking_rate(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speaking_rate_ = value;
}

// double robotic_voice_filter_level = 6;
inline void Voice::clear_robotic_voice_filter_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robotic_voice_filter_level_ = 0;
}
inline double Voice::robotic_voice_filter_level() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.robotic_voice_filter_level)
  return _internal_robotic_voice_filter_level();
}
inline void Voice::set_robotic_voice_filter_level(double value) {
  _internal_set_robotic_voice_filter_level(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.robotic_voice_filter_level)
}
inline double Voice::_internal_robotic_voice_filter_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robotic_voice_filter_level_;
}
inline void Voice::_internal_set_robotic_voice_filter_level(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robotic_voice_filter_level_ = value;
}

// map<string, string> phonemes_overrides = 7;
inline int Voice::_internal_phonemes_overrides_size() const {
  return _internal_phonemes_overrides().size();
}
inline int Voice::phonemes_overrides_size() const {
  return _internal_phonemes_overrides_size();
}
inline void Voice::clear_phonemes_overrides() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phonemes_overrides_.Clear();
}
inline const ::google::protobuf_inworld::Map<std::string, std::string>& Voice::_internal_phonemes_overrides() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phonemes_overrides_.GetMap();
}
inline const ::google::protobuf_inworld::Map<std::string, std::string>& Voice::phonemes_overrides() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai.inworld.voices.Voice.phonemes_overrides)
  return _internal_phonemes_overrides();
}
inline ::google::protobuf_inworld::Map<std::string, std::string>* Voice::_internal_mutable_phonemes_overrides() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.phonemes_overrides_.MutableMap();
}
inline ::google::protobuf_inworld::Map<std::string, std::string>* Voice::mutable_phonemes_overrides() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai.inworld.voices.Voice.phonemes_overrides)
  return _internal_mutable_phonemes_overrides();
}

// .ai.inworld.voices.Age age = 8;
inline void Voice::clear_age() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.age_ = 0;
}
inline ::ai::inworld::voices::Age Voice::age() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.age)
  return _internal_age();
}
inline void Voice::set_age(::ai::inworld::voices::Age value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.age)
}
inline ::ai::inworld::voices::Age Voice::_internal_age() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::voices::Age>(_impl_.age_);
}
inline void Voice::_internal_set_age(::ai::inworld::voices::Age value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.age_ = value;
}

// string language_code = 9 [deprecated = true];
inline void Voice::clear_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& Voice::language_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Voice::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.language_code)
}
inline std::string* Voice::mutable_language_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.Voice.language_code)
  return _s;
}
inline const std::string& Voice::_internal_language_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_code_.Get();
}
inline void Voice::_internal_set_language_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_code_.Set(value, GetArena());
}
inline std::string* Voice::_internal_mutable_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_code_.Mutable( GetArena());
}
inline std::string* Voice::release_language_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.voices.Voice.language_code)
  return _impl_.language_code_.Release();
}
inline void Voice::set_allocated_language_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_code_.IsDefault()) {
          _impl_.language_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.Voice.language_code)
}

// .ai.inworld.language_codes.LanguageCode language = 10;
inline void Voice::clear_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_ = 0;
}
inline ::ai::inworld::language_codes::LanguageCode Voice::language() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.language)
  return _internal_language();
}
inline void Voice::set_language(::ai::inworld::language_codes::LanguageCode value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.Voice.language)
}
inline ::ai::inworld::language_codes::LanguageCode Voice::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::language_codes::LanguageCode>(_impl_.language_);
}
inline void Voice::_internal_set_language(::ai::inworld::language_codes::LanguageCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_ = value;
}

// .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
inline bool Voice::has_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata;
}
inline bool Voice::_internal_has_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata;
}
inline void Voice::set_has_elevenlabs_metadata() {
  _impl_._oneof_case_[0] = kElevenlabsMetadata;
}
inline void Voice::clear_elevenlabs_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (tts_metadata_case() == kElevenlabsMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.tts_metadata_.elevenlabs_metadata_;
    }
    clear_has_tts_metadata();
  }
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* Voice::release_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_release:ai.inworld.voices.Voice.elevenlabs_metadata)
  if (tts_metadata_case() == kElevenlabsMetadata) {
    clear_has_tts_metadata();
    auto* temp = _impl_.tts_metadata_.elevenlabs_metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf_inworld::internal::DuplicateIfNonNull(temp);
    }
    _impl_.tts_metadata_.elevenlabs_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::voices::Voice_ElevenLabsMetadata& Voice::_internal_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata ? *_impl_.tts_metadata_.elevenlabs_metadata_ : reinterpret_cast<::ai::inworld::voices::Voice_ElevenLabsMetadata&>(::ai::inworld::voices::_Voice_ElevenLabsMetadata_default_instance_);
}
inline const ::ai::inworld::voices::Voice_ElevenLabsMetadata& Voice::elevenlabs_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.Voice.elevenlabs_metadata)
  return _internal_elevenlabs_metadata();
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* Voice::unsafe_arena_release_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.voices.Voice.elevenlabs_metadata)
  if (tts_metadata_case() == kElevenlabsMetadata) {
    clear_has_tts_metadata();
    auto* temp = _impl_.tts_metadata_.elevenlabs_metadata_;
    _impl_.tts_metadata_.elevenlabs_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Voice::unsafe_arena_set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_tts_metadata();
  if (value) {
    set_has_elevenlabs_metadata();
    _impl_.tts_metadata_.elevenlabs_metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.voices.Voice.elevenlabs_metadata)
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* Voice::_internal_mutable_elevenlabs_metadata() {
  if (tts_metadata_case() != kElevenlabsMetadata) {
    clear_tts_metadata();
    set_has_elevenlabs_metadata();
    _impl_.tts_metadata_.elevenlabs_metadata_ = CreateMaybeMessage<::ai::inworld::voices::Voice_ElevenLabsMetadata>(GetArena());
  }
  return _impl_.tts_metadata_.elevenlabs_metadata_;
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* Voice::mutable_elevenlabs_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* _msg = _internal_mutable_elevenlabs_metadata();
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.Voice.elevenlabs_metadata)
  return _msg;
}

inline bool Voice::has_tts_metadata() const {
  return tts_metadata_case() != TTS_METADATA_NOT_SET;
}
inline void Voice::clear_has_tts_metadata() {
  _impl_._oneof_case_[0] = TTS_METADATA_NOT_SET;
}
inline Voice::TtsMetadataCase Voice::tts_metadata_case() const {
  return Voice::TtsMetadataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace voices
}  // namespace inworld
}  // namespace ai


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ai::inworld::voices::Gender> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::voices::Gender>() {
  return ::ai::inworld::voices::Gender_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::voices::Age> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::voices::Age>() {
  return ::ai::inworld::voices::Age_descriptor();
}
template <>
struct is_proto_enum<::ai::inworld::voices::TTSType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ai::inworld::voices::TTSType>() {
  return ::ai::inworld::voices::TTSType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fvoices_2fvoices_2eproto_2epb_2eh
