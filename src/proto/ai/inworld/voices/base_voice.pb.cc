#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/voices/base_voice.proto

#include "ai/inworld/voices/base_voice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fvoices_2fvoices_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InworldV2Metadata_ai_2finworld_2fvoices_2fvoices_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fvoices_2fvoices_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_ElevenLabsMetadata_ai_2finworld_2fvoices_2fvoices_2eproto;
namespace ai {
namespace inworld {
namespace voices {
class BaseVoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseVoice> _instance;
} _BaseVoice_default_instance_;
}  // namespace voices
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::voices::_BaseVoice_default_instance_;
    new (ptr) ::ai::inworld::voices::BaseVoice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto}, {
      &scc_info_Voice_ElevenLabsMetadata_ai_2finworld_2fvoices_2fvoices_2eproto.base,
      &scc_info_InworldV2Metadata_ai_2finworld_2fvoices_2fvoices_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, language_codes_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, gender_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, natural_sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, age_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, languages_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::BaseVoice, tts_metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ai::inworld::voices::BaseVoice)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::voices::_BaseVoice_default_instance_),
};

const char descriptor_table_protodef_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ai/inworld/voices/base_voice.proto\022\021ai"
  ".inworld.voices\032.ai/inworld/language_cod"
  "es/language_codes.proto\032\036ai/inworld/voic"
  "es/voices.proto\"\205\003\n\tBaseVoice\022\032\n\016languag"
  "e_codes\030\001 \003(\tB\002\030\001\022\014\n\004name\030\002 \001(\t\022)\n\006gende"
  "r\030\003 \001(\0162\031.ai.inworld.voices.Gender\022!\n\031na"
  "tural_sample_rate_hertz\030\004 \001(\005\022#\n\003age\030\005 \001"
  "(\0162\026.ai.inworld.voices.Age\022:\n\tlanguages\030"
  "\006 \003(\0162\'.ai.inworld.language_codes.Langua"
  "geCode\022J\n\023elevenlabs_metadata\030d \001(\0132+.ai"
  ".inworld.voices.Voice.ElevenLabsMetadata"
  "H\000\022C\n\023inworld_v2_metadata\030e \001(\0132$.ai.inw"
  "orld.voices.InworldV2MetadataH\000B\016\n\014tts_m"
  "etadataB\214\001\n\024ai.inworld.BaseVoiceB\021BaseVo"
  "iceProtocolZMgithub.com/inworld-ai/inwor"
  "ld/serving/grpc-gateway/build/proto/engi"
  "ne/v1alpha\252\002\021Ai.Inworld.Voicesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_deps[2] = {
  &::descriptor_table_ai_2finworld_2flanguage_5fcodes_2flanguage_5fcodes_2eproto,
  &::descriptor_table_ai_2finworld_2fvoices_2fvoices_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_sccs[1] = {
  &scc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto = {
  false, false, descriptor_table_protodef_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto, "ai/inworld/voices/base_voice.proto", 678,
  &descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_once, descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_sccs, descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto::offsets,
  file_level_metadata_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto, 1, file_level_enum_descriptors_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto, file_level_service_descriptors_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto)), true);
namespace ai {
namespace inworld {
namespace voices {

// ===================================================================

class BaseVoice::_Internal {
 public:
  static const ::ai::inworld::voices::Voice_ElevenLabsMetadata& elevenlabs_metadata(const BaseVoice* msg);
  static const ::ai::inworld::voices::InworldV2Metadata& inworld_v2_metadata(const BaseVoice* msg);
};

const ::ai::inworld::voices::Voice_ElevenLabsMetadata&
BaseVoice::_Internal::elevenlabs_metadata(const BaseVoice* msg) {
  return *msg->tts_metadata_.elevenlabs_metadata_;
}
const ::ai::inworld::voices::InworldV2Metadata&
BaseVoice::_Internal::inworld_v2_metadata(const BaseVoice* msg) {
  return *msg->tts_metadata_.inworld_v2_metadata_;
}
void BaseVoice::set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tts_metadata();
  if (elevenlabs_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elevenlabs_metadata)->GetArena();
    if (message_arena != submessage_arena) {
      elevenlabs_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elevenlabs_metadata, submessage_arena);
    }
    set_has_elevenlabs_metadata();
    tts_metadata_.elevenlabs_metadata_ = elevenlabs_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.BaseVoice.elevenlabs_metadata)
}
void BaseVoice::clear_elevenlabs_metadata() {
  if (_internal_has_elevenlabs_metadata()) {
    if (GetArena() == nullptr) {
      delete tts_metadata_.elevenlabs_metadata_;
    }
    clear_has_tts_metadata();
  }
}
void BaseVoice::set_allocated_inworld_v2_metadata(::ai::inworld::voices::InworldV2Metadata* inworld_v2_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tts_metadata();
  if (inworld_v2_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inworld_v2_metadata)->GetArena();
    if (message_arena != submessage_arena) {
      inworld_v2_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inworld_v2_metadata, submessage_arena);
    }
    set_has_inworld_v2_metadata();
    tts_metadata_.inworld_v2_metadata_ = inworld_v2_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.BaseVoice.inworld_v2_metadata)
}
void BaseVoice::clear_inworld_v2_metadata() {
  if (_internal_has_inworld_v2_metadata()) {
    if (GetArena() == nullptr) {
      delete tts_metadata_.inworld_v2_metadata_;
    }
    clear_has_tts_metadata();
  }
}
BaseVoice::BaseVoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  language_codes_(arena),
  languages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.voices.BaseVoice)
}
BaseVoice::BaseVoice(const BaseVoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      language_codes_(from.language_codes_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  clear_has_tts_metadata();
  switch (from.tts_metadata_case()) {
    case kElevenlabsMetadata: {
      _internal_mutable_elevenlabs_metadata()->::ai::inworld::voices::Voice_ElevenLabsMetadata::MergeFrom(from._internal_elevenlabs_metadata());
      break;
    }
    case kInworldV2Metadata: {
      _internal_mutable_inworld_v2_metadata()->::ai::inworld::voices::InworldV2Metadata::MergeFrom(from._internal_inworld_v2_metadata());
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.voices.BaseVoice)
}

void BaseVoice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  clear_has_tts_metadata();
}

BaseVoice::~BaseVoice() {
  // @@protoc_insertion_point(destructor:ai.inworld.voices.BaseVoice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseVoice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_tts_metadata()) {
    clear_tts_metadata();
  }
}

void BaseVoice::ArenaDtor(void* object) {
  BaseVoice* _this = reinterpret_cast< BaseVoice* >(object);
  (void)_this;
}
void BaseVoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseVoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseVoice& BaseVoice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto.base);
  return *internal_default_instance();
}


void BaseVoice::clear_tts_metadata() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.voices.BaseVoice)
  switch (tts_metadata_case()) {
    case kElevenlabsMetadata: {
      if (GetArena() == nullptr) {
        delete tts_metadata_.elevenlabs_metadata_;
      }
      break;
    }
    case kInworldV2Metadata: {
      if (GetArena() == nullptr) {
        delete tts_metadata_.inworld_v2_metadata_;
      }
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TTS_METADATA_NOT_SET;
}


void BaseVoice::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.voices.BaseVoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_codes_.Clear();
  languages_.Clear();
  name_.ClearToEmpty();
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  clear_tts_metadata();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseVoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string language_codes = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_language_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.voices.BaseVoice.language_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.voices.BaseVoice.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Gender gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::ai::inworld::voices::Gender>(val));
        } else goto handle_unusual;
        continue;
      // int32 natural_sample_rate_hertz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          natural_sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Age age = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_age(static_cast<::ai::inworld::voices::Age>(val));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.language_codes.LanguageCode languages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_languages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_languages(static_cast<::ai::inworld::language_codes::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_elevenlabs_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.InworldV2Metadata inworld_v2_metadata = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inworld_v2_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseVoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.voices.BaseVoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string language_codes = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_language_codes_size(); i < n; i++) {
    const auto& s = this->_internal_language_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.voices.BaseVoice.language_codes");
    target = stream->WriteString(1, s, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.voices.BaseVoice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .ai.inworld.voices.Gender gender = 3;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // int32 natural_sample_rate_hertz = 4;
  if (this->natural_sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_natural_sample_rate_hertz(), target);
  }

  // .ai.inworld.voices.Age age = 5;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_age(), target);
  }

  // repeated .ai.inworld.language_codes.LanguageCode languages = 6;
  {
    int byte_size = _languages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, languages_, byte_size, target);
    }
  }

  // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
  if (_internal_has_elevenlabs_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::elevenlabs_metadata(this), target, stream);
  }

  // .ai.inworld.voices.InworldV2Metadata inworld_v2_metadata = 101;
  if (_internal_has_inworld_v2_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::inworld_v2_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.voices.BaseVoice)
  return target;
}

size_t BaseVoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.voices.BaseVoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string language_codes = 1 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(language_codes_.size());
  for (int i = 0, n = language_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      language_codes_.Get(i));
  }

  // repeated .ai.inworld.language_codes.LanguageCode languages = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_languages_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_languages(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _languages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.voices.Gender gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // int32 natural_sample_rate_hertz = 4;
  if (this->natural_sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_natural_sample_rate_hertz());
  }

  // .ai.inworld.voices.Age age = 5;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_age());
  }

  switch (tts_metadata_case()) {
    // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
    case kElevenlabsMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tts_metadata_.elevenlabs_metadata_);
      break;
    }
    // .ai.inworld.voices.InworldV2Metadata inworld_v2_metadata = 101;
    case kInworldV2Metadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tts_metadata_.inworld_v2_metadata_);
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseVoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.voices.BaseVoice)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseVoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseVoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.voices.BaseVoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.voices.BaseVoice)
    MergeFrom(*source);
  }
}

void BaseVoice::MergeFrom(const BaseVoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.voices.BaseVoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  language_codes_.MergeFrom(from.language_codes_);
  languages_.MergeFrom(from.languages_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.natural_sample_rate_hertz() != 0) {
    _internal_set_natural_sample_rate_hertz(from._internal_natural_sample_rate_hertz());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
  switch (from.tts_metadata_case()) {
    case kElevenlabsMetadata: {
      _internal_mutable_elevenlabs_metadata()->::ai::inworld::voices::Voice_ElevenLabsMetadata::MergeFrom(from._internal_elevenlabs_metadata());
      break;
    }
    case kInworldV2Metadata: {
      _internal_mutable_inworld_v2_metadata()->::ai::inworld::voices::InworldV2Metadata::MergeFrom(from._internal_inworld_v2_metadata());
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
}

void BaseVoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.voices.BaseVoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseVoice::CopyFrom(const BaseVoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.voices.BaseVoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseVoice::IsInitialized() const {
  return true;
}

void BaseVoice::InternalSwap(BaseVoice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  language_codes_.InternalSwap(&other->language_codes_);
  languages_.InternalSwap(&other->languages_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseVoice, age_)
      + sizeof(BaseVoice::age_)
      - PROTOBUF_FIELD_OFFSET(BaseVoice, gender_)>(
          reinterpret_cast<char*>(&gender_),
          reinterpret_cast<char*>(&other->gender_));
  swap(tts_metadata_, other->tts_metadata_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseVoice::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace voices
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::voices::BaseVoice* Arena::CreateMaybeMessage< ::ai::inworld::voices::BaseVoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::voices::BaseVoice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
