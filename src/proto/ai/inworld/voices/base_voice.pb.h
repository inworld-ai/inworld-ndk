// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/voices/base_voice.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "ai/inworld/language_codes/language_codes.pb.h"
#include "ai/inworld/voices/voices.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto;
namespace ai {
namespace inworld {
namespace voices {
class BaseVoice;
struct BaseVoiceDefaultTypeInternal;
extern BaseVoiceDefaultTypeInternal _BaseVoice_default_instance_;
}  // namespace voices
}  // namespace inworld
}  // namespace ai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai {
namespace inworld {
namespace voices {

// ===================================================================


// -------------------------------------------------------------------

class BaseVoice final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ai.inworld.voices.BaseVoice) */ {
 public:
  inline BaseVoice() : BaseVoice(nullptr) {}
  ~BaseVoice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaseVoice(::google::protobuf::internal::ConstantInitialized);

  inline BaseVoice(const BaseVoice& from)
      : BaseVoice(nullptr, from) {}
  BaseVoice(BaseVoice&& from) noexcept
    : BaseVoice() {
    *this = ::std::move(from);
  }

  inline BaseVoice& operator=(const BaseVoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseVoice& operator=(BaseVoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseVoice& default_instance() {
    return *internal_default_instance();
  }
  enum TtsMetadataCase {
    kElevenlabsMetadata = 100,
    TTS_METADATA_NOT_SET = 0,
  };

  static inline const BaseVoice* internal_default_instance() {
    return reinterpret_cast<const BaseVoice*>(
               &_BaseVoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseVoice& a, BaseVoice& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseVoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseVoice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseVoice* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseVoice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BaseVoice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BaseVoice& from) {
    BaseVoice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BaseVoice* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ai.inworld.voices.BaseVoice";
  }
  protected:
  explicit BaseVoice(::google::protobuf::Arena* arena);
  BaseVoice(::google::protobuf::Arena* arena, const BaseVoice& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 1,
    kLanguagesFieldNumber = 6,
    kNameFieldNumber = 2,
    kGenderFieldNumber = 3,
    kNaturalSampleRateHertzFieldNumber = 4,
    kAgeFieldNumber = 5,
    kElevenlabsMetadataFieldNumber = 100,
  };
  // repeated string language_codes = 1 [deprecated = true];
  [[deprecated]]  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;

  public:
  [[deprecated]]  void clear_language_codes() ;
  [[deprecated]] const std::string& language_codes(int index) const;
  [[deprecated]] std::string* mutable_language_codes(int index);
  [[deprecated]] void set_language_codes(int index, const std::string& value);
  [[deprecated]] void set_language_codes(int index, std::string&& value);
  [[deprecated]] void set_language_codes(int index, const char* value);
  [[deprecated]] void set_language_codes(int index, const char* value, std::size_t size);
  [[deprecated]] void set_language_codes(int index, absl::string_view value);
  [[deprecated]] std::string* add_language_codes();
  [[deprecated]] void add_language_codes(const std::string& value);
  [[deprecated]] void add_language_codes(std::string&& value);
  [[deprecated]] void add_language_codes(const char* value);
  [[deprecated]] void add_language_codes(const char* value, std::size_t size);
  [[deprecated]] void add_language_codes(absl::string_view value);
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<std::string>& language_codes() const;
  [[deprecated]] ::google::protobuf::RepeatedPtrField<std::string>* mutable_language_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_language_codes();

  public:
  // repeated .ai.inworld.language_codes.LanguageCode languages = 6;
  int languages_size() const;
  private:
  int _internal_languages_size() const;

  public:
  void clear_languages() ;
  public:
  ::ai::inworld::language_codes::LanguageCode languages(int index) const;
  void set_languages(int index, ::ai::inworld::language_codes::LanguageCode value);
  void add_languages(::ai::inworld::language_codes::LanguageCode value);
  const ::google::protobuf::RepeatedField<int>& languages() const;
  ::google::protobuf::RepeatedField<int>* mutable_languages();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_languages() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_languages();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .ai.inworld.voices.Gender gender = 3;
  void clear_gender() ;
  ::ai::inworld::voices::Gender gender() const;
  void set_gender(::ai::inworld::voices::Gender value);

  private:
  ::ai::inworld::voices::Gender _internal_gender() const;
  void _internal_set_gender(::ai::inworld::voices::Gender value);

  public:
  // int32 natural_sample_rate_hertz = 4;
  void clear_natural_sample_rate_hertz() ;
  ::int32_t natural_sample_rate_hertz() const;
  void set_natural_sample_rate_hertz(::int32_t value);

  private:
  ::int32_t _internal_natural_sample_rate_hertz() const;
  void _internal_set_natural_sample_rate_hertz(::int32_t value);

  public:
  // .ai.inworld.voices.Age age = 5;
  void clear_age() ;
  ::ai::inworld::voices::Age age() const;
  void set_age(::ai::inworld::voices::Age value);

  private:
  ::ai::inworld::voices::Age _internal_age() const;
  void _internal_set_age(::ai::inworld::voices::Age value);

  public:
  // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
  bool has_elevenlabs_metadata() const;
  private:
  bool _internal_has_elevenlabs_metadata() const;

  public:
  void clear_elevenlabs_metadata() ;
  const ::ai::inworld::voices::Voice_ElevenLabsMetadata& elevenlabs_metadata() const;
  PROTOBUF_NODISCARD ::ai::inworld::voices::Voice_ElevenLabsMetadata* release_elevenlabs_metadata();
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* mutable_elevenlabs_metadata();
  void set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* value);
  void unsafe_arena_set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* value);
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* unsafe_arena_release_elevenlabs_metadata();

  private:
  const ::ai::inworld::voices::Voice_ElevenLabsMetadata& _internal_elevenlabs_metadata() const;
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* _internal_mutable_elevenlabs_metadata();

  public:
  void clear_tts_metadata();
  TtsMetadataCase tts_metadata_case() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.voices.BaseVoice)
 private:
  class _Internal;
  void set_has_elevenlabs_metadata();

  inline bool has_tts_metadata() const;
  inline void clear_has_tts_metadata();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      54, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> language_codes_;
    ::google::protobuf::RepeatedField<int> languages_;
    mutable ::google::protobuf::internal::CachedSize _languages_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int gender_;
    ::int32_t natural_sample_rate_hertz_;
    int age_;
    union TtsMetadataUnion {
      constexpr TtsMetadataUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata_;
    } tts_metadata_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BaseVoice

// repeated string language_codes = 1 [deprecated = true];
inline int BaseVoice::_internal_language_codes_size() const {
  return _internal_language_codes().size();
}
inline int BaseVoice::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void BaseVoice::clear_language_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_codes_.Clear();
}
inline std::string* BaseVoice::add_language_codes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_language_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.voices.BaseVoice.language_codes)
  return _s;
}
inline const std::string& BaseVoice::language_codes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.language_codes)
  return _internal_language_codes().Get(index);
}
inline std::string* BaseVoice::mutable_language_codes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.BaseVoice.language_codes)
  return _internal_mutable_language_codes()->Mutable(index);
}
inline void BaseVoice::set_language_codes(int index, const std::string& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::set_language_codes(int index, std::string&& value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::set_language_codes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_language_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::set_language_codes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_language_codes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::set_language_codes(int index, absl::string_view value) {
  _internal_mutable_language_codes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::add_language_codes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::add_language_codes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::add_language_codes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::add_language_codes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.voices.BaseVoice.language_codes)
}
inline void BaseVoice::add_language_codes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_language_codes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ai.inworld.voices.BaseVoice.language_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BaseVoice::language_codes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.voices.BaseVoice.language_codes)
  return _internal_language_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BaseVoice::mutable_language_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.voices.BaseVoice.language_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_language_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BaseVoice::_internal_language_codes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BaseVoice::_internal_mutable_language_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.language_codes_;
}

// string name = 2;
inline void BaseVoice::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BaseVoice::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseVoice::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.name)
}
inline std::string* BaseVoice::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.BaseVoice.name)
  return _s;
}
inline const std::string& BaseVoice::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void BaseVoice::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* BaseVoice::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* BaseVoice::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ai.inworld.voices.BaseVoice.name)
  return _impl_.name_.Release();
}
inline void BaseVoice::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.BaseVoice.name)
}

// .ai.inworld.voices.Gender gender = 3;
inline void BaseVoice::clear_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = 0;
}
inline ::ai::inworld::voices::Gender BaseVoice::gender() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.gender)
  return _internal_gender();
}
inline void BaseVoice::set_gender(::ai::inworld::voices::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.gender)
}
inline ::ai::inworld::voices::Gender BaseVoice::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::voices::Gender>(_impl_.gender_);
}
inline void BaseVoice::_internal_set_gender(::ai::inworld::voices::Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// int32 natural_sample_rate_hertz = 4;
inline void BaseVoice::clear_natural_sample_rate_hertz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.natural_sample_rate_hertz_ = 0;
}
inline ::int32_t BaseVoice::natural_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.natural_sample_rate_hertz)
  return _internal_natural_sample_rate_hertz();
}
inline void BaseVoice::set_natural_sample_rate_hertz(::int32_t value) {
  _internal_set_natural_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.natural_sample_rate_hertz)
}
inline ::int32_t BaseVoice::_internal_natural_sample_rate_hertz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.natural_sample_rate_hertz_;
}
inline void BaseVoice::_internal_set_natural_sample_rate_hertz(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.natural_sample_rate_hertz_ = value;
}

// .ai.inworld.voices.Age age = 5;
inline void BaseVoice::clear_age() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.age_ = 0;
}
inline ::ai::inworld::voices::Age BaseVoice::age() const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.age)
  return _internal_age();
}
inline void BaseVoice::set_age(::ai::inworld::voices::Age value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.age)
}
inline ::ai::inworld::voices::Age BaseVoice::_internal_age() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ai::inworld::voices::Age>(_impl_.age_);
}
inline void BaseVoice::_internal_set_age(::ai::inworld::voices::Age value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.age_ = value;
}

// repeated .ai.inworld.language_codes.LanguageCode languages = 6;
inline int BaseVoice::_internal_languages_size() const {
  return _internal_languages().size();
}
inline int BaseVoice::languages_size() const {
  return _internal_languages_size();
}
inline void BaseVoice::clear_languages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.languages_.Clear();
}
inline ::ai::inworld::language_codes::LanguageCode BaseVoice::languages(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.languages)
  return static_cast<::ai::inworld::language_codes::LanguageCode>(_internal_languages().Get(index));
}
inline void BaseVoice::set_languages(int index, ::ai::inworld::language_codes::LanguageCode value) {
  _internal_mutable_languages()->Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.voices.BaseVoice.languages)
}
inline void BaseVoice::add_languages(::ai::inworld::language_codes::LanguageCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_languages()->Add(value);
  // @@protoc_insertion_point(field_add:ai.inworld.voices.BaseVoice.languages)
}
inline const ::google::protobuf::RepeatedField<int>& BaseVoice::languages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ai.inworld.voices.BaseVoice.languages)
  return _internal_languages();
}
inline ::google::protobuf::RepeatedField<int>* BaseVoice::mutable_languages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.voices.BaseVoice.languages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_languages();
}
inline const ::google::protobuf::RepeatedField<int>& BaseVoice::_internal_languages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.languages_;
}
inline ::google::protobuf::RepeatedField<int>* BaseVoice::_internal_mutable_languages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.languages_;
}

// .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
inline bool BaseVoice::has_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata;
}
inline bool BaseVoice::_internal_has_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata;
}
inline void BaseVoice::set_has_elevenlabs_metadata() {
  _impl_._oneof_case_[0] = kElevenlabsMetadata;
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* BaseVoice::release_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_release:ai.inworld.voices.BaseVoice.elevenlabs_metadata)
  if (tts_metadata_case() == kElevenlabsMetadata) {
    clear_has_tts_metadata();
    auto* temp = _impl_.tts_metadata_.elevenlabs_metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.tts_metadata_.elevenlabs_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::voices::Voice_ElevenLabsMetadata& BaseVoice::_internal_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata ? *_impl_.tts_metadata_.elevenlabs_metadata_ : reinterpret_cast<::ai::inworld::voices::Voice_ElevenLabsMetadata&>(::ai::inworld::voices::_Voice_ElevenLabsMetadata_default_instance_);
}
inline const ::ai::inworld::voices::Voice_ElevenLabsMetadata& BaseVoice::elevenlabs_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai.inworld.voices.BaseVoice.elevenlabs_metadata)
  return _internal_elevenlabs_metadata();
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* BaseVoice::unsafe_arena_release_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.voices.BaseVoice.elevenlabs_metadata)
  if (tts_metadata_case() == kElevenlabsMetadata) {
    clear_has_tts_metadata();
    auto* temp = _impl_.tts_metadata_.elevenlabs_metadata_;
    _impl_.tts_metadata_.elevenlabs_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BaseVoice::unsafe_arena_set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_tts_metadata();
  if (value) {
    set_has_elevenlabs_metadata();
    _impl_.tts_metadata_.elevenlabs_metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.voices.BaseVoice.elevenlabs_metadata)
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* BaseVoice::_internal_mutable_elevenlabs_metadata() {
  if (tts_metadata_case() != kElevenlabsMetadata) {
    clear_tts_metadata();
    set_has_elevenlabs_metadata();
    _impl_.tts_metadata_.elevenlabs_metadata_ = CreateMaybeMessage<::ai::inworld::voices::Voice_ElevenLabsMetadata>(GetArena());
  }
  return _impl_.tts_metadata_.elevenlabs_metadata_;
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* BaseVoice::mutable_elevenlabs_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* _msg = _internal_mutable_elevenlabs_metadata();
  // @@protoc_insertion_point(field_mutable:ai.inworld.voices.BaseVoice.elevenlabs_metadata)
  return _msg;
}

inline bool BaseVoice::has_tts_metadata() const {
  return tts_metadata_case() != TTS_METADATA_NOT_SET;
}
inline void BaseVoice::clear_has_tts_metadata() {
  _impl_._oneof_case_[0] = TTS_METADATA_NOT_SET;
}
inline BaseVoice::TtsMetadataCase BaseVoice::tts_metadata_case() const {
  return BaseVoice::TtsMetadataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace voices
}  // namespace inworld
}  // namespace ai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto_2epb_2eh
