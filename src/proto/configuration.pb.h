// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_configuration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_configuration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_configuration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_configuration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_configuration_2eproto;
namespace ai {
namespace inworld {
namespace engine {
namespace configuration {
class CapabilitiesConfiguration;
class CapabilitiesConfigurationDefaultTypeInternal;
extern CapabilitiesConfigurationDefaultTypeInternal _CapabilitiesConfiguration_default_instance_;
class ClientConfiguration;
class ClientConfigurationDefaultTypeInternal;
extern ClientConfigurationDefaultTypeInternal _ClientConfiguration_default_instance_;
class SessionConfiguration;
class SessionConfigurationDefaultTypeInternal;
extern SessionConfigurationDefaultTypeInternal _SessionConfiguration_default_instance_;
class UserConfiguration;
class UserConfigurationDefaultTypeInternal;
extern UserConfigurationDefaultTypeInternal _UserConfiguration_default_instance_;
class UserConfiguration_UserSettings;
class UserConfiguration_UserSettingsDefaultTypeInternal;
extern UserConfiguration_UserSettingsDefaultTypeInternal _UserConfiguration_UserSettings_default_instance_;
class UserConfiguration_UserSettings_PlayerProfile;
class UserConfiguration_UserSettings_PlayerProfileDefaultTypeInternal;
extern UserConfiguration_UserSettings_PlayerProfileDefaultTypeInternal _UserConfiguration_UserSettings_PlayerProfile_default_instance_;
class UserConfiguration_UserSettings_PlayerProfile_PlayerField;
class UserConfiguration_UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal;
extern UserConfiguration_UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal _UserConfiguration_UserSettings_PlayerProfile_PlayerField_default_instance_;
}  // namespace configuration
}  // namespace engine
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::engine::configuration::CapabilitiesConfiguration* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::CapabilitiesConfiguration>(Arena*);
template<> ::ai::inworld::engine::configuration::ClientConfiguration* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::ClientConfiguration>(Arena*);
template<> ::ai::inworld::engine::configuration::SessionConfiguration* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::SessionConfiguration>(Arena*);
template<> ::ai::inworld::engine::configuration::UserConfiguration* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration>(Arena*);
template<> ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings>(Arena*);
template<> ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile>(Arena*);
template<> ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* Arena::CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace engine {
namespace configuration {

// ===================================================================

class CapabilitiesConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.CapabilitiesConfiguration) */ {
 public:
  inline CapabilitiesConfiguration() : CapabilitiesConfiguration(nullptr) {}
  virtual ~CapabilitiesConfiguration();

  CapabilitiesConfiguration(const CapabilitiesConfiguration& from);
  CapabilitiesConfiguration(CapabilitiesConfiguration&& from) noexcept
    : CapabilitiesConfiguration() {
    *this = ::std::move(from);
  }

  inline CapabilitiesConfiguration& operator=(const CapabilitiesConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesConfiguration& operator=(CapabilitiesConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapabilitiesConfiguration& default_instance();

  static inline const CapabilitiesConfiguration* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesConfiguration*>(
               &_CapabilitiesConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CapabilitiesConfiguration& a, CapabilitiesConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilitiesConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapabilitiesConfiguration* New() const final {
    return CreateMaybeMessage<CapabilitiesConfiguration>(nullptr);
  }

  CapabilitiesConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapabilitiesConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapabilitiesConfiguration& from);
  void MergeFrom(const CapabilitiesConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilitiesConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.CapabilitiesConfiguration";
  }
  protected:
  explicit CapabilitiesConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kInterruptionsFieldNumber = 3,
    kEmotionsFieldNumber = 4,
    kTurnBasedSttFieldNumber = 5,
    kEmotionStreamingFieldNumber = 6,
    kSilenceEventsFieldNumber = 7,
    kPhonemeInfoFieldNumber = 8,
    kContinuationFieldNumber = 9,
    kSessionCancellationFieldNumber = 10,
    kNarratedActionsFieldNumber = 11,
    kRegenerateResponseFieldNumber = 12,
    kRelationsFieldNumber = 13,
    kDebugInfoFieldNumber = 14,
    kTtsMp3FieldNumber = 15,
  };
  // bool audio = 1;
  void clear_audio();
  bool audio() const;
  void set_audio(bool value);
  private:
  bool _internal_audio() const;
  void _internal_set_audio(bool value);
  public:

  // bool interruptions = 3;
  void clear_interruptions();
  bool interruptions() const;
  void set_interruptions(bool value);
  private:
  bool _internal_interruptions() const;
  void _internal_set_interruptions(bool value);
  public:

  // bool emotions = 4;
  void clear_emotions();
  bool emotions() const;
  void set_emotions(bool value);
  private:
  bool _internal_emotions() const;
  void _internal_set_emotions(bool value);
  public:

  // bool turn_based_stt = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_turn_based_stt();
  PROTOBUF_DEPRECATED bool turn_based_stt() const;
  PROTOBUF_DEPRECATED void set_turn_based_stt(bool value);
  private:
  bool _internal_turn_based_stt() const;
  void _internal_set_turn_based_stt(bool value);
  public:

  // bool emotion_streaming = 6;
  void clear_emotion_streaming();
  bool emotion_streaming() const;
  void set_emotion_streaming(bool value);
  private:
  bool _internal_emotion_streaming() const;
  void _internal_set_emotion_streaming(bool value);
  public:

  // bool silence_events = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_silence_events();
  PROTOBUF_DEPRECATED bool silence_events() const;
  PROTOBUF_DEPRECATED void set_silence_events(bool value);
  private:
  bool _internal_silence_events() const;
  void _internal_set_silence_events(bool value);
  public:

  // bool phoneme_info = 8;
  void clear_phoneme_info();
  bool phoneme_info() const;
  void set_phoneme_info(bool value);
  private:
  bool _internal_phoneme_info() const;
  void _internal_set_phoneme_info(bool value);
  public:

  // bool continuation = 9;
  void clear_continuation();
  bool continuation() const;
  void set_continuation(bool value);
  private:
  bool _internal_continuation() const;
  void _internal_set_continuation(bool value);
  public:

  // bool session_cancellation = 10;
  void clear_session_cancellation();
  bool session_cancellation() const;
  void set_session_cancellation(bool value);
  private:
  bool _internal_session_cancellation() const;
  void _internal_set_session_cancellation(bool value);
  public:

  // bool narrated_actions = 11;
  void clear_narrated_actions();
  bool narrated_actions() const;
  void set_narrated_actions(bool value);
  private:
  bool _internal_narrated_actions() const;
  void _internal_set_narrated_actions(bool value);
  public:

  // bool regenerate_response = 12;
  void clear_regenerate_response();
  bool regenerate_response() const;
  void set_regenerate_response(bool value);
  private:
  bool _internal_regenerate_response() const;
  void _internal_set_regenerate_response(bool value);
  public:

  // bool relations = 13;
  void clear_relations();
  bool relations() const;
  void set_relations(bool value);
  private:
  bool _internal_relations() const;
  void _internal_set_relations(bool value);
  public:

  // bool debug_info = 14;
  void clear_debug_info();
  bool debug_info() const;
  void set_debug_info(bool value);
  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);
  public:

  // bool tts_mp3 = 15;
  void clear_tts_mp3();
  bool tts_mp3() const;
  void set_tts_mp3(bool value);
  private:
  bool _internal_tts_mp3() const;
  void _internal_set_tts_mp3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.CapabilitiesConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool audio_;
  bool interruptions_;
  bool emotions_;
  bool turn_based_stt_;
  bool emotion_streaming_;
  bool silence_events_;
  bool phoneme_info_;
  bool continuation_;
  bool session_cancellation_;
  bool narrated_actions_;
  bool regenerate_response_;
  bool relations_;
  bool debug_info_;
  bool tts_mp3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// -------------------------------------------------------------------

class UserConfiguration_UserSettings_PlayerProfile_PlayerField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField) */ {
 public:
  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField() : UserConfiguration_UserSettings_PlayerProfile_PlayerField(nullptr) {}
  virtual ~UserConfiguration_UserSettings_PlayerProfile_PlayerField();

  UserConfiguration_UserSettings_PlayerProfile_PlayerField(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from);
  UserConfiguration_UserSettings_PlayerProfile_PlayerField(UserConfiguration_UserSettings_PlayerProfile_PlayerField&& from) noexcept
    : UserConfiguration_UserSettings_PlayerProfile_PlayerField() {
    *this = ::std::move(from);
  }

  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField& operator=(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField& operator=(UserConfiguration_UserSettings_PlayerProfile_PlayerField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserConfiguration_UserSettings_PlayerProfile_PlayerField& default_instance();

  static inline const UserConfiguration_UserSettings_PlayerProfile_PlayerField* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration_UserSettings_PlayerProfile_PlayerField*>(
               &_UserConfiguration_UserSettings_PlayerProfile_PlayerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserConfiguration_UserSettings_PlayerProfile_PlayerField& a, UserConfiguration_UserSettings_PlayerProfile_PlayerField& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration_UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration_UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConfiguration_UserSettings_PlayerProfile_PlayerField* New() const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings_PlayerProfile_PlayerField>(nullptr);
  }

  UserConfiguration_UserSettings_PlayerProfile_PlayerField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings_PlayerProfile_PlayerField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from);
  void MergeFrom(const UserConfiguration_UserSettings_PlayerProfile_PlayerField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserConfiguration_UserSettings_PlayerProfile_PlayerField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField";
  }
  protected:
  explicit UserConfiguration_UserSettings_PlayerProfile_PlayerField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIdFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // string field_id = 1;
  void clear_field_id();
  const std::string& field_id() const;
  void set_field_id(const std::string& value);
  void set_field_id(std::string&& value);
  void set_field_id(const char* value);
  void set_field_id(const char* value, size_t size);
  std::string* mutable_field_id();
  std::string* release_field_id();
  void set_allocated_field_id(std::string* field_id);
  private:
  const std::string& _internal_field_id() const;
  void _internal_set_field_id(const std::string& value);
  std::string* _internal_mutable_field_id();
  public:

  // string field_value = 2;
  void clear_field_value();
  const std::string& field_value() const;
  void set_field_value(const std::string& value);
  void set_field_value(std::string&& value);
  void set_field_value(const char* value);
  void set_field_value(const char* value, size_t size);
  std::string* mutable_field_value();
  std::string* release_field_value();
  void set_allocated_field_value(std::string* field_value);
  private:
  const std::string& _internal_field_value() const;
  void _internal_set_field_value(const std::string& value);
  std::string* _internal_mutable_field_value();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// -------------------------------------------------------------------

class UserConfiguration_UserSettings_PlayerProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile) */ {
 public:
  inline UserConfiguration_UserSettings_PlayerProfile() : UserConfiguration_UserSettings_PlayerProfile(nullptr) {}
  virtual ~UserConfiguration_UserSettings_PlayerProfile();

  UserConfiguration_UserSettings_PlayerProfile(const UserConfiguration_UserSettings_PlayerProfile& from);
  UserConfiguration_UserSettings_PlayerProfile(UserConfiguration_UserSettings_PlayerProfile&& from) noexcept
    : UserConfiguration_UserSettings_PlayerProfile() {
    *this = ::std::move(from);
  }

  inline UserConfiguration_UserSettings_PlayerProfile& operator=(const UserConfiguration_UserSettings_PlayerProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration_UserSettings_PlayerProfile& operator=(UserConfiguration_UserSettings_PlayerProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserConfiguration_UserSettings_PlayerProfile& default_instance();

  static inline const UserConfiguration_UserSettings_PlayerProfile* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration_UserSettings_PlayerProfile*>(
               &_UserConfiguration_UserSettings_PlayerProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserConfiguration_UserSettings_PlayerProfile& a, UserConfiguration_UserSettings_PlayerProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration_UserSettings_PlayerProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration_UserSettings_PlayerProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConfiguration_UserSettings_PlayerProfile* New() const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings_PlayerProfile>(nullptr);
  }

  UserConfiguration_UserSettings_PlayerProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings_PlayerProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserConfiguration_UserSettings_PlayerProfile& from);
  void MergeFrom(const UserConfiguration_UserSettings_PlayerProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserConfiguration_UserSettings_PlayerProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile";
  }
  protected:
  explicit UserConfiguration_UserSettings_PlayerProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserConfiguration_UserSettings_PlayerProfile_PlayerField PlayerField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField >*
      mutable_fields();
  private:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField& _internal_fields(int index) const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* _internal_add_fields();
  public:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField& fields(int index) const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField >&
      fields() const;

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// -------------------------------------------------------------------

class UserConfiguration_UserSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration.UserSettings) */ {
 public:
  inline UserConfiguration_UserSettings() : UserConfiguration_UserSettings(nullptr) {}
  virtual ~UserConfiguration_UserSettings();

  UserConfiguration_UserSettings(const UserConfiguration_UserSettings& from);
  UserConfiguration_UserSettings(UserConfiguration_UserSettings&& from) noexcept
    : UserConfiguration_UserSettings() {
    *this = ::std::move(from);
  }

  inline UserConfiguration_UserSettings& operator=(const UserConfiguration_UserSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration_UserSettings& operator=(UserConfiguration_UserSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserConfiguration_UserSettings& default_instance();

  static inline const UserConfiguration_UserSettings* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration_UserSettings*>(
               &_UserConfiguration_UserSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserConfiguration_UserSettings& a, UserConfiguration_UserSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration_UserSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration_UserSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConfiguration_UserSettings* New() const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings>(nullptr);
  }

  UserConfiguration_UserSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConfiguration_UserSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserConfiguration_UserSettings& from);
  void MergeFrom(const UserConfiguration_UserSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserConfiguration_UserSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration.UserSettings";
  }
  protected:
  explicit UserConfiguration_UserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserConfiguration_UserSettings_PlayerProfile PlayerProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerProfileFieldNumber = 2,
    kViewTranscriptConsentFieldNumber = 1,
  };
  // .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile player_profile = 2;
  bool has_player_profile() const;
  private:
  bool _internal_has_player_profile() const;
  public:
  void clear_player_profile();
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& player_profile() const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* release_player_profile();
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* mutable_player_profile();
  void set_allocated_player_profile(::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* player_profile);
  private:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& _internal_player_profile() const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* _internal_mutable_player_profile();
  public:
  void unsafe_arena_set_allocated_player_profile(
      ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* player_profile);
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* unsafe_arena_release_player_profile();

  // bool view_transcript_consent = 1;
  void clear_view_transcript_consent();
  bool view_transcript_consent() const;
  void set_view_transcript_consent(bool value);
  private:
  bool _internal_view_transcript_consent() const;
  void _internal_set_view_transcript_consent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration.UserSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* player_profile_;
  bool view_transcript_consent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// -------------------------------------------------------------------

class UserConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.UserConfiguration) */ {
 public:
  inline UserConfiguration() : UserConfiguration(nullptr) {}
  virtual ~UserConfiguration();

  UserConfiguration(const UserConfiguration& from);
  UserConfiguration(UserConfiguration&& from) noexcept
    : UserConfiguration() {
    *this = ::std::move(from);
  }

  inline UserConfiguration& operator=(const UserConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConfiguration& operator=(UserConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserConfiguration& default_instance();

  static inline const UserConfiguration* internal_default_instance() {
    return reinterpret_cast<const UserConfiguration*>(
               &_UserConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserConfiguration& a, UserConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConfiguration* New() const final {
    return CreateMaybeMessage<UserConfiguration>(nullptr);
  }

  UserConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserConfiguration& from);
  void MergeFrom(const UserConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.UserConfiguration";
  }
  protected:
  explicit UserConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserConfiguration_UserSettings UserSettings;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kUserSettingsFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .ai.inworld.engine.configuration.UserConfiguration.UserSettings user_settings = 3;
  bool has_user_settings() const;
  private:
  bool _internal_has_user_settings() const;
  public:
  void clear_user_settings();
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& user_settings() const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* release_user_settings();
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* mutable_user_settings();
  void set_allocated_user_settings(::ai::inworld::engine::configuration::UserConfiguration_UserSettings* user_settings);
  private:
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& _internal_user_settings() const;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* _internal_mutable_user_settings();
  public:
  void unsafe_arena_set_allocated_user_settings(
      ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* user_settings);
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* unsafe_arena_release_user_settings();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.UserConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* user_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// -------------------------------------------------------------------

class ClientConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.ClientConfiguration) */ {
 public:
  inline ClientConfiguration() : ClientConfiguration(nullptr) {}
  virtual ~ClientConfiguration();

  ClientConfiguration(const ClientConfiguration& from);
  ClientConfiguration(ClientConfiguration&& from) noexcept
    : ClientConfiguration() {
    *this = ::std::move(from);
  }

  inline ClientConfiguration& operator=(const ClientConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfiguration& operator=(ClientConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientConfiguration& default_instance();

  static inline const ClientConfiguration* internal_default_instance() {
    return reinterpret_cast<const ClientConfiguration*>(
               &_ClientConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientConfiguration& a, ClientConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientConfiguration* New() const final {
    return CreateMaybeMessage<ClientConfiguration>(nullptr);
  }

  ClientConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientConfiguration& from);
  void MergeFrom(const ClientConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.ClientConfiguration";
  }
  protected:
  explicit ClientConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.ClientConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// -------------------------------------------------------------------

class SessionConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.configuration.SessionConfiguration) */ {
 public:
  inline SessionConfiguration() : SessionConfiguration(nullptr) {}
  virtual ~SessionConfiguration();

  SessionConfiguration(const SessionConfiguration& from);
  SessionConfiguration(SessionConfiguration&& from) noexcept
    : SessionConfiguration() {
    *this = ::std::move(from);
  }

  inline SessionConfiguration& operator=(const SessionConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionConfiguration& operator=(SessionConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionConfiguration& default_instance();

  static inline const SessionConfiguration* internal_default_instance() {
    return reinterpret_cast<const SessionConfiguration*>(
               &_SessionConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SessionConfiguration& a, SessionConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionConfiguration* New() const final {
    return CreateMaybeMessage<SessionConfiguration>(nullptr);
  }

  SessionConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionConfiguration& from);
  void MergeFrom(const SessionConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.configuration.SessionConfiguration";
  }
  protected:
  explicit SessionConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configuration_2eproto);
    return ::descriptor_table_configuration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kGameSessionIdFieldNumber = 2,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string game_session_id = 2;
  void clear_game_session_id();
  const std::string& game_session_id() const;
  void set_game_session_id(const std::string& value);
  void set_game_session_id(std::string&& value);
  void set_game_session_id(const char* value);
  void set_game_session_id(const char* value, size_t size);
  std::string* mutable_game_session_id();
  std::string* release_game_session_id();
  void set_allocated_game_session_id(std::string* game_session_id);
  private:
  const std::string& _internal_game_session_id() const;
  void _internal_set_game_session_id(const std::string& value);
  std::string* _internal_mutable_game_session_id();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.configuration.SessionConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_configuration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CapabilitiesConfiguration

// bool audio = 1;
inline void CapabilitiesConfiguration::clear_audio() {
  audio_ = false;
}
inline bool CapabilitiesConfiguration::_internal_audio() const {
  return audio_;
}
inline bool CapabilitiesConfiguration::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.audio)
  return _internal_audio();
}
inline void CapabilitiesConfiguration::_internal_set_audio(bool value) {
  
  audio_ = value;
}
inline void CapabilitiesConfiguration::set_audio(bool value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.audio)
}

// bool interruptions = 3;
inline void CapabilitiesConfiguration::clear_interruptions() {
  interruptions_ = false;
}
inline bool CapabilitiesConfiguration::_internal_interruptions() const {
  return interruptions_;
}
inline bool CapabilitiesConfiguration::interruptions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.interruptions)
  return _internal_interruptions();
}
inline void CapabilitiesConfiguration::_internal_set_interruptions(bool value) {
  
  interruptions_ = value;
}
inline void CapabilitiesConfiguration::set_interruptions(bool value) {
  _internal_set_interruptions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.interruptions)
}

// bool emotions = 4;
inline void CapabilitiesConfiguration::clear_emotions() {
  emotions_ = false;
}
inline bool CapabilitiesConfiguration::_internal_emotions() const {
  return emotions_;
}
inline bool CapabilitiesConfiguration::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotions)
  return _internal_emotions();
}
inline void CapabilitiesConfiguration::_internal_set_emotions(bool value) {
  
  emotions_ = value;
}
inline void CapabilitiesConfiguration::set_emotions(bool value) {
  _internal_set_emotions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotions)
}

// bool turn_based_stt = 5 [deprecated = true];
inline void CapabilitiesConfiguration::clear_turn_based_stt() {
  turn_based_stt_ = false;
}
inline bool CapabilitiesConfiguration::_internal_turn_based_stt() const {
  return turn_based_stt_;
}
inline bool CapabilitiesConfiguration::turn_based_stt() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.turn_based_stt)
  return _internal_turn_based_stt();
}
inline void CapabilitiesConfiguration::_internal_set_turn_based_stt(bool value) {
  
  turn_based_stt_ = value;
}
inline void CapabilitiesConfiguration::set_turn_based_stt(bool value) {
  _internal_set_turn_based_stt(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.turn_based_stt)
}

// bool emotion_streaming = 6;
inline void CapabilitiesConfiguration::clear_emotion_streaming() {
  emotion_streaming_ = false;
}
inline bool CapabilitiesConfiguration::_internal_emotion_streaming() const {
  return emotion_streaming_;
}
inline bool CapabilitiesConfiguration::emotion_streaming() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotion_streaming)
  return _internal_emotion_streaming();
}
inline void CapabilitiesConfiguration::_internal_set_emotion_streaming(bool value) {
  
  emotion_streaming_ = value;
}
inline void CapabilitiesConfiguration::set_emotion_streaming(bool value) {
  _internal_set_emotion_streaming(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.emotion_streaming)
}

// bool silence_events = 7 [deprecated = true];
inline void CapabilitiesConfiguration::clear_silence_events() {
  silence_events_ = false;
}
inline bool CapabilitiesConfiguration::_internal_silence_events() const {
  return silence_events_;
}
inline bool CapabilitiesConfiguration::silence_events() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.silence_events)
  return _internal_silence_events();
}
inline void CapabilitiesConfiguration::_internal_set_silence_events(bool value) {
  
  silence_events_ = value;
}
inline void CapabilitiesConfiguration::set_silence_events(bool value) {
  _internal_set_silence_events(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.silence_events)
}

// bool phoneme_info = 8;
inline void CapabilitiesConfiguration::clear_phoneme_info() {
  phoneme_info_ = false;
}
inline bool CapabilitiesConfiguration::_internal_phoneme_info() const {
  return phoneme_info_;
}
inline bool CapabilitiesConfiguration::phoneme_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.phoneme_info)
  return _internal_phoneme_info();
}
inline void CapabilitiesConfiguration::_internal_set_phoneme_info(bool value) {
  
  phoneme_info_ = value;
}
inline void CapabilitiesConfiguration::set_phoneme_info(bool value) {
  _internal_set_phoneme_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.phoneme_info)
}

// bool continuation = 9;
inline void CapabilitiesConfiguration::clear_continuation() {
  continuation_ = false;
}
inline bool CapabilitiesConfiguration::_internal_continuation() const {
  return continuation_;
}
inline bool CapabilitiesConfiguration::continuation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.continuation)
  return _internal_continuation();
}
inline void CapabilitiesConfiguration::_internal_set_continuation(bool value) {
  
  continuation_ = value;
}
inline void CapabilitiesConfiguration::set_continuation(bool value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.continuation)
}

// bool session_cancellation = 10;
inline void CapabilitiesConfiguration::clear_session_cancellation() {
  session_cancellation_ = false;
}
inline bool CapabilitiesConfiguration::_internal_session_cancellation() const {
  return session_cancellation_;
}
inline bool CapabilitiesConfiguration::session_cancellation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.session_cancellation)
  return _internal_session_cancellation();
}
inline void CapabilitiesConfiguration::_internal_set_session_cancellation(bool value) {
  
  session_cancellation_ = value;
}
inline void CapabilitiesConfiguration::set_session_cancellation(bool value) {
  _internal_set_session_cancellation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.session_cancellation)
}

// bool narrated_actions = 11;
inline void CapabilitiesConfiguration::clear_narrated_actions() {
  narrated_actions_ = false;
}
inline bool CapabilitiesConfiguration::_internal_narrated_actions() const {
  return narrated_actions_;
}
inline bool CapabilitiesConfiguration::narrated_actions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.narrated_actions)
  return _internal_narrated_actions();
}
inline void CapabilitiesConfiguration::_internal_set_narrated_actions(bool value) {
  
  narrated_actions_ = value;
}
inline void CapabilitiesConfiguration::set_narrated_actions(bool value) {
  _internal_set_narrated_actions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.narrated_actions)
}

// bool regenerate_response = 12;
inline void CapabilitiesConfiguration::clear_regenerate_response() {
  regenerate_response_ = false;
}
inline bool CapabilitiesConfiguration::_internal_regenerate_response() const {
  return regenerate_response_;
}
inline bool CapabilitiesConfiguration::regenerate_response() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.regenerate_response)
  return _internal_regenerate_response();
}
inline void CapabilitiesConfiguration::_internal_set_regenerate_response(bool value) {
  
  regenerate_response_ = value;
}
inline void CapabilitiesConfiguration::set_regenerate_response(bool value) {
  _internal_set_regenerate_response(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.regenerate_response)
}

// bool relations = 13;
inline void CapabilitiesConfiguration::clear_relations() {
  relations_ = false;
}
inline bool CapabilitiesConfiguration::_internal_relations() const {
  return relations_;
}
inline bool CapabilitiesConfiguration::relations() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.relations)
  return _internal_relations();
}
inline void CapabilitiesConfiguration::_internal_set_relations(bool value) {
  
  relations_ = value;
}
inline void CapabilitiesConfiguration::set_relations(bool value) {
  _internal_set_relations(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.relations)
}

// bool debug_info = 14;
inline void CapabilitiesConfiguration::clear_debug_info() {
  debug_info_ = false;
}
inline bool CapabilitiesConfiguration::_internal_debug_info() const {
  return debug_info_;
}
inline bool CapabilitiesConfiguration::debug_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.debug_info)
  return _internal_debug_info();
}
inline void CapabilitiesConfiguration::_internal_set_debug_info(bool value) {
  
  debug_info_ = value;
}
inline void CapabilitiesConfiguration::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.debug_info)
}

// bool tts_mp3 = 15;
inline void CapabilitiesConfiguration::clear_tts_mp3() {
  tts_mp3_ = false;
}
inline bool CapabilitiesConfiguration::_internal_tts_mp3() const {
  return tts_mp3_;
}
inline bool CapabilitiesConfiguration::tts_mp3() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.CapabilitiesConfiguration.tts_mp3)
  return _internal_tts_mp3();
}
inline void CapabilitiesConfiguration::_internal_set_tts_mp3(bool value) {
  
  tts_mp3_ = value;
}
inline void CapabilitiesConfiguration::set_tts_mp3(bool value) {
  _internal_set_tts_mp3(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.CapabilitiesConfiguration.tts_mp3)
}

// -------------------------------------------------------------------

// UserConfiguration_UserSettings_PlayerProfile_PlayerField

// string field_id = 1;
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::clear_field_id() {
  field_id_.ClearToEmpty();
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::field_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
  return _internal_field_id();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_id(const std::string& value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::mutable_field_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
  return _internal_mutable_field_id();
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_field_id() const {
  return field_id_.Get();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_set_field_id(const std::string& value) {
  
  field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_id(std::string&& value) {
  
  field_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_id(const char* value,
    size_t size) {
  
  field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_id() {
  
  return field_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::release_field_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
  return field_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_allocated_field_id(std::string* field_id) {
  if (field_id != nullptr) {
    
  } else {
    
  }
  field_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_id)
}

// string field_value = 2;
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::clear_field_value() {
  field_value_.ClearToEmpty();
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::field_value() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
  return _internal_field_value();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_value(const std::string& value) {
  _internal_set_field_value(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::mutable_field_value() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
  return _internal_mutable_field_value();
}
inline const std::string& UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_field_value() const {
  return field_value_.Get();
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_set_field_value(const std::string& value) {
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_value(std::string&& value) {
  
  field_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_field_value(const char* value,
    size_t size) {
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_value() {
  
  return field_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserConfiguration_UserSettings_PlayerProfile_PlayerField::release_field_value() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
  return field_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserConfiguration_UserSettings_PlayerProfile_PlayerField::set_allocated_field_value(std::string* field_value) {
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.field_value)
}

// -------------------------------------------------------------------

// UserConfiguration_UserSettings_PlayerProfile

// repeated .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField fields = 3;
inline int UserConfiguration_UserSettings_PlayerProfile::_internal_fields_size() const {
  return fields_.size();
}
inline int UserConfiguration_UserSettings_PlayerProfile::fields_size() const {
  return _internal_fields_size();
}
inline void UserConfiguration_UserSettings_PlayerProfile::clear_fields() {
  fields_.Clear();
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* UserConfiguration_UserSettings_PlayerProfile::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField >*
UserConfiguration_UserSettings_PlayerProfile::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return &fields_;
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField& UserConfiguration_UserSettings_PlayerProfile::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField& UserConfiguration_UserSettings_PlayerProfile::fields(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return _internal_fields(index);
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* UserConfiguration_UserSettings_PlayerProfile::_internal_add_fields() {
  return fields_.Add();
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField* UserConfiguration_UserSettings_PlayerProfile::add_fields() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile_PlayerField >&
UserConfiguration_UserSettings_PlayerProfile::fields() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile.fields)
  return fields_;
}

// -------------------------------------------------------------------

// UserConfiguration_UserSettings

// bool view_transcript_consent = 1;
inline void UserConfiguration_UserSettings::clear_view_transcript_consent() {
  view_transcript_consent_ = false;
}
inline bool UserConfiguration_UserSettings::_internal_view_transcript_consent() const {
  return view_transcript_consent_;
}
inline bool UserConfiguration_UserSettings::view_transcript_consent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.view_transcript_consent)
  return _internal_view_transcript_consent();
}
inline void UserConfiguration_UserSettings::_internal_set_view_transcript_consent(bool value) {
  
  view_transcript_consent_ = value;
}
inline void UserConfiguration_UserSettings::set_view_transcript_consent(bool value) {
  _internal_set_view_transcript_consent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.UserSettings.view_transcript_consent)
}

// .ai.inworld.engine.configuration.UserConfiguration.UserSettings.PlayerProfile player_profile = 2;
inline bool UserConfiguration_UserSettings::_internal_has_player_profile() const {
  return this != internal_default_instance() && player_profile_ != nullptr;
}
inline bool UserConfiguration_UserSettings::has_player_profile() const {
  return _internal_has_player_profile();
}
inline void UserConfiguration_UserSettings::clear_player_profile() {
  if (GetArena() == nullptr && player_profile_ != nullptr) {
    delete player_profile_;
  }
  player_profile_ = nullptr;
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& UserConfiguration_UserSettings::_internal_player_profile() const {
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* p = player_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile&>(
      ::ai::inworld::engine::configuration::_UserConfiguration_UserSettings_PlayerProfile_default_instance_);
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile& UserConfiguration_UserSettings::player_profile() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
  return _internal_player_profile();
}
inline void UserConfiguration_UserSettings::unsafe_arena_set_allocated_player_profile(
    ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* player_profile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_profile_);
  }
  player_profile_ = player_profile;
  if (player_profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::release_player_profile() {
  
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* temp = player_profile_;
  player_profile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::unsafe_arena_release_player_profile() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
  
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* temp = player_profile_;
  player_profile_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::_internal_mutable_player_profile() {
  
  if (player_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile>(GetArena());
    player_profile_ = p;
  }
  return player_profile_;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* UserConfiguration_UserSettings::mutable_player_profile() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
  return _internal_mutable_player_profile();
}
inline void UserConfiguration_UserSettings::set_allocated_player_profile(::ai::inworld::engine::configuration::UserConfiguration_UserSettings_PlayerProfile* player_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_profile_;
  }
  if (player_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_profile);
    if (message_arena != submessage_arena) {
      player_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_profile, submessage_arena);
    }
    
  } else {
    
  }
  player_profile_ = player_profile;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.UserSettings.player_profile)
}

// -------------------------------------------------------------------

// UserConfiguration

// string name = 1;
inline void UserConfiguration::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserConfiguration::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.name)
  return _internal_name();
}
inline void UserConfiguration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.name)
}
inline std::string* UserConfiguration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.name)
  return _internal_mutable_name();
}
inline const std::string& UserConfiguration::_internal_name() const {
  return name_.Get();
}
inline void UserConfiguration::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserConfiguration::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.UserConfiguration.name)
}
inline void UserConfiguration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.UserConfiguration.name)
}
inline void UserConfiguration::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.UserConfiguration.name)
}
inline std::string* UserConfiguration::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserConfiguration::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserConfiguration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.name)
}

// string id = 2;
inline void UserConfiguration::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UserConfiguration::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.id)
  return _internal_id();
}
inline void UserConfiguration::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.UserConfiguration.id)
}
inline std::string* UserConfiguration::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.id)
  return _internal_mutable_id();
}
inline const std::string& UserConfiguration::_internal_id() const {
  return id_.Get();
}
inline void UserConfiguration::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserConfiguration::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.UserConfiguration.id)
}
inline void UserConfiguration::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.UserConfiguration.id)
}
inline void UserConfiguration::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.UserConfiguration.id)
}
inline std::string* UserConfiguration::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserConfiguration::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserConfiguration::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.id)
}

// .ai.inworld.engine.configuration.UserConfiguration.UserSettings user_settings = 3;
inline bool UserConfiguration::_internal_has_user_settings() const {
  return this != internal_default_instance() && user_settings_ != nullptr;
}
inline bool UserConfiguration::has_user_settings() const {
  return _internal_has_user_settings();
}
inline void UserConfiguration::clear_user_settings() {
  if (GetArena() == nullptr && user_settings_ != nullptr) {
    delete user_settings_;
  }
  user_settings_ = nullptr;
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& UserConfiguration::_internal_user_settings() const {
  const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* p = user_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings&>(
      ::ai::inworld::engine::configuration::_UserConfiguration_UserSettings_default_instance_);
}
inline const ::ai::inworld::engine::configuration::UserConfiguration_UserSettings& UserConfiguration::user_settings() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.UserConfiguration.user_settings)
  return _internal_user_settings();
}
inline void UserConfiguration::unsafe_arena_set_allocated_user_settings(
    ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* user_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_settings_);
  }
  user_settings_ = user_settings;
  if (user_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.configuration.UserConfiguration.user_settings)
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::release_user_settings() {
  
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* temp = user_settings_;
  user_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::unsafe_arena_release_user_settings() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.UserConfiguration.user_settings)
  
  ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* temp = user_settings_;
  user_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::_internal_mutable_user_settings() {
  
  if (user_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::configuration::UserConfiguration_UserSettings>(GetArena());
    user_settings_ = p;
  }
  return user_settings_;
}
inline ::ai::inworld::engine::configuration::UserConfiguration_UserSettings* UserConfiguration::mutable_user_settings() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.UserConfiguration.user_settings)
  return _internal_mutable_user_settings();
}
inline void UserConfiguration::set_allocated_user_settings(::ai::inworld::engine::configuration::UserConfiguration_UserSettings* user_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_settings_;
  }
  if (user_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_settings);
    if (message_arena != submessage_arena) {
      user_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_settings, submessage_arena);
    }
    
  } else {
    
  }
  user_settings_ = user_settings;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.UserConfiguration.user_settings)
}

// -------------------------------------------------------------------

// ClientConfiguration

// string id = 1;
inline void ClientConfiguration::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ClientConfiguration::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.ClientConfiguration.id)
  return _internal_id();
}
inline void ClientConfiguration::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.ClientConfiguration.id)
}
inline std::string* ClientConfiguration::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.ClientConfiguration.id)
  return _internal_mutable_id();
}
inline const std::string& ClientConfiguration::_internal_id() const {
  return id_.Get();
}
inline void ClientConfiguration::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientConfiguration::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.ClientConfiguration.id)
}
inline void ClientConfiguration::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.ClientConfiguration.id)
}
inline void ClientConfiguration::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.ClientConfiguration.id)
}
inline std::string* ClientConfiguration::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientConfiguration::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.ClientConfiguration.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientConfiguration::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.ClientConfiguration.id)
}

// string version = 2;
inline void ClientConfiguration::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ClientConfiguration::version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.ClientConfiguration.version)
  return _internal_version();
}
inline void ClientConfiguration::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.ClientConfiguration.version)
}
inline std::string* ClientConfiguration::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.ClientConfiguration.version)
  return _internal_mutable_version();
}
inline const std::string& ClientConfiguration::_internal_version() const {
  return version_.Get();
}
inline void ClientConfiguration::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientConfiguration::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.ClientConfiguration.version)
}
inline void ClientConfiguration::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.ClientConfiguration.version)
}
inline void ClientConfiguration::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.ClientConfiguration.version)
}
inline std::string* ClientConfiguration::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientConfiguration::release_version() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.ClientConfiguration.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientConfiguration::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.ClientConfiguration.version)
}

// string description = 3;
inline void ClientConfiguration::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ClientConfiguration::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.ClientConfiguration.description)
  return _internal_description();
}
inline void ClientConfiguration::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.ClientConfiguration.description)
}
inline std::string* ClientConfiguration::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.ClientConfiguration.description)
  return _internal_mutable_description();
}
inline const std::string& ClientConfiguration::_internal_description() const {
  return description_.Get();
}
inline void ClientConfiguration::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientConfiguration::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.ClientConfiguration.description)
}
inline void ClientConfiguration::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.ClientConfiguration.description)
}
inline void ClientConfiguration::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.ClientConfiguration.description)
}
inline std::string* ClientConfiguration::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientConfiguration::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.ClientConfiguration.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientConfiguration::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.ClientConfiguration.description)
}

// -------------------------------------------------------------------

// SessionConfiguration

// string session_id = 1;
inline void SessionConfiguration::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& SessionConfiguration::session_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.SessionConfiguration.session_id)
  return _internal_session_id();
}
inline void SessionConfiguration::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.SessionConfiguration.session_id)
}
inline std::string* SessionConfiguration::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.SessionConfiguration.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SessionConfiguration::_internal_session_id() const {
  return session_id_.Get();
}
inline void SessionConfiguration::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionConfiguration::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.SessionConfiguration.session_id)
}
inline void SessionConfiguration::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.SessionConfiguration.session_id)
}
inline void SessionConfiguration::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.SessionConfiguration.session_id)
}
inline std::string* SessionConfiguration::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionConfiguration::release_session_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.SessionConfiguration.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionConfiguration::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.SessionConfiguration.session_id)
}

// string game_session_id = 2;
inline void SessionConfiguration::clear_game_session_id() {
  game_session_id_.ClearToEmpty();
}
inline const std::string& SessionConfiguration::game_session_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
  return _internal_game_session_id();
}
inline void SessionConfiguration::set_game_session_id(const std::string& value) {
  _internal_set_game_session_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}
inline std::string* SessionConfiguration::mutable_game_session_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
  return _internal_mutable_game_session_id();
}
inline const std::string& SessionConfiguration::_internal_game_session_id() const {
  return game_session_id_.Get();
}
inline void SessionConfiguration::_internal_set_game_session_id(const std::string& value) {
  
  game_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionConfiguration::set_game_session_id(std::string&& value) {
  
  game_session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}
inline void SessionConfiguration::set_game_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}
inline void SessionConfiguration::set_game_session_id(const char* value,
    size_t size) {
  
  game_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}
inline std::string* SessionConfiguration::_internal_mutable_game_session_id() {
  
  return game_session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionConfiguration::release_game_session_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
  return game_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionConfiguration::set_allocated_game_session_id(std::string* game_session_id) {
  if (game_session_id != nullptr) {
    
  } else {
    
  }
  game_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.configuration.SessionConfiguration.game_session_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace configuration
}  // namespace engine
}  // namespace inworld
}  // namespace ai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_configuration_2eproto
