// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anim_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_anim_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_anim_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_anim_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_anim_5fcontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_anim_5fcontroller_2eproto;
namespace nvidia {
namespace ace {
namespace animation {
class A2XAnimDataStream;
class A2XAnimDataStreamDefaultTypeInternal;
extern A2XAnimDataStreamDefaultTypeInternal _A2XAnimDataStream_default_instance_;
class A2XAnimDataStreamContent;
class A2XAnimDataStreamContentDefaultTypeInternal;
extern A2XAnimDataStreamContentDefaultTypeInternal _A2XAnimDataStreamContent_default_instance_;
class A2XAnimDataStreamContent_FilesEntry_DoNotUse;
class A2XAnimDataStreamContent_FilesEntry_DoNotUseDefaultTypeInternal;
extern A2XAnimDataStreamContent_FilesEntry_DoNotUseDefaultTypeInternal _A2XAnimDataStreamContent_FilesEntry_DoNotUse_default_instance_;
class A2XAnimDataStreamHeader;
class A2XAnimDataStreamHeaderDefaultTypeInternal;
extern A2XAnimDataStreamHeaderDefaultTypeInternal _A2XAnimDataStreamHeader_default_instance_;
class A2XAudioStream;
class A2XAudioStreamDefaultTypeInternal;
extern A2XAudioStreamDefaultTypeInternal _A2XAudioStream_default_instance_;
class A2XAudioStream_EmotionMapEntry_DoNotUse;
class A2XAudioStream_EmotionMapEntry_DoNotUseDefaultTypeInternal;
extern A2XAudioStream_EmotionMapEntry_DoNotUseDefaultTypeInternal _A2XAudioStream_EmotionMapEntry_DoNotUse_default_instance_;
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> ::nvidia::ace::animation::A2XAnimDataStream* Arena::CreateMaybeMessage<::nvidia::ace::animation::A2XAnimDataStream>(Arena*);
template<> ::nvidia::ace::animation::A2XAnimDataStreamContent* Arena::CreateMaybeMessage<::nvidia::ace::animation::A2XAnimDataStreamContent>(Arena*);
template<> ::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse>(Arena*);
template<> ::nvidia::ace::animation::A2XAnimDataStreamHeader* Arena::CreateMaybeMessage<::nvidia::ace::animation::A2XAnimDataStreamHeader>(Arena*);
template<> ::nvidia::ace::animation::A2XAudioStream* Arena::CreateMaybeMessage<::nvidia::ace::animation::A2XAudioStream>(Arena*);
template<> ::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nvidia {
namespace ace {
namespace animation {

enum PacketType : int {
  BEGIN = 0,
  MID = 1,
  END = 2,
  AVATAR_POSTURE_VAR = 3,
  PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = BEGIN;
constexpr PacketType PacketType_MAX = AVATAR_POSTURE_VAR;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class A2XAudioStream_EmotionMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<A2XAudioStream_EmotionMapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<A2XAudioStream_EmotionMapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  A2XAudioStream_EmotionMapEntry_DoNotUse();
  explicit A2XAudioStream_EmotionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const A2XAudioStream_EmotionMapEntry_DoNotUse& other);
  static const A2XAudioStream_EmotionMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const A2XAudioStream_EmotionMapEntry_DoNotUse*>(&_A2XAudioStream_EmotionMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia.ace.animation.A2XAudioStream.EmotionMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fcontroller_2eproto);
    return ::descriptor_table_anim_5fcontroller_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class A2XAudioStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.A2XAudioStream) */ {
 public:
  inline A2XAudioStream() : A2XAudioStream(nullptr) {}
  virtual ~A2XAudioStream();

  A2XAudioStream(const A2XAudioStream& from);
  A2XAudioStream(A2XAudioStream&& from) noexcept
    : A2XAudioStream() {
    *this = ::std::move(from);
  }

  inline A2XAudioStream& operator=(const A2XAudioStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline A2XAudioStream& operator=(A2XAudioStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const A2XAudioStream& default_instance();

  static inline const A2XAudioStream* internal_default_instance() {
    return reinterpret_cast<const A2XAudioStream*>(
               &_A2XAudioStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(A2XAudioStream& a, A2XAudioStream& b) {
    a.Swap(&b);
  }
  inline void Swap(A2XAudioStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A2XAudioStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline A2XAudioStream* New() const final {
    return CreateMaybeMessage<A2XAudioStream>(nullptr);
  }

  A2XAudioStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<A2XAudioStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const A2XAudioStream& from);
  void MergeFrom(const A2XAudioStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A2XAudioStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.A2XAudioStream";
  }
  protected:
  explicit A2XAudioStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fcontroller_2eproto);
    return ::descriptor_table_anim_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEmotionMapFieldNumber = 2,
    kAudioChunkFieldNumber = 1,
    kPostureVarFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // map<string, float> emotion_map = 2;
  int emotion_map_size() const;
  private:
  int _internal_emotion_map_size() const;
  public:
  void clear_emotion_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_emotion_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_emotion_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      emotion_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_emotion_map();

  // bytes audio_chunk = 1;
  void clear_audio_chunk();
  const std::string& audio_chunk() const;
  void set_audio_chunk(const std::string& value);
  void set_audio_chunk(std::string&& value);
  void set_audio_chunk(const char* value);
  void set_audio_chunk(const void* value, size_t size);
  std::string* mutable_audio_chunk();
  std::string* release_audio_chunk();
  void set_allocated_audio_chunk(std::string* audio_chunk);
  private:
  const std::string& _internal_audio_chunk() const;
  void _internal_set_audio_chunk(const std::string& value);
  std::string* _internal_mutable_audio_chunk();
  public:

  // string posture_var = 3;
  void clear_posture_var();
  const std::string& posture_var() const;
  void set_posture_var(const std::string& value);
  void set_posture_var(std::string&& value);
  void set_posture_var(const char* value);
  void set_posture_var(const char* value, size_t size);
  std::string* mutable_posture_var();
  std::string* release_posture_var();
  void set_allocated_posture_var(std::string* posture_var);
  private:
  const std::string& _internal_posture_var() const;
  void _internal_set_posture_var(const std::string& value);
  std::string* _internal_mutable_posture_var();
  public:

  // .nvidia.ace.animation.PacketType type = 4;
  void clear_type();
  ::nvidia::ace::animation::PacketType type() const;
  void set_type(::nvidia::ace::animation::PacketType value);
  private:
  ::nvidia::ace::animation::PacketType _internal_type() const;
  void _internal_set_type(::nvidia::ace::animation::PacketType value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.A2XAudioStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      A2XAudioStream_EmotionMapEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> emotion_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_chunk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posture_var_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_anim_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class A2XAnimDataStreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.A2XAnimDataStreamHeader) */ {
 public:
  inline A2XAnimDataStreamHeader() : A2XAnimDataStreamHeader(nullptr) {}
  virtual ~A2XAnimDataStreamHeader();

  A2XAnimDataStreamHeader(const A2XAnimDataStreamHeader& from);
  A2XAnimDataStreamHeader(A2XAnimDataStreamHeader&& from) noexcept
    : A2XAnimDataStreamHeader() {
    *this = ::std::move(from);
  }

  inline A2XAnimDataStreamHeader& operator=(const A2XAnimDataStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline A2XAnimDataStreamHeader& operator=(A2XAnimDataStreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const A2XAnimDataStreamHeader& default_instance();

  static inline const A2XAnimDataStreamHeader* internal_default_instance() {
    return reinterpret_cast<const A2XAnimDataStreamHeader*>(
               &_A2XAnimDataStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(A2XAnimDataStreamHeader& a, A2XAnimDataStreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(A2XAnimDataStreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A2XAnimDataStreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline A2XAnimDataStreamHeader* New() const final {
    return CreateMaybeMessage<A2XAnimDataStreamHeader>(nullptr);
  }

  A2XAnimDataStreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<A2XAnimDataStreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const A2XAnimDataStreamHeader& from);
  void MergeFrom(const A2XAnimDataStreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A2XAnimDataStreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.A2XAnimDataStreamHeader";
  }
  protected:
  explicit A2XAnimDataStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fcontroller_2eproto);
    return ::descriptor_table_anim_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.A2XAnimDataStreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_anim_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class A2XAnimDataStreamContent_FilesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<A2XAnimDataStreamContent_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<A2XAnimDataStreamContent_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  A2XAnimDataStreamContent_FilesEntry_DoNotUse();
  explicit A2XAnimDataStreamContent_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const A2XAnimDataStreamContent_FilesEntry_DoNotUse& other);
  static const A2XAnimDataStreamContent_FilesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const A2XAnimDataStreamContent_FilesEntry_DoNotUse*>(&_A2XAnimDataStreamContent_FilesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia.ace.animation.A2XAnimDataStreamContent.FilesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fcontroller_2eproto);
    return ::descriptor_table_anim_5fcontroller_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class A2XAnimDataStreamContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.A2XAnimDataStreamContent) */ {
 public:
  inline A2XAnimDataStreamContent() : A2XAnimDataStreamContent(nullptr) {}
  virtual ~A2XAnimDataStreamContent();

  A2XAnimDataStreamContent(const A2XAnimDataStreamContent& from);
  A2XAnimDataStreamContent(A2XAnimDataStreamContent&& from) noexcept
    : A2XAnimDataStreamContent() {
    *this = ::std::move(from);
  }

  inline A2XAnimDataStreamContent& operator=(const A2XAnimDataStreamContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline A2XAnimDataStreamContent& operator=(A2XAnimDataStreamContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const A2XAnimDataStreamContent& default_instance();

  static inline const A2XAnimDataStreamContent* internal_default_instance() {
    return reinterpret_cast<const A2XAnimDataStreamContent*>(
               &_A2XAnimDataStreamContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(A2XAnimDataStreamContent& a, A2XAnimDataStreamContent& b) {
    a.Swap(&b);
  }
  inline void Swap(A2XAnimDataStreamContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A2XAnimDataStreamContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline A2XAnimDataStreamContent* New() const final {
    return CreateMaybeMessage<A2XAnimDataStreamContent>(nullptr);
  }

  A2XAnimDataStreamContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<A2XAnimDataStreamContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const A2XAnimDataStreamContent& from);
  void MergeFrom(const A2XAnimDataStreamContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A2XAnimDataStreamContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.A2XAnimDataStreamContent";
  }
  protected:
  explicit A2XAnimDataStreamContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fcontroller_2eproto);
    return ::descriptor_table_anim_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kUsdaFieldNumber = 1,
  };
  // map<string, bytes> files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_files();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_files();

  // string usda = 1;
  void clear_usda();
  const std::string& usda() const;
  void set_usda(const std::string& value);
  void set_usda(std::string&& value);
  void set_usda(const char* value);
  void set_usda(const char* value, size_t size);
  std::string* mutable_usda();
  std::string* release_usda();
  void set_allocated_usda(std::string* usda);
  private:
  const std::string& _internal_usda() const;
  void _internal_set_usda(const std::string& value);
  std::string* _internal_mutable_usda();
  public:

  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.A2XAnimDataStreamContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      A2XAnimDataStreamContent_FilesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usda_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_anim_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class A2XAnimDataStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia.ace.animation.A2XAnimDataStream) */ {
 public:
  inline A2XAnimDataStream() : A2XAnimDataStream(nullptr) {}
  virtual ~A2XAnimDataStream();

  A2XAnimDataStream(const A2XAnimDataStream& from);
  A2XAnimDataStream(A2XAnimDataStream&& from) noexcept
    : A2XAnimDataStream() {
    *this = ::std::move(from);
  }

  inline A2XAnimDataStream& operator=(const A2XAnimDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline A2XAnimDataStream& operator=(A2XAnimDataStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const A2XAnimDataStream& default_instance();

  enum StreamingRequestCase {
    kHeader = 1,
    kAnimData = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const A2XAnimDataStream* internal_default_instance() {
    return reinterpret_cast<const A2XAnimDataStream*>(
               &_A2XAnimDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(A2XAnimDataStream& a, A2XAnimDataStream& b) {
    a.Swap(&b);
  }
  inline void Swap(A2XAnimDataStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A2XAnimDataStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline A2XAnimDataStream* New() const final {
    return CreateMaybeMessage<A2XAnimDataStream>(nullptr);
  }

  A2XAnimDataStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<A2XAnimDataStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const A2XAnimDataStream& from);
  void MergeFrom(const A2XAnimDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A2XAnimDataStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia.ace.animation.A2XAnimDataStream";
  }
  protected:
  explicit A2XAnimDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_anim_5fcontroller_2eproto);
    return ::descriptor_table_anim_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAnimDataFieldNumber = 2,
  };
  // .nvidia.ace.animation.A2XAnimDataStreamHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::nvidia::ace::animation::A2XAnimDataStreamHeader& header() const;
  ::nvidia::ace::animation::A2XAnimDataStreamHeader* release_header();
  ::nvidia::ace::animation::A2XAnimDataStreamHeader* mutable_header();
  void set_allocated_header(::nvidia::ace::animation::A2XAnimDataStreamHeader* header);
  private:
  const ::nvidia::ace::animation::A2XAnimDataStreamHeader& _internal_header() const;
  ::nvidia::ace::animation::A2XAnimDataStreamHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::nvidia::ace::animation::A2XAnimDataStreamHeader* header);
  ::nvidia::ace::animation::A2XAnimDataStreamHeader* unsafe_arena_release_header();

  // .nvidia.ace.animation.A2XAnimDataStreamContent anim_data = 2;
  bool has_anim_data() const;
  private:
  bool _internal_has_anim_data() const;
  public:
  void clear_anim_data();
  const ::nvidia::ace::animation::A2XAnimDataStreamContent& anim_data() const;
  ::nvidia::ace::animation::A2XAnimDataStreamContent* release_anim_data();
  ::nvidia::ace::animation::A2XAnimDataStreamContent* mutable_anim_data();
  void set_allocated_anim_data(::nvidia::ace::animation::A2XAnimDataStreamContent* anim_data);
  private:
  const ::nvidia::ace::animation::A2XAnimDataStreamContent& _internal_anim_data() const;
  ::nvidia::ace::animation::A2XAnimDataStreamContent* _internal_mutable_anim_data();
  public:
  void unsafe_arena_set_allocated_anim_data(
      ::nvidia::ace::animation::A2XAnimDataStreamContent* anim_data);
  ::nvidia::ace::animation::A2XAnimDataStreamContent* unsafe_arena_release_anim_data();

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:nvidia.ace.animation.A2XAnimDataStream)
 private:
  class _Internal;
  void set_has_header();
  void set_has_anim_data();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamingRequestUnion {
    StreamingRequestUnion() {}
    ::nvidia::ace::animation::A2XAnimDataStreamHeader* header_;
    ::nvidia::ace::animation::A2XAnimDataStreamContent* anim_data_;
  } streaming_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_anim_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// A2XAudioStream

// bytes audio_chunk = 1;
inline void A2XAudioStream::clear_audio_chunk() {
  audio_chunk_.ClearToEmpty();
}
inline const std::string& A2XAudioStream::audio_chunk() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAudioStream.audio_chunk)
  return _internal_audio_chunk();
}
inline void A2XAudioStream::set_audio_chunk(const std::string& value) {
  _internal_set_audio_chunk(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.A2XAudioStream.audio_chunk)
}
inline std::string* A2XAudioStream::mutable_audio_chunk() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.A2XAudioStream.audio_chunk)
  return _internal_mutable_audio_chunk();
}
inline const std::string& A2XAudioStream::_internal_audio_chunk() const {
  return audio_chunk_.Get();
}
inline void A2XAudioStream::_internal_set_audio_chunk(const std::string& value) {
  
  audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void A2XAudioStream::set_audio_chunk(std::string&& value) {
  
  audio_chunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.A2XAudioStream.audio_chunk)
}
inline void A2XAudioStream::set_audio_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.A2XAudioStream.audio_chunk)
}
inline void A2XAudioStream::set_audio_chunk(const void* value,
    size_t size) {
  
  audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.A2XAudioStream.audio_chunk)
}
inline std::string* A2XAudioStream::_internal_mutable_audio_chunk() {
  
  return audio_chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* A2XAudioStream::release_audio_chunk() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.A2XAudioStream.audio_chunk)
  return audio_chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void A2XAudioStream::set_allocated_audio_chunk(std::string* audio_chunk) {
  if (audio_chunk != nullptr) {
    
  } else {
    
  }
  audio_chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_chunk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.A2XAudioStream.audio_chunk)
}

// map<string, float> emotion_map = 2;
inline int A2XAudioStream::_internal_emotion_map_size() const {
  return emotion_map_.size();
}
inline int A2XAudioStream::emotion_map_size() const {
  return _internal_emotion_map_size();
}
inline void A2XAudioStream::clear_emotion_map() {
  emotion_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
A2XAudioStream::_internal_emotion_map() const {
  return emotion_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
A2XAudioStream::emotion_map() const {
  // @@protoc_insertion_point(field_map:nvidia.ace.animation.A2XAudioStream.emotion_map)
  return _internal_emotion_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
A2XAudioStream::_internal_mutable_emotion_map() {
  return emotion_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
A2XAudioStream::mutable_emotion_map() {
  // @@protoc_insertion_point(field_mutable_map:nvidia.ace.animation.A2XAudioStream.emotion_map)
  return _internal_mutable_emotion_map();
}

// string posture_var = 3;
inline void A2XAudioStream::clear_posture_var() {
  posture_var_.ClearToEmpty();
}
inline const std::string& A2XAudioStream::posture_var() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAudioStream.posture_var)
  return _internal_posture_var();
}
inline void A2XAudioStream::set_posture_var(const std::string& value) {
  _internal_set_posture_var(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.A2XAudioStream.posture_var)
}
inline std::string* A2XAudioStream::mutable_posture_var() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.A2XAudioStream.posture_var)
  return _internal_mutable_posture_var();
}
inline const std::string& A2XAudioStream::_internal_posture_var() const {
  return posture_var_.Get();
}
inline void A2XAudioStream::_internal_set_posture_var(const std::string& value) {
  
  posture_var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void A2XAudioStream::set_posture_var(std::string&& value) {
  
  posture_var_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.A2XAudioStream.posture_var)
}
inline void A2XAudioStream::set_posture_var(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  posture_var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.A2XAudioStream.posture_var)
}
inline void A2XAudioStream::set_posture_var(const char* value,
    size_t size) {
  
  posture_var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.A2XAudioStream.posture_var)
}
inline std::string* A2XAudioStream::_internal_mutable_posture_var() {
  
  return posture_var_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* A2XAudioStream::release_posture_var() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.A2XAudioStream.posture_var)
  return posture_var_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void A2XAudioStream::set_allocated_posture_var(std::string* posture_var) {
  if (posture_var != nullptr) {
    
  } else {
    
  }
  posture_var_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posture_var,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.A2XAudioStream.posture_var)
}

// .nvidia.ace.animation.PacketType type = 4;
inline void A2XAudioStream::clear_type() {
  type_ = 0;
}
inline ::nvidia::ace::animation::PacketType A2XAudioStream::_internal_type() const {
  return static_cast< ::nvidia::ace::animation::PacketType >(type_);
}
inline ::nvidia::ace::animation::PacketType A2XAudioStream::type() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAudioStream.type)
  return _internal_type();
}
inline void A2XAudioStream::_internal_set_type(::nvidia::ace::animation::PacketType value) {
  
  type_ = value;
}
inline void A2XAudioStream::set_type(::nvidia::ace::animation::PacketType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.A2XAudioStream.type)
}

// -------------------------------------------------------------------

// A2XAnimDataStreamHeader

// bool success = 1;
inline void A2XAnimDataStreamHeader::clear_success() {
  success_ = false;
}
inline bool A2XAnimDataStreamHeader::_internal_success() const {
  return success_;
}
inline bool A2XAnimDataStreamHeader::success() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAnimDataStreamHeader.success)
  return _internal_success();
}
inline void A2XAnimDataStreamHeader::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void A2XAnimDataStreamHeader::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.A2XAnimDataStreamHeader.success)
}

// string message = 2;
inline void A2XAnimDataStreamHeader::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& A2XAnimDataStreamHeader::message() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
  return _internal_message();
}
inline void A2XAnimDataStreamHeader::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
}
inline std::string* A2XAnimDataStreamHeader::mutable_message() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
  return _internal_mutable_message();
}
inline const std::string& A2XAnimDataStreamHeader::_internal_message() const {
  return message_.Get();
}
inline void A2XAnimDataStreamHeader::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void A2XAnimDataStreamHeader::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
}
inline void A2XAnimDataStreamHeader::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
}
inline void A2XAnimDataStreamHeader::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
}
inline std::string* A2XAnimDataStreamHeader::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* A2XAnimDataStreamHeader::release_message() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void A2XAnimDataStreamHeader::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.A2XAnimDataStreamHeader.message)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// A2XAnimDataStreamContent

// string usda = 1;
inline void A2XAnimDataStreamContent::clear_usda() {
  usda_.ClearToEmpty();
}
inline const std::string& A2XAnimDataStreamContent::usda() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
  return _internal_usda();
}
inline void A2XAnimDataStreamContent::set_usda(const std::string& value) {
  _internal_set_usda(value);
  // @@protoc_insertion_point(field_set:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
}
inline std::string* A2XAnimDataStreamContent::mutable_usda() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
  return _internal_mutable_usda();
}
inline const std::string& A2XAnimDataStreamContent::_internal_usda() const {
  return usda_.Get();
}
inline void A2XAnimDataStreamContent::_internal_set_usda(const std::string& value) {
  
  usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void A2XAnimDataStreamContent::set_usda(std::string&& value) {
  
  usda_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
}
inline void A2XAnimDataStreamContent::set_usda(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
}
inline void A2XAnimDataStreamContent::set_usda(const char* value,
    size_t size) {
  
  usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
}
inline std::string* A2XAnimDataStreamContent::_internal_mutable_usda() {
  
  return usda_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* A2XAnimDataStreamContent::release_usda() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
  return usda_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void A2XAnimDataStreamContent::set_allocated_usda(std::string* usda) {
  if (usda != nullptr) {
    
  } else {
    
  }
  usda_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usda,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.A2XAnimDataStreamContent.usda)
}

// map<string, bytes> files = 2;
inline int A2XAnimDataStreamContent::_internal_files_size() const {
  return files_.size();
}
inline int A2XAnimDataStreamContent::files_size() const {
  return _internal_files_size();
}
inline void A2XAnimDataStreamContent::clear_files() {
  files_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
A2XAnimDataStreamContent::_internal_files() const {
  return files_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
A2XAnimDataStreamContent::files() const {
  // @@protoc_insertion_point(field_map:nvidia.ace.animation.A2XAnimDataStreamContent.files)
  return _internal_files();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
A2XAnimDataStreamContent::_internal_mutable_files() {
  return files_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
A2XAnimDataStreamContent::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:nvidia.ace.animation.A2XAnimDataStreamContent.files)
  return _internal_mutable_files();
}

// -------------------------------------------------------------------

// A2XAnimDataStream

// .nvidia.ace.animation.A2XAnimDataStreamHeader header = 1;
inline bool A2XAnimDataStream::_internal_has_header() const {
  return streaming_request_case() == kHeader;
}
inline bool A2XAnimDataStream::has_header() const {
  return _internal_has_header();
}
inline void A2XAnimDataStream::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void A2XAnimDataStream::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete streaming_request_.header_;
    }
    clear_has_streaming_request();
  }
}
inline ::nvidia::ace::animation::A2XAnimDataStreamHeader* A2XAnimDataStream::release_header() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.A2XAnimDataStream.header)
  if (_internal_has_header()) {
    clear_has_streaming_request();
      ::nvidia::ace::animation::A2XAnimDataStreamHeader* temp = streaming_request_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia::ace::animation::A2XAnimDataStreamHeader& A2XAnimDataStream::_internal_header() const {
  return _internal_has_header()
      ? *streaming_request_.header_
      : reinterpret_cast< ::nvidia::ace::animation::A2XAnimDataStreamHeader&>(::nvidia::ace::animation::_A2XAnimDataStreamHeader_default_instance_);
}
inline const ::nvidia::ace::animation::A2XAnimDataStreamHeader& A2XAnimDataStream::header() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAnimDataStream.header)
  return _internal_header();
}
inline ::nvidia::ace::animation::A2XAnimDataStreamHeader* A2XAnimDataStream::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia.ace.animation.A2XAnimDataStream.header)
  if (_internal_has_header()) {
    clear_has_streaming_request();
    ::nvidia::ace::animation::A2XAnimDataStreamHeader* temp = streaming_request_.header_;
    streaming_request_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void A2XAnimDataStream::unsafe_arena_set_allocated_header(::nvidia::ace::animation::A2XAnimDataStreamHeader* header) {
  clear_streaming_request();
  if (header) {
    set_has_header();
    streaming_request_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia.ace.animation.A2XAnimDataStream.header)
}
inline ::nvidia::ace::animation::A2XAnimDataStreamHeader* A2XAnimDataStream::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_streaming_request();
    set_has_header();
    streaming_request_.header_ = CreateMaybeMessage< ::nvidia::ace::animation::A2XAnimDataStreamHeader >(GetArena());
  }
  return streaming_request_.header_;
}
inline ::nvidia::ace::animation::A2XAnimDataStreamHeader* A2XAnimDataStream::mutable_header() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.A2XAnimDataStream.header)
  return _internal_mutable_header();
}

// .nvidia.ace.animation.A2XAnimDataStreamContent anim_data = 2;
inline bool A2XAnimDataStream::_internal_has_anim_data() const {
  return streaming_request_case() == kAnimData;
}
inline bool A2XAnimDataStream::has_anim_data() const {
  return _internal_has_anim_data();
}
inline void A2XAnimDataStream::set_has_anim_data() {
  _oneof_case_[0] = kAnimData;
}
inline void A2XAnimDataStream::clear_anim_data() {
  if (_internal_has_anim_data()) {
    if (GetArena() == nullptr) {
      delete streaming_request_.anim_data_;
    }
    clear_has_streaming_request();
  }
}
inline ::nvidia::ace::animation::A2XAnimDataStreamContent* A2XAnimDataStream::release_anim_data() {
  // @@protoc_insertion_point(field_release:nvidia.ace.animation.A2XAnimDataStream.anim_data)
  if (_internal_has_anim_data()) {
    clear_has_streaming_request();
      ::nvidia::ace::animation::A2XAnimDataStreamContent* temp = streaming_request_.anim_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.anim_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia::ace::animation::A2XAnimDataStreamContent& A2XAnimDataStream::_internal_anim_data() const {
  return _internal_has_anim_data()
      ? *streaming_request_.anim_data_
      : reinterpret_cast< ::nvidia::ace::animation::A2XAnimDataStreamContent&>(::nvidia::ace::animation::_A2XAnimDataStreamContent_default_instance_);
}
inline const ::nvidia::ace::animation::A2XAnimDataStreamContent& A2XAnimDataStream::anim_data() const {
  // @@protoc_insertion_point(field_get:nvidia.ace.animation.A2XAnimDataStream.anim_data)
  return _internal_anim_data();
}
inline ::nvidia::ace::animation::A2XAnimDataStreamContent* A2XAnimDataStream::unsafe_arena_release_anim_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia.ace.animation.A2XAnimDataStream.anim_data)
  if (_internal_has_anim_data()) {
    clear_has_streaming_request();
    ::nvidia::ace::animation::A2XAnimDataStreamContent* temp = streaming_request_.anim_data_;
    streaming_request_.anim_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void A2XAnimDataStream::unsafe_arena_set_allocated_anim_data(::nvidia::ace::animation::A2XAnimDataStreamContent* anim_data) {
  clear_streaming_request();
  if (anim_data) {
    set_has_anim_data();
    streaming_request_.anim_data_ = anim_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia.ace.animation.A2XAnimDataStream.anim_data)
}
inline ::nvidia::ace::animation::A2XAnimDataStreamContent* A2XAnimDataStream::_internal_mutable_anim_data() {
  if (!_internal_has_anim_data()) {
    clear_streaming_request();
    set_has_anim_data();
    streaming_request_.anim_data_ = CreateMaybeMessage< ::nvidia::ace::animation::A2XAnimDataStreamContent >(GetArena());
  }
  return streaming_request_.anim_data_;
}
inline ::nvidia::ace::animation::A2XAnimDataStreamContent* A2XAnimDataStream::mutable_anim_data() {
  // @@protoc_insertion_point(field_mutable:nvidia.ace.animation.A2XAnimDataStream.anim_data)
  return _internal_mutable_anim_data();
}

inline bool A2XAnimDataStream::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void A2XAnimDataStream::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline A2XAnimDataStream::StreamingRequestCase A2XAnimDataStream::streaming_request_case() const {
  return A2XAnimDataStream::StreamingRequestCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace animation
}  // namespace ace
}  // namespace nvidia

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nvidia::ace::animation::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nvidia::ace::animation::PacketType>() {
  return ::nvidia::ace::animation::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_anim_5fcontroller_2eproto
