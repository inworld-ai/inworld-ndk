#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anim_controller.proto

#include "anim_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_anim_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_anim_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A2XAnimDataStreamContent_FilesEntry_DoNotUse_anim_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_anim_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_anim_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A2XAudioStream_EmotionMapEntry_DoNotUse_anim_5fcontroller_2eproto;
namespace nvidia {
namespace ace {
namespace animation {
class A2XAudioStream_EmotionMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A2XAudioStream_EmotionMapEntry_DoNotUse> _instance;
} _A2XAudioStream_EmotionMapEntry_DoNotUse_default_instance_;
class A2XAudioStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A2XAudioStream> _instance;
} _A2XAudioStream_default_instance_;
class A2XAnimDataStreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A2XAnimDataStreamHeader> _instance;
} _A2XAnimDataStreamHeader_default_instance_;
class A2XAnimDataStreamContent_FilesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A2XAnimDataStreamContent_FilesEntry_DoNotUse> _instance;
} _A2XAnimDataStreamContent_FilesEntry_DoNotUse_default_instance_;
class A2XAnimDataStreamContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A2XAnimDataStreamContent> _instance;
} _A2XAnimDataStreamContent_default_instance_;
class A2XAnimDataStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A2XAnimDataStream> _instance;
} _A2XAnimDataStream_default_instance_;
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
static void InitDefaultsscc_info_A2XAnimDataStream_anim_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_A2XAnimDataStream_default_instance_;
    new (ptr) ::nvidia::ace::animation::A2XAnimDataStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_A2XAnimDataStream_anim_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_A2XAnimDataStream_anim_5fcontroller_2eproto}, {
      &scc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto.base,
      &scc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_A2XAnimDataStreamContent_default_instance_;
    new (ptr) ::nvidia::ace::animation::A2XAnimDataStreamContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto}, {
      &scc_info_A2XAnimDataStreamContent_FilesEntry_DoNotUse_anim_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_A2XAnimDataStreamContent_FilesEntry_DoNotUse_anim_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_A2XAnimDataStreamContent_FilesEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A2XAnimDataStreamContent_FilesEntry_DoNotUse_anim_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_A2XAnimDataStreamContent_FilesEntry_DoNotUse_anim_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_A2XAnimDataStreamHeader_default_instance_;
    new (ptr) ::nvidia::ace::animation::A2XAnimDataStreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_A2XAudioStream_anim_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_A2XAudioStream_default_instance_;
    new (ptr) ::nvidia::ace::animation::A2XAudioStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_A2XAudioStream_anim_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_A2XAudioStream_anim_5fcontroller_2eproto}, {
      &scc_info_A2XAudioStream_EmotionMapEntry_DoNotUse_anim_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_A2XAudioStream_EmotionMapEntry_DoNotUse_anim_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia::ace::animation::_A2XAudioStream_EmotionMapEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A2XAudioStream_EmotionMapEntry_DoNotUse_anim_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_A2XAudioStream_EmotionMapEntry_DoNotUse_anim_5fcontroller_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_anim_5fcontroller_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_anim_5fcontroller_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_anim_5fcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_anim_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream, audio_chunk_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream, emotion_map_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream, posture_var_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAudioStream, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamHeader, success_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamHeader, message_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent, usda_),
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStreamContent, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia::ace::animation::A2XAnimDataStream, streaming_request_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse)},
  { 9, -1, sizeof(::nvidia::ace::animation::A2XAudioStream)},
  { 18, -1, sizeof(::nvidia::ace::animation::A2XAnimDataStreamHeader)},
  { 25, 32, sizeof(::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse)},
  { 34, -1, sizeof(::nvidia::ace::animation::A2XAnimDataStreamContent)},
  { 41, -1, sizeof(::nvidia::ace::animation::A2XAnimDataStream)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_A2XAudioStream_EmotionMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_A2XAudioStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_A2XAnimDataStreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_A2XAnimDataStreamContent_FilesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_A2XAnimDataStreamContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia::ace::animation::_A2XAnimDataStream_default_instance_),
};

const char descriptor_table_protodef_anim_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025anim_controller.proto\022\024nvidia.ace.anim"
  "ation\032\033google/protobuf/empty.proto\"\350\001\n\016A"
  "2XAudioStream\022\023\n\013audio_chunk\030\001 \001(\014\022I\n\013em"
  "otion_map\030\002 \003(\01324.nvidia.ace.animation.A"
  "2XAudioStream.EmotionMapEntry\022\023\n\013posture"
  "_var\030\003 \001(\t\022.\n\004type\030\004 \001(\0162 .nvidia.ace.an"
  "imation.PacketType\0321\n\017EmotionMapEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\";\n\027A2XAnim"
  "DataStreamHeader\022\017\n\007success\030\001 \001(\010\022\017\n\007mes"
  "sage\030\002 \001(\t\"\240\001\n\030A2XAnimDataStreamContent\022"
  "\014\n\004usda\030\001 \001(\t\022H\n\005files\030\002 \003(\01329.nvidia.ac"
  "e.animation.A2XAnimDataStreamContent.Fil"
  "esEntry\032,\n\nFilesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\014:\0028\001\"\256\001\n\021A2XAnimDataStream\022\?\n\006h"
  "eader\030\001 \001(\0132-.nvidia.ace.animation.A2XAn"
  "imDataStreamHeaderH\000\022C\n\tanim_data\030\002 \001(\0132"
  "..nvidia.ace.animation.A2XAnimDataStream"
  "ContentH\000B\023\n\021streaming_request*A\n\nPacket"
  "Type\022\t\n\005BEGIN\020\000\022\007\n\003MID\020\001\022\007\n\003END\020\002\022\026\n\022AVA"
  "TAR_POSTURE_VAR\020\0032\204\001\n\023A2XServiceInterfac"
  "e\022m\n\026ConvertAudioToAnimData\022$.nvidia.ace"
  ".animation.A2XAudioStream\032\'.nvidia.ace.a"
  "nimation.A2XAnimDataStream\"\000(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_anim_5fcontroller_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_anim_5fcontroller_2eproto_sccs[6] = {
  &scc_info_A2XAnimDataStream_anim_5fcontroller_2eproto.base,
  &scc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto.base,
  &scc_info_A2XAnimDataStreamContent_FilesEntry_DoNotUse_anim_5fcontroller_2eproto.base,
  &scc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto.base,
  &scc_info_A2XAudioStream_anim_5fcontroller_2eproto.base,
  &scc_info_A2XAudioStream_EmotionMapEntry_DoNotUse_anim_5fcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_anim_5fcontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_anim_5fcontroller_2eproto = {
  false, false, descriptor_table_protodef_anim_5fcontroller_2eproto, "anim_controller.proto", 920,
  &descriptor_table_anim_5fcontroller_2eproto_once, descriptor_table_anim_5fcontroller_2eproto_sccs, descriptor_table_anim_5fcontroller_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_anim_5fcontroller_2eproto::offsets,
  file_level_metadata_anim_5fcontroller_2eproto, 6, file_level_enum_descriptors_anim_5fcontroller_2eproto, file_level_service_descriptors_anim_5fcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_anim_5fcontroller_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_anim_5fcontroller_2eproto)), true);
namespace nvidia {
namespace ace {
namespace animation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_anim_5fcontroller_2eproto);
  return file_level_enum_descriptors_anim_5fcontroller_2eproto[0];
}
bool PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

A2XAudioStream_EmotionMapEntry_DoNotUse::A2XAudioStream_EmotionMapEntry_DoNotUse() {}
A2XAudioStream_EmotionMapEntry_DoNotUse::A2XAudioStream_EmotionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void A2XAudioStream_EmotionMapEntry_DoNotUse::MergeFrom(const A2XAudioStream_EmotionMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata A2XAudioStream_EmotionMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void A2XAudioStream_EmotionMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class A2XAudioStream::_Internal {
 public:
};

A2XAudioStream::A2XAudioStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emotion_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.A2XAudioStream)
}
A2XAudioStream::A2XAudioStream(const A2XAudioStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  emotion_map_.MergeFrom(from.emotion_map_);
  audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_chunk().empty()) {
    audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_chunk(), 
      GetArena());
  }
  posture_var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_posture_var().empty()) {
    posture_var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_posture_var(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.A2XAudioStream)
}

void A2XAudioStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_A2XAudioStream_anim_5fcontroller_2eproto.base);
  audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posture_var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

A2XAudioStream::~A2XAudioStream() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.A2XAudioStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void A2XAudioStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audio_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posture_var_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void A2XAudioStream::ArenaDtor(void* object) {
  A2XAudioStream* _this = reinterpret_cast< A2XAudioStream* >(object);
  (void)_this;
}
void A2XAudioStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A2XAudioStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const A2XAudioStream& A2XAudioStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_A2XAudioStream_anim_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void A2XAudioStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.A2XAudioStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emotion_map_.Clear();
  audio_chunk_.ClearToEmpty();
  posture_var_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A2XAudioStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audio_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> emotion_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&emotion_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string posture_var = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_posture_var();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.A2XAudioStream.posture_var"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia.ace.animation.PacketType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::nvidia::ace::animation::PacketType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* A2XAudioStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.A2XAudioStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_chunk = 1;
  if (this->audio_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio_chunk(), target);
  }

  // map<string, float> emotion_map = 2;
  if (!this->_internal_emotion_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia.ace.animation.A2XAudioStream.EmotionMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_emotion_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_emotion_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_emotion_map().begin();
          it != this->_internal_emotion_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = A2XAudioStream_EmotionMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_emotion_map().begin();
          it != this->_internal_emotion_map().end(); ++it) {
        target = A2XAudioStream_EmotionMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string posture_var = 3;
  if (this->posture_var().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_posture_var().data(), static_cast<int>(this->_internal_posture_var().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.A2XAudioStream.posture_var");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_posture_var(), target);
  }

  // .nvidia.ace.animation.PacketType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.A2XAudioStream)
  return target;
}

size_t A2XAudioStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.A2XAudioStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> emotion_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_emotion_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_emotion_map().begin();
      it != this->_internal_emotion_map().end(); ++it) {
    total_size += A2XAudioStream_EmotionMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes audio_chunk = 1;
  if (this->audio_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio_chunk());
  }

  // string posture_var = 3;
  if (this->posture_var().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_posture_var());
  }

  // .nvidia.ace.animation.PacketType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A2XAudioStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.A2XAudioStream)
  GOOGLE_DCHECK_NE(&from, this);
  const A2XAudioStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<A2XAudioStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.A2XAudioStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.A2XAudioStream)
    MergeFrom(*source);
  }
}

void A2XAudioStream::MergeFrom(const A2XAudioStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.A2XAudioStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotion_map_.MergeFrom(from.emotion_map_);
  if (from.audio_chunk().size() > 0) {
    _internal_set_audio_chunk(from._internal_audio_chunk());
  }
  if (from.posture_var().size() > 0) {
    _internal_set_posture_var(from._internal_posture_var());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void A2XAudioStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.A2XAudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2XAudioStream::CopyFrom(const A2XAudioStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.A2XAudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2XAudioStream::IsInitialized() const {
  return true;
}

void A2XAudioStream::InternalSwap(A2XAudioStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emotion_map_.Swap(&other->emotion_map_);
  audio_chunk_.Swap(&other->audio_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posture_var_.Swap(&other->posture_var_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata A2XAudioStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class A2XAnimDataStreamHeader::_Internal {
 public:
};

A2XAnimDataStreamHeader::A2XAnimDataStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.A2XAnimDataStreamHeader)
}
A2XAnimDataStreamHeader::A2XAnimDataStreamHeader(const A2XAnimDataStreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.A2XAnimDataStreamHeader)
}

void A2XAnimDataStreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

A2XAnimDataStreamHeader::~A2XAnimDataStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.A2XAnimDataStreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void A2XAnimDataStreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void A2XAnimDataStreamHeader::ArenaDtor(void* object) {
  A2XAnimDataStreamHeader* _this = reinterpret_cast< A2XAnimDataStreamHeader* >(object);
  (void)_this;
}
void A2XAnimDataStreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A2XAnimDataStreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const A2XAnimDataStreamHeader& A2XAnimDataStreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_A2XAnimDataStreamHeader_anim_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void A2XAnimDataStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A2XAnimDataStreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.A2XAnimDataStreamHeader.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* A2XAnimDataStreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.A2XAnimDataStreamHeader.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.A2XAnimDataStreamHeader)
  return target;
}

size_t A2XAnimDataStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A2XAnimDataStreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const A2XAnimDataStreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<A2XAnimDataStreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.A2XAnimDataStreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.A2XAnimDataStreamHeader)
    MergeFrom(*source);
  }
}

void A2XAnimDataStreamHeader::MergeFrom(const A2XAnimDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void A2XAnimDataStreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2XAnimDataStreamHeader::CopyFrom(const A2XAnimDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.A2XAnimDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2XAnimDataStreamHeader::IsInitialized() const {
  return true;
}

void A2XAnimDataStreamHeader::InternalSwap(A2XAnimDataStreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata A2XAnimDataStreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

A2XAnimDataStreamContent_FilesEntry_DoNotUse::A2XAnimDataStreamContent_FilesEntry_DoNotUse() {}
A2XAnimDataStreamContent_FilesEntry_DoNotUse::A2XAnimDataStreamContent_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void A2XAnimDataStreamContent_FilesEntry_DoNotUse::MergeFrom(const A2XAnimDataStreamContent_FilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata A2XAnimDataStreamContent_FilesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void A2XAnimDataStreamContent_FilesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class A2XAnimDataStreamContent::_Internal {
 public:
};

A2XAnimDataStreamContent::A2XAnimDataStreamContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.A2XAnimDataStreamContent)
}
A2XAnimDataStreamContent::A2XAnimDataStreamContent(const A2XAnimDataStreamContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  files_.MergeFrom(from.files_);
  usda_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usda().empty()) {
    usda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usda(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.A2XAnimDataStreamContent)
}

void A2XAnimDataStreamContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto.base);
  usda_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

A2XAnimDataStreamContent::~A2XAnimDataStreamContent() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.A2XAnimDataStreamContent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void A2XAnimDataStreamContent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  usda_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void A2XAnimDataStreamContent::ArenaDtor(void* object) {
  A2XAnimDataStreamContent* _this = reinterpret_cast< A2XAnimDataStreamContent* >(object);
  (void)_this;
}
void A2XAnimDataStreamContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A2XAnimDataStreamContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const A2XAnimDataStreamContent& A2XAnimDataStreamContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_A2XAnimDataStreamContent_anim_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void A2XAnimDataStreamContent::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  usda_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A2XAnimDataStreamContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string usda = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_usda();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia.ace.animation.A2XAnimDataStreamContent.usda"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&files_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* A2XAnimDataStreamContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usda = 1;
  if (this->usda().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usda().data(), static_cast<int>(this->_internal_usda().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.ace.animation.A2XAnimDataStreamContent.usda");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usda(), target);
  }

  // map<string, bytes> files = 2;
  if (!this->_internal_files().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia.ace.animation.A2XAnimDataStreamContent.FilesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_files().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_files().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_files().begin();
          it != this->_internal_files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = A2XAnimDataStreamContent_FilesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_files().begin();
          it != this->_internal_files().end(); ++it) {
        target = A2XAnimDataStreamContent_FilesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.A2XAnimDataStreamContent)
  return target;
}

size_t A2XAnimDataStreamContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> files = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_files_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_files().begin();
      it != this->_internal_files().end(); ++it) {
    total_size += A2XAnimDataStreamContent_FilesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string usda = 1;
  if (this->usda().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usda());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A2XAnimDataStreamContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  GOOGLE_DCHECK_NE(&from, this);
  const A2XAnimDataStreamContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<A2XAnimDataStreamContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.A2XAnimDataStreamContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.A2XAnimDataStreamContent)
    MergeFrom(*source);
  }
}

void A2XAnimDataStreamContent::MergeFrom(const A2XAnimDataStreamContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.usda().size() > 0) {
    _internal_set_usda(from._internal_usda());
  }
}

void A2XAnimDataStreamContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2XAnimDataStreamContent::CopyFrom(const A2XAnimDataStreamContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.A2XAnimDataStreamContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2XAnimDataStreamContent::IsInitialized() const {
  return true;
}

void A2XAnimDataStreamContent::InternalSwap(A2XAnimDataStreamContent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.Swap(&other->files_);
  usda_.Swap(&other->usda_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata A2XAnimDataStreamContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class A2XAnimDataStream::_Internal {
 public:
  static const ::nvidia::ace::animation::A2XAnimDataStreamHeader& header(const A2XAnimDataStream* msg);
  static const ::nvidia::ace::animation::A2XAnimDataStreamContent& anim_data(const A2XAnimDataStream* msg);
};

const ::nvidia::ace::animation::A2XAnimDataStreamHeader&
A2XAnimDataStream::_Internal::header(const A2XAnimDataStream* msg) {
  return *msg->streaming_request_.header_;
}
const ::nvidia::ace::animation::A2XAnimDataStreamContent&
A2XAnimDataStream::_Internal::anim_data(const A2XAnimDataStream* msg) {
  return *msg->streaming_request_.anim_data_;
}
void A2XAnimDataStream::set_allocated_header(::nvidia::ace::animation::A2XAnimDataStreamHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    streaming_request_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.A2XAnimDataStream.header)
}
void A2XAnimDataStream::set_allocated_anim_data(::nvidia::ace::animation::A2XAnimDataStreamContent* anim_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (anim_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anim_data);
    if (message_arena != submessage_arena) {
      anim_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anim_data, submessage_arena);
    }
    set_has_anim_data();
    streaming_request_.anim_data_ = anim_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.ace.animation.A2XAnimDataStream.anim_data)
}
A2XAnimDataStream::A2XAnimDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia.ace.animation.A2XAnimDataStream)
}
A2XAnimDataStream::A2XAnimDataStream(const A2XAnimDataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kHeader: {
      _internal_mutable_header()->::nvidia::ace::animation::A2XAnimDataStreamHeader::MergeFrom(from._internal_header());
      break;
    }
    case kAnimData: {
      _internal_mutable_anim_data()->::nvidia::ace::animation::A2XAnimDataStreamContent::MergeFrom(from._internal_anim_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.ace.animation.A2XAnimDataStream)
}

void A2XAnimDataStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_A2XAnimDataStream_anim_5fcontroller_2eproto.base);
  clear_has_streaming_request();
}

A2XAnimDataStream::~A2XAnimDataStream() {
  // @@protoc_insertion_point(destructor:nvidia.ace.animation.A2XAnimDataStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void A2XAnimDataStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void A2XAnimDataStream::ArenaDtor(void* object) {
  A2XAnimDataStream* _this = reinterpret_cast< A2XAnimDataStream* >(object);
  (void)_this;
}
void A2XAnimDataStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A2XAnimDataStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const A2XAnimDataStream& A2XAnimDataStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_A2XAnimDataStream_anim_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void A2XAnimDataStream::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:nvidia.ace.animation.A2XAnimDataStream)
  switch (streaming_request_case()) {
    case kHeader: {
      if (GetArena() == nullptr) {
        delete streaming_request_.header_;
      }
      break;
    }
    case kAnimData: {
      if (GetArena() == nullptr) {
        delete streaming_request_.anim_data_;
      }
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void A2XAnimDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.ace.animation.A2XAnimDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A2XAnimDataStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia.ace.animation.A2XAnimDataStreamHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia.ace.animation.A2XAnimDataStreamContent anim_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anim_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* A2XAnimDataStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.ace.animation.A2XAnimDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia.ace.animation.A2XAnimDataStreamHeader header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .nvidia.ace.animation.A2XAnimDataStreamContent anim_data = 2;
  if (_internal_has_anim_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::anim_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.ace.animation.A2XAnimDataStream)
  return target;
}

size_t A2XAnimDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.ace.animation.A2XAnimDataStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .nvidia.ace.animation.A2XAnimDataStreamHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.header_);
      break;
    }
    // .nvidia.ace.animation.A2XAnimDataStreamContent anim_data = 2;
    case kAnimData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.anim_data_);
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A2XAnimDataStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia.ace.animation.A2XAnimDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  const A2XAnimDataStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<A2XAnimDataStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia.ace.animation.A2XAnimDataStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia.ace.animation.A2XAnimDataStream)
    MergeFrom(*source);
  }
}

void A2XAnimDataStream::MergeFrom(const A2XAnimDataStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia.ace.animation.A2XAnimDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kHeader: {
      _internal_mutable_header()->::nvidia::ace::animation::A2XAnimDataStreamHeader::MergeFrom(from._internal_header());
      break;
    }
    case kAnimData: {
      _internal_mutable_anim_data()->::nvidia::ace::animation::A2XAnimDataStreamContent::MergeFrom(from._internal_anim_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void A2XAnimDataStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia.ace.animation.A2XAnimDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2XAnimDataStream::CopyFrom(const A2XAnimDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.ace.animation.A2XAnimDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2XAnimDataStream::IsInitialized() const {
  return true;
}

void A2XAnimDataStream::InternalSwap(A2XAnimDataStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata A2XAnimDataStream::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace animation
}  // namespace ace
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::A2XAudioStream_EmotionMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::A2XAudioStream* Arena::CreateMaybeMessage< ::nvidia::ace::animation::A2XAudioStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::A2XAudioStream >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::A2XAnimDataStreamHeader* Arena::CreateMaybeMessage< ::nvidia::ace::animation::A2XAnimDataStreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::A2XAnimDataStreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::A2XAnimDataStreamContent_FilesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::A2XAnimDataStreamContent* Arena::CreateMaybeMessage< ::nvidia::ace::animation::A2XAnimDataStreamContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::A2XAnimDataStreamContent >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::ace::animation::A2XAnimDataStream* Arena::CreateMaybeMessage< ::nvidia::ace::animation::A2XAnimDataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::ace::animation::A2XAnimDataStream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
