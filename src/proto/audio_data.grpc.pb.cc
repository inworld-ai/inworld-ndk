#include "ProtoDisableWarning.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_data.proto

#include "audio_data.pb.h"
#include "audio_data.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nvidia {
namespace ace {
namespace animation {

static const char* Audio2XService_method_names[] = {
  "/nvidia.ace.animation.Audio2XService/GetStatus",
  "/nvidia.ace.animation.Audio2XService/GetPipelineDotFile",
  "/nvidia.ace.animation.Audio2XService/PushAudioStream",
};

std::unique_ptr< Audio2XService::Stub> Audio2XService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Audio2XService::Stub> stub(new Audio2XService::Stub(channel));
  return stub;
}

Audio2XService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStatus_(Audio2XService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPipelineDotFile_(Audio2XService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushAudioStream_(Audio2XService_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status Audio2XService::Stub::GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::nvidia::ace::animation::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void Audio2XService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void Audio2XService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>* Audio2XService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nvidia::ace::animation::StatusResponse, ::google::protobuf_inworld::Empty, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_GetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::StatusResponse>* Audio2XService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Audio2XService::Stub::GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::nvidia::ace::animation::DotFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), rpcmethod_GetPipelineDotFile_, context, request, response);
}

void Audio2XService::Stub::experimental_async::GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPipelineDotFile_, context, request, response, std::move(f));
}

void Audio2XService::Stub::experimental_async::GetPipelineDotFile(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPipelineDotFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>* Audio2XService::Stub::PrepareAsyncGetPipelineDotFileRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nvidia::ace::animation::DotFileResponse, ::google::protobuf_inworld::Empty, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(channel_.get(), cq, rpcmethod_GetPipelineDotFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nvidia::ace::animation::DotFileResponse>* Audio2XService::Stub::AsyncGetPipelineDotFileRaw(::grpc::ClientContext* context, const ::google::protobuf_inworld::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPipelineDotFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::nvidia::ace::animation::AudioStreamRequest>* Audio2XService::Stub::PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::nvidia::ace::animation::AudioStreamRequest>::Create(channel_.get(), rpcmethod_PushAudioStream_, context, response);
}

void Audio2XService::Stub::experimental_async::PushAudioStream(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::experimental::ClientWriteReactor< ::nvidia::ace::animation::AudioStreamRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::nvidia::ace::animation::AudioStreamRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_PushAudioStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>* Audio2XService::Stub::AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia::ace::animation::AudioStreamRequest>::Create(channel_.get(), cq, rpcmethod_PushAudioStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::nvidia::ace::animation::AudioStreamRequest>* Audio2XService::Stub::PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::ace::animation::AudioStreamResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia::ace::animation::AudioStreamRequest>::Create(channel_.get(), cq, rpcmethod_PushAudioStream_, context, response, false, nullptr);
}

Audio2XService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Audio2XService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Audio2XService::Service, ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::StatusResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](Audio2XService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf_inworld::Empty* req,
             ::nvidia::ace::animation::StatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Audio2XService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Audio2XService::Service, ::google::protobuf_inworld::Empty, ::nvidia::ace::animation::DotFileResponse, ::grpc::protobuf_inworld::MessageLite, ::grpc::protobuf_inworld::MessageLite>(
          [](Audio2XService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf_inworld::Empty* req,
             ::nvidia::ace::animation::DotFileResponse* resp) {
               return service->GetPipelineDotFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Audio2XService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Audio2XService::Service, ::nvidia::ace::animation::AudioStreamRequest, ::nvidia::ace::animation::AudioStreamResponse>(
          [](Audio2XService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::nvidia::ace::animation::AudioStreamRequest>* reader,
             ::nvidia::ace::animation::AudioStreamResponse* resp) {
               return service->PushAudioStream(ctx, reader, resp);
             }, this)));
}

Audio2XService::Service::~Service() {
}

::grpc::Status Audio2XService::Service::GetStatus(::grpc::ServerContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Audio2XService::Service::GetPipelineDotFile(::grpc::ServerContext* context, const ::google::protobuf_inworld::Empty* request, ::nvidia::ace::animation::DotFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Audio2XService::Service::PushAudioStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia::ace::animation::AudioStreamRequest>* reader, ::nvidia::ace::animation::AudioStreamResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvidia
}  // namespace ace
}  // namespace animation

