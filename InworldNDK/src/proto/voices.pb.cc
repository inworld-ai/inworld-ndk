// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voices.proto

#include "ProtoDisableWarning.h"

#include "voices.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace voices {
PROTOBUF_CONSTEXPR Voice::Voice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.basename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tts_type_)*/0
  , /*decltype(_impl_.gender_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.speaking_rate_)*/0
  , /*decltype(_impl_.robotic_voice_filter_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceDefaultTypeInternal() {}
  union {
    Voice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceDefaultTypeInternal _Voice_default_instance_;
}  // namespace voices
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_voices_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_voices_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_voices_2eproto = nullptr;

const uint32_t TableStruct_voices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _impl_.basename_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _impl_.tts_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _impl_.gender_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _impl_.speaking_rate_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _impl_.robotic_voice_filter_level_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::voices::Voice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::voices::_Voice_default_instance_._instance,
};

const char descriptor_table_protodef_voices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014voices.proto\022\021ai.inworld.voices\"\274\001\n\005Vo"
  "ice\022\020\n\010baseName\030\001 \001(\t\022,\n\010tts_type\030\002 \001(\0162"
  "\032.ai.inworld.voices.TTSType\022)\n\006gender\030\003 "
  "\001(\0162\031.ai.inworld.voices.Gender\022\r\n\005pitch\030"
  "\004 \001(\001\022\025\n\rspeaking_rate\030\005 \001(\001\022\"\n\032robotic_"
  "voice_filter_level\030\006 \001(\001*p\n\006Gender\022\034\n\030VO"
  "ICE_GENDER_UNSPECIFIED\020\000\022\025\n\021VOICE_GENDER"
  "_MALE\020\001\022\027\n\023VOICE_GENDER_FEMALE\020\002\022\030\n\024VOIC"
  "E_GENDER_NEUTRAL\020\003*7\n\007TTSType\022\025\n\021TTS_TYP"
  "E_STANDARD\020\000\022\025\n\021TTS_TYPE_ADVANCED\020\001Br\n\021a"
  "i.inworld.voicesB\016VoicesProtocolZMgithub"
  ".com/inworld-ai/inworld/serving/grpc-gat"
  "eway/build/proto/engine/v1alphab\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_voices_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_voices_2eproto = {
    false, false, 519, descriptor_table_protodef_voices_2eproto,
    "voices.proto",
    &descriptor_table_voices_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_voices_2eproto::offsets,
    file_level_metadata_voices_2eproto, file_level_enum_descriptors_voices_2eproto,
    file_level_service_descriptors_voices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_voices_2eproto_getter() {
  return &descriptor_table_voices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_voices_2eproto(&descriptor_table_voices_2eproto);
namespace ai {
namespace inworld {
namespace voices {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_voices_2eproto);
  return file_level_enum_descriptors_voices_2eproto[0];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TTSType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_voices_2eproto);
  return file_level_enum_descriptors_voices_2eproto[1];
}
bool TTSType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Voice::_Internal {
 public:
};

Voice::Voice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.voices.Voice)
}
Voice::Voice(const Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Voice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.basename_){}
    , decltype(_impl_.tts_type_){}
    , decltype(_impl_.gender_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.speaking_rate_){}
    , decltype(_impl_.robotic_voice_filter_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basename().empty()) {
    _this->_impl_.basename_.Set(from._internal_basename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tts_type_, &from._impl_.tts_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.robotic_voice_filter_level_) -
    reinterpret_cast<char*>(&_impl_.tts_type_)) + sizeof(_impl_.robotic_voice_filter_level_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.voices.Voice)
}

inline void Voice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.basename_){}
    , decltype(_impl_.tts_type_){0}
    , decltype(_impl_.gender_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.speaking_rate_){0}
    , decltype(_impl_.robotic_voice_filter_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Voice::~Voice() {
  // @@protoc_insertion_point(destructor:ai.inworld.voices.Voice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Voice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.basename_.Destroy();
}

void Voice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.voices.Voice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.basename_.ClearToEmpty();
  ::memset(&_impl_.tts_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.robotic_voice_filter_level_) -
      reinterpret_cast<char*>(&_impl_.tts_type_)) + sizeof(_impl_.robotic_voice_filter_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Voice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string baseName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.voices.Voice.baseName"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.voices.TTSType tts_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tts_type(static_cast<::ai::inworld::voices::TTSType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.voices.Gender gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::ai::inworld::voices::Gender>(val));
        } else
          goto handle_unusual;
        continue;
      // double pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speaking_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.speaking_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double robotic_voice_filter_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.robotic_voice_filter_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Voice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.voices.Voice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string baseName = 1;
  if (!this->_internal_basename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basename().data(), static_cast<int>(this->_internal_basename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.voices.Voice.baseName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_basename(), target);
  }

  // .ai.inworld.voices.TTSType tts_type = 2;
  if (this->_internal_tts_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tts_type(), target);
  }

  // .ai.inworld.voices.Gender gender = 3;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // double pitch = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_pitch(), target);
  }

  // double speaking_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speaking_rate = this->_internal_speaking_rate();
  uint64_t raw_speaking_rate;
  memcpy(&raw_speaking_rate, &tmp_speaking_rate, sizeof(tmp_speaking_rate));
  if (raw_speaking_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_speaking_rate(), target);
  }

  // double robotic_voice_filter_level = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robotic_voice_filter_level = this->_internal_robotic_voice_filter_level();
  uint64_t raw_robotic_voice_filter_level;
  memcpy(&raw_robotic_voice_filter_level, &tmp_robotic_voice_filter_level, sizeof(tmp_robotic_voice_filter_level));
  if (raw_robotic_voice_filter_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_robotic_voice_filter_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.voices.Voice)
  return target;
}

size_t Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.voices.Voice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string baseName = 1;
  if (!this->_internal_basename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basename());
  }

  // .ai.inworld.voices.TTSType tts_type = 2;
  if (this->_internal_tts_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tts_type());
  }

  // .ai.inworld.voices.Gender gender = 3;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // double pitch = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 8;
  }

  // double speaking_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speaking_rate = this->_internal_speaking_rate();
  uint64_t raw_speaking_rate;
  memcpy(&raw_speaking_rate, &tmp_speaking_rate, sizeof(tmp_speaking_rate));
  if (raw_speaking_rate != 0) {
    total_size += 1 + 8;
  }

  // double robotic_voice_filter_level = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robotic_voice_filter_level = this->_internal_robotic_voice_filter_level();
  uint64_t raw_robotic_voice_filter_level;
  memcpy(&raw_robotic_voice_filter_level, &tmp_robotic_voice_filter_level, sizeof(tmp_robotic_voice_filter_level));
  if (raw_robotic_voice_filter_level != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Voice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Voice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Voice::GetClassData() const { return &_class_data_; }


void Voice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Voice*>(&to_msg);
  auto& from = static_cast<const Voice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.voices.Voice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_basename().empty()) {
    _this->_internal_set_basename(from._internal_basename());
  }
  if (from._internal_tts_type() != 0) {
    _this->_internal_set_tts_type(from._internal_tts_type());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = from._internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speaking_rate = from._internal_speaking_rate();
  uint64_t raw_speaking_rate;
  memcpy(&raw_speaking_rate, &tmp_speaking_rate, sizeof(tmp_speaking_rate));
  if (raw_speaking_rate != 0) {
    _this->_internal_set_speaking_rate(from._internal_speaking_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robotic_voice_filter_level = from._internal_robotic_voice_filter_level();
  uint64_t raw_robotic_voice_filter_level;
  memcpy(&raw_robotic_voice_filter_level, &tmp_robotic_voice_filter_level, sizeof(tmp_robotic_voice_filter_level));
  if (raw_robotic_voice_filter_level != 0) {
    _this->_internal_set_robotic_voice_filter_level(from._internal_robotic_voice_filter_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Voice::CopyFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.voices.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice::IsInitialized() const {
  return true;
}

void Voice::InternalSwap(Voice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basename_, lhs_arena,
      &other->_impl_.basename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Voice, _impl_.robotic_voice_filter_level_)
      + sizeof(Voice::_impl_.robotic_voice_filter_level_)
      - PROTOBUF_FIELD_OFFSET(Voice, _impl_.tts_type_)>(
          reinterpret_cast<char*>(&_impl_.tts_type_),
          reinterpret_cast<char*>(&other->_impl_.tts_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Voice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_voices_2eproto_getter, &descriptor_table_voices_2eproto_once,
      file_level_metadata_voices_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace voices
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::voices::Voice*
Arena::CreateMaybeMessage< ::ai::inworld::voices::Voice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::voices::Voice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
