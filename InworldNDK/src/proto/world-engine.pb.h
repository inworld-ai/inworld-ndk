// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world-engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_2dengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_2dengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "packets.pb.h"
#include "voices.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_2dengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_2dengine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2dengine_2eproto;
namespace ai {
namespace inworld {
namespace engine {
class AccessToken;
struct AccessTokenDefaultTypeInternal;
extern AccessTokenDefaultTypeInternal _AccessToken_default_instance_;
class AudioSettings;
struct AudioSettingsDefaultTypeInternal;
extern AudioSettingsDefaultTypeInternal _AudioSettings_default_instance_;
class CapabilitiesRequest;
struct CapabilitiesRequestDefaultTypeInternal;
extern CapabilitiesRequestDefaultTypeInternal _CapabilitiesRequest_default_instance_;
class ClientRequest;
struct ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class CreateWorldRequest;
struct CreateWorldRequestDefaultTypeInternal;
extern CreateWorldRequestDefaultTypeInternal _CreateWorldRequest_default_instance_;
class CreateWorldRequest_ClientRequest;
struct CreateWorldRequest_ClientRequestDefaultTypeInternal;
extern CreateWorldRequest_ClientRequestDefaultTypeInternal _CreateWorldRequest_ClientRequest_default_instance_;
class CreateWorldRequest_CreateAgentRequest;
struct CreateWorldRequest_CreateAgentRequestDefaultTypeInternal;
extern CreateWorldRequest_CreateAgentRequestDefaultTypeInternal _CreateWorldRequest_CreateAgentRequest_default_instance_;
class CreateWorldResponse;
struct CreateWorldResponseDefaultTypeInternal;
extern CreateWorldResponseDefaultTypeInternal _CreateWorldResponse_default_instance_;
class CreateWorldResponse_Agent;
struct CreateWorldResponse_AgentDefaultTypeInternal;
extern CreateWorldResponse_AgentDefaultTypeInternal _CreateWorldResponse_Agent_default_instance_;
class GenerateTokenRequest;
struct GenerateTokenRequestDefaultTypeInternal;
extern GenerateTokenRequestDefaultTypeInternal _GenerateTokenRequest_default_instance_;
class ListBaseVoicesRequest;
struct ListBaseVoicesRequestDefaultTypeInternal;
extern ListBaseVoicesRequestDefaultTypeInternal _ListBaseVoicesRequest_default_instance_;
class ListBaseVoicesResponce;
struct ListBaseVoicesResponceDefaultTypeInternal;
extern ListBaseVoicesResponceDefaultTypeInternal _ListBaseVoicesResponce_default_instance_;
class ListBaseVoicesResponce_BaseVoice;
struct ListBaseVoicesResponce_BaseVoiceDefaultTypeInternal;
extern ListBaseVoicesResponce_BaseVoiceDefaultTypeInternal _ListBaseVoicesResponce_BaseVoice_default_instance_;
class LoadSceneRequest;
struct LoadSceneRequestDefaultTypeInternal;
extern LoadSceneRequestDefaultTypeInternal _LoadSceneRequest_default_instance_;
class LoadSceneResponse;
struct LoadSceneResponseDefaultTypeInternal;
extern LoadSceneResponseDefaultTypeInternal _LoadSceneResponse_default_instance_;
class LoadSceneResponse_Agent;
struct LoadSceneResponse_AgentDefaultTypeInternal;
extern LoadSceneResponse_AgentDefaultTypeInternal _LoadSceneResponse_Agent_default_instance_;
class LoadSceneResponse_Agent_CharacterAssets;
struct LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal;
extern LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal _LoadSceneResponse_Agent_CharacterAssets_default_instance_;
class LogErrorRequest;
struct LogErrorRequestDefaultTypeInternal;
extern LogErrorRequestDefaultTypeInternal _LogErrorRequest_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class VoicePreviewRequest;
struct VoicePreviewRequestDefaultTypeInternal;
extern VoicePreviewRequestDefaultTypeInternal _VoicePreviewRequest_default_instance_;
class VoicePreviewResponse;
struct VoicePreviewResponseDefaultTypeInternal;
extern VoicePreviewResponseDefaultTypeInternal _VoicePreviewResponse_default_instance_;
}  // namespace engine
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::engine::AccessToken* Arena::CreateMaybeMessage<::ai::inworld::engine::AccessToken>(Arena*);
template<> ::ai::inworld::engine::AudioSettings* Arena::CreateMaybeMessage<::ai::inworld::engine::AudioSettings>(Arena*);
template<> ::ai::inworld::engine::CapabilitiesRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(Arena*);
template<> ::ai::inworld::engine::ClientRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::ClientRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldRequest_ClientRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest_ClientRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldResponse* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldResponse>(Arena*);
template<> ::ai::inworld::engine::CreateWorldResponse_Agent* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldResponse_Agent>(Arena*);
template<> ::ai::inworld::engine::GenerateTokenRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::GenerateTokenRequest>(Arena*);
template<> ::ai::inworld::engine::ListBaseVoicesRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::ListBaseVoicesRequest>(Arena*);
template<> ::ai::inworld::engine::ListBaseVoicesResponce* Arena::CreateMaybeMessage<::ai::inworld::engine::ListBaseVoicesResponce>(Arena*);
template<> ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* Arena::CreateMaybeMessage<::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice>(Arena*);
template<> ::ai::inworld::engine::LoadSceneRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneRequest>(Arena*);
template<> ::ai::inworld::engine::LoadSceneResponse* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse>(Arena*);
template<> ::ai::inworld::engine::LoadSceneResponse_Agent* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent>(Arena*);
template<> ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets>(Arena*);
template<> ::ai::inworld::engine::LogErrorRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::LogErrorRequest>(Arena*);
template<> ::ai::inworld::engine::UserRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::UserRequest>(Arena*);
template<> ::ai::inworld::engine::VoicePreviewRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::VoicePreviewRequest>(Arena*);
template<> ::ai::inworld::engine::VoicePreviewResponse* Arena::CreateMaybeMessage<::ai::inworld::engine::VoicePreviewResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace engine {

enum VoicePreset : int {
  VOICE_PRESET_UNSPECIFIED = 0,
  VOICE_PRESET_FEMALE_1 = 1,
  VOICE_PRESET_FEMALE_2 = 2,
  VOICE_PRESET_FEMALE_3 = 3,
  VOICE_PRESET_FEMALE_4 = 4,
  VOICE_PRESET_FEMALE_5 = 5,
  VOICE_PRESET_MALE_1 = 6,
  VOICE_PRESET_MALE_2 = 7,
  VOICE_PRESET_MALE_3 = 8,
  VOICE_PRESET_MALE_4 = 9,
  VOICE_PRESET_MALE_5 = 10,
  INWORLD_VOICE_PRESET_MALE_1 = 11,
  INWORLD_VOICE_PRESET_MALE_2 = 12,
  INWORLD_VOICE_PRESET_FEMALE_1 = 13,
  INWORLD_VOICE_PRESET_FEMALE_2 = 14,
  INWORLD_VOICE_PRESET_MALE_3 = 15,
  INWORLD_VOICE_PRESET_MALE_4 = 16,
  INWORLD_VOICE_PRESET_MALE_5 = 17,
  INWORLD_VOICE_PRESET_FEMALE_3 = 18,
  INWORLD_VOICE_PRESET_FEMALE_4 = 19,
  INWORLD_VOICE_PRESET_ROBOT_MALE_1 = 20,
  INWORLD_VOICE_PRESET_ROBOT_MALE_2 = 21,
  INWORLD_VOICE_PRESET_ROBOT_MALE_3 = 22,
  INWORLD_VOICE_PRESET_ROBOT_MALE_4 = 23,
  INWORLD_VOICE_PRESET_ROBOT_MALE_5 = 24,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_1 = 25,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_2 = 26,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_3 = 27,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_4 = 28,
  INWORLD_VOICE_PRESET_SPIKE = 29,
  INWORLD_VOICE_PRESET_TWILIGHT = 30,
  INWORLD_VOICE_PRESET_FLUTTERSHY = 31,
  INWORLD_VOICE_PRESET_ROBOT_SPIKE = 32,
  INWORLD_VOICE_PRESET_ROBOT_TWILIGHT = 33,
  INWORLD_VOICE_PRESET_ROBOT_FLUTTERSHY = 34,
  VoicePreset_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VoicePreset_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VoicePreset_IsValid(int value);
constexpr VoicePreset VoicePreset_MIN = VOICE_PRESET_UNSPECIFIED;
constexpr VoicePreset VoicePreset_MAX = INWORLD_VOICE_PRESET_ROBOT_FLUTTERSHY;
constexpr int VoicePreset_ARRAYSIZE = VoicePreset_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoicePreset_descriptor();
template<typename T>
inline const std::string& VoicePreset_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoicePreset>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoicePreset_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoicePreset_descriptor(), enum_t_value);
}
inline bool VoicePreset_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoicePreset* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoicePreset>(
    VoicePreset_descriptor(), name, value);
}
// ===================================================================

class CapabilitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CapabilitiesRequest) */ {
 public:
  inline CapabilitiesRequest() : CapabilitiesRequest(nullptr) {}
  ~CapabilitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapabilitiesRequest(const CapabilitiesRequest& from);
  CapabilitiesRequest(CapabilitiesRequest&& from) noexcept
    : CapabilitiesRequest() {
    *this = ::std::move(from);
  }

  inline CapabilitiesRequest& operator=(const CapabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesRequest& operator=(CapabilitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilitiesRequest* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesRequest*>(
               &_CapabilitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CapabilitiesRequest& a, CapabilitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapabilitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CapabilitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CapabilitiesRequest& from) {
    CapabilitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CapabilitiesRequest";
  }
  protected:
  explicit CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kTextFieldNumber = 2,
    kGesturesFieldNumber = 3,
    kInterruptionsFieldNumber = 4,
    kTriggersFieldNumber = 5,
    kEmotionsFieldNumber = 6,
    kAnimationsFieldNumber = 7,
    kTurnBasedSttFieldNumber = 8,
    kEmotionStreamingFieldNumber = 9,
    kSilenceEventsFieldNumber = 10,
    kPhonemeInfoFieldNumber = 11,
  };
  // bool audio = 1;
  void clear_audio();
  bool audio() const;
  void set_audio(bool value);
  private:
  bool _internal_audio() const;
  void _internal_set_audio(bool value);
  public:

  // bool text = 2;
  void clear_text();
  bool text() const;
  void set_text(bool value);
  private:
  bool _internal_text() const;
  void _internal_set_text(bool value);
  public:

  // bool gestures = 3;
  void clear_gestures();
  bool gestures() const;
  void set_gestures(bool value);
  private:
  bool _internal_gestures() const;
  void _internal_set_gestures(bool value);
  public:

  // bool interruptions = 4;
  void clear_interruptions();
  bool interruptions() const;
  void set_interruptions(bool value);
  private:
  bool _internal_interruptions() const;
  void _internal_set_interruptions(bool value);
  public:

  // bool triggers = 5;
  void clear_triggers();
  bool triggers() const;
  void set_triggers(bool value);
  private:
  bool _internal_triggers() const;
  void _internal_set_triggers(bool value);
  public:

  // bool emotions = 6;
  void clear_emotions();
  bool emotions() const;
  void set_emotions(bool value);
  private:
  bool _internal_emotions() const;
  void _internal_set_emotions(bool value);
  public:

  // bool animations = 7;
  void clear_animations();
  bool animations() const;
  void set_animations(bool value);
  private:
  bool _internal_animations() const;
  void _internal_set_animations(bool value);
  public:

  // bool turn_based_stt = 8;
  void clear_turn_based_stt();
  bool turn_based_stt() const;
  void set_turn_based_stt(bool value);
  private:
  bool _internal_turn_based_stt() const;
  void _internal_set_turn_based_stt(bool value);
  public:

  // bool emotion_streaming = 9;
  void clear_emotion_streaming();
  bool emotion_streaming() const;
  void set_emotion_streaming(bool value);
  private:
  bool _internal_emotion_streaming() const;
  void _internal_set_emotion_streaming(bool value);
  public:

  // bool silence_events = 10;
  void clear_silence_events();
  bool silence_events() const;
  void set_silence_events(bool value);
  private:
  bool _internal_silence_events() const;
  void _internal_set_silence_events(bool value);
  public:

  // bool phoneme_info = 11;
  void clear_phoneme_info();
  bool phoneme_info() const;
  void set_phoneme_info(bool value);
  private:
  bool _internal_phoneme_info() const;
  void _internal_set_phoneme_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CapabilitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool audio_;
    bool text_;
    bool gestures_;
    bool interruptions_;
    bool triggers_;
    bool emotions_;
    bool animations_;
    bool turn_based_stt_;
    bool emotion_streaming_;
    bool silence_events_;
    bool phoneme_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRequest& from) {
    UserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {}
  ~ClientRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientRequest(const ClientRequest& from);
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientRequest& from) {
    ClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ClientRequest";
  }
  protected:
  explicit ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldRequest_CreateAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest) */ {
 public:
  inline CreateWorldRequest_CreateAgentRequest() : CreateWorldRequest_CreateAgentRequest(nullptr) {}
  ~CreateWorldRequest_CreateAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateWorldRequest_CreateAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateWorldRequest_CreateAgentRequest(const CreateWorldRequest_CreateAgentRequest& from);
  CreateWorldRequest_CreateAgentRequest(CreateWorldRequest_CreateAgentRequest&& from) noexcept
    : CreateWorldRequest_CreateAgentRequest() {
    *this = ::std::move(from);
  }

  inline CreateWorldRequest_CreateAgentRequest& operator=(const CreateWorldRequest_CreateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldRequest_CreateAgentRequest& operator=(CreateWorldRequest_CreateAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWorldRequest_CreateAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWorldRequest_CreateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWorldRequest_CreateAgentRequest*>(
               &_CreateWorldRequest_CreateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateWorldRequest_CreateAgentRequest& a, CreateWorldRequest_CreateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldRequest_CreateAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldRequest_CreateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWorldRequest_CreateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWorldRequest_CreateAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateWorldRequest_CreateAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateWorldRequest_CreateAgentRequest& from) {
    CreateWorldRequest_CreateAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldRequest_CreateAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldRequest.CreateAgentRequest";
  }
  protected:
  explicit CreateWorldRequest_CreateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrainNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kVoicePresetFieldNumber = 3,
  };
  // string brain_name = 1;
  void clear_brain_name();
  const std::string& brain_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brain_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brain_name();
  PROTOBUF_NODISCARD std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .ai.inworld.engine.VoicePreset voice_preset = 3;
  void clear_voice_preset();
  ::ai::inworld::engine::VoicePreset voice_preset() const;
  void set_voice_preset(::ai::inworld::engine::VoicePreset value);
  private:
  ::ai::inworld::engine::VoicePreset _internal_voice_preset() const;
  void _internal_set_voice_preset(::ai::inworld::engine::VoicePreset value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    int voice_preset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldRequest_ClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldRequest.ClientRequest) */ {
 public:
  inline CreateWorldRequest_ClientRequest() : CreateWorldRequest_ClientRequest(nullptr) {}
  ~CreateWorldRequest_ClientRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateWorldRequest_ClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateWorldRequest_ClientRequest(const CreateWorldRequest_ClientRequest& from);
  CreateWorldRequest_ClientRequest(CreateWorldRequest_ClientRequest&& from) noexcept
    : CreateWorldRequest_ClientRequest() {
    *this = ::std::move(from);
  }

  inline CreateWorldRequest_ClientRequest& operator=(const CreateWorldRequest_ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldRequest_ClientRequest& operator=(CreateWorldRequest_ClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWorldRequest_ClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWorldRequest_ClientRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWorldRequest_ClientRequest*>(
               &_CreateWorldRequest_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateWorldRequest_ClientRequest& a, CreateWorldRequest_ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldRequest_ClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldRequest_ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWorldRequest_ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWorldRequest_ClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateWorldRequest_ClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateWorldRequest_ClientRequest& from) {
    CreateWorldRequest_ClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldRequest_ClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldRequest.ClientRequest";
  }
  protected:
  explicit CreateWorldRequest_ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldRequest.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldRequest) */ {
 public:
  inline CreateWorldRequest() : CreateWorldRequest(nullptr) {}
  ~CreateWorldRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateWorldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateWorldRequest(const CreateWorldRequest& from);
  CreateWorldRequest(CreateWorldRequest&& from) noexcept
    : CreateWorldRequest() {
    *this = ::std::move(from);
  }

  inline CreateWorldRequest& operator=(const CreateWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldRequest& operator=(CreateWorldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWorldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWorldRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWorldRequest*>(
               &_CreateWorldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateWorldRequest& a, CreateWorldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWorldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWorldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateWorldRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateWorldRequest& from) {
    CreateWorldRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldRequest";
  }
  protected:
  explicit CreateWorldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateWorldRequest_CreateAgentRequest CreateAgentRequest;
  typedef CreateWorldRequest_ClientRequest ClientRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kCreateAgentRequestsFieldNumber = 2,
    kProtoWorldNameFieldNumber = 1,
    kCapabilitiesFieldNumber = 3,
    kUserFieldNumber = 4,
    kClientFieldNumber = 5,
  };
  // repeated .ai.inworld.engine.CreateWorldRequest.CreateAgentRequest create_agent_requests = 2;
  int create_agent_requests_size() const;
  private:
  int _internal_create_agent_requests_size() const;
  public:
  void clear_create_agent_requests();
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* mutable_create_agent_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >*
      mutable_create_agent_requests();
  private:
  const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& _internal_create_agent_requests(int index) const;
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* _internal_add_create_agent_requests();
  public:
  const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& create_agent_requests(int index) const;
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* add_create_agent_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >&
      create_agent_requests() const;

  // string proto_world_name = 1;
  void clear_proto_world_name();
  const std::string& proto_world_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_world_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_world_name();
  PROTOBUF_NODISCARD std::string* release_proto_world_name();
  void set_allocated_proto_world_name(std::string* proto_world_name);
  private:
  const std::string& _internal_proto_world_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_world_name(const std::string& value);
  std::string* _internal_mutable_proto_world_name();
  public:

  // .ai.inworld.engine.CapabilitiesRequest capabilities = 3;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::ai::inworld::engine::CapabilitiesRequest& capabilities() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::CapabilitiesRequest* release_capabilities();
  ::ai::inworld::engine::CapabilitiesRequest* mutable_capabilities();
  void set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities);
  private:
  const ::ai::inworld::engine::CapabilitiesRequest& _internal_capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* _internal_mutable_capabilities();
  public:
  void unsafe_arena_set_allocated_capabilities(
      ::ai::inworld::engine::CapabilitiesRequest* capabilities);
  ::ai::inworld::engine::CapabilitiesRequest* unsafe_arena_release_capabilities();

  // .ai.inworld.engine.UserRequest user = 4;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::ai::inworld::engine::UserRequest& user() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::UserRequest* release_user();
  ::ai::inworld::engine::UserRequest* mutable_user();
  void set_allocated_user(::ai::inworld::engine::UserRequest* user);
  private:
  const ::ai::inworld::engine::UserRequest& _internal_user() const;
  ::ai::inworld::engine::UserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::ai::inworld::engine::UserRequest* user);
  ::ai::inworld::engine::UserRequest* unsafe_arena_release_user();

  // .ai.inworld.engine.CreateWorldRequest.ClientRequest client = 5;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& client() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::CreateWorldRequest_ClientRequest* release_client();
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* mutable_client();
  void set_allocated_client(::ai::inworld::engine::CreateWorldRequest_ClientRequest* client);
  private:
  const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& _internal_client() const;
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ai::inworld::engine::CreateWorldRequest_ClientRequest* client);
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest > create_agent_requests_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_world_name_;
    ::ai::inworld::engine::CapabilitiesRequest* capabilities_;
    ::ai::inworld::engine::UserRequest* user_;
    ::ai::inworld::engine::CreateWorldRequest_ClientRequest* client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldResponse_Agent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldResponse.Agent) */ {
 public:
  inline CreateWorldResponse_Agent() : CreateWorldResponse_Agent(nullptr) {}
  ~CreateWorldResponse_Agent() override;
  explicit PROTOBUF_CONSTEXPR CreateWorldResponse_Agent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateWorldResponse_Agent(const CreateWorldResponse_Agent& from);
  CreateWorldResponse_Agent(CreateWorldResponse_Agent&& from) noexcept
    : CreateWorldResponse_Agent() {
    *this = ::std::move(from);
  }

  inline CreateWorldResponse_Agent& operator=(const CreateWorldResponse_Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldResponse_Agent& operator=(CreateWorldResponse_Agent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWorldResponse_Agent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWorldResponse_Agent* internal_default_instance() {
    return reinterpret_cast<const CreateWorldResponse_Agent*>(
               &_CreateWorldResponse_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateWorldResponse_Agent& a, CreateWorldResponse_Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldResponse_Agent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldResponse_Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWorldResponse_Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWorldResponse_Agent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateWorldResponse_Agent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateWorldResponse_Agent& from) {
    CreateWorldResponse_Agent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldResponse_Agent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldResponse.Agent";
  }
  protected:
  explicit CreateWorldResponse_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kBrainNameFieldNumber = 2,
  };
  // string agent_id = 1;
  void clear_agent_id();
  const std::string& agent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_id();
  PROTOBUF_NODISCARD std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string brain_name = 2;
  void clear_brain_name();
  const std::string& brain_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brain_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brain_name();
  PROTOBUF_NODISCARD std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldResponse.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldResponse) */ {
 public:
  inline CreateWorldResponse() : CreateWorldResponse(nullptr) {}
  ~CreateWorldResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateWorldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateWorldResponse(const CreateWorldResponse& from);
  CreateWorldResponse(CreateWorldResponse&& from) noexcept
    : CreateWorldResponse() {
    *this = ::std::move(from);
  }

  inline CreateWorldResponse& operator=(const CreateWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldResponse& operator=(CreateWorldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWorldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWorldResponse* internal_default_instance() {
    return reinterpret_cast<const CreateWorldResponse*>(
               &_CreateWorldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateWorldResponse& a, CreateWorldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWorldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWorldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateWorldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateWorldResponse& from) {
    CreateWorldResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldResponse";
  }
  protected:
  explicit CreateWorldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateWorldResponse_Agent Agent;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kKeyFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.CreateWorldResponse.Agent agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::ai::inworld::engine::CreateWorldResponse_Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >*
      mutable_agents();
  private:
  const ::ai::inworld::engine::CreateWorldResponse_Agent& _internal_agents(int index) const;
  ::ai::inworld::engine::CreateWorldResponse_Agent* _internal_add_agents();
  public:
  const ::ai::inworld::engine::CreateWorldResponse_Agent& agents(int index) const;
  ::ai::inworld::engine::CreateWorldResponse_Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >&
      agents() const;

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent > agents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneRequest) */ {
 public:
  inline LoadSceneRequest() : LoadSceneRequest(nullptr) {}
  ~LoadSceneRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSceneRequest(const LoadSceneRequest& from);
  LoadSceneRequest(LoadSceneRequest&& from) noexcept
    : LoadSceneRequest() {
    *this = ::std::move(from);
  }

  inline LoadSceneRequest& operator=(const LoadSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneRequest& operator=(LoadSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneRequest* internal_default_instance() {
    return reinterpret_cast<const LoadSceneRequest*>(
               &_LoadSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoadSceneRequest& a, LoadSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadSceneRequest& from) {
    LoadSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneRequest";
  }
  protected:
  explicit LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCapabilitiesFieldNumber = 2,
    kUserFieldNumber = 3,
    kClientFieldNumber = 4,
    kAudioSettingsFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::ai::inworld::engine::CapabilitiesRequest& capabilities() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::CapabilitiesRequest* release_capabilities();
  ::ai::inworld::engine::CapabilitiesRequest* mutable_capabilities();
  void set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities);
  private:
  const ::ai::inworld::engine::CapabilitiesRequest& _internal_capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* _internal_mutable_capabilities();
  public:
  void unsafe_arena_set_allocated_capabilities(
      ::ai::inworld::engine::CapabilitiesRequest* capabilities);
  ::ai::inworld::engine::CapabilitiesRequest* unsafe_arena_release_capabilities();

  // .ai.inworld.engine.UserRequest user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::ai::inworld::engine::UserRequest& user() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::UserRequest* release_user();
  ::ai::inworld::engine::UserRequest* mutable_user();
  void set_allocated_user(::ai::inworld::engine::UserRequest* user);
  private:
  const ::ai::inworld::engine::UserRequest& _internal_user() const;
  ::ai::inworld::engine::UserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::ai::inworld::engine::UserRequest* user);
  ::ai::inworld::engine::UserRequest* unsafe_arena_release_user();

  // .ai.inworld.engine.ClientRequest client = 4;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ai::inworld::engine::ClientRequest& client() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::ClientRequest* release_client();
  ::ai::inworld::engine::ClientRequest* mutable_client();
  void set_allocated_client(::ai::inworld::engine::ClientRequest* client);
  private:
  const ::ai::inworld::engine::ClientRequest& _internal_client() const;
  ::ai::inworld::engine::ClientRequest* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ai::inworld::engine::ClientRequest* client);
  ::ai::inworld::engine::ClientRequest* unsafe_arena_release_client();

  // .ai.inworld.engine.AudioSettings audio_settings = 5;
  bool has_audio_settings() const;
  private:
  bool _internal_has_audio_settings() const;
  public:
  void clear_audio_settings();
  const ::ai::inworld::engine::AudioSettings& audio_settings() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::AudioSettings* release_audio_settings();
  ::ai::inworld::engine::AudioSettings* mutable_audio_settings();
  void set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* audio_settings);
  private:
  const ::ai::inworld::engine::AudioSettings& _internal_audio_settings() const;
  ::ai::inworld::engine::AudioSettings* _internal_mutable_audio_settings();
  public:
  void unsafe_arena_set_allocated_audio_settings(
      ::ai::inworld::engine::AudioSettings* audio_settings);
  ::ai::inworld::engine::AudioSettings* unsafe_arena_release_audio_settings();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::ai::inworld::engine::CapabilitiesRequest* capabilities_;
    ::ai::inworld::engine::UserRequest* user_;
    ::ai::inworld::engine::ClientRequest* client_;
    ::ai::inworld::engine::AudioSettings* audio_settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class AudioSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.AudioSettings) */ {
 public:
  inline AudioSettings() : AudioSettings(nullptr) {}
  ~AudioSettings() override;
  explicit PROTOBUF_CONSTEXPR AudioSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioSettings(const AudioSettings& from);
  AudioSettings(AudioSettings&& from) noexcept
    : AudioSettings() {
    *this = ::std::move(from);
  }

  inline AudioSettings& operator=(const AudioSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSettings& operator=(AudioSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioSettings* internal_default_instance() {
    return reinterpret_cast<const AudioSettings*>(
               &_AudioSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioSettings& a, AudioSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AudioSettings& from) {
    AudioSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.AudioSettings";
  }
  protected:
  explicit AudioSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSttSampleRateHertzFieldNumber = 1,
    kTtsSampleRateHertzFieldNumber = 2,
  };
  // uint32 stt_sample_rate_hertz = 1;
  void clear_stt_sample_rate_hertz();
  uint32_t stt_sample_rate_hertz() const;
  void set_stt_sample_rate_hertz(uint32_t value);
  private:
  uint32_t _internal_stt_sample_rate_hertz() const;
  void _internal_set_stt_sample_rate_hertz(uint32_t value);
  public:

  // uint32 tts_sample_rate_hertz = 2;
  void clear_tts_sample_rate_hertz();
  uint32_t tts_sample_rate_hertz() const;
  void set_tts_sample_rate_hertz(uint32_t value);
  private:
  uint32_t _internal_tts_sample_rate_hertz() const;
  void _internal_set_tts_sample_rate_hertz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.AudioSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t stt_sample_rate_hertz_;
    uint32_t tts_sample_rate_hertz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse_Agent_CharacterAssets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets) */ {
 public:
  inline LoadSceneResponse_Agent_CharacterAssets() : LoadSceneResponse_Agent_CharacterAssets(nullptr) {}
  ~LoadSceneResponse_Agent_CharacterAssets() override;
  explicit PROTOBUF_CONSTEXPR LoadSceneResponse_Agent_CharacterAssets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSceneResponse_Agent_CharacterAssets(const LoadSceneResponse_Agent_CharacterAssets& from);
  LoadSceneResponse_Agent_CharacterAssets(LoadSceneResponse_Agent_CharacterAssets&& from) noexcept
    : LoadSceneResponse_Agent_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse_Agent_CharacterAssets& operator=(const LoadSceneResponse_Agent_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse_Agent_CharacterAssets& operator=(LoadSceneResponse_Agent_CharacterAssets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse_Agent_CharacterAssets& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse_Agent_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse_Agent_CharacterAssets*>(
               &_LoadSceneResponse_Agent_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoadSceneResponse_Agent_CharacterAssets& a, LoadSceneResponse_Agent_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse_Agent_CharacterAssets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse_Agent_CharacterAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneResponse_Agent_CharacterAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent_CharacterAssets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse_Agent_CharacterAssets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadSceneResponse_Agent_CharacterAssets& from) {
    LoadSceneResponse_Agent_CharacterAssets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse_Agent_CharacterAssets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets";
  }
  protected:
  explicit LoadSceneResponse_Agent_CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 1,
    kRpmImageUriPortraitFieldNumber = 2,
    kRpmImageUriPostureFieldNumber = 3,
  };
  // string rpm_model_uri = 1;
  void clear_rpm_model_uri();
  const std::string& rpm_model_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpm_model_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpm_model_uri();
  PROTOBUF_NODISCARD std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* rpm_model_uri);
  private:
  const std::string& _internal_rpm_model_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_model_uri(const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();
  public:

  // string rpm_image_uri_portrait = 2;
  void clear_rpm_image_uri_portrait();
  const std::string& rpm_image_uri_portrait() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpm_image_uri_portrait(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpm_image_uri_portrait();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait);
  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_portrait(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();
  public:

  // string rpm_image_uri_posture = 3;
  void clear_rpm_image_uri_posture();
  const std::string& rpm_image_uri_posture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpm_image_uri_posture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpm_image_uri_posture();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture);
  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_posture(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_model_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_portrait_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_posture_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse_Agent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse.Agent) */ {
 public:
  inline LoadSceneResponse_Agent() : LoadSceneResponse_Agent(nullptr) {}
  ~LoadSceneResponse_Agent() override;
  explicit PROTOBUF_CONSTEXPR LoadSceneResponse_Agent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSceneResponse_Agent(const LoadSceneResponse_Agent& from);
  LoadSceneResponse_Agent(LoadSceneResponse_Agent&& from) noexcept
    : LoadSceneResponse_Agent() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse_Agent& operator=(const LoadSceneResponse_Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse_Agent& operator=(LoadSceneResponse_Agent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse_Agent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse_Agent* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse_Agent*>(
               &_LoadSceneResponse_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LoadSceneResponse_Agent& a, LoadSceneResponse_Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse_Agent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse_Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneResponse_Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse_Agent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadSceneResponse_Agent& from) {
    LoadSceneResponse_Agent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse_Agent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse.Agent";
  }
  protected:
  explicit LoadSceneResponse_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoadSceneResponse_Agent_CharacterAssets CharacterAssets;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kBrainNameFieldNumber = 2,
    kGivenNameFieldNumber = 3,
    kCharacterAssetsFieldNumber = 4,
  };
  // string agent_id = 1;
  void clear_agent_id();
  const std::string& agent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_id();
  PROTOBUF_NODISCARD std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string brain_name = 2;
  void clear_brain_name();
  const std::string& brain_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brain_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brain_name();
  PROTOBUF_NODISCARD std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // string given_name = 3;
  void clear_given_name();
  const std::string& given_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_given_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_given_name();
  PROTOBUF_NODISCARD std::string* release_given_name();
  void set_allocated_given_name(std::string* given_name);
  private:
  const std::string& _internal_given_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_given_name(const std::string& value);
  std::string* _internal_mutable_given_name();
  public:

  // .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
  bool has_character_assets() const;
  private:
  bool _internal_has_character_assets() const;
  public:
  void clear_character_assets();
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& character_assets() const;
  PROTOBUF_NODISCARD ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* release_character_assets();
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* mutable_character_assets();
  void set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets);
  private:
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& _internal_character_assets() const;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* _internal_mutable_character_assets();
  public:
  void unsafe_arena_set_allocated_character_assets(
      ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets);
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* unsafe_arena_release_character_assets();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr given_name_;
    ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse) */ {
 public:
  inline LoadSceneResponse() : LoadSceneResponse(nullptr) {}
  ~LoadSceneResponse() override;
  explicit PROTOBUF_CONSTEXPR LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSceneResponse(const LoadSceneResponse& from);
  LoadSceneResponse(LoadSceneResponse&& from) noexcept
    : LoadSceneResponse() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse& operator=(const LoadSceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse& operator=(LoadSceneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse*>(
               &_LoadSceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LoadSceneResponse& a, LoadSceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSceneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSceneResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadSceneResponse& from) {
    LoadSceneResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse";
  }
  protected:
  explicit LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoadSceneResponse_Agent Agent;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::ai::inworld::engine::LoadSceneResponse_Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >*
      mutable_agents();
  private:
  const ::ai::inworld::engine::LoadSceneResponse_Agent& _internal_agents(int index) const;
  ::ai::inworld::engine::LoadSceneResponse_Agent* _internal_add_agents();
  public:
  const ::ai::inworld::engine::LoadSceneResponse_Agent& agents(int index) const;
  ::ai::inworld::engine::LoadSceneResponse_Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >&
      agents() const;

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent > agents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LogErrorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LogErrorRequest) */ {
 public:
  inline LogErrorRequest() : LogErrorRequest(nullptr) {}
  ~LogErrorRequest() override;
  explicit PROTOBUF_CONSTEXPR LogErrorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogErrorRequest(const LogErrorRequest& from);
  LogErrorRequest(LogErrorRequest&& from) noexcept
    : LogErrorRequest() {
    *this = ::std::move(from);
  }

  inline LogErrorRequest& operator=(const LogErrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogErrorRequest& operator=(LogErrorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogErrorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogErrorRequest* internal_default_instance() {
    return reinterpret_cast<const LogErrorRequest*>(
               &_LogErrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LogErrorRequest& a, LogErrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogErrorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogErrorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogErrorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogErrorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogErrorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogErrorRequest& from) {
    LogErrorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogErrorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LogErrorRequest";
  }
  protected:
  explicit LogErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LogErrorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class VoicePreviewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.VoicePreviewRequest) */ {
 public:
  inline VoicePreviewRequest() : VoicePreviewRequest(nullptr) {}
  ~VoicePreviewRequest() override;
  explicit PROTOBUF_CONSTEXPR VoicePreviewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoicePreviewRequest(const VoicePreviewRequest& from);
  VoicePreviewRequest(VoicePreviewRequest&& from) noexcept
    : VoicePreviewRequest() {
    *this = ::std::move(from);
  }

  inline VoicePreviewRequest& operator=(const VoicePreviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoicePreviewRequest& operator=(VoicePreviewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoicePreviewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoicePreviewRequest* internal_default_instance() {
    return reinterpret_cast<const VoicePreviewRequest*>(
               &_VoicePreviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VoicePreviewRequest& a, VoicePreviewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoicePreviewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoicePreviewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoicePreviewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoicePreviewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoicePreviewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoicePreviewRequest& from) {
    VoicePreviewRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoicePreviewRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.VoicePreviewRequest";
  }
  protected:
  explicit VoicePreviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kEmotionsFieldNumber = 2,
    kVoiceFieldNumber = 3,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .ai.inworld.packets.EmotionEvent emotions = 2;
  bool has_emotions() const;
  private:
  bool _internal_has_emotions() const;
  public:
  void clear_emotions();
  const ::ai::inworld::packets::EmotionEvent& emotions() const;
  PROTOBUF_NODISCARD ::ai::inworld::packets::EmotionEvent* release_emotions();
  ::ai::inworld::packets::EmotionEvent* mutable_emotions();
  void set_allocated_emotions(::ai::inworld::packets::EmotionEvent* emotions);
  private:
  const ::ai::inworld::packets::EmotionEvent& _internal_emotions() const;
  ::ai::inworld::packets::EmotionEvent* _internal_mutable_emotions();
  public:
  void unsafe_arena_set_allocated_emotions(
      ::ai::inworld::packets::EmotionEvent* emotions);
  ::ai::inworld::packets::EmotionEvent* unsafe_arena_release_emotions();

  // .ai.inworld.voices.Voice voice = 3;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::ai::inworld::voices::Voice& voice() const;
  PROTOBUF_NODISCARD ::ai::inworld::voices::Voice* release_voice();
  ::ai::inworld::voices::Voice* mutable_voice();
  void set_allocated_voice(::ai::inworld::voices::Voice* voice);
  private:
  const ::ai::inworld::voices::Voice& _internal_voice() const;
  ::ai::inworld::voices::Voice* _internal_mutable_voice();
  public:
  void unsafe_arena_set_allocated_voice(
      ::ai::inworld::voices::Voice* voice);
  ::ai::inworld::voices::Voice* unsafe_arena_release_voice();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.VoicePreviewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::ai::inworld::packets::EmotionEvent* emotions_;
    ::ai::inworld::voices::Voice* voice_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class VoicePreviewResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.VoicePreviewResponse) */ {
 public:
  inline VoicePreviewResponse() : VoicePreviewResponse(nullptr) {}
  ~VoicePreviewResponse() override;
  explicit PROTOBUF_CONSTEXPR VoicePreviewResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoicePreviewResponse(const VoicePreviewResponse& from);
  VoicePreviewResponse(VoicePreviewResponse&& from) noexcept
    : VoicePreviewResponse() {
    *this = ::std::move(from);
  }

  inline VoicePreviewResponse& operator=(const VoicePreviewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoicePreviewResponse& operator=(VoicePreviewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoicePreviewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoicePreviewResponse* internal_default_instance() {
    return reinterpret_cast<const VoicePreviewResponse*>(
               &_VoicePreviewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VoicePreviewResponse& a, VoicePreviewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VoicePreviewResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoicePreviewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoicePreviewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoicePreviewResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoicePreviewResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoicePreviewResponse& from) {
    VoicePreviewResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoicePreviewResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.VoicePreviewResponse";
  }
  protected:
  explicit VoicePreviewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.VoicePreviewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ListBaseVoicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesRequest) */ {
 public:
  inline ListBaseVoicesRequest() : ListBaseVoicesRequest(nullptr) {}
  ~ListBaseVoicesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListBaseVoicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBaseVoicesRequest(const ListBaseVoicesRequest& from);
  ListBaseVoicesRequest(ListBaseVoicesRequest&& from) noexcept
    : ListBaseVoicesRequest() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesRequest& operator=(const ListBaseVoicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesRequest& operator=(ListBaseVoicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseVoicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseVoicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesRequest*>(
               &_ListBaseVoicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListBaseVoicesRequest& a, ListBaseVoicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseVoicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseVoicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBaseVoicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListBaseVoicesRequest& from) {
    ListBaseVoicesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseVoicesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesRequest";
  }
  protected:
  explicit ListBaseVoicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtsTypesFieldNumber = 2,
    kLanguageCodeFieldNumber = 1,
  };
  // repeated .ai.inworld.voices.TTSType tts_types = 2;
  int tts_types_size() const;
  private:
  int _internal_tts_types_size() const;
  public:
  void clear_tts_types();
  private:
  ::ai::inworld::voices::TTSType _internal_tts_types(int index) const;
  void _internal_add_tts_types(::ai::inworld::voices::TTSType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_tts_types();
  public:
  ::ai::inworld::voices::TTSType tts_types(int index) const;
  void set_tts_types(int index, ::ai::inworld::voices::TTSType value);
  void add_tts_types(::ai::inworld::voices::TTSType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& tts_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_tts_types();

  // string language_code = 1;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> tts_types_;
    mutable std::atomic<int> _tts_types_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ListBaseVoicesResponce_BaseVoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice) */ {
 public:
  inline ListBaseVoicesResponce_BaseVoice() : ListBaseVoicesResponce_BaseVoice(nullptr) {}
  ~ListBaseVoicesResponce_BaseVoice() override;
  explicit PROTOBUF_CONSTEXPR ListBaseVoicesResponce_BaseVoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBaseVoicesResponce_BaseVoice(const ListBaseVoicesResponce_BaseVoice& from);
  ListBaseVoicesResponce_BaseVoice(ListBaseVoicesResponce_BaseVoice&& from) noexcept
    : ListBaseVoicesResponce_BaseVoice() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesResponce_BaseVoice& operator=(const ListBaseVoicesResponce_BaseVoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesResponce_BaseVoice& operator=(ListBaseVoicesResponce_BaseVoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseVoicesResponce_BaseVoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseVoicesResponce_BaseVoice* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesResponce_BaseVoice*>(
               &_ListBaseVoicesResponce_BaseVoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListBaseVoicesResponce_BaseVoice& a, ListBaseVoicesResponce_BaseVoice& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesResponce_BaseVoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesResponce_BaseVoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseVoicesResponce_BaseVoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseVoicesResponce_BaseVoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBaseVoicesResponce_BaseVoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListBaseVoicesResponce_BaseVoice& from) {
    ListBaseVoicesResponce_BaseVoice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseVoicesResponce_BaseVoice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesResponce.BaseVoice";
  }
  protected:
  explicit ListBaseVoicesResponce_BaseVoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 1,
    kNameFieldNumber = 2,
    kGenderFieldNumber = 3,
    kNaturalSampleRateHertzFieldNumber = 4,
  };
  // repeated string language_codes = 1;
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;
  public:
  void clear_language_codes();
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, size_t size);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& language_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_language_codes();
  private:
  const std::string& _internal_language_codes(int index) const;
  std::string* _internal_add_language_codes();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ai.inworld.voices.Gender gender = 3;
  void clear_gender();
  ::ai::inworld::voices::Gender gender() const;
  void set_gender(::ai::inworld::voices::Gender value);
  private:
  ::ai::inworld::voices::Gender _internal_gender() const;
  void _internal_set_gender(::ai::inworld::voices::Gender value);
  public:

  // int32 naturalSampleRateHertz = 4;
  void clear_naturalsampleratehertz();
  int32_t naturalsampleratehertz() const;
  void set_naturalsampleratehertz(int32_t value);
  private:
  int32_t _internal_naturalsampleratehertz() const;
  void _internal_set_naturalsampleratehertz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> language_codes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int gender_;
    int32_t naturalsampleratehertz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ListBaseVoicesResponce final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesResponce) */ {
 public:
  inline ListBaseVoicesResponce() : ListBaseVoicesResponce(nullptr) {}
  ~ListBaseVoicesResponce() override;
  explicit PROTOBUF_CONSTEXPR ListBaseVoicesResponce(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBaseVoicesResponce(const ListBaseVoicesResponce& from);
  ListBaseVoicesResponce(ListBaseVoicesResponce&& from) noexcept
    : ListBaseVoicesResponce() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesResponce& operator=(const ListBaseVoicesResponce& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesResponce& operator=(ListBaseVoicesResponce&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBaseVoicesResponce& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBaseVoicesResponce* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesResponce*>(
               &_ListBaseVoicesResponce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListBaseVoicesResponce& a, ListBaseVoicesResponce& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesResponce* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesResponce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBaseVoicesResponce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBaseVoicesResponce>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBaseVoicesResponce& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListBaseVoicesResponce& from) {
    ListBaseVoicesResponce::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseVoicesResponce* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesResponce";
  }
  protected:
  explicit ListBaseVoicesResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListBaseVoicesResponce_BaseVoice BaseVoice;

  // accessors -------------------------------------------------------

  enum : int {
    kGoogleVoicesFieldNumber = 1,
    kInworldVoicesFieldNumber = 2,
  };
  // repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice googleVoices = 1;
  int googlevoices_size() const;
  private:
  int _internal_googlevoices_size() const;
  public:
  void clear_googlevoices();
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* mutable_googlevoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
      mutable_googlevoices();
  private:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& _internal_googlevoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _internal_add_googlevoices();
  public:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& googlevoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* add_googlevoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
      googlevoices() const;

  // repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice inworldVoices = 2;
  int inworldvoices_size() const;
  private:
  int _internal_inworldvoices_size() const;
  public:
  void clear_inworldvoices();
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* mutable_inworldvoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
      mutable_inworldvoices();
  private:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& _internal_inworldvoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _internal_add_inworldvoices();
  public:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& inworldvoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* add_inworldvoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
      inworldvoices() const;

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesResponce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice > googlevoices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice > inworldvoices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class AccessToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.AccessToken) */ {
 public:
  inline AccessToken() : AccessToken(nullptr) {}
  ~AccessToken() override;
  explicit PROTOBUF_CONSTEXPR AccessToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessToken(const AccessToken& from);
  AccessToken(AccessToken&& from) noexcept
    : AccessToken() {
    *this = ::std::move(from);
  }

  inline AccessToken& operator=(const AccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessToken& operator=(AccessToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessToken* internal_default_instance() {
    return reinterpret_cast<const AccessToken*>(
               &_AccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AccessToken& a, AccessToken& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccessToken& from) {
    AccessToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.AccessToken";
  }
  protected:
  explicit AccessToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kExpirationTimeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string session_id = 4;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.AccessToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class GenerateTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.GenerateTokenRequest) */ {
 public:
  inline GenerateTokenRequest() : GenerateTokenRequest(nullptr) {}
  ~GenerateTokenRequest() override;
  explicit PROTOBUF_CONSTEXPR GenerateTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateTokenRequest(const GenerateTokenRequest& from);
  GenerateTokenRequest(GenerateTokenRequest&& from) noexcept
    : GenerateTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateTokenRequest& operator=(const GenerateTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenRequest& operator=(GenerateTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenRequest*>(
               &_GenerateTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GenerateTokenRequest& a, GenerateTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateTokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateTokenRequest& from) {
    GenerateTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateTokenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.GenerateTokenRequest";
  }
  protected:
  explicit GenerateTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.GenerateTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CapabilitiesRequest

// bool audio = 1;
inline void CapabilitiesRequest::clear_audio() {
  _impl_.audio_ = false;
}
inline bool CapabilitiesRequest::_internal_audio() const {
  return _impl_.audio_;
}
inline bool CapabilitiesRequest::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.audio)
  return _internal_audio();
}
inline void CapabilitiesRequest::_internal_set_audio(bool value) {
  
  _impl_.audio_ = value;
}
inline void CapabilitiesRequest::set_audio(bool value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.audio)
}

// bool text = 2;
inline void CapabilitiesRequest::clear_text() {
  _impl_.text_ = false;
}
inline bool CapabilitiesRequest::_internal_text() const {
  return _impl_.text_;
}
inline bool CapabilitiesRequest::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.text)
  return _internal_text();
}
inline void CapabilitiesRequest::_internal_set_text(bool value) {
  
  _impl_.text_ = value;
}
inline void CapabilitiesRequest::set_text(bool value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.text)
}

// bool gestures = 3;
inline void CapabilitiesRequest::clear_gestures() {
  _impl_.gestures_ = false;
}
inline bool CapabilitiesRequest::_internal_gestures() const {
  return _impl_.gestures_;
}
inline bool CapabilitiesRequest::gestures() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.gestures)
  return _internal_gestures();
}
inline void CapabilitiesRequest::_internal_set_gestures(bool value) {
  
  _impl_.gestures_ = value;
}
inline void CapabilitiesRequest::set_gestures(bool value) {
  _internal_set_gestures(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.gestures)
}

// bool interruptions = 4;
inline void CapabilitiesRequest::clear_interruptions() {
  _impl_.interruptions_ = false;
}
inline bool CapabilitiesRequest::_internal_interruptions() const {
  return _impl_.interruptions_;
}
inline bool CapabilitiesRequest::interruptions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.interruptions)
  return _internal_interruptions();
}
inline void CapabilitiesRequest::_internal_set_interruptions(bool value) {
  
  _impl_.interruptions_ = value;
}
inline void CapabilitiesRequest::set_interruptions(bool value) {
  _internal_set_interruptions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.interruptions)
}

// bool triggers = 5;
inline void CapabilitiesRequest::clear_triggers() {
  _impl_.triggers_ = false;
}
inline bool CapabilitiesRequest::_internal_triggers() const {
  return _impl_.triggers_;
}
inline bool CapabilitiesRequest::triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.triggers)
  return _internal_triggers();
}
inline void CapabilitiesRequest::_internal_set_triggers(bool value) {
  
  _impl_.triggers_ = value;
}
inline void CapabilitiesRequest::set_triggers(bool value) {
  _internal_set_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.triggers)
}

// bool emotions = 6;
inline void CapabilitiesRequest::clear_emotions() {
  _impl_.emotions_ = false;
}
inline bool CapabilitiesRequest::_internal_emotions() const {
  return _impl_.emotions_;
}
inline bool CapabilitiesRequest::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.emotions)
  return _internal_emotions();
}
inline void CapabilitiesRequest::_internal_set_emotions(bool value) {
  
  _impl_.emotions_ = value;
}
inline void CapabilitiesRequest::set_emotions(bool value) {
  _internal_set_emotions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.emotions)
}

// bool animations = 7;
inline void CapabilitiesRequest::clear_animations() {
  _impl_.animations_ = false;
}
inline bool CapabilitiesRequest::_internal_animations() const {
  return _impl_.animations_;
}
inline bool CapabilitiesRequest::animations() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.animations)
  return _internal_animations();
}
inline void CapabilitiesRequest::_internal_set_animations(bool value) {
  
  _impl_.animations_ = value;
}
inline void CapabilitiesRequest::set_animations(bool value) {
  _internal_set_animations(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.animations)
}

// bool turn_based_stt = 8;
inline void CapabilitiesRequest::clear_turn_based_stt() {
  _impl_.turn_based_stt_ = false;
}
inline bool CapabilitiesRequest::_internal_turn_based_stt() const {
  return _impl_.turn_based_stt_;
}
inline bool CapabilitiesRequest::turn_based_stt() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.turn_based_stt)
  return _internal_turn_based_stt();
}
inline void CapabilitiesRequest::_internal_set_turn_based_stt(bool value) {
  
  _impl_.turn_based_stt_ = value;
}
inline void CapabilitiesRequest::set_turn_based_stt(bool value) {
  _internal_set_turn_based_stt(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.turn_based_stt)
}

// bool emotion_streaming = 9;
inline void CapabilitiesRequest::clear_emotion_streaming() {
  _impl_.emotion_streaming_ = false;
}
inline bool CapabilitiesRequest::_internal_emotion_streaming() const {
  return _impl_.emotion_streaming_;
}
inline bool CapabilitiesRequest::emotion_streaming() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.emotion_streaming)
  return _internal_emotion_streaming();
}
inline void CapabilitiesRequest::_internal_set_emotion_streaming(bool value) {
  
  _impl_.emotion_streaming_ = value;
}
inline void CapabilitiesRequest::set_emotion_streaming(bool value) {
  _internal_set_emotion_streaming(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.emotion_streaming)
}

// bool silence_events = 10;
inline void CapabilitiesRequest::clear_silence_events() {
  _impl_.silence_events_ = false;
}
inline bool CapabilitiesRequest::_internal_silence_events() const {
  return _impl_.silence_events_;
}
inline bool CapabilitiesRequest::silence_events() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.silence_events)
  return _internal_silence_events();
}
inline void CapabilitiesRequest::_internal_set_silence_events(bool value) {
  
  _impl_.silence_events_ = value;
}
inline void CapabilitiesRequest::set_silence_events(bool value) {
  _internal_set_silence_events(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.silence_events)
}

// bool phoneme_info = 11;
inline void CapabilitiesRequest::clear_phoneme_info() {
  _impl_.phoneme_info_ = false;
}
inline bool CapabilitiesRequest::_internal_phoneme_info() const {
  return _impl_.phoneme_info_;
}
inline bool CapabilitiesRequest::phoneme_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.phoneme_info)
  return _internal_phoneme_info();
}
inline void CapabilitiesRequest::_internal_set_phoneme_info(bool value) {
  
  _impl_.phoneme_info_ = value;
}
inline void CapabilitiesRequest::set_phoneme_info(bool value) {
  _internal_set_phoneme_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.phoneme_info)
}

// -------------------------------------------------------------------

// UserRequest

// string name = 1;
inline void UserRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserRequest.name)
}
inline std::string* UserRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserRequest.name)
  return _s;
}
inline const std::string& UserRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserRequest.name)
  return _impl_.name_.Release();
}
inline void UserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserRequest.name)
}

// string id = 2;
inline void UserRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserRequest::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserRequest.id)
}
inline std::string* UserRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserRequest.id)
  return _s;
}
inline const std::string& UserRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UserRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRequest::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserRequest.id)
  return _impl_.id_.Release();
}
inline void UserRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserRequest.id)
}

// -------------------------------------------------------------------

// ClientRequest

// string id = 1;
inline void ClientRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ClientRequest::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.id)
}
inline std::string* ClientRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.id)
  return _s;
}
inline const std::string& ClientRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ClientRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientRequest::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.id)
  return _impl_.id_.Release();
}
inline void ClientRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.id)
}

// string version = 2;
inline void ClientRequest::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ClientRequest::version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientRequest::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.version)
}
inline std::string* ClientRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.version)
  return _s;
}
inline const std::string& ClientRequest::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ClientRequest::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientRequest::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientRequest::release_version() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.version)
  return _impl_.version_.Release();
}
inline void ClientRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.version)
}

// -------------------------------------------------------------------

// CreateWorldRequest_CreateAgentRequest

// string brain_name = 1;
inline void CreateWorldRequest_CreateAgentRequest::clear_brain_name() {
  _impl_.brain_name_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
  return _internal_brain_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldRequest_CreateAgentRequest::set_brain_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.brain_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}
inline std::string* CreateWorldRequest_CreateAgentRequest::mutable_brain_name() {
  std::string* _s = _internal_mutable_brain_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
  return _s;
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::_internal_brain_name() const {
  return _impl_.brain_name_.Get();
}
inline void CreateWorldRequest_CreateAgentRequest::_internal_set_brain_name(const std::string& value) {
  
  _impl_.brain_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_CreateAgentRequest::_internal_mutable_brain_name() {
  
  return _impl_.brain_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_CreateAgentRequest::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
  return _impl_.brain_name_.Release();
}
inline void CreateWorldRequest_CreateAgentRequest::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  _impl_.brain_name_.SetAllocated(brain_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.brain_name_.IsDefault()) {
    _impl_.brain_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}

// string language_code = 2;
inline void CreateWorldRequest_CreateAgentRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::language_code() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldRequest_CreateAgentRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}
inline std::string* CreateWorldRequest_CreateAgentRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
  return _s;
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void CreateWorldRequest_CreateAgentRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_CreateAgentRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_CreateAgentRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void CreateWorldRequest_CreateAgentRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}

// .ai.inworld.engine.VoicePreset voice_preset = 3;
inline void CreateWorldRequest_CreateAgentRequest::clear_voice_preset() {
  _impl_.voice_preset_ = 0;
}
inline ::ai::inworld::engine::VoicePreset CreateWorldRequest_CreateAgentRequest::_internal_voice_preset() const {
  return static_cast< ::ai::inworld::engine::VoicePreset >(_impl_.voice_preset_);
}
inline ::ai::inworld::engine::VoicePreset CreateWorldRequest_CreateAgentRequest::voice_preset() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.voice_preset)
  return _internal_voice_preset();
}
inline void CreateWorldRequest_CreateAgentRequest::_internal_set_voice_preset(::ai::inworld::engine::VoicePreset value) {
  
  _impl_.voice_preset_ = value;
}
inline void CreateWorldRequest_CreateAgentRequest::set_voice_preset(::ai::inworld::engine::VoicePreset value) {
  _internal_set_voice_preset(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.voice_preset)
}

// -------------------------------------------------------------------

// CreateWorldRequest_ClientRequest

// string id = 1;
inline void CreateWorldRequest_ClientRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_ClientRequest::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldRequest_ClientRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}
inline std::string* CreateWorldRequest_ClientRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
  return _s;
}
inline const std::string& CreateWorldRequest_ClientRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CreateWorldRequest_ClientRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_ClientRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_ClientRequest::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
  return _impl_.id_.Release();
}
inline void CreateWorldRequest_ClientRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}

// string version = 2;
inline void CreateWorldRequest_ClientRequest::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_ClientRequest::version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldRequest_ClientRequest::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}
inline std::string* CreateWorldRequest_ClientRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
  return _s;
}
inline const std::string& CreateWorldRequest_ClientRequest::_internal_version() const {
  return _impl_.version_.Get();
}
inline void CreateWorldRequest_ClientRequest::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_ClientRequest::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldRequest_ClientRequest::release_version() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
  return _impl_.version_.Release();
}
inline void CreateWorldRequest_ClientRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}

// -------------------------------------------------------------------

// CreateWorldRequest

// string proto_world_name = 1;
inline void CreateWorldRequest::clear_proto_world_name() {
  _impl_.proto_world_name_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest::proto_world_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.proto_world_name)
  return _internal_proto_world_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldRequest::set_proto_world_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proto_world_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}
inline std::string* CreateWorldRequest::mutable_proto_world_name() {
  std::string* _s = _internal_mutable_proto_world_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.proto_world_name)
  return _s;
}
inline const std::string& CreateWorldRequest::_internal_proto_world_name() const {
  return _impl_.proto_world_name_.Get();
}
inline void CreateWorldRequest::_internal_set_proto_world_name(const std::string& value) {
  
  _impl_.proto_world_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldRequest::_internal_mutable_proto_world_name() {
  
  return _impl_.proto_world_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldRequest::release_proto_world_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.proto_world_name)
  return _impl_.proto_world_name_.Release();
}
inline void CreateWorldRequest::set_allocated_proto_world_name(std::string* proto_world_name) {
  if (proto_world_name != nullptr) {
    
  } else {
    
  }
  _impl_.proto_world_name_.SetAllocated(proto_world_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_world_name_.IsDefault()) {
    _impl_.proto_world_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}

// repeated .ai.inworld.engine.CreateWorldRequest.CreateAgentRequest create_agent_requests = 2;
inline int CreateWorldRequest::_internal_create_agent_requests_size() const {
  return _impl_.create_agent_requests_.size();
}
inline int CreateWorldRequest::create_agent_requests_size() const {
  return _internal_create_agent_requests_size();
}
inline void CreateWorldRequest::clear_create_agent_requests() {
  _impl_.create_agent_requests_.Clear();
}
inline ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* CreateWorldRequest::mutable_create_agent_requests(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return _impl_.create_agent_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >*
CreateWorldRequest::mutable_create_agent_requests() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return &_impl_.create_agent_requests_;
}
inline const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& CreateWorldRequest::_internal_create_agent_requests(int index) const {
  return _impl_.create_agent_requests_.Get(index);
}
inline const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& CreateWorldRequest::create_agent_requests(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return _internal_create_agent_requests(index);
}
inline ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* CreateWorldRequest::_internal_add_create_agent_requests() {
  return _impl_.create_agent_requests_.Add();
}
inline ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* CreateWorldRequest::add_create_agent_requests() {
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* _add = _internal_add_create_agent_requests();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >&
CreateWorldRequest::create_agent_requests() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return _impl_.create_agent_requests_;
}

// .ai.inworld.engine.CapabilitiesRequest capabilities = 3;
inline bool CreateWorldRequest::_internal_has_capabilities() const {
  return this != internal_default_instance() && _impl_.capabilities_ != nullptr;
}
inline bool CreateWorldRequest::has_capabilities() const {
  return _internal_has_capabilities();
}
inline void CreateWorldRequest::clear_capabilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
}
inline const ::ai::inworld::engine::CapabilitiesRequest& CreateWorldRequest::_internal_capabilities() const {
  const ::ai::inworld::engine::CapabilitiesRequest* p = _impl_.capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CapabilitiesRequest&>(
      ::ai::inworld::engine::_CapabilitiesRequest_default_instance_);
}
inline const ::ai::inworld::engine::CapabilitiesRequest& CreateWorldRequest::capabilities() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.capabilities)
  return _internal_capabilities();
}
inline void CreateWorldRequest::unsafe_arena_set_allocated_capabilities(
    ::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capabilities_);
  }
  _impl_.capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.CreateWorldRequest.capabilities)
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::release_capabilities() {
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = _impl_.capabilities_;
  _impl_.capabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::unsafe_arena_release_capabilities() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.capabilities)
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = _impl_.capabilities_;
  _impl_.capabilities_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::_internal_mutable_capabilities() {
  
  if (_impl_.capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(GetArenaForAllocation());
    _impl_.capabilities_ = p;
  }
  return _impl_.capabilities_;
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::mutable_capabilities() {
  ::ai::inworld::engine::CapabilitiesRequest* _msg = _internal_mutable_capabilities();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.capabilities)
  return _msg;
}
inline void CreateWorldRequest::set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capabilities);
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.capabilities)
}

// .ai.inworld.engine.UserRequest user = 4;
inline bool CreateWorldRequest::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool CreateWorldRequest::has_user() const {
  return _internal_has_user();
}
inline void CreateWorldRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::ai::inworld::engine::UserRequest& CreateWorldRequest::_internal_user() const {
  const ::ai::inworld::engine::UserRequest* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserRequest&>(
      ::ai::inworld::engine::_UserRequest_default_instance_);
}
inline const ::ai::inworld::engine::UserRequest& CreateWorldRequest::user() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.user)
  return _internal_user();
}
inline void CreateWorldRequest::unsafe_arena_set_allocated_user(
    ::ai::inworld::engine::UserRequest* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.CreateWorldRequest.user)
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::release_user() {
  
  ::ai::inworld::engine::UserRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.user)
  
  ::ai::inworld::engine::UserRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserRequest>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::mutable_user() {
  ::ai::inworld::engine::UserRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.user)
  return _msg;
}
inline void CreateWorldRequest::set_allocated_user(::ai::inworld::engine::UserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.user)
}

// .ai.inworld.engine.CreateWorldRequest.ClientRequest client = 5;
inline bool CreateWorldRequest::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool CreateWorldRequest::has_client() const {
  return _internal_has_client();
}
inline void CreateWorldRequest::clear_client() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
}
inline const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& CreateWorldRequest::_internal_client() const {
  const ::ai::inworld::engine::CreateWorldRequest_ClientRequest* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CreateWorldRequest_ClientRequest&>(
      ::ai::inworld::engine::_CreateWorldRequest_ClientRequest_default_instance_);
}
inline const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& CreateWorldRequest::client() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.client)
  return _internal_client();
}
inline void CreateWorldRequest::unsafe_arena_set_allocated_client(
    ::ai::inworld::engine::CreateWorldRequest_ClientRequest* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.CreateWorldRequest.client)
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::release_client() {
  
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.client)
  
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest_ClientRequest>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::mutable_client() {
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.client)
  return _msg;
}
inline void CreateWorldRequest::set_allocated_client(::ai::inworld::engine::CreateWorldRequest_ClientRequest* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.client)
}

// -------------------------------------------------------------------

// CreateWorldResponse_Agent

// string agent_id = 1;
inline void CreateWorldResponse_Agent::clear_agent_id() {
  _impl_.agent_id_.ClearToEmpty();
}
inline const std::string& CreateWorldResponse_Agent::agent_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
  return _internal_agent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldResponse_Agent::set_agent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}
inline std::string* CreateWorldResponse_Agent::mutable_agent_id() {
  std::string* _s = _internal_mutable_agent_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
  return _s;
}
inline const std::string& CreateWorldResponse_Agent::_internal_agent_id() const {
  return _impl_.agent_id_.Get();
}
inline void CreateWorldResponse_Agent::_internal_set_agent_id(const std::string& value) {
  
  _impl_.agent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldResponse_Agent::_internal_mutable_agent_id() {
  
  return _impl_.agent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldResponse_Agent::release_agent_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
  return _impl_.agent_id_.Release();
}
inline void CreateWorldResponse_Agent::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  _impl_.agent_id_.SetAllocated(agent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_id_.IsDefault()) {
    _impl_.agent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}

// string brain_name = 2;
inline void CreateWorldResponse_Agent::clear_brain_name() {
  _impl_.brain_name_.ClearToEmpty();
}
inline const std::string& CreateWorldResponse_Agent::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
  return _internal_brain_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldResponse_Agent::set_brain_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.brain_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}
inline std::string* CreateWorldResponse_Agent::mutable_brain_name() {
  std::string* _s = _internal_mutable_brain_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
  return _s;
}
inline const std::string& CreateWorldResponse_Agent::_internal_brain_name() const {
  return _impl_.brain_name_.Get();
}
inline void CreateWorldResponse_Agent::_internal_set_brain_name(const std::string& value) {
  
  _impl_.brain_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldResponse_Agent::_internal_mutable_brain_name() {
  
  return _impl_.brain_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldResponse_Agent::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
  return _impl_.brain_name_.Release();
}
inline void CreateWorldResponse_Agent::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  _impl_.brain_name_.SetAllocated(brain_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.brain_name_.IsDefault()) {
    _impl_.brain_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}

// -------------------------------------------------------------------

// CreateWorldResponse

// repeated .ai.inworld.engine.CreateWorldResponse.Agent agents = 1;
inline int CreateWorldResponse::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int CreateWorldResponse::agents_size() const {
  return _internal_agents_size();
}
inline void CreateWorldResponse::clear_agents() {
  _impl_.agents_.Clear();
}
inline ::ai::inworld::engine::CreateWorldResponse_Agent* CreateWorldResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >*
CreateWorldResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.CreateWorldResponse.agents)
  return &_impl_.agents_;
}
inline const ::ai::inworld::engine::CreateWorldResponse_Agent& CreateWorldResponse::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::ai::inworld::engine::CreateWorldResponse_Agent& CreateWorldResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.agents)
  return _internal_agents(index);
}
inline ::ai::inworld::engine::CreateWorldResponse_Agent* CreateWorldResponse::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::ai::inworld::engine::CreateWorldResponse_Agent* CreateWorldResponse::add_agents() {
  ::ai::inworld::engine::CreateWorldResponse_Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.CreateWorldResponse.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >&
CreateWorldResponse::agents() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.CreateWorldResponse.agents)
  return _impl_.agents_;
}

// string key = 3;
inline void CreateWorldResponse::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CreateWorldResponse::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWorldResponse::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldResponse.key)
}
inline std::string* CreateWorldResponse::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.key)
  return _s;
}
inline const std::string& CreateWorldResponse::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CreateWorldResponse::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWorldResponse::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWorldResponse::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldResponse.key)
  return _impl_.key_.Release();
}
inline void CreateWorldResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldResponse.key)
}

// -------------------------------------------------------------------

// LoadSceneRequest

// string name = 1;
inline void LoadSceneRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LoadSceneRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneRequest.name)
}
inline std::string* LoadSceneRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.name)
  return _s;
}
inline const std::string& LoadSceneRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LoadSceneRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.name)
  return _impl_.name_.Release();
}
inline void LoadSceneRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.name)
}

// .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
inline bool LoadSceneRequest::_internal_has_capabilities() const {
  return this != internal_default_instance() && _impl_.capabilities_ != nullptr;
}
inline bool LoadSceneRequest::has_capabilities() const {
  return _internal_has_capabilities();
}
inline void LoadSceneRequest::clear_capabilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
}
inline const ::ai::inworld::engine::CapabilitiesRequest& LoadSceneRequest::_internal_capabilities() const {
  const ::ai::inworld::engine::CapabilitiesRequest* p = _impl_.capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CapabilitiesRequest&>(
      ::ai::inworld::engine::_CapabilitiesRequest_default_instance_);
}
inline const ::ai::inworld::engine::CapabilitiesRequest& LoadSceneRequest::capabilities() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.capabilities)
  return _internal_capabilities();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_capabilities(
    ::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capabilities_);
  }
  _impl_.capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.capabilities)
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::release_capabilities() {
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = _impl_.capabilities_;
  _impl_.capabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::unsafe_arena_release_capabilities() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.capabilities)
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = _impl_.capabilities_;
  _impl_.capabilities_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::_internal_mutable_capabilities() {
  
  if (_impl_.capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(GetArenaForAllocation());
    _impl_.capabilities_ = p;
  }
  return _impl_.capabilities_;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::mutable_capabilities() {
  ::ai::inworld::engine::CapabilitiesRequest* _msg = _internal_mutable_capabilities();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.capabilities)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capabilities);
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.capabilities)
}

// .ai.inworld.engine.UserRequest user = 3;
inline bool LoadSceneRequest::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool LoadSceneRequest::has_user() const {
  return _internal_has_user();
}
inline void LoadSceneRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::ai::inworld::engine::UserRequest& LoadSceneRequest::_internal_user() const {
  const ::ai::inworld::engine::UserRequest* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserRequest&>(
      ::ai::inworld::engine::_UserRequest_default_instance_);
}
inline const ::ai::inworld::engine::UserRequest& LoadSceneRequest::user() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.user)
  return _internal_user();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_user(
    ::ai::inworld::engine::UserRequest* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.user)
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::release_user() {
  
  ::ai::inworld::engine::UserRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.user)
  
  ::ai::inworld::engine::UserRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserRequest>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::mutable_user() {
  ::ai::inworld::engine::UserRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.user)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_user(::ai::inworld::engine::UserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.user)
}

// .ai.inworld.engine.ClientRequest client = 4;
inline bool LoadSceneRequest::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool LoadSceneRequest::has_client() const {
  return _internal_has_client();
}
inline void LoadSceneRequest::clear_client() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
}
inline const ::ai::inworld::engine::ClientRequest& LoadSceneRequest::_internal_client() const {
  const ::ai::inworld::engine::ClientRequest* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::ClientRequest&>(
      ::ai::inworld::engine::_ClientRequest_default_instance_);
}
inline const ::ai::inworld::engine::ClientRequest& LoadSceneRequest::client() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.client)
  return _internal_client();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_client(
    ::ai::inworld::engine::ClientRequest* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.client)
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::release_client() {
  
  ::ai::inworld::engine::ClientRequest* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.client)
  
  ::ai::inworld::engine::ClientRequest* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::ClientRequest>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::mutable_client() {
  ::ai::inworld::engine::ClientRequest* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.client)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_client(::ai::inworld::engine::ClientRequest* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.client)
}

// .ai.inworld.engine.AudioSettings audio_settings = 5;
inline bool LoadSceneRequest::_internal_has_audio_settings() const {
  return this != internal_default_instance() && _impl_.audio_settings_ != nullptr;
}
inline bool LoadSceneRequest::has_audio_settings() const {
  return _internal_has_audio_settings();
}
inline void LoadSceneRequest::clear_audio_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.audio_settings_ != nullptr) {
    delete _impl_.audio_settings_;
  }
  _impl_.audio_settings_ = nullptr;
}
inline const ::ai::inworld::engine::AudioSettings& LoadSceneRequest::_internal_audio_settings() const {
  const ::ai::inworld::engine::AudioSettings* p = _impl_.audio_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::AudioSettings&>(
      ::ai::inworld::engine::_AudioSettings_default_instance_);
}
inline const ::ai::inworld::engine::AudioSettings& LoadSceneRequest::audio_settings() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.audio_settings)
  return _internal_audio_settings();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_audio_settings(
    ::ai::inworld::engine::AudioSettings* audio_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_settings_);
  }
  _impl_.audio_settings_ = audio_settings;
  if (audio_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.audio_settings)
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::release_audio_settings() {
  
  ::ai::inworld::engine::AudioSettings* temp = _impl_.audio_settings_;
  _impl_.audio_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::unsafe_arena_release_audio_settings() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.audio_settings)
  
  ::ai::inworld::engine::AudioSettings* temp = _impl_.audio_settings_;
  _impl_.audio_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::_internal_mutable_audio_settings() {
  
  if (_impl_.audio_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::AudioSettings>(GetArenaForAllocation());
    _impl_.audio_settings_ = p;
  }
  return _impl_.audio_settings_;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::mutable_audio_settings() {
  ::ai::inworld::engine::AudioSettings* _msg = _internal_mutable_audio_settings();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.audio_settings)
  return _msg;
}
inline void LoadSceneRequest::set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* audio_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.audio_settings_;
  }
  if (audio_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio_settings);
    if (message_arena != submessage_arena) {
      audio_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.audio_settings_ = audio_settings;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.audio_settings)
}

// -------------------------------------------------------------------

// AudioSettings

// uint32 stt_sample_rate_hertz = 1;
inline void AudioSettings::clear_stt_sample_rate_hertz() {
  _impl_.stt_sample_rate_hertz_ = 0u;
}
inline uint32_t AudioSettings::_internal_stt_sample_rate_hertz() const {
  return _impl_.stt_sample_rate_hertz_;
}
inline uint32_t AudioSettings::stt_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AudioSettings.stt_sample_rate_hertz)
  return _internal_stt_sample_rate_hertz();
}
inline void AudioSettings::_internal_set_stt_sample_rate_hertz(uint32_t value) {
  
  _impl_.stt_sample_rate_hertz_ = value;
}
inline void AudioSettings::set_stt_sample_rate_hertz(uint32_t value) {
  _internal_set_stt_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AudioSettings.stt_sample_rate_hertz)
}

// uint32 tts_sample_rate_hertz = 2;
inline void AudioSettings::clear_tts_sample_rate_hertz() {
  _impl_.tts_sample_rate_hertz_ = 0u;
}
inline uint32_t AudioSettings::_internal_tts_sample_rate_hertz() const {
  return _impl_.tts_sample_rate_hertz_;
}
inline uint32_t AudioSettings::tts_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AudioSettings.tts_sample_rate_hertz)
  return _internal_tts_sample_rate_hertz();
}
inline void AudioSettings::_internal_set_tts_sample_rate_hertz(uint32_t value) {
  
  _impl_.tts_sample_rate_hertz_ = value;
}
inline void AudioSettings::set_tts_sample_rate_hertz(uint32_t value) {
  _internal_set_tts_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AudioSettings.tts_sample_rate_hertz)
}

// -------------------------------------------------------------------

// LoadSceneResponse_Agent_CharacterAssets

// string rpm_model_uri = 1;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_model_uri() {
  _impl_.rpm_model_uri_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_model_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse_Agent_CharacterAssets::set_rpm_model_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_model_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_model_uri() {
  std::string* _s = _internal_mutable_rpm_model_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_model_uri() const {
  return _impl_.rpm_model_uri_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  
  _impl_.rpm_model_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_model_uri() {
  
  return _impl_.rpm_model_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_model_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _impl_.rpm_model_uri_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_model_uri(std::string* rpm_model_uri) {
  if (rpm_model_uri != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_model_uri_.SetAllocated(rpm_model_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_model_uri_.IsDefault()) {
    _impl_.rpm_model_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri_portrait = 2;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_image_uri_portrait() {
  _impl_.rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_image_uri_portrait() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_portrait(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_image_uri_portrait_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_image_uri_portrait() {
  std::string* _s = _internal_mutable_rpm_image_uri_portrait();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  return _impl_.rpm_image_uri_portrait_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  
  _impl_.rpm_image_uri_portrait_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  
  return _impl_.rpm_image_uri_portrait_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_image_uri_portrait() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _impl_.rpm_image_uri_portrait_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait) {
  if (rpm_image_uri_portrait != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_image_uri_portrait_.SetAllocated(rpm_image_uri_portrait, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_image_uri_portrait_.IsDefault()) {
    _impl_.rpm_image_uri_portrait_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 3;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_image_uri_posture() {
  _impl_.rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_image_uri_posture() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_posture(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_image_uri_posture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_image_uri_posture() {
  std::string* _s = _internal_mutable_rpm_image_uri_posture();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_image_uri_posture() const {
  return _impl_.rpm_image_uri_posture_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  
  _impl_.rpm_image_uri_posture_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  
  return _impl_.rpm_image_uri_posture_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_image_uri_posture() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _impl_.rpm_image_uri_posture_.Release();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture) {
  if (rpm_image_uri_posture != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_image_uri_posture_.SetAllocated(rpm_image_uri_posture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_image_uri_posture_.IsDefault()) {
    _impl_.rpm_image_uri_posture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}

// -------------------------------------------------------------------

// LoadSceneResponse_Agent

// string agent_id = 1;
inline void LoadSceneResponse_Agent::clear_agent_id() {
  _impl_.agent_id_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::agent_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _internal_agent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse_Agent::set_agent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}
inline std::string* LoadSceneResponse_Agent::mutable_agent_id() {
  std::string* _s = _internal_mutable_agent_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent::_internal_agent_id() const {
  return _impl_.agent_id_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_agent_id(const std::string& value) {
  
  _impl_.agent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_agent_id() {
  
  return _impl_.agent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent::release_agent_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _impl_.agent_id_.Release();
}
inline void LoadSceneResponse_Agent::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  _impl_.agent_id_.SetAllocated(agent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_id_.IsDefault()) {
    _impl_.agent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}

// string brain_name = 2;
inline void LoadSceneResponse_Agent::clear_brain_name() {
  _impl_.brain_name_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _internal_brain_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse_Agent::set_brain_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.brain_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}
inline std::string* LoadSceneResponse_Agent::mutable_brain_name() {
  std::string* _s = _internal_mutable_brain_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent::_internal_brain_name() const {
  return _impl_.brain_name_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_brain_name(const std::string& value) {
  
  _impl_.brain_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_brain_name() {
  
  return _impl_.brain_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _impl_.brain_name_.Release();
}
inline void LoadSceneResponse_Agent::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  _impl_.brain_name_.SetAllocated(brain_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.brain_name_.IsDefault()) {
    _impl_.brain_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}

// string given_name = 3;
inline void LoadSceneResponse_Agent::clear_given_name() {
  _impl_.given_name_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::given_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _internal_given_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse_Agent::set_given_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.given_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}
inline std::string* LoadSceneResponse_Agent::mutable_given_name() {
  std::string* _s = _internal_mutable_given_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _s;
}
inline const std::string& LoadSceneResponse_Agent::_internal_given_name() const {
  return _impl_.given_name_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_given_name(const std::string& value) {
  
  _impl_.given_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_given_name() {
  
  return _impl_.given_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse_Agent::release_given_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _impl_.given_name_.Release();
}
inline void LoadSceneResponse_Agent::set_allocated_given_name(std::string* given_name) {
  if (given_name != nullptr) {
    
  } else {
    
  }
  _impl_.given_name_.SetAllocated(given_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.given_name_.IsDefault()) {
    _impl_.given_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}

// .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
inline bool LoadSceneResponse_Agent::_internal_has_character_assets() const {
  return this != internal_default_instance() && _impl_.character_assets_ != nullptr;
}
inline bool LoadSceneResponse_Agent::has_character_assets() const {
  return _internal_has_character_assets();
}
inline void LoadSceneResponse_Agent::clear_character_assets() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_assets_ != nullptr) {
    delete _impl_.character_assets_;
  }
  _impl_.character_assets_ = nullptr;
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent::_internal_character_assets() const {
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* p = _impl_.character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets&>(
      ::ai::inworld::engine::_LoadSceneResponse_Agent_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent::character_assets() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  return _internal_character_assets();
}
inline void LoadSceneResponse_Agent::unsafe_arena_set_allocated_character_assets(
    ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_assets_);
  }
  _impl_.character_assets_ = character_assets;
  if (character_assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::release_character_assets() {
  
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* temp = _impl_.character_assets_;
  _impl_.character_assets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::unsafe_arena_release_character_assets() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* temp = _impl_.character_assets_;
  _impl_.character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::_internal_mutable_character_assets() {
  
  if (_impl_.character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets>(GetArenaForAllocation());
    _impl_.character_assets_ = p;
  }
  return _impl_.character_assets_;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::mutable_character_assets() {
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* _msg = _internal_mutable_character_assets();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  return _msg;
}
inline void LoadSceneResponse_Agent::set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_assets_;
  }
  if (character_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character_assets);
    if (message_arena != submessage_arena) {
      character_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_assets, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_assets_ = character_assets;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
}

// -------------------------------------------------------------------

// LoadSceneResponse

// repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
inline int LoadSceneResponse::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int LoadSceneResponse::agents_size() const {
  return _internal_agents_size();
}
inline void LoadSceneResponse::clear_agents() {
  _impl_.agents_.Clear();
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >*
LoadSceneResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.LoadSceneResponse.agents)
  return &_impl_.agents_;
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent& LoadSceneResponse::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent& LoadSceneResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.agents)
  return _internal_agents(index);
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::add_agents() {
  ::ai::inworld::engine::LoadSceneResponse_Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.LoadSceneResponse.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >&
LoadSceneResponse::agents() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.LoadSceneResponse.agents)
  return _impl_.agents_;
}

// string key = 2;
inline void LoadSceneResponse::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.key)
}
inline std::string* LoadSceneResponse::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.key)
  return _s;
}
inline const std::string& LoadSceneResponse::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LoadSceneResponse::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadSceneResponse::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.key)
  return _impl_.key_.Release();
}
inline void LoadSceneResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.key)
}

// -------------------------------------------------------------------

// LogErrorRequest

// string key = 1;
inline void LogErrorRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LogErrorRequest::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LogErrorRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogErrorRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LogErrorRequest.key)
}
inline std::string* LogErrorRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LogErrorRequest.key)
  return _s;
}
inline const std::string& LogErrorRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LogErrorRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LogErrorRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* LogErrorRequest::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LogErrorRequest.key)
  return _impl_.key_.Release();
}
inline void LogErrorRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LogErrorRequest.key)
}

// string message = 2;
inline void LogErrorRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogErrorRequest::message() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LogErrorRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogErrorRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LogErrorRequest.message)
}
inline std::string* LogErrorRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LogErrorRequest.message)
  return _s;
}
inline const std::string& LogErrorRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LogErrorRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LogErrorRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LogErrorRequest::release_message() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LogErrorRequest.message)
  return _impl_.message_.Release();
}
inline void LogErrorRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LogErrorRequest.message)
}

// -------------------------------------------------------------------

// VoicePreviewRequest

// string text = 1;
inline void VoicePreviewRequest::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& VoicePreviewRequest::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoicePreviewRequest::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.VoicePreviewRequest.text)
}
inline std::string* VoicePreviewRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.text)
  return _s;
}
inline const std::string& VoicePreviewRequest::_internal_text() const {
  return _impl_.text_.Get();
}
inline void VoicePreviewRequest::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* VoicePreviewRequest::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* VoicePreviewRequest::release_text() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.text)
  return _impl_.text_.Release();
}
inline void VoicePreviewRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.text)
}

// .ai.inworld.packets.EmotionEvent emotions = 2;
inline bool VoicePreviewRequest::_internal_has_emotions() const {
  return this != internal_default_instance() && _impl_.emotions_ != nullptr;
}
inline bool VoicePreviewRequest::has_emotions() const {
  return _internal_has_emotions();
}
inline const ::ai::inworld::packets::EmotionEvent& VoicePreviewRequest::_internal_emotions() const {
  const ::ai::inworld::packets::EmotionEvent* p = _impl_.emotions_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::packets::EmotionEvent&>(
      ::ai::inworld::packets::_EmotionEvent_default_instance_);
}
inline const ::ai::inworld::packets::EmotionEvent& VoicePreviewRequest::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.emotions)
  return _internal_emotions();
}
inline void VoicePreviewRequest::unsafe_arena_set_allocated_emotions(
    ::ai::inworld::packets::EmotionEvent* emotions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emotions_);
  }
  _impl_.emotions_ = emotions;
  if (emotions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.VoicePreviewRequest.emotions)
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::release_emotions() {
  
  ::ai::inworld::packets::EmotionEvent* temp = _impl_.emotions_;
  _impl_.emotions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::unsafe_arena_release_emotions() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.emotions)
  
  ::ai::inworld::packets::EmotionEvent* temp = _impl_.emotions_;
  _impl_.emotions_ = nullptr;
  return temp;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::_internal_mutable_emotions() {
  
  if (_impl_.emotions_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::packets::EmotionEvent>(GetArenaForAllocation());
    _impl_.emotions_ = p;
  }
  return _impl_.emotions_;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::mutable_emotions() {
  ::ai::inworld::packets::EmotionEvent* _msg = _internal_mutable_emotions();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.emotions)
  return _msg;
}
inline void VoicePreviewRequest::set_allocated_emotions(::ai::inworld::packets::EmotionEvent* emotions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emotions_);
  }
  if (emotions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotions));
    if (message_arena != submessage_arena) {
      emotions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.emotions_ = emotions;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.emotions)
}

// .ai.inworld.voices.Voice voice = 3;
inline bool VoicePreviewRequest::_internal_has_voice() const {
  return this != internal_default_instance() && _impl_.voice_ != nullptr;
}
inline bool VoicePreviewRequest::has_voice() const {
  return _internal_has_voice();
}
inline const ::ai::inworld::voices::Voice& VoicePreviewRequest::_internal_voice() const {
  const ::ai::inworld::voices::Voice* p = _impl_.voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::voices::Voice&>(
      ::ai::inworld::voices::_Voice_default_instance_);
}
inline const ::ai::inworld::voices::Voice& VoicePreviewRequest::voice() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.voice)
  return _internal_voice();
}
inline void VoicePreviewRequest::unsafe_arena_set_allocated_voice(
    ::ai::inworld::voices::Voice* voice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voice_);
  }
  _impl_.voice_ = voice;
  if (voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.VoicePreviewRequest.voice)
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::release_voice() {
  
  ::ai::inworld::voices::Voice* temp = _impl_.voice_;
  _impl_.voice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::unsafe_arena_release_voice() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.voice)
  
  ::ai::inworld::voices::Voice* temp = _impl_.voice_;
  _impl_.voice_ = nullptr;
  return temp;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::_internal_mutable_voice() {
  
  if (_impl_.voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::voices::Voice>(GetArenaForAllocation());
    _impl_.voice_ = p;
  }
  return _impl_.voice_;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::mutable_voice() {
  ::ai::inworld::voices::Voice* _msg = _internal_mutable_voice();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.voice)
  return _msg;
}
inline void VoicePreviewRequest::set_allocated_voice(::ai::inworld::voices::Voice* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voice_);
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice));
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.voice)
}

// -------------------------------------------------------------------

// VoicePreviewResponse

// bytes audio = 1;
inline void VoicePreviewResponse::clear_audio() {
  _impl_.audio_.ClearToEmpty();
}
inline const std::string& VoicePreviewResponse::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewResponse.audio)
  return _internal_audio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoicePreviewResponse::set_audio(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audio_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.VoicePreviewResponse.audio)
}
inline std::string* VoicePreviewResponse::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewResponse.audio)
  return _s;
}
inline const std::string& VoicePreviewResponse::_internal_audio() const {
  return _impl_.audio_.Get();
}
inline void VoicePreviewResponse::_internal_set_audio(const std::string& value) {
  
  _impl_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* VoicePreviewResponse::_internal_mutable_audio() {
  
  return _impl_.audio_.Mutable(GetArenaForAllocation());
}
inline std::string* VoicePreviewResponse::release_audio() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewResponse.audio)
  return _impl_.audio_.Release();
}
inline void VoicePreviewResponse::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  _impl_.audio_.SetAllocated(audio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_.IsDefault()) {
    _impl_.audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewResponse.audio)
}

// -------------------------------------------------------------------

// ListBaseVoicesRequest

// string language_code = 1;
inline void ListBaseVoicesRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& ListBaseVoicesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBaseVoicesRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}
inline std::string* ListBaseVoicesRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _s;
}
inline const std::string& ListBaseVoicesRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void ListBaseVoicesRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBaseVoicesRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ListBaseVoicesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void ListBaseVoicesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}

// repeated .ai.inworld.voices.TTSType tts_types = 2;
inline int ListBaseVoicesRequest::_internal_tts_types_size() const {
  return _impl_.tts_types_.size();
}
inline int ListBaseVoicesRequest::tts_types_size() const {
  return _internal_tts_types_size();
}
inline void ListBaseVoicesRequest::clear_tts_types() {
  _impl_.tts_types_.Clear();
}
inline ::ai::inworld::voices::TTSType ListBaseVoicesRequest::_internal_tts_types(int index) const {
  return static_cast< ::ai::inworld::voices::TTSType >(_impl_.tts_types_.Get(index));
}
inline ::ai::inworld::voices::TTSType ListBaseVoicesRequest::tts_types(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return _internal_tts_types(index);
}
inline void ListBaseVoicesRequest::set_tts_types(int index, ::ai::inworld::voices::TTSType value) {
  _impl_.tts_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
}
inline void ListBaseVoicesRequest::_internal_add_tts_types(::ai::inworld::voices::TTSType value) {
  _impl_.tts_types_.Add(value);
}
inline void ListBaseVoicesRequest::add_tts_types(::ai::inworld::voices::TTSType value) {
  _internal_add_tts_types(value);
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListBaseVoicesRequest::tts_types() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return _impl_.tts_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListBaseVoicesRequest::_internal_mutable_tts_types() {
  return &_impl_.tts_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListBaseVoicesRequest::mutable_tts_types() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return _internal_mutable_tts_types();
}

// -------------------------------------------------------------------

// ListBaseVoicesResponce_BaseVoice

// repeated string language_codes = 1;
inline int ListBaseVoicesResponce_BaseVoice::_internal_language_codes_size() const {
  return _impl_.language_codes_.size();
}
inline int ListBaseVoicesResponce_BaseVoice::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void ListBaseVoicesResponce_BaseVoice::clear_language_codes() {
  _impl_.language_codes_.Clear();
}
inline std::string* ListBaseVoicesResponce_BaseVoice::add_language_codes() {
  std::string* _s = _internal_add_language_codes();
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return _s;
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::_internal_language_codes(int index) const {
  return _impl_.language_codes_.Get(index);
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::language_codes(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return _internal_language_codes(index);
}
inline std::string* ListBaseVoicesResponce_BaseVoice::mutable_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return _impl_.language_codes_.Mutable(index);
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, const std::string& value) {
  _impl_.language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, std::string&& value) {
  _impl_.language_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, const char* value, size_t size) {
  _impl_.language_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline std::string* ListBaseVoicesResponce_BaseVoice::_internal_add_language_codes() {
  return _impl_.language_codes_.Add();
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(const std::string& value) {
  _impl_.language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(std::string&& value) {
  _impl_.language_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(const char* value, size_t size) {
  _impl_.language_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListBaseVoicesResponce_BaseVoice::language_codes() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return _impl_.language_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListBaseVoicesResponce_BaseVoice::mutable_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return &_impl_.language_codes_;
}

// string name = 2;
inline void ListBaseVoicesResponce_BaseVoice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBaseVoicesResponce_BaseVoice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}
inline std::string* ListBaseVoicesResponce_BaseVoice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
  return _s;
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBaseVoicesResponce_BaseVoice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListBaseVoicesResponce_BaseVoice::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
  return _impl_.name_.Release();
}
inline void ListBaseVoicesResponce_BaseVoice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}

// .ai.inworld.voices.Gender gender = 3;
inline void ListBaseVoicesResponce_BaseVoice::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::ai::inworld::voices::Gender ListBaseVoicesResponce_BaseVoice::_internal_gender() const {
  return static_cast< ::ai::inworld::voices::Gender >(_impl_.gender_);
}
inline ::ai::inworld::voices::Gender ListBaseVoicesResponce_BaseVoice::gender() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.gender)
  return _internal_gender();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_gender(::ai::inworld::voices::Gender value) {
  
  _impl_.gender_ = value;
}
inline void ListBaseVoicesResponce_BaseVoice::set_gender(::ai::inworld::voices::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.gender)
}

// int32 naturalSampleRateHertz = 4;
inline void ListBaseVoicesResponce_BaseVoice::clear_naturalsampleratehertz() {
  _impl_.naturalsampleratehertz_ = 0;
}
inline int32_t ListBaseVoicesResponce_BaseVoice::_internal_naturalsampleratehertz() const {
  return _impl_.naturalsampleratehertz_;
}
inline int32_t ListBaseVoicesResponce_BaseVoice::naturalsampleratehertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.naturalSampleRateHertz)
  return _internal_naturalsampleratehertz();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_naturalsampleratehertz(int32_t value) {
  
  _impl_.naturalsampleratehertz_ = value;
}
inline void ListBaseVoicesResponce_BaseVoice::set_naturalsampleratehertz(int32_t value) {
  _internal_set_naturalsampleratehertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.naturalSampleRateHertz)
}

// -------------------------------------------------------------------

// ListBaseVoicesResponce

// repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice googleVoices = 1;
inline int ListBaseVoicesResponce::_internal_googlevoices_size() const {
  return _impl_.googlevoices_.size();
}
inline int ListBaseVoicesResponce::googlevoices_size() const {
  return _internal_googlevoices_size();
}
inline void ListBaseVoicesResponce::clear_googlevoices() {
  _impl_.googlevoices_.Clear();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::mutable_googlevoices(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return _impl_.googlevoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
ListBaseVoicesResponce::mutable_googlevoices() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return &_impl_.googlevoices_;
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::_internal_googlevoices(int index) const {
  return _impl_.googlevoices_.Get(index);
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::googlevoices(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return _internal_googlevoices(index);
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::_internal_add_googlevoices() {
  return _impl_.googlevoices_.Add();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::add_googlevoices() {
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _add = _internal_add_googlevoices();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
ListBaseVoicesResponce::googlevoices() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return _impl_.googlevoices_;
}

// repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice inworldVoices = 2;
inline int ListBaseVoicesResponce::_internal_inworldvoices_size() const {
  return _impl_.inworldvoices_.size();
}
inline int ListBaseVoicesResponce::inworldvoices_size() const {
  return _internal_inworldvoices_size();
}
inline void ListBaseVoicesResponce::clear_inworldvoices() {
  _impl_.inworldvoices_.Clear();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::mutable_inworldvoices(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return _impl_.inworldvoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
ListBaseVoicesResponce::mutable_inworldvoices() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return &_impl_.inworldvoices_;
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::_internal_inworldvoices(int index) const {
  return _impl_.inworldvoices_.Get(index);
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::inworldvoices(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return _internal_inworldvoices(index);
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::_internal_add_inworldvoices() {
  return _impl_.inworldvoices_.Add();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::add_inworldvoices() {
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _add = _internal_add_inworldvoices();
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
ListBaseVoicesResponce::inworldvoices() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return _impl_.inworldvoices_;
}

// -------------------------------------------------------------------

// AccessToken

// string token = 1;
inline void AccessToken::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AccessToken::token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessToken::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.token)
}
inline std::string* AccessToken::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.token)
  return _s;
}
inline const std::string& AccessToken::_internal_token() const {
  return _impl_.token_.Get();
}
inline void AccessToken::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AccessToken::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* AccessToken::release_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.token)
  return _impl_.token_.Release();
}
inline void AccessToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.token)
}

// string type = 2;
inline void AccessToken::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& AccessToken::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessToken::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.type)
}
inline std::string* AccessToken::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.type)
  return _s;
}
inline const std::string& AccessToken::_internal_type() const {
  return _impl_.type_.Get();
}
inline void AccessToken::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* AccessToken::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* AccessToken::release_type() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.type)
  return _impl_.type_.Release();
}
inline void AccessToken::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool AccessToken::_internal_has_expiration_time() const {
  return this != internal_default_instance() && _impl_.expiration_time_ != nullptr;
}
inline bool AccessToken::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccessToken::_internal_expiration_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccessToken::expiration_time() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.expiration_time)
  return _internal_expiration_time();
}
inline void AccessToken::unsafe_arena_set_allocated_expiration_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.AccessToken.expiration_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::release_expiration_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.expiration_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::_internal_mutable_expiration_time() {
  
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_time_ = p;
  }
  return _impl_.expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::mutable_expiration_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.expiration_time)
  return _msg;
}
inline void AccessToken::set_allocated_expiration_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time));
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.expiration_time)
}

// string session_id = 4;
inline void AccessToken::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& AccessToken::session_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessToken::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.session_id)
}
inline std::string* AccessToken::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.session_id)
  return _s;
}
inline const std::string& AccessToken::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void AccessToken::_internal_set_session_id(const std::string& value) {
  
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccessToken::_internal_mutable_session_id() {
  
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AccessToken::release_session_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.session_id)
  return _impl_.session_id_.Release();
}
inline void AccessToken::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.session_id)
}

// -------------------------------------------------------------------

// GenerateTokenRequest

// string key = 1;
inline void GenerateTokenRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GenerateTokenRequest::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.GenerateTokenRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateTokenRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.key)
}
inline std::string* GenerateTokenRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.GenerateTokenRequest.key)
  return _s;
}
inline const std::string& GenerateTokenRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GenerateTokenRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateTokenRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateTokenRequest::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.GenerateTokenRequest.key)
  return _impl_.key_.Release();
}
inline void GenerateTokenRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.GenerateTokenRequest.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::engine::VoicePreset> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::engine::VoicePreset>() {
  return ::ai::inworld::engine::VoicePreset_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_2dengine_2eproto
