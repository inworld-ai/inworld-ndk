// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "ProtoDisableWarning.h"

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace packets {
PROTOBUF_CONSTEXPR Actor::Actor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorDefaultTypeInternal() {}
  union {
    Actor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorDefaultTypeInternal _Actor_default_instance_;
PROTOBUF_CONSTEXPR Routing::Routing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingDefaultTypeInternal() {}
  union {
    Routing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingDefaultTypeInternal _Routing_default_instance_;
PROTOBUF_CONSTEXPR PacketId::PacketId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utterance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketIdDefaultTypeInternal() {}
  union {
    PacketId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketIdDefaultTypeInternal _PacketId_default_instance_;
PROTOBUF_CONSTEXPR InworldPacket::InworldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.old_packet_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.routing_)*/nullptr
  , /*decltype(_impl_.packet_id_)*/nullptr
  , /*decltype(_impl_.packet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct InworldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InworldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InworldPacketDefaultTypeInternal() {}
  union {
    InworldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InworldPacketDefaultTypeInternal _InworldPacket_default_instance_;
PROTOBUF_CONSTEXPR TextEvent::TextEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_type_)*/0
  , /*decltype(_impl_.final_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextEventDefaultTypeInternal() {}
  union {
    TextEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextEventDefaultTypeInternal _TextEvent_default_instance_;
PROTOBUF_CONSTEXPR ControlEvent::ControlEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlEventDefaultTypeInternal() {}
  union {
    ControlEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlEventDefaultTypeInternal _ControlEvent_default_instance_;
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
PROTOBUF_CONSTEXPR GestureEvent::GestureEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.playback_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GestureEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GestureEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GestureEventDefaultTypeInternal() {}
  union {
    GestureEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GestureEventDefaultTypeInternal _GestureEvent_default_instance_;
PROTOBUF_CONSTEXPR CustomEvent::CustomEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playback_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomEventDefaultTypeInternal() {}
  union {
    CustomEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomEventDefaultTypeInternal _CustomEvent_default_instance_;
PROTOBUF_CONSTEXPR CancelResponsesEvent::CancelResponsesEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.utterance_id_)*/{}
  , /*decltype(_impl_.interaction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelResponsesEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelResponsesEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelResponsesEventDefaultTypeInternal() {}
  union {
    CancelResponsesEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelResponsesEventDefaultTypeInternal _CancelResponsesEvent_default_instance_;
PROTOBUF_CONSTEXPR EmotionEvent::EmotionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.joy_)*/0
  , /*decltype(_impl_.fear_)*/0
  , /*decltype(_impl_.trust_)*/0
  , /*decltype(_impl_.surprise_)*/0
  , /*decltype(_impl_.behavior_)*/0
  , /*decltype(_impl_.strength_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmotionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmotionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmotionEventDefaultTypeInternal() {}
  union {
    EmotionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmotionEventDefaultTypeInternal _EmotionEvent_default_instance_;
PROTOBUF_CONSTEXPR DataChunk::DataChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_phoneme_info_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChunkDefaultTypeInternal() {}
  union {
    DataChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChunkDefaultTypeInternal _DataChunk_default_instance_;
PROTOBUF_CONSTEXPR AdditionalPhonemeInfo::AdditionalPhonemeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phoneme_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_offset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdditionalPhonemeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdditionalPhonemeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdditionalPhonemeInfoDefaultTypeInternal() {}
  union {
    AdditionalPhonemeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdditionalPhonemeInfoDefaultTypeInternal _AdditionalPhonemeInfo_default_instance_;
}  // namespace packets
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_packets_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_packets_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const uint32_t TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.utterance_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _impl_.interaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.routing_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.old_packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.packet_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _impl_.packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _impl_.source_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _impl_.final_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, _impl_.chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::GestureEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::GestureEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::GestureEvent, _impl_.playback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _impl_.playback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _impl_.interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _impl_.utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.joy_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.fear_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.surprise_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.behavior_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _impl_.strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_.additional_phoneme_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _impl_.phoneme_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _impl_.start_offset_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::packets::Actor)},
  { 8, -1, -1, sizeof(::ai::inworld::packets::Routing)},
  { 16, -1, -1, sizeof(::ai::inworld::packets::PacketId)},
  { 25, -1, -1, sizeof(::ai::inworld::packets::InworldPacket)},
  { 44, -1, -1, sizeof(::ai::inworld::packets::TextEvent)},
  { 53, -1, -1, sizeof(::ai::inworld::packets::ControlEvent)},
  { 60, -1, -1, sizeof(::ai::inworld::packets::AudioChunk)},
  { 67, -1, -1, sizeof(::ai::inworld::packets::GestureEvent)},
  { 75, -1, -1, sizeof(::ai::inworld::packets::CustomEvent)},
  { 83, -1, -1, sizeof(::ai::inworld::packets::CancelResponsesEvent)},
  { 91, -1, -1, sizeof(::ai::inworld::packets::EmotionEvent)},
  { 103, -1, -1, sizeof(::ai::inworld::packets::DataChunk)},
  { 114, -1, -1, sizeof(::ai::inworld::packets::AdditionalPhonemeInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::packets::_Actor_default_instance_._instance,
  &::ai::inworld::packets::_Routing_default_instance_._instance,
  &::ai::inworld::packets::_PacketId_default_instance_._instance,
  &::ai::inworld::packets::_InworldPacket_default_instance_._instance,
  &::ai::inworld::packets::_TextEvent_default_instance_._instance,
  &::ai::inworld::packets::_ControlEvent_default_instance_._instance,
  &::ai::inworld::packets::_AudioChunk_default_instance_._instance,
  &::ai::inworld::packets::_GestureEvent_default_instance_._instance,
  &::ai::inworld::packets::_CustomEvent_default_instance_._instance,
  &::ai::inworld::packets::_CancelResponsesEvent_default_instance_._instance,
  &::ai::inworld::packets::_EmotionEvent_default_instance_._instance,
  &::ai::inworld::packets::_DataChunk_default_instance_._instance,
  &::ai::inworld::packets::_AdditionalPhonemeInfo_default_instance_._instance,
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\022\022ai.inworld.packets\032\036goo"
  "gle/protobuf/duration.proto\032\037google/prot"
  "obuf/timestamp.proto\"o\n\005Actor\022,\n\004type\030\001 "
  "\001(\0162\036.ai.inworld.packets.Actor.Type\022\014\n\004n"
  "ame\030\002 \001(\t\"*\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006PLAYER"
  "\020\001\022\t\n\005AGENT\020\002\"_\n\007Routing\022)\n\006source\030\001 \001(\013"
  "2\031.ai.inworld.packets.Actor\022)\n\006target\030\002 "
  "\001(\0132\031.ai.inworld.packets.Actor\"K\n\010Packet"
  "Id\022\021\n\tpacket_id\030\001 \001(\t\022\024\n\014utterance_id\030\002 "
  "\001(\t\022\026\n\016interaction_id\030\003 \001(\t\"\360\004\n\rInworldP"
  "acket\022-\n\ttimestamp\030\001 \001(\0132\032.google.protob"
  "uf.Timestamp\022,\n\007routing\030\006 \001(\0132\033.ai.inwor"
  "ld.packets.Routing\022\025\n\rold_packet_id\030\007 \001("
  "\t\022/\n\tpacket_id\030\t \001(\0132\034.ai.inworld.packet"
  "s.PacketId\022-\n\004text\030\002 \001(\0132\035.ai.inworld.pa"
  "ckets.TextEventH\000\0223\n\007control\030\003 \001(\0132 .ai."
  "inworld.packets.ControlEventH\000\0225\n\013audio_"
  "chunk\030\004 \001(\0132\036.ai.inworld.packets.AudioCh"
  "unkH\000\0223\n\007gesture\030\005 \001(\0132 .ai.inworld.pack"
  "ets.GestureEventH\000\0221\n\006custom\030\010 \001(\0132\037.ai."
  "inworld.packets.CustomEventH\000\022C\n\017cancelR"
  "esponses\030\n \001(\0132(.ai.inworld.packets.Canc"
  "elResponsesEventH\000\0223\n\007emotion\030\013 \001(\0132 .ai"
  ".inworld.packets.EmotionEventH\000\0223\n\ndata_"
  "chunk\030\014 \001(\0132\035.ai.inworld.packets.DataChu"
  "nkH\000B\010\n\006packet\"\277\001\n\tTextEvent\022\014\n\004text\030\001 \001"
  "(\t\022=\n\013source_type\030\002 \001(\0162(.ai.inworld.pac"
  "kets.TextEvent.SourceType\022\r\n\005final\030\003 \001(\010"
  "\"V\n\nSourceType\022\013\n\007UNKNOWN\020\000\022\022\n\016SPEECH_TO"
  "_TEXT\020\001\022\014\n\010TYPED_IN\020\002\022\r\n\tGENERATED\020\003\022\n\n\006"
  "FILLER\020\004\"\322\001\n\014ControlEvent\0227\n\006action\030\001 \001("
  "\0162\'.ai.inworld.packets.ControlEvent.Acti"
  "on\"\210\001\n\006Action\022\013\n\007UNKNOWN\020\000\022\027\n\023AUDIO_SESS"
  "ION_START\020\001\022\025\n\021AUDIO_SESSION_END\020\002\022\023\n\017IN"
  "TERACTION_END\020\003\022\026\n\022TTS_PLAYBACK_START\020\004\022"
  "\024\n\020TTS_PLAYBACK_END\020\005\"\033\n\nAudioChunk\022\r\n\005c"
  "hunk\030\001 \001(\014\"\367\001\n\014GestureEvent\0223\n\004type\030\001 \001("
  "\0162%.ai.inworld.packets.GestureEvent.Type"
  "\022.\n\010playback\030\002 \001(\0162\034.ai.inworld.packets."
  "Playback\"\201\001\n\004Type\022\014\n\010GREETING\020\000\022\014\n\010FAREW"
  "ELL\020\001\022\r\n\tAGREEMENT\020\002\022\020\n\014DISAGREEMENT\020\003\022\r"
  "\n\tGRATITUDE\020\004\022\017\n\013CELEBRATION\020\005\022\013\n\007BOREDO"
  "M\020\006\022\017\n\013UNCERTAINTY\020\007\"K\n\013CustomEvent\022\014\n\004n"
  "ame\030\001 \001(\t\022.\n\010playback\030\002 \001(\0162\034.ai.inworld"
  ".packets.Playback\"D\n\024CancelResponsesEven"
  "t\022\026\n\016interaction_id\030\001 \001(\t\022\024\n\014utterance_i"
  "d\030\002 \003(\t\"\243\004\n\014EmotionEvent\022\013\n\003joy\030\001 \001(\002\022\014\n"
  "\004fear\030\002 \001(\002\022\r\n\005trust\030\003 \001(\002\022\020\n\010surprise\030\004"
  " \001(\002\022<\n\010behavior\030\005 \001(\0162*.ai.inworld.pack"
  "ets.EmotionEvent.SpaffCode\022;\n\010strength\030\006"
  " \001(\0162).ai.inworld.packets.EmotionEvent.S"
  "trength\"\234\002\n\tSpaffCode\022\013\n\007NEUTRAL\020\000\022\013\n\007DI"
  "SGUST\020\001\022\014\n\010CONTEMPT\020\002\022\020\n\014BELLIGERENCE\020\003\022"
  "\017\n\013DOMINEERING\020\004\022\r\n\tCRITICISM\020\005\022\t\n\005ANGER"
  "\020\006\022\013\n\007TENSION\020\007\022\017\n\013TENSE_HUMOR\020\010\022\021\n\rDEFE"
  "NSIVENESS\020\t\022\013\n\007WHINING\020\n\022\013\n\007SADNESS\020\013\022\020\n"
  "\014STONEWALLING\020\014\022\014\n\010INTEREST\020\r\022\016\n\nVALIDAT"
  "ION\020\016\022\r\n\tAFFECTION\020\017\022\t\n\005HUMOR\020\020\022\014\n\010SURPR"
  "ISE\020\021\022\007\n\003JOY\020\022\"=\n\010Strength\022\017\n\013UNSPECIFIE"
  "D\020\000\022\010\n\004WEAK\020\001\022\n\n\006STRONG\020\002\022\n\n\006NORMAL\020\003\"\201\002"
  "\n\tDataChunk\022\017\n\005chunk\030\001 \001(\014H\000\022\025\n\013duration"
  "_ms\030\003 \001(\003H\000\0224\n\004type\030\002 \001(\0162&.ai.inworld.p"
  "ackets.DataChunk.DataType\022J\n\027additional_"
  "phoneme_info\030\004 \003(\0132).ai.inworld.packets."
  "AdditionalPhonemeInfo\"B\n\010DataType\022\017\n\013UNS"
  "PECIFIED\020\000\022\t\n\005AUDIO\020\001\022\r\n\tANIMATION\020\002\022\013\n\007"
  "SILENCE\020\003B\006\n\004data\"Y\n\025AdditionalPhonemeIn"
  "fo\022\017\n\007phoneme\030\001 \001(\t\022/\n\014start_offset\030\002 \001("
  "\0132\031.google.protobuf.Duration*P\n\010Playback"
  "\022\017\n\013UNSPECIFIED\020\000\022\017\n\013INTERACTION\020\001\022\023\n\017IN"
  "TERACTION_END\020\002\022\r\n\tUTTERANCE\020\003B\212\001\n\022ai.in"
  "world.packetsB\026InworldPacketsProtocolZMg"
  "ithub.com/inworld-ai/inworld/serving/grp"
  "c-gateway/build/proto/engine/v1alpha\252\002\014I"
  "nworld.Grpcb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_packets_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_packets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_packets_2eproto = {
    false, false, 2979, descriptor_table_protodef_packets_2eproto,
    "packets.proto",
    &descriptor_table_packets_2eproto_once, descriptor_table_packets_2eproto_deps, 2, 13,
    schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
    file_level_metadata_packets_2eproto, file_level_enum_descriptors_packets_2eproto,
    file_level_service_descriptors_packets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_packets_2eproto_getter() {
  return &descriptor_table_packets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_packets_2eproto(&descriptor_table_packets_2eproto);
namespace ai {
namespace inworld {
namespace packets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Actor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[0];
}
bool Actor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Actor_Type Actor::UNKNOWN;
constexpr Actor_Type Actor::PLAYER;
constexpr Actor_Type Actor::AGENT;
constexpr Actor_Type Actor::Type_MIN;
constexpr Actor_Type Actor::Type_MAX;
constexpr int Actor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextEvent_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[1];
}
bool TextEvent_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TextEvent_SourceType TextEvent::UNKNOWN;
constexpr TextEvent_SourceType TextEvent::SPEECH_TO_TEXT;
constexpr TextEvent_SourceType TextEvent::TYPED_IN;
constexpr TextEvent_SourceType TextEvent::GENERATED;
constexpr TextEvent_SourceType TextEvent::FILLER;
constexpr TextEvent_SourceType TextEvent::SourceType_MIN;
constexpr TextEvent_SourceType TextEvent::SourceType_MAX;
constexpr int TextEvent::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlEvent_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[2];
}
bool ControlEvent_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlEvent_Action ControlEvent::UNKNOWN;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_START;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_END;
constexpr ControlEvent_Action ControlEvent::INTERACTION_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_START;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_END;
constexpr ControlEvent_Action ControlEvent::Action_MIN;
constexpr ControlEvent_Action ControlEvent::Action_MAX;
constexpr int ControlEvent::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GestureEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[3];
}
bool GestureEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GestureEvent_Type GestureEvent::GREETING;
constexpr GestureEvent_Type GestureEvent::FAREWELL;
constexpr GestureEvent_Type GestureEvent::AGREEMENT;
constexpr GestureEvent_Type GestureEvent::DISAGREEMENT;
constexpr GestureEvent_Type GestureEvent::GRATITUDE;
constexpr GestureEvent_Type GestureEvent::CELEBRATION;
constexpr GestureEvent_Type GestureEvent::BOREDOM;
constexpr GestureEvent_Type GestureEvent::UNCERTAINTY;
constexpr GestureEvent_Type GestureEvent::Type_MIN;
constexpr GestureEvent_Type GestureEvent::Type_MAX;
constexpr int GestureEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_SpaffCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[4];
}
bool EmotionEvent_SpaffCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EmotionEvent_SpaffCode EmotionEvent::NEUTRAL;
constexpr EmotionEvent_SpaffCode EmotionEvent::DISGUST;
constexpr EmotionEvent_SpaffCode EmotionEvent::CONTEMPT;
constexpr EmotionEvent_SpaffCode EmotionEvent::BELLIGERENCE;
constexpr EmotionEvent_SpaffCode EmotionEvent::DOMINEERING;
constexpr EmotionEvent_SpaffCode EmotionEvent::CRITICISM;
constexpr EmotionEvent_SpaffCode EmotionEvent::ANGER;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSION;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSE_HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::DEFENSIVENESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::WHINING;
constexpr EmotionEvent_SpaffCode EmotionEvent::SADNESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::STONEWALLING;
constexpr EmotionEvent_SpaffCode EmotionEvent::INTEREST;
constexpr EmotionEvent_SpaffCode EmotionEvent::VALIDATION;
constexpr EmotionEvent_SpaffCode EmotionEvent::AFFECTION;
constexpr EmotionEvent_SpaffCode EmotionEvent::HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::SURPRISE;
constexpr EmotionEvent_SpaffCode EmotionEvent::JOY;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MIN;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MAX;
constexpr int EmotionEvent::SpaffCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_Strength_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[5];
}
bool EmotionEvent_Strength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EmotionEvent_Strength EmotionEvent::UNSPECIFIED;
constexpr EmotionEvent_Strength EmotionEvent::WEAK;
constexpr EmotionEvent_Strength EmotionEvent::STRONG;
constexpr EmotionEvent_Strength EmotionEvent::NORMAL;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MIN;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MAX;
constexpr int EmotionEvent::Strength_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChunk_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[6];
}
bool DataChunk_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataChunk_DataType DataChunk::UNSPECIFIED;
constexpr DataChunk_DataType DataChunk::AUDIO;
constexpr DataChunk_DataType DataChunk::ANIMATION;
constexpr DataChunk_DataType DataChunk::SILENCE;
constexpr DataChunk_DataType DataChunk::DataType_MIN;
constexpr DataChunk_DataType DataChunk::DataType_MAX;
constexpr int DataChunk::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Playback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[7];
}
bool Playback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Actor::_Internal {
 public:
};

Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Actor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Actor)
}

inline void Actor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Actor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Actor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Actor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Actor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::Actor_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.Actor.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Actor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Actor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Actor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Actor)
  return target;
}

size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Actor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Actor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Actor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Actor::GetClassData() const { return &_class_data_; }


void Actor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Actor*>(&to_msg);
  auto& from = static_cast<const Actor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Actor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[0]);
}

// ===================================================================

class Routing::_Internal {
 public:
  static const ::ai::inworld::packets::Actor& source(const Routing* msg);
  static const ::ai::inworld::packets::Actor& target(const Routing* msg);
};

const ::ai::inworld::packets::Actor&
Routing::_Internal::source(const Routing* msg) {
  return *msg->_impl_.source_;
}
const ::ai::inworld::packets::Actor&
Routing::_Internal::target(const Routing* msg) {
  return *msg->_impl_.target_;
}
Routing::Routing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Routing)
}
Routing::Routing(const Routing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Routing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::ai::inworld::packets::Actor(*from._impl_.source_);
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::ai::inworld::packets::Actor(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Routing)
}

inline void Routing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Routing::~Routing() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Routing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.target_;
}

void Routing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Routing::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Routing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Actor target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Routing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Routing)
  return target;
}

size_t Routing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Routing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Routing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routing::GetClassData() const { return &_class_data_; }


void Routing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Routing*>(&to_msg);
  auto& from = static_cast<const Routing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Routing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::ai::inworld::packets::Actor::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::ai::inworld::packets::Actor::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routing::CopyFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routing::IsInitialized() const {
  return true;
}

void Routing::InternalSwap(Routing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Routing, _impl_.target_)
      + sizeof(Routing::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(Routing, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Routing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[1]);
}

// ===================================================================

class PacketId::_Internal {
 public:
};

PacketId::PacketId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.PacketId)
}
PacketId::PacketId(const PacketId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_id_){}
    , decltype(_impl_.utterance_id_){}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packet_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packet_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packet_id().empty()) {
    _this->_impl_.packet_id_.Set(from._internal_packet_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utterance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utterance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_utterance_id().empty()) {
    _this->_impl_.utterance_id_.Set(from._internal_utterance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.PacketId)
}

inline void PacketId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_id_){}
    , decltype(_impl_.utterance_id_){}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packet_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packet_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utterance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utterance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketId::~PacketId() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.PacketId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_id_.Destroy();
  _impl_.utterance_id_.Destroy();
  _impl_.interaction_id_.Destroy();
}

void PacketId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketId::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.PacketId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packet_id_.ClearToEmpty();
  _impl_.utterance_id_.ClearToEmpty();
  _impl_.interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packet_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.packet_id"));
        } else
          goto handle_unusual;
        continue;
      // string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_utterance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.utterance_id"));
        } else
          goto handle_unusual;
        continue;
      // string interaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.PacketId.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.PacketId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_id = 1;
  if (!this->_internal_packet_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packet_id().data(), static_cast<int>(this->_internal_packet_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.packet_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packet_id(), target);
  }

  // string utterance_id = 2;
  if (!this->_internal_utterance_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utterance_id().data(), static_cast<int>(this->_internal_utterance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.utterance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utterance_id(), target);
  }

  // string interaction_id = 3;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.interaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.PacketId)
  return target;
}

size_t PacketId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.PacketId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packet_id = 1;
  if (!this->_internal_packet_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packet_id());
  }

  // string utterance_id = 2;
  if (!this->_internal_utterance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utterance_id());
  }

  // string interaction_id = 3;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketId::GetClassData() const { return &_class_data_; }


void PacketId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketId*>(&to_msg);
  auto& from = static_cast<const PacketId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.PacketId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packet_id().empty()) {
    _this->_internal_set_packet_id(from._internal_packet_id());
  }
  if (!from._internal_utterance_id().empty()) {
    _this->_internal_set_utterance_id(from._internal_utterance_id());
  }
  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketId::CopyFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketId::IsInitialized() const {
  return true;
}

void PacketId::InternalSwap(PacketId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packet_id_, lhs_arena,
      &other->_impl_.packet_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utterance_id_, lhs_arena,
      &other->_impl_.utterance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[2]);
}

// ===================================================================

class InworldPacket::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const InworldPacket* msg);
  static const ::ai::inworld::packets::Routing& routing(const InworldPacket* msg);
  static const ::ai::inworld::packets::PacketId& packet_id(const InworldPacket* msg);
  static const ::ai::inworld::packets::TextEvent& text(const InworldPacket* msg);
  static const ::ai::inworld::packets::ControlEvent& control(const InworldPacket* msg);
  static const ::ai::inworld::packets::AudioChunk& audio_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::GestureEvent& gesture(const InworldPacket* msg);
  static const ::ai::inworld::packets::CustomEvent& custom(const InworldPacket* msg);
  static const ::ai::inworld::packets::CancelResponsesEvent& cancelresponses(const InworldPacket* msg);
  static const ::ai::inworld::packets::EmotionEvent& emotion(const InworldPacket* msg);
  static const ::ai::inworld::packets::DataChunk& data_chunk(const InworldPacket* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InworldPacket::_Internal::timestamp(const InworldPacket* msg) {
  return *msg->_impl_.timestamp_;
}
const ::ai::inworld::packets::Routing&
InworldPacket::_Internal::routing(const InworldPacket* msg) {
  return *msg->_impl_.routing_;
}
const ::ai::inworld::packets::PacketId&
InworldPacket::_Internal::packet_id(const InworldPacket* msg) {
  return *msg->_impl_.packet_id_;
}
const ::ai::inworld::packets::TextEvent&
InworldPacket::_Internal::text(const InworldPacket* msg) {
  return *msg->_impl_.packet_.text_;
}
const ::ai::inworld::packets::ControlEvent&
InworldPacket::_Internal::control(const InworldPacket* msg) {
  return *msg->_impl_.packet_.control_;
}
const ::ai::inworld::packets::AudioChunk&
InworldPacket::_Internal::audio_chunk(const InworldPacket* msg) {
  return *msg->_impl_.packet_.audio_chunk_;
}
const ::ai::inworld::packets::GestureEvent&
InworldPacket::_Internal::gesture(const InworldPacket* msg) {
  return *msg->_impl_.packet_.gesture_;
}
const ::ai::inworld::packets::CustomEvent&
InworldPacket::_Internal::custom(const InworldPacket* msg) {
  return *msg->_impl_.packet_.custom_;
}
const ::ai::inworld::packets::CancelResponsesEvent&
InworldPacket::_Internal::cancelresponses(const InworldPacket* msg) {
  return *msg->_impl_.packet_.cancelresponses_;
}
const ::ai::inworld::packets::EmotionEvent&
InworldPacket::_Internal::emotion(const InworldPacket* msg) {
  return *msg->_impl_.packet_.emotion_;
}
const ::ai::inworld::packets::DataChunk&
InworldPacket::_Internal::data_chunk(const InworldPacket* msg) {
  return *msg->_impl_.packet_.data_chunk_;
}
void InworldPacket::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void InworldPacket::set_allocated_text(::ai::inworld::packets::TextEvent* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    _impl_.packet_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.text)
}
void InworldPacket::set_allocated_control(::ai::inworld::packets::ControlEvent* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    set_has_control();
    _impl_.packet_.control_ = control;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.control)
}
void InworldPacket::set_allocated_audio_chunk(::ai::inworld::packets::AudioChunk* audio_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (audio_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio_chunk);
    if (message_arena != submessage_arena) {
      audio_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_chunk, submessage_arena);
    }
    set_has_audio_chunk();
    _impl_.packet_.audio_chunk_ = audio_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.audio_chunk)
}
void InworldPacket::set_allocated_gesture(::ai::inworld::packets::GestureEvent* gesture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (gesture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gesture);
    if (message_arena != submessage_arena) {
      gesture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture, submessage_arena);
    }
    set_has_gesture();
    _impl_.packet_.gesture_ = gesture;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.gesture)
}
void InworldPacket::set_allocated_custom(::ai::inworld::packets::CustomEvent* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    _impl_.packet_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.custom)
}
void InworldPacket::set_allocated_cancelresponses(::ai::inworld::packets::CancelResponsesEvent* cancelresponses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (cancelresponses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cancelresponses);
    if (message_arena != submessage_arena) {
      cancelresponses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelresponses, submessage_arena);
    }
    set_has_cancelresponses();
    _impl_.packet_.cancelresponses_ = cancelresponses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.cancelResponses)
}
void InworldPacket::set_allocated_emotion(::ai::inworld::packets::EmotionEvent* emotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (emotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emotion);
    if (message_arena != submessage_arena) {
      emotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotion, submessage_arena);
    }
    set_has_emotion();
    _impl_.packet_.emotion_ = emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.emotion)
}
void InworldPacket::set_allocated_data_chunk(::ai::inworld::packets::DataChunk* data_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (data_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_chunk);
    if (message_arena != submessage_arena) {
      data_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_chunk, submessage_arena);
    }
    set_has_data_chunk();
    _impl_.packet_.data_chunk_ = data_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.data_chunk)
}
InworldPacket::InworldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.InworldPacket)
}
InworldPacket::InworldPacket(const InworldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InworldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.old_packet_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.old_packet_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_packet_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_packet_id().empty()) {
    _this->_impl_.old_packet_id_.Set(from._internal_old_packet_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_routing()) {
    _this->_impl_.routing_ = new ::ai::inworld::packets::Routing(*from._impl_.routing_);
  }
  if (from._internal_has_packet_id()) {
    _this->_impl_.packet_id_ = new ::ai::inworld::packets::PacketId(*from._impl_.packet_id_);
  }
  clear_has_packet();
  switch (from.packet_case()) {
    case kText: {
      _this->_internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(
          from._internal_text());
      break;
    }
    case kControl: {
      _this->_internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(
          from._internal_control());
      break;
    }
    case kAudioChunk: {
      _this->_internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(
          from._internal_audio_chunk());
      break;
    }
    case kGesture: {
      _this->_internal_mutable_gesture()->::ai::inworld::packets::GestureEvent::MergeFrom(
          from._internal_gesture());
      break;
    }
    case kCustom: {
      _this->_internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(
          from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _this->_internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(
          from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _this->_internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(
          from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _this->_internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(
          from._internal_data_chunk());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.InworldPacket)
}

inline void InworldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.old_packet_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.old_packet_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_packet_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_packet();
}

InworldPacket::~InworldPacket() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.InworldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InworldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_packet_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.routing_;
  if (this != internal_default_instance()) delete _impl_.packet_id_;
  if (has_packet()) {
    clear_packet();
  }
}

void InworldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InworldPacket::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.InworldPacket)
  switch (packet_case()) {
    case kText: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.text_;
      }
      break;
    }
    case kControl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.control_;
      }
      break;
    }
    case kAudioChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.audio_chunk_;
      }
      break;
    }
    case kGesture: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.gesture_;
      }
      break;
    }
    case kCustom: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.custom_;
      }
      break;
    }
    case kCancelResponses: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.cancelresponses_;
      }
      break;
    }
    case kEmotion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.emotion_;
      }
      break;
    }
    case kDataChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_.data_chunk_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}


void InworldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.InworldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_packet_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.routing_ != nullptr) {
    delete _impl_.routing_;
  }
  _impl_.routing_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.packet_id_ != nullptr) {
    delete _impl_.packet_id_;
  }
  _impl_.packet_id_ = nullptr;
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InworldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.ControlEvent control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.AudioChunk audio_chunk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.GestureEvent gesture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gesture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Routing routing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string old_packet_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_old_packet_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.InworldPacket.old_packet_id"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.CustomEvent custom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.PacketId packet_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelresponses(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent emotion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk data_chunk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InworldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.InworldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.TextEvent text = 2;
  if (_internal_has_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.ControlEvent control = 3;
  if (_internal_has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.AudioChunk audio_chunk = 4;
  if (_internal_has_audio_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::audio_chunk(this),
        _Internal::audio_chunk(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.GestureEvent gesture = 5;
  if (_internal_has_gesture()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gesture(this),
        _Internal::gesture(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->_internal_has_routing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  // string old_packet_id = 7;
  if (!this->_internal_old_packet_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_packet_id().data(), static_cast<int>(this->_internal_old_packet_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.InworldPacket.old_packet_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_old_packet_id(), target);
  }

  // .ai.inworld.packets.CustomEvent custom = 8;
  if (_internal_has_custom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::custom(this),
        _Internal::custom(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->_internal_has_packet_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10;
  if (_internal_has_cancelresponses()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cancelresponses(this),
        _Internal::cancelresponses(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.EmotionEvent emotion = 11;
  if (_internal_has_emotion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::emotion(this),
        _Internal::emotion(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.packets.DataChunk data_chunk = 12;
  if (_internal_has_data_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::data_chunk(this),
        _Internal::data_chunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.InworldPacket)
  return target;
}

size_t InworldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.InworldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_packet_id = 7;
  if (!this->_internal_old_packet_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_packet_id());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->_internal_has_routing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->_internal_has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  switch (packet_case()) {
    // .ai.inworld.packets.TextEvent text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.text_);
      break;
    }
    // .ai.inworld.packets.ControlEvent control = 3;
    case kControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.control_);
      break;
    }
    // .ai.inworld.packets.AudioChunk audio_chunk = 4;
    case kAudioChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.audio_chunk_);
      break;
    }
    // .ai.inworld.packets.GestureEvent gesture = 5;
    case kGesture: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.gesture_);
      break;
    }
    // .ai.inworld.packets.CustomEvent custom = 8;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.custom_);
      break;
    }
    // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10;
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.cancelresponses_);
      break;
    }
    // .ai.inworld.packets.EmotionEvent emotion = 11;
    case kEmotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.emotion_);
      break;
    }
    // .ai.inworld.packets.DataChunk data_chunk = 12;
    case kDataChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_.data_chunk_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InworldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InworldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InworldPacket::GetClassData() const { return &_class_data_; }


void InworldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InworldPacket*>(&to_msg);
  auto& from = static_cast<const InworldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.InworldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_old_packet_id().empty()) {
    _this->_internal_set_old_packet_id(from._internal_old_packet_id());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_routing()) {
    _this->_internal_mutable_routing()->::ai::inworld::packets::Routing::MergeFrom(
        from._internal_routing());
  }
  if (from._internal_has_packet_id()) {
    _this->_internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  switch (from.packet_case()) {
    case kText: {
      _this->_internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(
          from._internal_text());
      break;
    }
    case kControl: {
      _this->_internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(
          from._internal_control());
      break;
    }
    case kAudioChunk: {
      _this->_internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(
          from._internal_audio_chunk());
      break;
    }
    case kGesture: {
      _this->_internal_mutable_gesture()->::ai::inworld::packets::GestureEvent::MergeFrom(
          from._internal_gesture());
      break;
    }
    case kCustom: {
      _this->_internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(
          from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _this->_internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(
          from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _this->_internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(
          from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _this->_internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(
          from._internal_data_chunk());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InworldPacket::CopyFrom(const InworldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.InworldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InworldPacket::IsInitialized() const {
  return true;
}

void InworldPacket::InternalSwap(InworldPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_packet_id_, lhs_arena,
      &other->_impl_.old_packet_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InworldPacket, _impl_.packet_id_)
      + sizeof(InworldPacket::_impl_.packet_id_)
      - PROTOBUF_FIELD_OFFSET(InworldPacket, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.packet_, other->_impl_.packet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InworldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[3]);
}

// ===================================================================

class TextEvent::_Internal {
 public:
};

TextEvent::TextEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.TextEvent)
}
TextEvent::TextEvent(const TextEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.source_type_){}
    , decltype(_impl_.final_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.source_type_, &from._impl_.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_) -
    reinterpret_cast<char*>(&_impl_.source_type_)) + sizeof(_impl_.final_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.TextEvent)
}

inline void TextEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.source_type_){0}
    , decltype(_impl_.final_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextEvent::~TextEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.TextEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void TextEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.TextEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.source_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.final_) -
      reinterpret_cast<char*>(&_impl_.source_type_)) + sizeof(_impl_.final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.TextEvent.text"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::ai::inworld::packets::TextEvent_SourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.TextEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->_internal_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source_type(), target);
  }

  // bool final = 3;
  if (this->_internal_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_final(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.TextEvent)
  return target;
}

size_t TextEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.TextEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->_internal_source_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  // bool final = 3;
  if (this->_internal_final() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextEvent::GetClassData() const { return &_class_data_; }


void TextEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextEvent*>(&to_msg);
  auto& from = static_cast<const TextEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.TextEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_source_type() != 0) {
    _this->_internal_set_source_type(from._internal_source_type());
  }
  if (from._internal_final() != 0) {
    _this->_internal_set_final(from._internal_final());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextEvent::CopyFrom(const TextEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.TextEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent::IsInitialized() const {
  return true;
}

void TextEvent::InternalSwap(TextEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextEvent, _impl_.final_)
      + sizeof(TextEvent::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TextEvent, _impl_.source_type_)>(
          reinterpret_cast<char*>(&_impl_.source_type_),
          reinterpret_cast<char*>(&other->_impl_.source_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[4]);
}

// ===================================================================

class ControlEvent::_Internal {
 public:
};

ControlEvent::ControlEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ControlEvent)
}
ControlEvent::ControlEvent(const ControlEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ControlEvent)
}

inline void ControlEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlEvent::~ControlEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ControlEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ControlEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.ControlEvent.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::ai::inworld::packets::ControlEvent_Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ControlEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ControlEvent)
  return target;
}

size_t ControlEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ControlEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlEvent::GetClassData() const { return &_class_data_; }


void ControlEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlEvent*>(&to_msg);
  auto& from = static_cast<const ControlEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ControlEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlEvent::CopyFrom(const ControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlEvent::IsInitialized() const {
  return true;
}

void ControlEvent::InternalSwap(ControlEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[5]);
}

// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AudioChunk)
}

inline void AudioChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AudioChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_.Destroy();
}

void AudioChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AudioChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AudioChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AudioChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunk::GetClassData() const { return &_class_data_; }


void AudioChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioChunk*>(&to_msg);
  auto& from = static_cast<const AudioChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AudioChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chunk_, lhs_arena,
      &other->_impl_.chunk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[6]);
}

// ===================================================================

class GestureEvent::_Internal {
 public:
};

GestureEvent::GestureEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.GestureEvent)
}
GestureEvent::GestureEvent(const GestureEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GestureEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.playback_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playback_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.playback_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.GestureEvent)
}

inline void GestureEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.playback_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GestureEvent::~GestureEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.GestureEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GestureEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GestureEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GestureEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.GestureEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playback_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.playback_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GestureEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.packets.GestureEvent.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::GestureEvent_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GestureEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.GestureEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.GestureEvent.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.GestureEvent)
  return target;
}

size_t GestureEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.GestureEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.GestureEvent.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GestureEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GestureEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GestureEvent::GetClassData() const { return &_class_data_; }


void GestureEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GestureEvent*>(&to_msg);
  auto& from = static_cast<const GestureEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.GestureEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_playback() != 0) {
    _this->_internal_set_playback(from._internal_playback());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GestureEvent::CopyFrom(const GestureEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.GestureEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureEvent::IsInitialized() const {
  return true;
}

void GestureEvent::InternalSwap(GestureEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GestureEvent, _impl_.playback_)
      + sizeof(GestureEvent::_impl_.playback_)
      - PROTOBUF_FIELD_OFFSET(GestureEvent, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GestureEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[7]);
}

// ===================================================================

class CustomEvent::_Internal {
 public:
};

CustomEvent::CustomEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent)
}
CustomEvent::CustomEvent(const CustomEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.playback_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playback_ = from._impl_.playback_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent)
}

inline void CustomEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.playback_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomEvent::~CustomEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CustomEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.playback_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.name"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent)
  return target;
}

size_t CustomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->_internal_playback() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomEvent::GetClassData() const { return &_class_data_; }


void CustomEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomEvent*>(&to_msg);
  auto& from = static_cast<const CustomEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_playback() != 0) {
    _this->_internal_set_playback(from._internal_playback());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomEvent::CopyFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent::IsInitialized() const {
  return true;
}

void CustomEvent::InternalSwap(CustomEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.playback_, other->_impl_.playback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[8]);
}

// ===================================================================

class CancelResponsesEvent::_Internal {
 public:
};

CancelResponsesEvent::CancelResponsesEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponsesEvent)
}
CancelResponsesEvent::CancelResponsesEvent(const CancelResponsesEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelResponsesEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.utterance_id_){from._impl_.utterance_id_}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interaction_id().empty()) {
    _this->_impl_.interaction_id_.Set(from._internal_interaction_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponsesEvent)
}

inline void CancelResponsesEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.utterance_id_){arena}
    , decltype(_impl_.interaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelResponsesEvent::~CancelResponsesEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponsesEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelResponsesEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.utterance_id_.~RepeatedPtrField();
  _impl_.interaction_id_.Destroy();
}

void CancelResponsesEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelResponsesEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponsesEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.utterance_id_.Clear();
  _impl_.interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponsesEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.interaction_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.utterance_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelResponsesEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponsesEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponsesEvent)
  return target;
}

size_t CancelResponsesEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponsesEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.utterance_id_.size());
  for (int i = 0, n = _impl_.utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (!this->_internal_interaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelResponsesEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelResponsesEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelResponsesEvent::GetClassData() const { return &_class_data_; }


void CancelResponsesEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelResponsesEvent*>(&to_msg);
  auto& from = static_cast<const CancelResponsesEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponsesEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.utterance_id_.MergeFrom(from._impl_.utterance_id_);
  if (!from._internal_interaction_id().empty()) {
    _this->_internal_set_interaction_id(from._internal_interaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelResponsesEvent::CopyFrom(const CancelResponsesEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponsesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponsesEvent::IsInitialized() const {
  return true;
}

void CancelResponsesEvent::InternalSwap(CancelResponsesEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.utterance_id_.InternalSwap(&other->_impl_.utterance_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interaction_id_, lhs_arena,
      &other->_impl_.interaction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponsesEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[9]);
}

// ===================================================================

class EmotionEvent::_Internal {
 public:
};

EmotionEvent::EmotionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.EmotionEvent)
}
EmotionEvent::EmotionEvent(const EmotionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmotionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joy_){}
    , decltype(_impl_.fear_){}
    , decltype(_impl_.trust_){}
    , decltype(_impl_.surprise_){}
    , decltype(_impl_.behavior_){}
    , decltype(_impl_.strength_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.joy_, &from._impl_.joy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.strength_) -
    reinterpret_cast<char*>(&_impl_.joy_)) + sizeof(_impl_.strength_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.EmotionEvent)
}

inline void EmotionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.joy_){0}
    , decltype(_impl_.fear_){0}
    , decltype(_impl_.trust_){0}
    , decltype(_impl_.surprise_){0}
    , decltype(_impl_.behavior_){0}
    , decltype(_impl_.strength_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EmotionEvent::~EmotionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.EmotionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmotionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmotionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmotionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.EmotionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.joy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.strength_) -
      reinterpret_cast<char*>(&_impl_.joy_)) + sizeof(_impl_.strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmotionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float joy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.joy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.fear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float trust = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.trust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float surprise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.surprise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::ai::inworld::packets::EmotionEvent_SpaffCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strength(static_cast<::ai::inworld::packets::EmotionEvent_Strength>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmotionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.EmotionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float joy = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_joy = this->_internal_joy();
  uint32_t raw_joy;
  memcpy(&raw_joy, &tmp_joy, sizeof(tmp_joy));
  if (raw_joy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_joy(), target);
  }

  // float fear = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fear = this->_internal_fear();
  uint32_t raw_fear;
  memcpy(&raw_fear, &tmp_fear, sizeof(tmp_fear));
  if (raw_fear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_fear(), target);
  }

  // float trust = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trust = this->_internal_trust();
  uint32_t raw_trust;
  memcpy(&raw_trust, &tmp_trust, sizeof(tmp_trust));
  if (raw_trust != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_trust(), target);
  }

  // float surprise = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surprise = this->_internal_surprise();
  uint32_t raw_surprise;
  memcpy(&raw_surprise, &tmp_surprise, sizeof(tmp_surprise));
  if (raw_surprise != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_surprise(), target);
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->_internal_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_behavior(), target);
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->_internal_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.EmotionEvent)
  return target;
}

size_t EmotionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.EmotionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float joy = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_joy = this->_internal_joy();
  uint32_t raw_joy;
  memcpy(&raw_joy, &tmp_joy, sizeof(tmp_joy));
  if (raw_joy != 0) {
    total_size += 1 + 4;
  }

  // float fear = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fear = this->_internal_fear();
  uint32_t raw_fear;
  memcpy(&raw_fear, &tmp_fear, sizeof(tmp_fear));
  if (raw_fear != 0) {
    total_size += 1 + 4;
  }

  // float trust = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trust = this->_internal_trust();
  uint32_t raw_trust;
  memcpy(&raw_trust, &tmp_trust, sizeof(tmp_trust));
  if (raw_trust != 0) {
    total_size += 1 + 4;
  }

  // float surprise = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surprise = this->_internal_surprise();
  uint32_t raw_surprise;
  memcpy(&raw_surprise, &tmp_surprise, sizeof(tmp_surprise));
  if (raw_surprise != 0) {
    total_size += 1 + 4;
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->_internal_behavior() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->_internal_strength() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmotionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmotionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmotionEvent::GetClassData() const { return &_class_data_; }


void EmotionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmotionEvent*>(&to_msg);
  auto& from = static_cast<const EmotionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.EmotionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_joy = from._internal_joy();
  uint32_t raw_joy;
  memcpy(&raw_joy, &tmp_joy, sizeof(tmp_joy));
  if (raw_joy != 0) {
    _this->_internal_set_joy(from._internal_joy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fear = from._internal_fear();
  uint32_t raw_fear;
  memcpy(&raw_fear, &tmp_fear, sizeof(tmp_fear));
  if (raw_fear != 0) {
    _this->_internal_set_fear(from._internal_fear());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trust = from._internal_trust();
  uint32_t raw_trust;
  memcpy(&raw_trust, &tmp_trust, sizeof(tmp_trust));
  if (raw_trust != 0) {
    _this->_internal_set_trust(from._internal_trust());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surprise = from._internal_surprise();
  uint32_t raw_surprise;
  memcpy(&raw_surprise, &tmp_surprise, sizeof(tmp_surprise));
  if (raw_surprise != 0) {
    _this->_internal_set_surprise(from._internal_surprise());
  }
  if (from._internal_behavior() != 0) {
    _this->_internal_set_behavior(from._internal_behavior());
  }
  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmotionEvent::CopyFrom(const EmotionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.EmotionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionEvent::IsInitialized() const {
  return true;
}

void EmotionEvent::InternalSwap(EmotionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmotionEvent, _impl_.strength_)
      + sizeof(EmotionEvent::_impl_.strength_)
      - PROTOBUF_FIELD_OFFSET(EmotionEvent, _impl_.joy_)>(
          reinterpret_cast<char*>(&_impl_.joy_),
          reinterpret_cast<char*>(&other->_impl_.joy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmotionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[10]);
}

// ===================================================================

class DataChunk::_Internal {
 public:
};

DataChunk::DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DataChunk)
}
DataChunk::DataChunk(const DataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_phoneme_info_){from._impl_.additional_phoneme_info_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_data();
  switch (from.data_case()) {
    case kChunk: {
      _this->_internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _this->_internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DataChunk)
}

inline void DataChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_phoneme_info_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DataChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_phoneme_info_.~RepeatedPtrField();
  if (has_data()) {
    clear_data();
  }
}

void DataChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataChunk::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DataChunk)
  switch (data_case()) {
    case kChunk: {
      _impl_.data_.chunk_.Destroy();
      break;
    }
    case kDurationMs: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DataChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_phoneme_info_.Clear();
  _impl_.type_ = 0;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::DataChunk_DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_phoneme_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DataChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int64 duration_ms = 3;
  if (_internal_has_duration_ms()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_phoneme_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_phoneme_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DataChunk)
  return target;
}

size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DataChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  total_size += 1UL * this->_internal_additional_phoneme_info_size();
  for (const auto& msg : this->_impl_.additional_phoneme_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (data_case()) {
    // bytes chunk = 1;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    // int64 duration_ms = 3;
    case kDurationMs: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChunk::GetClassData() const { return &_class_data_; }


void DataChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataChunk*>(&to_msg);
  auto& from = static_cast<const DataChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DataChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_phoneme_info_.MergeFrom(from._impl_.additional_phoneme_info_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.data_case()) {
    case kChunk: {
      _this->_internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _this->_internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunk::IsInitialized() const {
  return true;
}

void DataChunk::InternalSwap(DataChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_phoneme_info_.InternalSwap(&other->_impl_.additional_phoneme_info_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[11]);
}

// ===================================================================

class AdditionalPhonemeInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& start_offset(const AdditionalPhonemeInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AdditionalPhonemeInfo::_Internal::start_offset(const AdditionalPhonemeInfo* msg) {
  return *msg->_impl_.start_offset_;
}
void AdditionalPhonemeInfo::clear_start_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_offset_ != nullptr) {
    delete _impl_.start_offset_;
  }
  _impl_.start_offset_ = nullptr;
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(const AdditionalPhonemeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdditionalPhonemeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phoneme_){}
    , decltype(_impl_.start_offset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.phoneme_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneme_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phoneme().empty()) {
    _this->_impl_.phoneme_.Set(from._internal_phoneme(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_offset()) {
    _this->_impl_.start_offset_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.start_offset_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}

inline void AdditionalPhonemeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phoneme_){}
    , decltype(_impl_.start_offset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.phoneme_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneme_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdditionalPhonemeInfo::~AdditionalPhonemeInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AdditionalPhonemeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdditionalPhonemeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phoneme_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_offset_;
}

void AdditionalPhonemeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdditionalPhonemeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AdditionalPhonemeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phoneme_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_offset_ != nullptr) {
    delete _impl_.start_offset_;
  }
  _impl_.start_offset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalPhonemeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string phoneme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_phoneme();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.packets.AdditionalPhonemeInfo.phoneme"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdditionalPhonemeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AdditionalPhonemeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string phoneme = 1;
  if (!this->_internal_phoneme().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phoneme().data(), static_cast<int>(this->_internal_phoneme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.AdditionalPhonemeInfo.phoneme");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phoneme(), target);
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->_internal_has_start_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_offset(this),
        _Internal::start_offset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AdditionalPhonemeInfo)
  return target;
}

size_t AdditionalPhonemeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AdditionalPhonemeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phoneme = 1;
  if (!this->_internal_phoneme().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phoneme());
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->_internal_has_start_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_offset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdditionalPhonemeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdditionalPhonemeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdditionalPhonemeInfo::GetClassData() const { return &_class_data_; }


void AdditionalPhonemeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdditionalPhonemeInfo*>(&to_msg);
  auto& from = static_cast<const AdditionalPhonemeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_phoneme().empty()) {
    _this->_internal_set_phoneme(from._internal_phoneme());
  }
  if (from._internal_has_start_offset()) {
    _this->_internal_mutable_start_offset()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_start_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdditionalPhonemeInfo::CopyFrom(const AdditionalPhonemeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalPhonemeInfo::IsInitialized() const {
  return true;
}

void AdditionalPhonemeInfo::InternalSwap(AdditionalPhonemeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phoneme_, lhs_arena,
      &other->_impl_.phoneme_, rhs_arena
  );
  swap(_impl_.start_offset_, other->_impl_.start_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalPhonemeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace packets
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Actor*
Arena::CreateMaybeMessage< ::ai::inworld::packets::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Actor >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Routing*
Arena::CreateMaybeMessage< ::ai::inworld::packets::Routing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Routing >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::PacketId*
Arena::CreateMaybeMessage< ::ai::inworld::packets::PacketId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::PacketId >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::InworldPacket*
Arena::CreateMaybeMessage< ::ai::inworld::packets::InworldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::InworldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::TextEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::TextEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::TextEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ControlEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::ControlEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ControlEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AudioChunk*
Arena::CreateMaybeMessage< ::ai::inworld::packets::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::GestureEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::GestureEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::GestureEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponsesEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponsesEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponsesEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::EmotionEvent*
Arena::CreateMaybeMessage< ::ai::inworld::packets::EmotionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::EmotionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DataChunk*
Arena::CreateMaybeMessage< ::ai::inworld::packets::DataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AdditionalPhonemeInfo*
Arena::CreateMaybeMessage< ::ai::inworld::packets::AdditionalPhonemeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AdditionalPhonemeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
