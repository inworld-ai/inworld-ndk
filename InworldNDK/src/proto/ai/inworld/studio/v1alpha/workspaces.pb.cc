// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/workspaces.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/workspaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
PROTOBUF_CONSTEXPR GetWorkspaceRequest::GetWorkspaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.view_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkspaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkspaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkspaceRequestDefaultTypeInternal() {}
  union {
    GetWorkspaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkspaceRequestDefaultTypeInternal _GetWorkspaceRequest_default_instance_;
PROTOBUF_CONSTEXPR ListWorkspacesRequest::ListWorkspacesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListWorkspacesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListWorkspacesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListWorkspacesRequestDefaultTypeInternal() {}
  union {
    ListWorkspacesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListWorkspacesRequestDefaultTypeInternal _ListWorkspacesRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateWorkspaceRequest::CreateWorkspaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workspace_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateWorkspaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateWorkspaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateWorkspaceRequestDefaultTypeInternal() {}
  union {
    CreateWorkspaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateWorkspaceRequestDefaultTypeInternal _CreateWorkspaceRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateWorkspaceRequest::UpdateWorkspaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workspace_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateWorkspaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateWorkspaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateWorkspaceRequestDefaultTypeInternal() {}
  union {
    UpdateWorkspaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateWorkspaceRequestDefaultTypeInternal _UpdateWorkspaceRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteWorkspaceRequest::DeleteWorkspaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteWorkspaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteWorkspaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteWorkspaceRequestDefaultTypeInternal() {}
  union {
    DeleteWorkspaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteWorkspaceRequestDefaultTypeInternal _DeleteWorkspaceRequest_default_instance_;
PROTOBUF_CONSTEXPR Workspace_Meta::Workspace_Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_characters_)*/0
  , /*decltype(_impl_.total_scenes_)*/0
  , /*decltype(_impl_.total_triggers_)*/0
  , /*decltype(_impl_.total_common_knowledge_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Workspace_MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Workspace_MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Workspace_MetaDefaultTypeInternal() {}
  union {
    Workspace_Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Workspace_MetaDefaultTypeInternal _Workspace_Meta_default_instance_;
PROTOBUF_CONSTEXPR Workspace::Workspace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.experimental_features_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.billing_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDefaultTypeInternal() {}
  union {
    Workspace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDefaultTypeInternal _Workspace_default_instance_;
PROTOBUF_CONSTEXPR ListWorkspacesResponse::ListWorkspacesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workspaces_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListWorkspacesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListWorkspacesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListWorkspacesResponseDefaultTypeInternal() {}
  union {
    ListWorkspacesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListWorkspacesResponseDefaultTypeInternal _ListWorkspacesResponse_default_instance_;
PROTOBUF_CONSTEXPR ShareWorkspaceRequest::ShareWorkspaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.emails_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShareWorkspaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareWorkspaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareWorkspaceRequestDefaultTypeInternal() {}
  union {
    ShareWorkspaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareWorkspaceRequestDefaultTypeInternal _ShareWorkspaceRequest_default_instance_;
PROTOBUF_CONSTEXPR GenerateResourceNameRequest::GenerateResourceNameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workspace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateResourceNameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateResourceNameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateResourceNameRequestDefaultTypeInternal() {}
  union {
    GenerateResourceNameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateResourceNameRequestDefaultTypeInternal _GenerateResourceNameRequest_default_instance_;
PROTOBUF_CONSTEXPR GenerateResourceNameResponse::GenerateResourceNameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateResourceNameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateResourceNameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateResourceNameResponseDefaultTypeInternal() {}
  union {
    GenerateResourceNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateResourceNameResponseDefaultTypeInternal _GenerateResourceNameResponse_default_instance_;
PROTOBUF_CONSTEXPR GetWorkspaceShareInfoRequest::GetWorkspaceShareInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkspaceShareInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkspaceShareInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkspaceShareInfoRequestDefaultTypeInternal() {}
  union {
    GetWorkspaceShareInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkspaceShareInfoRequestDefaultTypeInternal _GetWorkspaceShareInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceShareInfo::WorkspaceShareInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.emails_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceShareInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceShareInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceShareInfoDefaultTypeInternal() {}
  union {
    WorkspaceShareInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceShareInfoDefaultTypeInternal _WorkspaceShareInfo_default_instance_;
PROTOBUF_CONSTEXPR GetWorkspaceLimitInfoRequest::GetWorkspaceLimitInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkspaceLimitInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkspaceLimitInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkspaceLimitInfoRequestDefaultTypeInternal() {}
  union {
    GetWorkspaceLimitInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkspaceLimitInfoRequestDefaultTypeInternal _GetWorkspaceLimitInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_TextListLimit::WorkspaceLimitInfo_TextListLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_max_length_)*/0
  , /*decltype(_impl_.total_items_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_TextListLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_TextListLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_TextListLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_TextListLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_TextListLimitDefaultTypeInternal _WorkspaceLimitInfo_TextListLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hobby_or_interests_)*/nullptr
  , /*decltype(_impl_.nicknames_)*/nullptr
  , /*decltype(_impl_.personality_adjectives_)*/nullptr
  , /*decltype(_impl_.core_max_length_)*/0
  , /*decltype(_impl_.example_dialog_max_length_)*/0
  , /*decltype(_impl_.motivation_max_length_)*/0
  , /*decltype(_impl_.character_role_max_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimitDefaultTypeInternal _WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_CharacterLimit::WorkspaceLimitInfo_CharacterLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_description_)*/nullptr
  , /*decltype(_impl_.name_max_length_)*/0
  , /*decltype(_impl_.total_triggers_)*/0
  , /*decltype(_impl_.total_common_knowledge_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_CharacterLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_CharacterLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_CharacterLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_CharacterLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_CharacterLimitDefaultTypeInternal _WorkspaceLimitInfo_CharacterLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_SceneLimit::WorkspaceLimitInfo_SceneLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_max_length_)*/0
  , /*decltype(_impl_.total_characters_)*/0
  , /*decltype(_impl_.total_triggers_)*/0
  , /*decltype(_impl_.display_name_max_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_SceneLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_SceneLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_SceneLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_SceneLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_SceneLimitDefaultTypeInternal _WorkspaceLimitInfo_SceneLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_WorkspaceLimit::WorkspaceLimitInfo_WorkspaceLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.display_name_max_length_)*/0
  , /*decltype(_impl_.total_characters_)*/0
  , /*decltype(_impl_.total_scenes_)*/0
  , /*decltype(_impl_.total_triggers_)*/0
  , /*decltype(_impl_.total_voices_)*/0
  , /*decltype(_impl_.total_common_knowledge_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_WorkspaceLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_WorkspaceLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_WorkspaceLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_WorkspaceLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_WorkspaceLimitDefaultTypeInternal _WorkspaceLimitInfo_WorkspaceLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_BillingAccountLimit::WorkspaceLimitInfo_BillingAccountLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_workspaces_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_BillingAccountLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_BillingAccountLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_BillingAccountLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_BillingAccountLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_BillingAccountLimitDefaultTypeInternal _WorkspaceLimitInfo_BillingAccountLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo_CommonKnowledgeLimit::WorkspaceLimitInfo_CommonKnowledgeLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memory_records_)*/nullptr
  , /*decltype(_impl_.display_name_max_length_)*/0
  , /*decltype(_impl_.description_max_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfo_CommonKnowledgeLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfo_CommonKnowledgeLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfo_CommonKnowledgeLimitDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo_CommonKnowledgeLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfo_CommonKnowledgeLimitDefaultTypeInternal _WorkspaceLimitInfo_CommonKnowledgeLimit_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceLimitInfo::WorkspaceLimitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_)*/nullptr
  , /*decltype(_impl_.scene_)*/nullptr
  , /*decltype(_impl_.workspace_)*/nullptr
  , /*decltype(_impl_.billing_account_)*/nullptr
  , /*decltype(_impl_.common_knowledge_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceLimitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceLimitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceLimitInfoDefaultTypeInternal() {}
  union {
    WorkspaceLimitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceLimitInfoDefaultTypeInternal _WorkspaceLimitInfo_default_instance_;
PROTOBUF_CONSTEXPR GetWorkspaceBillingInfoRequest::GetWorkspaceBillingInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkspaceBillingInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkspaceBillingInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkspaceBillingInfoRequestDefaultTypeInternal() {}
  union {
    GetWorkspaceBillingInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkspaceBillingInfoRequestDefaultTypeInternal _GetWorkspaceBillingInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceBillingInfo_QuotaDetails::WorkspaceBillingInfo_QuotaDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.has_credits_)*/false
  , /*decltype(_impl_.has_paid_subscription_)*/false
  , /*decltype(_impl_.current_source_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceBillingInfo_QuotaDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceBillingInfo_QuotaDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceBillingInfo_QuotaDetailsDefaultTypeInternal() {}
  union {
    WorkspaceBillingInfo_QuotaDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceBillingInfo_QuotaDetailsDefaultTypeInternal _WorkspaceBillingInfo_QuotaDetails_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceBillingInfo::WorkspaceBillingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quota_details_)*/nullptr
  , /*decltype(_impl_.is_billing_owner_)*/false
  , /*decltype(_impl_.has_usable_quota_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkspaceBillingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceBillingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceBillingInfoDefaultTypeInternal() {}
  union {
    WorkspaceBillingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceBillingInfoDefaultTypeInternal _WorkspaceBillingInfo_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto = nullptr;

const uint32_t TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceRequest, _impl_.view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, _impl_.workspace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, _impl_.workspace_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, _impl_.update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, _impl_.force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, _impl_.total_characters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, _impl_.total_scenes_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, _impl_.total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace_Meta, _impl_.total_common_knowledge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _impl_.experimental_features_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _impl_.billing_account_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::Workspace, _impl_.meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesResponse, _impl_.workspaces_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListWorkspacesResponse, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, _impl_.emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, _impl_.workspace_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, _impl_.resource_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateResourceNameResponse, _impl_.resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceShareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceShareInfo, _impl_.emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit, _impl_.item_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit, _impl_.total_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.core_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.example_dialog_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.motivation_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.character_role_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.hobby_or_interests_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.nicknames_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.personality_adjectives_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, _impl_.name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, _impl_.total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, _impl_.total_common_knowledge_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit, _impl_.character_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, _impl_.description_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, _impl_.total_characters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, _impl_.total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit, _impl_.display_name_max_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _impl_.display_name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _impl_.total_characters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _impl_.total_scenes_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _impl_.total_triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _impl_.total_voices_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit, _impl_.total_common_knowledge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit, _impl_.total_workspaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, _impl_.display_name_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, _impl_.description_max_length_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit, _impl_.memory_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _impl_.character_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _impl_.scene_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _impl_.workspace_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _impl_.billing_account_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo, _impl_.common_knowledge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails, _impl_.has_credits_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails, _impl_.has_paid_subscription_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails, _impl_.current_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo, _impl_.is_billing_owner_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo, _impl_.has_usable_quota_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo, _impl_.quota_details_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceRequest)},
  { 8, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ListWorkspacesRequest)},
  { 16, -1, -1, sizeof(::ai::inworld::studio::v1alpha::CreateWorkspaceRequest)},
  { 23, -1, -1, sizeof(::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest)},
  { 31, -1, -1, sizeof(::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest)},
  { 39, -1, -1, sizeof(::ai::inworld::studio::v1alpha::Workspace_Meta)},
  { 49, -1, -1, sizeof(::ai::inworld::studio::v1alpha::Workspace)},
  { 60, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ListWorkspacesResponse)},
  { 68, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ShareWorkspaceRequest)},
  { 76, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateResourceNameRequest)},
  { 85, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateResourceNameResponse)},
  { 92, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest)},
  { 99, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceShareInfo)},
  { 106, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest)},
  { 113, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit)},
  { 121, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit)},
  { 134, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit)},
  { 144, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit)},
  { 154, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit)},
  { 166, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit)},
  { 173, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit)},
  { 182, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceLimitInfo)},
  { 193, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest)},
  { 200, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails)},
  { 209, -1, -1, sizeof(::ai::inworld::studio::v1alpha::WorkspaceBillingInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::studio::v1alpha::_GetWorkspaceRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ListWorkspacesRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_CreateWorkspaceRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_UpdateWorkspaceRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_DeleteWorkspaceRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_Workspace_Meta_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_Workspace_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ListWorkspacesResponse_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ShareWorkspaceRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GenerateResourceNameRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GenerateResourceNameResponse_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GetWorkspaceShareInfoRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceShareInfo_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GetWorkspaceLimitInfoRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_TextListLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CharacterLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_SceneLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_WorkspaceLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_BillingAccountLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_CommonKnowledgeLimit_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceLimitInfo_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GetWorkspaceBillingInfoRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceBillingInfo_QuotaDetails_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_WorkspaceBillingInfo_default_instance_._instance,
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*ai/inworld/studio/v1alpha/workspaces.p"
  "roto\022\031ai.inworld.studio.v1alpha\032\034google/"
  "api/annotations.proto\032\027google/api/client"
  ".proto\032\037google/api/field_behavior.proto\032"
  "\031google/api/resource.proto\032\033google/proto"
  "buf/empty.proto\032 google/protobuf/field_m"
  "ask.proto\032\roptions.proto\"\201\001\n\023GetWorkspac"
  "eRequest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inwo"
  "rld.ai/Workspace\022:\n\004view\030\002 \001(\0162,.ai.inwo"
  "rld.studio.v1alpha.WorkspaceItemView\">\n\025"
  "ListWorkspacesRequest\022\021\n\tpage_size\030\001 \001(\005"
  "\022\022\n\npage_token\030\002 \001(\t\"V\n\026CreateWorkspaceR"
  "equest\022<\n\tworkspace\030\001 \001(\0132$.ai.inworld.s"
  "tudio.v1alpha.WorkspaceB\003\340A\002\"\214\001\n\026UpdateW"
  "orkspaceRequest\022<\n\tworkspace\030\001 \001(\0132$.ai."
  "inworld.studio.v1alpha.WorkspaceB\003\340A\002\0224\n"
  "\013update_mask\030\002 \001(\0132\032.google.protobuf.Fie"
  "ldMaskB\003\340A\002\"W\n\026DeleteWorkspaceRequest\022.\n"
  "\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inworld.ai/Work"
  "space\022\r\n\005force\030\002 \001(\010\"\233\003\n\tWorkspace\022/\n\004na"
  "me\030\001 \001(\tB!\340A\002\242\317\"\032\n\030\032\026workspaces/workspac"
  "e-1\022\031\n\014display_name\030\002 \001(\tB\003\340A\002\022\035\n\025experi"
  "mental_features\030\003 \003(\t\022>\n\017billing_account"
  "\030\004 \001(\tB%\340A\002\372A\037\n\035api.inworld.ai/BillingAc"
  "count\022<\n\004meta\030\005 \001(\0132).ai.inworld.studio."
  "v1alpha.Workspace.MetaB\003\340A\003\032n\n\004Meta\022\030\n\020t"
  "otal_characters\030\001 \001(\005\022\024\n\014total_scenes\030\002 "
  "\001(\005\022\026\n\016total_triggers\030\003 \001(\005\022\036\n\026total_com"
  "mon_knowledge\030\004 \001(\005:5\352A2\n\030api.inworld.ai"
  "/Workspace\022\026workspaces/{workspace}\"k\n\026Li"
  "stWorkspacesResponse\0228\n\nworkspaces\030\001 \003(\013"
  "2$.ai.inworld.studio.v1alpha.Workspace\022\027"
  "\n\017next_page_token\030\002 \001(\t\"s\n\025ShareWorkspac"
  "eRequest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inwo"
  "rld.ai/Workspace\022*\n\006emails\030\002 \003(\tB\032\242\317\"\026\n\024"
  "2\022\n\020\032\016user@email.com\"\321\002\n\033GenerateResourc"
  "eNameRequest\0223\n\tworkspace\030\001 \001(\tB \340A\002\372A\032\n"
  "\030api.inworld.ai/Workspace\022\031\n\014display_nam"
  "e\030\002 \001(\tB\003\340A\002\022_\n\rresource_type\030\003 \001(\0162C.ai"
  ".inworld.studio.v1alpha.GenerateResource"
  "NameRequest.ResourceTypeB\003\340A\002\"\200\001\n\014Resour"
  "ceType\022\035\n\031RESOURCE_TYPE_UNSPECIFIED\020\000\022\033\n"
  "\027RESOURCE_TYPE_WORKSPACE\020\001\022\033\n\027RESOURCE_T"
  "YPE_CHARACTER\020\002\022\027\n\023RESOURCE_TYPE_SCENE\020\003"
  "\"5\n\034GenerateResourceNameResponse\022\025\n\010reso"
  "urce\030\001 \001(\tB\003\340A\002\"N\n\034GetWorkspaceShareInfo"
  "Request\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inwor"
  "ld.ai/Workspace\"$\n\022WorkspaceShareInfo\022\016\n"
  "\006emails\030\001 \003(\t\"N\n\034GetWorkspaceLimitInfoRe"
  "quest\022.\n\004name\030\001 \001(\tB \340A\002\372A\032\n\030api.inworld"
  ".ai/Workspace\"\210\r\n\022WorkspaceLimitInfo\022O\n\t"
  "character\030\001 \001(\0132<.ai.inworld.studio.v1al"
  "pha.WorkspaceLimitInfo.CharacterLimit\022G\n"
  "\005scene\030\002 \001(\01328.ai.inworld.studio.v1alpha"
  ".WorkspaceLimitInfo.SceneLimit\022O\n\tworksp"
  "ace\030\003 \001(\0132<.ai.inworld.studio.v1alpha.Wo"
  "rkspaceLimitInfo.WorkspaceLimit\022Z\n\017billi"
  "ng_account\030\004 \001(\0132A.ai.inworld.studio.v1a"
  "lpha.WorkspaceLimitInfo.BillingAccountLi"
  "mit\022\\\n\020common_knowledge\030\005 \001(\0132B.ai.inwor"
  "ld.studio.v1alpha.WorkspaceLimitInfo.Com"
  "monKnowledgeLimit\032=\n\rTextListLimit\022\027\n\017it"
  "em_max_length\030\001 \001(\005\022\023\n\013total_items\030\002 \001(\005"
  "\032\372\004\n\016CharacterLimit\022\027\n\017name_max_length\030\001"
  " \001(\005\022\026\n\016total_triggers\030\002 \001(\005\022\036\n\026total_co"
  "mmon_knowledge\030\003 \001(\005\022u\n\025character_descri"
  "ption\030\004 \001(\0132V.ai.inworld.studio.v1alpha."
  "WorkspaceLimitInfo.CharacterLimit.Charac"
  "terDescriptionLimit\032\237\003\n\031CharacterDescrip"
  "tionLimit\022\027\n\017core_max_length\030\001 \001(\005\022!\n\031ex"
  "ample_dialog_max_length\030\002 \001(\005\022\035\n\025motivat"
  "ion_max_length\030\003 \001(\005\022!\n\031character_role_m"
  "ax_length\030\004 \001(\005\022W\n\022hobby_or_interests\030\005 "
  "\001(\0132;.ai.inworld.studio.v1alpha.Workspac"
  "eLimitInfo.TextListLimit\022N\n\tnicknames\030\006 "
  "\001(\0132;.ai.inworld.studio.v1alpha.Workspac"
  "eLimitInfo.TextListLimit\022[\n\026personality_"
  "adjectives\030\007 \001(\0132;.ai.inworld.studio.v1a"
  "lpha.WorkspaceLimitInfo.TextListLimit\032\177\n"
  "\nSceneLimit\022\036\n\026description_max_length\030\001 "
  "\001(\005\022\030\n\020total_characters\030\002 \001(\005\022\026\n\016total_t"
  "riggers\030\003 \001(\005\022\037\n\027display_name_max_length"
  "\030\004 \001(\005\032\257\001\n\016WorkspaceLimit\022\037\n\027display_nam"
  "e_max_length\030\001 \001(\005\022\030\n\020total_characters\030\002"
  " \001(\005\022\024\n\014total_scenes\030\003 \001(\005\022\026\n\016total_trig"
  "gers\030\004 \001(\005\022\024\n\014total_voices\030\005 \001(\005\022\036\n\026tota"
  "l_common_knowledge\030\006 \001(\005\032/\n\023BillingAccou"
  "ntLimit\022\030\n\020total_workspaces\030\001 \001(\005\032\254\001\n\024Co"
  "mmonKnowledgeLimit\022\037\n\027display_name_max_l"
  "ength\030\001 \001(\005\022\036\n\026description_max_length\030\002 "
  "\001(\005\022S\n\016memory_records\030\003 \001(\0132;.ai.inworld"
  ".studio.v1alpha.WorkspaceLimitInfo.TextL"
  "istLimit\"\224\001\n\036GetWorkspaceBillingInfoRequ"
  "est\022r\n\004name\030\001 \001(\tBd\340A\002\372A\032\n\030api.inworld.a"
  "i/Workspace\242\317\"@\n>\032<workspaces/00000000-0"
  "000-0000-0000-000000000001/billing-info\""
  "\254\004\n\024WorkspaceBillingInfo\0229\n\004name\030\001 \001(\tB+"
  "\340A\002\372A%\n#api.inworld.ai/WorkspaceBillingI"
  "nfo\022\030\n\020is_billing_owner\030\002 \001(\010\022\030\n\020has_usa"
  "ble_quota\030\003 \001(\010\022S\n\rquota_details\030\004 \001(\0132<"
  ".ai.inworld.studio.v1alpha.WorkspaceBill"
  "ingInfo.QuotaDetails\032\227\001\n\014QuotaDetails\022\023\n"
  "\013has_credits\030\001 \001(\010\022\035\n\025has_paid_subscript"
  "ion\030\002 \001(\010\022S\n\016current_source\030\003 \001(\0162;.ai.i"
  "nworld.studio.v1alpha.WorkspaceBillingIn"
  "fo.QuotaSource\"g\n\013QuotaSource\022\034\n\030QUOTA_S"
  "OURCE_UNSPECIFIED\020\000\022\016\n\nNO_SOURCES\020\001\022\020\n\014S"
  "UBSCRIPTION\020\002\022\013\n\007CREDITS\020\003\022\013\n\007OVERAGE\020\004:"
  "M\352AJ\n#api.inworld.ai/WorkspaceBillingInf"
  "o\022#workspaces/{workspace}/billing-info*|"
  "\n\021WorkspaceItemView\022#\n\037WORKSPACE_ITEM_VI"
  "EW_UNSPECIFIED\020\000\022\037\n\033WORKSPACE_ITEM_VIEW_"
  "DEFAULT\020\001\022!\n\035WORKSPACE_ITEM_VIEW_WITH_ME"
  "TA\020\0022\362\r\n\nWorkspaces\022\221\001\n\014GetWorkspace\022..a"
  "i.inworld.studio.v1alpha.GetWorkspaceReq"
  "uest\032$.ai.inworld.studio.v1alpha.Workspa"
  "ce\"+\202\323\344\223\002\036\022\034/v1alpha/{name=workspaces/*}"
  "\332A\004name\022\225\001\n\016ListWorkspaces\0220.ai.inworld."
  "studio.v1alpha.ListWorkspacesRequest\0321.a"
  "i.inworld.studio.v1alpha.ListWorkspacesR"
  "esponse\"\036\202\323\344\223\002\025\022\023/v1alpha/workspaces\332A\000\022"
  "\275\001\n\017UpdateWorkspace\0221.ai.inworld.studio."
  "v1alpha.UpdateWorkspaceRequest\032$.ai.inwo"
  "rld.studio.v1alpha.Workspace\"Q\202\323\344\223\00232&/v"
  "1alpha/{workspace.name=workspaces/*}:\two"
  "rkspace\332A\025workspace,update_mask\022\236\001\n\017Crea"
  "teWorkspace\0221.ai.inworld.studio.v1alpha."
  "CreateWorkspaceRequest\032$.ai.inworld.stud"
  "io.v1alpha.Workspace\"2\202\323\344\223\002 \"\023/v1alpha/w"
  "orkspaces:\tworkspace\332A\tworkspace\022\211\001\n\017Del"
  "eteWorkspace\0221.ai.inworld.studio.v1alpha"
  ".DeleteWorkspaceRequest\032\026.google.protobu"
  "f.Empty\"+\202\323\344\223\002\036*\034/v1alpha/{name=workspac"
  "es/*}\332A\004name\022\220\001\n\016ShareWorkspace\0220.ai.inw"
  "orld.studio.v1alpha.ShareWorkspaceReques"
  "t\032\026.google.protobuf.Empty\"4\202\323\344\223\002\'\"\"/v1al"
  "pha/{name=workspaces/*}:share:\001*\332A\004name\022"
  "\361\001\n\024generateResourceName\0226.ai.inworld.st"
  "udio.v1alpha.GenerateResourceNameRequest"
  "\0327.ai.inworld.studio.v1alpha.GenerateRes"
  "ourceNameResponse\"h\202\323\344\223\002;\"6/v1alpha/{wor"
  "kspace=workspaces/*}:generateResourceNam"
  "e:\001*\332A$workspace,display_name,resource_t"
  "ype\022\277\001\n\025GetWorkspaceShareInfo\0227.ai.inwor"
  "ld.studio.v1alpha.GetWorkspaceShareInfoR"
  "equest\032-.ai.inworld.studio.v1alpha.Works"
  "paceShareInfo\">\202\323\344\223\0021\022//v1alpha/{name=wo"
  "rkspaces/*/workspaceShareInfo}\332A\004name\022\277\001"
  "\n\025GetWorkspaceLimitInfo\0227.ai.inworld.stu"
  "dio.v1alpha.GetWorkspaceLimitInfoRequest"
  "\032-.ai.inworld.studio.v1alpha.WorkspaceLi"
  "mitInfo\">\202\323\344\223\0021\022//v1alpha/{name=workspac"
  "es/*/workspaceLimitInfo}\332A\004name\022\277\001\n\027GetW"
  "orkspaceBillingInfo\0229.ai.inworld.studio."
  "v1alpha.GetWorkspaceBillingInfoRequest\032/"
  ".ai.inworld.studio.v1alpha.WorkspaceBill"
  "ingInfo\"8\202\323\344\223\002+\022)/v1alpha/{name=workspac"
  "es/*/billing-info}\332A\004nameB\231\001\n\031ai.inworld"
  ".studio.v1alphaB\017WorkspacesProtoP\001ZMgith"
  "ub.com/inworld-ai/inworld/serving/grpc-g"
  "ateway/build/proto/studio/v1alpha\252\002\031Ai.I"
  "nworld.Studio.V1Alphab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_options_2eproto,
};
static ::_pbi::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto = {
    false, false, 6469, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto,
    "ai/inworld/studio/v1alpha/workspaces.proto",
    &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_deps, 7, 25,
    schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto::offsets,
    file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto,
    file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter() {
  return &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenerateResourceNameRequest_ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[0];
}
bool GenerateResourceNameRequest_ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_UNSPECIFIED;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_WORKSPACE;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_CHARACTER;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::RESOURCE_TYPE_SCENE;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::ResourceType_MIN;
constexpr GenerateResourceNameRequest_ResourceType GenerateResourceNameRequest::ResourceType_MAX;
constexpr int GenerateResourceNameRequest::ResourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkspaceBillingInfo_QuotaSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[1];
}
bool WorkspaceBillingInfo_QuotaSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::QUOTA_SOURCE_UNSPECIFIED;
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::NO_SOURCES;
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::SUBSCRIPTION;
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::CREDITS;
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::OVERAGE;
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::QuotaSource_MIN;
constexpr WorkspaceBillingInfo_QuotaSource WorkspaceBillingInfo::QuotaSource_MAX;
constexpr int WorkspaceBillingInfo::QuotaSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkspaceItemView_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[2];
}
bool WorkspaceItemView_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetWorkspaceRequest::_Internal {
 public:
};

GetWorkspaceRequest::GetWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
}
GetWorkspaceRequest::GetWorkspaceRequest(const GetWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkspaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.view_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.view_ = from._impl_.view_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
}

inline void GetWorkspaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.view_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkspaceRequest::~GetWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetWorkspaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceItemView view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_view(static_cast<::ai::inworld::studio::v1alpha::WorkspaceItemView>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkspaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceItemView view = 2;
  if (this->_internal_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  return target;
}

size_t GetWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.studio.v1alpha.WorkspaceItemView view = 2;
  if (this->_internal_view() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_view());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkspaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkspaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkspaceRequest::GetClassData() const { return &_class_data_; }


void GetWorkspaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkspaceRequest*>(&to_msg);
  auto& from = static_cast<const GetWorkspaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_view() != 0) {
    _this->_internal_set_view(from._internal_view());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkspaceRequest::CopyFrom(const GetWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceRequest::InternalSwap(GetWorkspaceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.view_, other->_impl_.view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[0]);
}

// ===================================================================

class ListWorkspacesRequest::_Internal {
 public:
};

ListWorkspacesRequest::ListWorkspacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
}
ListWorkspacesRequest::ListWorkspacesRequest(const ListWorkspacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListWorkspacesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
}

inline void ListWorkspacesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListWorkspacesRequest::~ListWorkspacesRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListWorkspacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.page_token_.Destroy();
}

void ListWorkspacesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListWorkspacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.page_token_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkspacesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListWorkspacesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWorkspacesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListWorkspacesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  return target;
}

size_t ListWorkspacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListWorkspacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListWorkspacesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListWorkspacesRequest::GetClassData() const { return &_class_data_; }


void ListWorkspacesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListWorkspacesRequest*>(&to_msg);
  auto& from = static_cast<const ListWorkspacesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListWorkspacesRequest::CopyFrom(const ListWorkspacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ListWorkspacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkspacesRequest::IsInitialized() const {
  return true;
}

void ListWorkspacesRequest::InternalSwap(ListWorkspacesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  swap(_impl_.page_size_, other->_impl_.page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkspacesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[1]);
}

// ===================================================================

class CreateWorkspaceRequest::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::Workspace& workspace(const CreateWorkspaceRequest* msg);
};

const ::ai::inworld::studio::v1alpha::Workspace&
CreateWorkspaceRequest::_Internal::workspace(const CreateWorkspaceRequest* msg) {
  return *msg->_impl_.workspace_;
}
CreateWorkspaceRequest::CreateWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
}
CreateWorkspaceRequest::CreateWorkspaceRequest(const CreateWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateWorkspaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workspace_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workspace()) {
    _this->_impl_.workspace_ = new ::ai::inworld::studio::v1alpha::Workspace(*from._impl_.workspace_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
}

inline void CreateWorkspaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workspace_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateWorkspaceRequest::~CreateWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.workspace_;
}

void CreateWorkspaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.workspace_ != nullptr) {
    delete _impl_.workspace_;
  }
  _impl_.workspace_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateWorkspaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateWorkspaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_workspace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::workspace(this),
        _Internal::workspace(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  return target;
}

size_t CreateWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_workspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workspace_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateWorkspaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateWorkspaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateWorkspaceRequest::GetClassData() const { return &_class_data_; }


void CreateWorkspaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateWorkspaceRequest*>(&to_msg);
  auto& from = static_cast<const CreateWorkspaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_workspace()) {
    _this->_internal_mutable_workspace()->::ai::inworld::studio::v1alpha::Workspace::MergeFrom(
        from._internal_workspace());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateWorkspaceRequest::CopyFrom(const CreateWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.CreateWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkspaceRequest::IsInitialized() const {
  return true;
}

void CreateWorkspaceRequest::InternalSwap(CreateWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.workspace_, other->_impl_.workspace_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWorkspaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[2]);
}

// ===================================================================

class UpdateWorkspaceRequest::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::Workspace& workspace(const UpdateWorkspaceRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateWorkspaceRequest* msg);
};

const ::ai::inworld::studio::v1alpha::Workspace&
UpdateWorkspaceRequest::_Internal::workspace(const UpdateWorkspaceRequest* msg) {
  return *msg->_impl_.workspace_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateWorkspaceRequest::_Internal::update_mask(const UpdateWorkspaceRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdateWorkspaceRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
}
UpdateWorkspaceRequest::UpdateWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
}
UpdateWorkspaceRequest::UpdateWorkspaceRequest(const UpdateWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateWorkspaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workspace_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workspace()) {
    _this->_impl_.workspace_ = new ::ai::inworld::studio::v1alpha::Workspace(*from._impl_.workspace_);
  }
  if (from._internal_has_update_mask()) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
}

inline void UpdateWorkspaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workspace_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateWorkspaceRequest::~UpdateWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.workspace_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdateWorkspaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.workspace_ != nullptr) {
    delete _impl_.workspace_;
  }
  _impl_.workspace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkspaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateWorkspaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_workspace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::workspace(this),
        _Internal::workspace(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_update_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  return target;
}

size_t UpdateWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.Workspace workspace = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_workspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workspace_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateWorkspaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateWorkspaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateWorkspaceRequest::GetClassData() const { return &_class_data_; }


void UpdateWorkspaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateWorkspaceRequest*>(&to_msg);
  auto& from = static_cast<const UpdateWorkspaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_workspace()) {
    _this->_internal_mutable_workspace()->::ai::inworld::studio::v1alpha::Workspace::MergeFrom(
        from._internal_workspace());
  }
  if (from._internal_has_update_mask()) {
    _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_update_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateWorkspaceRequest::CopyFrom(const UpdateWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.UpdateWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkspaceRequest::IsInitialized() const {
  return true;
}

void UpdateWorkspaceRequest::InternalSwap(UpdateWorkspaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateWorkspaceRequest, _impl_.update_mask_)
      + sizeof(UpdateWorkspaceRequest::_impl_.update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateWorkspaceRequest, _impl_.workspace_)>(
          reinterpret_cast<char*>(&_impl_.workspace_),
          reinterpret_cast<char*>(&other->_impl_.workspace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkspaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[3]);
}

// ===================================================================

class DeleteWorkspaceRequest::_Internal {
 public:
};

DeleteWorkspaceRequest::DeleteWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
}
DeleteWorkspaceRequest::DeleteWorkspaceRequest(const DeleteWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteWorkspaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.force_ = from._impl_.force_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
}

inline void DeleteWorkspaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.force_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteWorkspaceRequest::~DeleteWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeleteWorkspaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkspaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.DeleteWorkspaceRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkspaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.DeleteWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  return target;
}

size_t DeleteWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkspaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteWorkspaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkspaceRequest::GetClassData() const { return &_class_data_; }


void DeleteWorkspaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteWorkspaceRequest*>(&to_msg);
  auto& from = static_cast<const DeleteWorkspaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkspaceRequest::CopyFrom(const DeleteWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.DeleteWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkspaceRequest::IsInitialized() const {
  return true;
}

void DeleteWorkspaceRequest::InternalSwap(DeleteWorkspaceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.force_, other->_impl_.force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkspaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[4]);
}

// ===================================================================

class Workspace_Meta::_Internal {
 public:
};

Workspace_Meta::Workspace_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.Workspace.Meta)
}
Workspace_Meta::Workspace_Meta(const Workspace_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Workspace_Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_characters_){}
    , decltype(_impl_.total_scenes_){}
    , decltype(_impl_.total_triggers_){}
    , decltype(_impl_.total_common_knowledge_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_characters_, &from._impl_.total_characters_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_common_knowledge_) -
    reinterpret_cast<char*>(&_impl_.total_characters_)) + sizeof(_impl_.total_common_knowledge_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.Workspace.Meta)
}

inline void Workspace_Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_characters_){0}
    , decltype(_impl_.total_scenes_){0}
    , decltype(_impl_.total_triggers_){0}
    , decltype(_impl_.total_common_knowledge_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Workspace_Meta::~Workspace_Meta() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.Workspace.Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Workspace_Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Workspace_Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Workspace_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_characters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_common_knowledge_) -
      reinterpret_cast<char*>(&_impl_.total_characters_)) + sizeof(_impl_.total_common_knowledge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace_Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_scenes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_scenes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_triggers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Workspace_Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_characters = 1;
  if (this->_internal_total_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_characters(), target);
  }

  // int32 total_scenes = 2;
  if (this->_internal_total_scenes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_scenes(), target);
  }

  // int32 total_triggers = 3;
  if (this->_internal_total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_triggers(), target);
  }

  // int32 total_common_knowledge = 4;
  if (this->_internal_total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_common_knowledge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.Workspace.Meta)
  return target;
}

size_t Workspace_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_characters = 1;
  if (this->_internal_total_characters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_characters());
  }

  // int32 total_scenes = 2;
  if (this->_internal_total_scenes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_scenes());
  }

  // int32 total_triggers = 3;
  if (this->_internal_total_triggers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_triggers());
  }

  // int32 total_common_knowledge = 4;
  if (this->_internal_total_common_knowledge() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_common_knowledge());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Workspace_Meta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Workspace_Meta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Workspace_Meta::GetClassData() const { return &_class_data_; }


void Workspace_Meta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Workspace_Meta*>(&to_msg);
  auto& from = static_cast<const Workspace_Meta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_characters() != 0) {
    _this->_internal_set_total_characters(from._internal_total_characters());
  }
  if (from._internal_total_scenes() != 0) {
    _this->_internal_set_total_scenes(from._internal_total_scenes());
  }
  if (from._internal_total_triggers() != 0) {
    _this->_internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from._internal_total_common_knowledge() != 0) {
    _this->_internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Workspace_Meta::CopyFrom(const Workspace_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.Workspace.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace_Meta::IsInitialized() const {
  return true;
}

void Workspace_Meta::InternalSwap(Workspace_Meta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workspace_Meta, _impl_.total_common_knowledge_)
      + sizeof(Workspace_Meta::_impl_.total_common_knowledge_)
      - PROTOBUF_FIELD_OFFSET(Workspace_Meta, _impl_.total_characters_)>(
          reinterpret_cast<char*>(&_impl_.total_characters_),
          reinterpret_cast<char*>(&other->_impl_.total_characters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace_Meta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[5]);
}

// ===================================================================

class Workspace::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::Workspace_Meta& meta(const Workspace* msg);
};

const ::ai::inworld::studio::v1alpha::Workspace_Meta&
Workspace::_Internal::meta(const Workspace* msg) {
  return *msg->_impl_.meta_;
}
Workspace::Workspace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.Workspace)
}
Workspace::Workspace(const Workspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Workspace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.experimental_features_){from._impl_.experimental_features_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.billing_account_){}
    , decltype(_impl_.meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.billing_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.billing_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_billing_account().empty()) {
    _this->_impl_.billing_account_.Set(from._internal_billing_account(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::ai::inworld::studio::v1alpha::Workspace_Meta(*from._impl_.meta_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.Workspace)
}

inline void Workspace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.experimental_features_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.billing_account_){}
    , decltype(_impl_.meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.billing_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.billing_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Workspace::~Workspace() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.Workspace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Workspace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.experimental_features_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.billing_account_.Destroy();
  if (this != internal_default_instance()) delete _impl_.meta_;
}

void Workspace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Workspace::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.Workspace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.experimental_features_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.billing_account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workspace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.name"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.display_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string experimental_features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_experimental_features();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.experimental_features"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string billing_account = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_billing_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.Workspace.billing_account"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.Workspace.Meta meta = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Workspace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.Workspace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // repeated string experimental_features = 3;
  for (int i = 0, n = this->_internal_experimental_features_size(); i < n; i++) {
    const auto& s = this->_internal_experimental_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.experimental_features");
    target = stream->WriteString(3, s, target);
  }

  // string billing_account = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_billing_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_billing_account().data(), static_cast<int>(this->_internal_billing_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.Workspace.billing_account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_billing_account(), target);
  }

  // .ai.inworld.studio.v1alpha.Workspace.Meta meta = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.Workspace)
  return target;
}

size_t Workspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.Workspace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string experimental_features = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.experimental_features_.size());
  for (int i = 0, n = _impl_.experimental_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.experimental_features_.Get(i));
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.ai.inworld.options.examples) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string billing_account = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_billing_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_billing_account());
  }

  // .ai.inworld.studio.v1alpha.Workspace.Meta meta = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Workspace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Workspace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Workspace::GetClassData() const { return &_class_data_; }


void Workspace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Workspace*>(&to_msg);
  auto& from = static_cast<const Workspace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.Workspace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.experimental_features_.MergeFrom(from._impl_.experimental_features_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_billing_account().empty()) {
    _this->_internal_set_billing_account(from._internal_billing_account());
  }
  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::ai::inworld::studio::v1alpha::Workspace_Meta::MergeFrom(
        from._internal_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Workspace::CopyFrom(const Workspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.Workspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace::IsInitialized() const {
  return true;
}

void Workspace::InternalSwap(Workspace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.experimental_features_.InternalSwap(&other->_impl_.experimental_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.billing_account_, lhs_arena,
      &other->_impl_.billing_account_, rhs_arena
  );
  swap(_impl_.meta_, other->_impl_.meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Workspace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[6]);
}

// ===================================================================

class ListWorkspacesResponse::_Internal {
 public:
};

ListWorkspacesResponse::ListWorkspacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
}
ListWorkspacesResponse::ListWorkspacesResponse(const ListWorkspacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListWorkspacesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workspaces_){from._impl_.workspaces_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
}

inline void ListWorkspacesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workspaces_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListWorkspacesResponse::~ListWorkspacesResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListWorkspacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workspaces_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListWorkspacesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListWorkspacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workspaces_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkspacesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ai.inworld.studio.v1alpha.Workspace workspaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workspaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListWorkspacesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWorkspacesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.Workspace workspaces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workspaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_workspaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListWorkspacesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  return target;
}

size_t ListWorkspacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.Workspace workspaces = 1;
  total_size += 1UL * this->_internal_workspaces_size();
  for (const auto& msg : this->_impl_.workspaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListWorkspacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListWorkspacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListWorkspacesResponse::GetClassData() const { return &_class_data_; }


void ListWorkspacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListWorkspacesResponse*>(&to_msg);
  auto& from = static_cast<const ListWorkspacesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workspaces_.MergeFrom(from._impl_.workspaces_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListWorkspacesResponse::CopyFrom(const ListWorkspacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ListWorkspacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkspacesResponse::IsInitialized() const {
  return true;
}

void ListWorkspacesResponse::InternalSwap(ListWorkspacesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workspaces_.InternalSwap(&other->_impl_.workspaces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkspacesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[7]);
}

// ===================================================================

class ShareWorkspaceRequest::_Internal {
 public:
};

ShareWorkspaceRequest::ShareWorkspaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
}
ShareWorkspaceRequest::ShareWorkspaceRequest(const ShareWorkspaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShareWorkspaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.emails_){from._impl_.emails_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
}

inline void ShareWorkspaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.emails_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShareWorkspaceRequest::~ShareWorkspaceRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareWorkspaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.emails_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ShareWorkspaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShareWorkspaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.emails_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareWorkspaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string emails = 2 [(.ai.inworld.options.examples) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_emails();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.emails"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareWorkspaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string emails = 2 [(.ai.inworld.options.examples) = {
  for (int i = 0, n = this->_internal_emails_size(); i < n; i++) {
    const auto& s = this->_internal_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ShareWorkspaceRequest.emails");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  return target;
}

size_t ShareWorkspaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string emails = 2 [(.ai.inworld.options.examples) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.emails_.size());
  for (int i = 0, n = _impl_.emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.emails_.Get(i));
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShareWorkspaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShareWorkspaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShareWorkspaceRequest::GetClassData() const { return &_class_data_; }


void ShareWorkspaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShareWorkspaceRequest*>(&to_msg);
  auto& from = static_cast<const ShareWorkspaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.emails_.MergeFrom(from._impl_.emails_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShareWorkspaceRequest::CopyFrom(const ShareWorkspaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ShareWorkspaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareWorkspaceRequest::IsInitialized() const {
  return true;
}

void ShareWorkspaceRequest::InternalSwap(ShareWorkspaceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.emails_.InternalSwap(&other->_impl_.emails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareWorkspaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[8]);
}

// ===================================================================

class GenerateResourceNameRequest::_Internal {
 public:
};

GenerateResourceNameRequest::GenerateResourceNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
}
GenerateResourceNameRequest::GenerateResourceNameRequest(const GenerateResourceNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateResourceNameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workspace_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.resource_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workspace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workspace().empty()) {
    _this->_impl_.workspace_.Set(from._internal_workspace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.resource_type_ = from._impl_.resource_type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
}

inline void GenerateResourceNameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workspace_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.resource_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workspace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateResourceNameRequest::~GenerateResourceNameRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateResourceNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workspace_.Destroy();
  _impl_.display_name_.Destroy();
}

void GenerateResourceNameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateResourceNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workspace_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.resource_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateResourceNameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workspace = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workspace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.workspace"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.display_name"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.GenerateResourceNameRequest.ResourceType resource_type = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::ai::inworld::studio::v1alpha::GenerateResourceNameRequest_ResourceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateResourceNameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workspace = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_workspace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace().data(), static_cast<int>(this->_internal_workspace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.workspace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workspace(), target);
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateResourceNameRequest.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // .ai.inworld.studio.v1alpha.GenerateResourceNameRequest.ResourceType resource_type = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resource_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  return target;
}

size_t GenerateResourceNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workspace = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_workspace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace());
  }

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // .ai.inworld.studio.v1alpha.GenerateResourceNameRequest.ResourceType resource_type = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_resource_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateResourceNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateResourceNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateResourceNameRequest::GetClassData() const { return &_class_data_; }


void GenerateResourceNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateResourceNameRequest*>(&to_msg);
  auto& from = static_cast<const GenerateResourceNameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workspace().empty()) {
    _this->_internal_set_workspace(from._internal_workspace());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_resource_type() != 0) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateResourceNameRequest::CopyFrom(const GenerateResourceNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateResourceNameRequest::IsInitialized() const {
  return true;
}

void GenerateResourceNameRequest::InternalSwap(GenerateResourceNameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workspace_, lhs_arena,
      &other->_impl_.workspace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  swap(_impl_.resource_type_, other->_impl_.resource_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateResourceNameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[9]);
}

// ===================================================================

class GenerateResourceNameResponse::_Internal {
 public:
};

GenerateResourceNameResponse::GenerateResourceNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
}
GenerateResourceNameResponse::GenerateResourceNameResponse(const GenerateResourceNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateResourceNameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource().empty()) {
    _this->_impl_.resource_.Set(from._internal_resource(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
}

inline void GenerateResourceNameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateResourceNameResponse::~GenerateResourceNameResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateResourceNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_.Destroy();
}

void GenerateResourceNameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateResourceNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateResourceNameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateResourceNameResponse.resource"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateResourceNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_resource().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateResourceNameResponse.resource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  return target;
}

size_t GenerateResourceNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_resource().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateResourceNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateResourceNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateResourceNameResponse::GetClassData() const { return &_class_data_; }


void GenerateResourceNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateResourceNameResponse*>(&to_msg);
  auto& from = static_cast<const GenerateResourceNameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource().empty()) {
    _this->_internal_set_resource(from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateResourceNameResponse::CopyFrom(const GenerateResourceNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateResourceNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateResourceNameResponse::IsInitialized() const {
  return true;
}

void GenerateResourceNameResponse::InternalSwap(GenerateResourceNameResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_, lhs_arena,
      &other->_impl_.resource_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateResourceNameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[10]);
}

// ===================================================================

class GetWorkspaceShareInfoRequest::_Internal {
 public:
};

GetWorkspaceShareInfoRequest::GetWorkspaceShareInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
}
GetWorkspaceShareInfoRequest::GetWorkspaceShareInfoRequest(const GetWorkspaceShareInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkspaceShareInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
}

inline void GetWorkspaceShareInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkspaceShareInfoRequest::~GetWorkspaceShareInfoRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkspaceShareInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetWorkspaceShareInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkspaceShareInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceShareInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkspaceShareInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  return target;
}

size_t GetWorkspaceShareInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkspaceShareInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkspaceShareInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkspaceShareInfoRequest::GetClassData() const { return &_class_data_; }


void GetWorkspaceShareInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkspaceShareInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetWorkspaceShareInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkspaceShareInfoRequest::CopyFrom(const GetWorkspaceShareInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceShareInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceShareInfoRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceShareInfoRequest::InternalSwap(GetWorkspaceShareInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceShareInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[11]);
}

// ===================================================================

class WorkspaceShareInfo::_Internal {
 public:
};

WorkspaceShareInfo::WorkspaceShareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
}
WorkspaceShareInfo::WorkspaceShareInfo(const WorkspaceShareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceShareInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.emails_){from._impl_.emails_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
}

inline void WorkspaceShareInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.emails_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceShareInfo::~WorkspaceShareInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceShareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.emails_.~RepeatedPtrField();
}

void WorkspaceShareInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceShareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.emails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceShareInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string emails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_emails();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.WorkspaceShareInfo.emails"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceShareInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string emails = 1;
  for (int i = 0, n = this->_internal_emails_size(); i < n; i++) {
    const auto& s = this->_internal_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.WorkspaceShareInfo.emails");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  return target;
}

size_t WorkspaceShareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string emails = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.emails_.size());
  for (int i = 0, n = _impl_.emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.emails_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceShareInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceShareInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceShareInfo::GetClassData() const { return &_class_data_; }


void WorkspaceShareInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceShareInfo*>(&to_msg);
  auto& from = static_cast<const WorkspaceShareInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.emails_.MergeFrom(from._impl_.emails_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceShareInfo::CopyFrom(const WorkspaceShareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceShareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceShareInfo::IsInitialized() const {
  return true;
}

void WorkspaceShareInfo::InternalSwap(WorkspaceShareInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.emails_.InternalSwap(&other->_impl_.emails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceShareInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[12]);
}

// ===================================================================

class GetWorkspaceLimitInfoRequest::_Internal {
 public:
};

GetWorkspaceLimitInfoRequest::GetWorkspaceLimitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
}
GetWorkspaceLimitInfoRequest::GetWorkspaceLimitInfoRequest(const GetWorkspaceLimitInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkspaceLimitInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
}

inline void GetWorkspaceLimitInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkspaceLimitInfoRequest::~GetWorkspaceLimitInfoRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkspaceLimitInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetWorkspaceLimitInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkspaceLimitInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceLimitInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkspaceLimitInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  return target;
}

size_t GetWorkspaceLimitInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkspaceLimitInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkspaceLimitInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkspaceLimitInfoRequest::GetClassData() const { return &_class_data_; }


void GetWorkspaceLimitInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkspaceLimitInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetWorkspaceLimitInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkspaceLimitInfoRequest::CopyFrom(const GetWorkspaceLimitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceLimitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceLimitInfoRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceLimitInfoRequest::InternalSwap(GetWorkspaceLimitInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceLimitInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[13]);
}

// ===================================================================

class WorkspaceLimitInfo_TextListLimit::_Internal {
 public:
};

WorkspaceLimitInfo_TextListLimit::WorkspaceLimitInfo_TextListLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
}
WorkspaceLimitInfo_TextListLimit::WorkspaceLimitInfo_TextListLimit(const WorkspaceLimitInfo_TextListLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_TextListLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_max_length_){}
    , decltype(_impl_.total_items_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_max_length_, &from._impl_.item_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_items_) -
    reinterpret_cast<char*>(&_impl_.item_max_length_)) + sizeof(_impl_.total_items_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
}

inline void WorkspaceLimitInfo_TextListLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_max_length_){0}
    , decltype(_impl_.total_items_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_TextListLimit::~WorkspaceLimitInfo_TextListLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_TextListLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceLimitInfo_TextListLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_TextListLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_items_) -
      reinterpret_cast<char*>(&_impl_.item_max_length_)) + sizeof(_impl_.total_items_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_TextListLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_TextListLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_max_length = 1;
  if (this->_internal_item_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_max_length(), target);
  }

  // int32 total_items = 2;
  if (this->_internal_total_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  return target;
}

size_t WorkspaceLimitInfo_TextListLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_max_length = 1;
  if (this->_internal_item_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_max_length());
  }

  // int32 total_items = 2;
  if (this->_internal_total_items() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_items());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_TextListLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_TextListLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_TextListLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_TextListLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_TextListLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_TextListLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_max_length() != 0) {
    _this->_internal_set_item_max_length(from._internal_item_max_length());
  }
  if (from._internal_total_items() != 0) {
    _this->_internal_set_total_items(from._internal_total_items());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_TextListLimit::CopyFrom(const WorkspaceLimitInfo_TextListLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_TextListLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_TextListLimit::InternalSwap(WorkspaceLimitInfo_TextListLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_TextListLimit, _impl_.total_items_)
      + sizeof(WorkspaceLimitInfo_TextListLimit::_impl_.total_items_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_TextListLimit, _impl_.item_max_length_)>(
          reinterpret_cast<char*>(&_impl_.item_max_length_),
          reinterpret_cast<char*>(&other->_impl_.item_max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_TextListLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[14]);
}

// ===================================================================

class WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& hobby_or_interests(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& nicknames(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& personality_adjectives(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal::hobby_or_interests(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg) {
  return *msg->_impl_.hobby_or_interests_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal::nicknames(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg) {
  return *msg->_impl_.nicknames_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_Internal::personality_adjectives(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* msg) {
  return *msg->_impl_.personality_adjectives_;
}
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
}
WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hobby_or_interests_){nullptr}
    , decltype(_impl_.nicknames_){nullptr}
    , decltype(_impl_.personality_adjectives_){nullptr}
    , decltype(_impl_.core_max_length_){}
    , decltype(_impl_.example_dialog_max_length_){}
    , decltype(_impl_.motivation_max_length_){}
    , decltype(_impl_.character_role_max_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hobby_or_interests()) {
    _this->_impl_.hobby_or_interests_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from._impl_.hobby_or_interests_);
  }
  if (from._internal_has_nicknames()) {
    _this->_impl_.nicknames_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from._impl_.nicknames_);
  }
  if (from._internal_has_personality_adjectives()) {
    _this->_impl_.personality_adjectives_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from._impl_.personality_adjectives_);
  }
  ::memcpy(&_impl_.core_max_length_, &from._impl_.core_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.character_role_max_length_) -
    reinterpret_cast<char*>(&_impl_.core_max_length_)) + sizeof(_impl_.character_role_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
}

inline void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hobby_or_interests_){nullptr}
    , decltype(_impl_.nicknames_){nullptr}
    , decltype(_impl_.personality_adjectives_){nullptr}
    , decltype(_impl_.core_max_length_){0}
    , decltype(_impl_.example_dialog_max_length_){0}
    , decltype(_impl_.motivation_max_length_){0}
    , decltype(_impl_.character_role_max_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::~WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hobby_or_interests_;
  if (this != internal_default_instance()) delete _impl_.nicknames_;
  if (this != internal_default_instance()) delete _impl_.personality_adjectives_;
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hobby_or_interests_ != nullptr) {
    delete _impl_.hobby_or_interests_;
  }
  _impl_.hobby_or_interests_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nicknames_ != nullptr) {
    delete _impl_.nicknames_;
  }
  _impl_.nicknames_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.personality_adjectives_ != nullptr) {
    delete _impl_.personality_adjectives_;
  }
  _impl_.personality_adjectives_ = nullptr;
  ::memset(&_impl_.core_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.character_role_max_length_) -
      reinterpret_cast<char*>(&_impl_.core_max_length_)) + sizeof(_impl_.character_role_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 core_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.core_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 example_dialog_max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.example_dialog_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 motivation_max_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.motivation_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 character_role_max_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.character_role_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit hobby_or_interests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hobby_or_interests(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit nicknames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nicknames(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit personality_adjectives = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_personality_adjectives(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 core_max_length = 1;
  if (this->_internal_core_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_core_max_length(), target);
  }

  // int32 example_dialog_max_length = 2;
  if (this->_internal_example_dialog_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_example_dialog_max_length(), target);
  }

  // int32 motivation_max_length = 3;
  if (this->_internal_motivation_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_motivation_max_length(), target);
  }

  // int32 character_role_max_length = 4;
  if (this->_internal_character_role_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_character_role_max_length(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit hobby_or_interests = 5;
  if (this->_internal_has_hobby_or_interests()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hobby_or_interests(this),
        _Internal::hobby_or_interests(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit nicknames = 6;
  if (this->_internal_has_nicknames()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::nicknames(this),
        _Internal::nicknames(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit personality_adjectives = 7;
  if (this->_internal_has_personality_adjectives()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::personality_adjectives(this),
        _Internal::personality_adjectives(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  return target;
}

size_t WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit hobby_or_interests = 5;
  if (this->_internal_has_hobby_or_interests()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hobby_or_interests_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit nicknames = 6;
  if (this->_internal_has_nicknames()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nicknames_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit personality_adjectives = 7;
  if (this->_internal_has_personality_adjectives()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.personality_adjectives_);
  }

  // int32 core_max_length = 1;
  if (this->_internal_core_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_core_max_length());
  }

  // int32 example_dialog_max_length = 2;
  if (this->_internal_example_dialog_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_example_dialog_max_length());
  }

  // int32 motivation_max_length = 3;
  if (this->_internal_motivation_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motivation_max_length());
  }

  // int32 character_role_max_length = 4;
  if (this->_internal_character_role_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_character_role_max_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hobby_or_interests()) {
    _this->_internal_mutable_hobby_or_interests()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(
        from._internal_hobby_or_interests());
  }
  if (from._internal_has_nicknames()) {
    _this->_internal_mutable_nicknames()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(
        from._internal_nicknames());
  }
  if (from._internal_has_personality_adjectives()) {
    _this->_internal_mutable_personality_adjectives()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(
        from._internal_personality_adjectives());
  }
  if (from._internal_core_max_length() != 0) {
    _this->_internal_set_core_max_length(from._internal_core_max_length());
  }
  if (from._internal_example_dialog_max_length() != 0) {
    _this->_internal_set_example_dialog_max_length(from._internal_example_dialog_max_length());
  }
  if (from._internal_motivation_max_length() != 0) {
    _this->_internal_set_motivation_max_length(from._internal_motivation_max_length());
  }
  if (from._internal_character_role_max_length() != 0) {
    _this->_internal_set_character_role_max_length(from._internal_character_role_max_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::CopyFrom(const WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::InternalSwap(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.character_role_max_length_)
      + sizeof(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::_impl_.character_role_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit, _impl_.hobby_or_interests_)>(
          reinterpret_cast<char*>(&_impl_.hobby_or_interests_),
          reinterpret_cast<char*>(&other->_impl_.hobby_or_interests_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[15]);
}

// ===================================================================

class WorkspaceLimitInfo_CharacterLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit& character_description(const WorkspaceLimitInfo_CharacterLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit&
WorkspaceLimitInfo_CharacterLimit::_Internal::character_description(const WorkspaceLimitInfo_CharacterLimit* msg) {
  return *msg->_impl_.character_description_;
}
WorkspaceLimitInfo_CharacterLimit::WorkspaceLimitInfo_CharacterLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
}
WorkspaceLimitInfo_CharacterLimit::WorkspaceLimitInfo_CharacterLimit(const WorkspaceLimitInfo_CharacterLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_CharacterLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_description_){nullptr}
    , decltype(_impl_.name_max_length_){}
    , decltype(_impl_.total_triggers_){}
    , decltype(_impl_.total_common_knowledge_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_description()) {
    _this->_impl_.character_description_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit(*from._impl_.character_description_);
  }
  ::memcpy(&_impl_.name_max_length_, &from._impl_.name_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_common_knowledge_) -
    reinterpret_cast<char*>(&_impl_.name_max_length_)) + sizeof(_impl_.total_common_knowledge_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
}

inline void WorkspaceLimitInfo_CharacterLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_description_){nullptr}
    , decltype(_impl_.name_max_length_){0}
    , decltype(_impl_.total_triggers_){0}
    , decltype(_impl_.total_common_knowledge_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_CharacterLimit::~WorkspaceLimitInfo_CharacterLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_CharacterLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_description_;
}

void WorkspaceLimitInfo_CharacterLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_CharacterLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_description_ != nullptr) {
    delete _impl_.character_description_;
  }
  _impl_.character_description_ = nullptr;
  ::memset(&_impl_.name_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_common_knowledge_) -
      reinterpret_cast<char*>(&_impl_.name_max_length_)) + sizeof(_impl_.total_common_knowledge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_CharacterLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 name_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit character_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_CharacterLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name_max_length = 1;
  if (this->_internal_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_name_max_length(), target);
  }

  // int32 total_triggers = 2;
  if (this->_internal_total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_triggers(), target);
  }

  // int32 total_common_knowledge = 3;
  if (this->_internal_total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_common_knowledge(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit character_description = 4;
  if (this->_internal_has_character_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::character_description(this),
        _Internal::character_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  return target;
}

size_t WorkspaceLimitInfo_CharacterLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit.CharacterDescriptionLimit character_description = 4;
  if (this->_internal_has_character_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_description_);
  }

  // int32 name_max_length = 1;
  if (this->_internal_name_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_name_max_length());
  }

  // int32 total_triggers = 2;
  if (this->_internal_total_triggers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_triggers());
  }

  // int32 total_common_knowledge = 3;
  if (this->_internal_total_common_knowledge() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_common_knowledge());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_CharacterLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_CharacterLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_CharacterLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_CharacterLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_CharacterLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_CharacterLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character_description()) {
    _this->_internal_mutable_character_description()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit::MergeFrom(
        from._internal_character_description());
  }
  if (from._internal_name_max_length() != 0) {
    _this->_internal_set_name_max_length(from._internal_name_max_length());
  }
  if (from._internal_total_triggers() != 0) {
    _this->_internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from._internal_total_common_knowledge() != 0) {
    _this->_internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_CharacterLimit::CopyFrom(const WorkspaceLimitInfo_CharacterLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_CharacterLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_CharacterLimit::InternalSwap(WorkspaceLimitInfo_CharacterLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit, _impl_.total_common_knowledge_)
      + sizeof(WorkspaceLimitInfo_CharacterLimit::_impl_.total_common_knowledge_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CharacterLimit, _impl_.character_description_)>(
          reinterpret_cast<char*>(&_impl_.character_description_),
          reinterpret_cast<char*>(&other->_impl_.character_description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_CharacterLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[16]);
}

// ===================================================================

class WorkspaceLimitInfo_SceneLimit::_Internal {
 public:
};

WorkspaceLimitInfo_SceneLimit::WorkspaceLimitInfo_SceneLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
}
WorkspaceLimitInfo_SceneLimit::WorkspaceLimitInfo_SceneLimit(const WorkspaceLimitInfo_SceneLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_SceneLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_max_length_){}
    , decltype(_impl_.total_characters_){}
    , decltype(_impl_.total_triggers_){}
    , decltype(_impl_.display_name_max_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.description_max_length_, &from._impl_.description_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.display_name_max_length_) -
    reinterpret_cast<char*>(&_impl_.description_max_length_)) + sizeof(_impl_.display_name_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
}

inline void WorkspaceLimitInfo_SceneLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_max_length_){0}
    , decltype(_impl_.total_characters_){0}
    , decltype(_impl_.total_triggers_){0}
    , decltype(_impl_.display_name_max_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_SceneLimit::~WorkspaceLimitInfo_SceneLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_SceneLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceLimitInfo_SceneLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_SceneLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.description_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.display_name_max_length_) -
      reinterpret_cast<char*>(&_impl_.description_max_length_)) + sizeof(_impl_.display_name_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_SceneLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 description_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.description_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_triggers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 display_name_max_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_SceneLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 description_max_length = 1;
  if (this->_internal_description_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_description_max_length(), target);
  }

  // int32 total_characters = 2;
  if (this->_internal_total_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_characters(), target);
  }

  // int32 total_triggers = 3;
  if (this->_internal_total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_triggers(), target);
  }

  // int32 display_name_max_length = 4;
  if (this->_internal_display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_display_name_max_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  return target;
}

size_t WorkspaceLimitInfo_SceneLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 description_max_length = 1;
  if (this->_internal_description_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_description_max_length());
  }

  // int32 total_characters = 2;
  if (this->_internal_total_characters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_characters());
  }

  // int32 total_triggers = 3;
  if (this->_internal_total_triggers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_triggers());
  }

  // int32 display_name_max_length = 4;
  if (this->_internal_display_name_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_name_max_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_SceneLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_SceneLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_SceneLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_SceneLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_SceneLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_SceneLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_description_max_length() != 0) {
    _this->_internal_set_description_max_length(from._internal_description_max_length());
  }
  if (from._internal_total_characters() != 0) {
    _this->_internal_set_total_characters(from._internal_total_characters());
  }
  if (from._internal_total_triggers() != 0) {
    _this->_internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from._internal_display_name_max_length() != 0) {
    _this->_internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_SceneLimit::CopyFrom(const WorkspaceLimitInfo_SceneLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_SceneLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_SceneLimit::InternalSwap(WorkspaceLimitInfo_SceneLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_SceneLimit, _impl_.display_name_max_length_)
      + sizeof(WorkspaceLimitInfo_SceneLimit::_impl_.display_name_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_SceneLimit, _impl_.description_max_length_)>(
          reinterpret_cast<char*>(&_impl_.description_max_length_),
          reinterpret_cast<char*>(&other->_impl_.description_max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_SceneLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[17]);
}

// ===================================================================

class WorkspaceLimitInfo_WorkspaceLimit::_Internal {
 public:
};

WorkspaceLimitInfo_WorkspaceLimit::WorkspaceLimitInfo_WorkspaceLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
}
WorkspaceLimitInfo_WorkspaceLimit::WorkspaceLimitInfo_WorkspaceLimit(const WorkspaceLimitInfo_WorkspaceLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_WorkspaceLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.display_name_max_length_){}
    , decltype(_impl_.total_characters_){}
    , decltype(_impl_.total_scenes_){}
    , decltype(_impl_.total_triggers_){}
    , decltype(_impl_.total_voices_){}
    , decltype(_impl_.total_common_knowledge_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.display_name_max_length_, &from._impl_.display_name_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_common_knowledge_) -
    reinterpret_cast<char*>(&_impl_.display_name_max_length_)) + sizeof(_impl_.total_common_knowledge_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
}

inline void WorkspaceLimitInfo_WorkspaceLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.display_name_max_length_){0}
    , decltype(_impl_.total_characters_){0}
    , decltype(_impl_.total_scenes_){0}
    , decltype(_impl_.total_triggers_){0}
    , decltype(_impl_.total_voices_){0}
    , decltype(_impl_.total_common_knowledge_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_WorkspaceLimit::~WorkspaceLimitInfo_WorkspaceLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_WorkspaceLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceLimitInfo_WorkspaceLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_WorkspaceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.display_name_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_common_knowledge_) -
      reinterpret_cast<char*>(&_impl_.display_name_max_length_)) + sizeof(_impl_.total_common_knowledge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_WorkspaceLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 display_name_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_scenes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_scenes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_triggers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_voices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_voices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_common_knowledge = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.total_common_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_WorkspaceLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 display_name_max_length = 1;
  if (this->_internal_display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_name_max_length(), target);
  }

  // int32 total_characters = 2;
  if (this->_internal_total_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_characters(), target);
  }

  // int32 total_scenes = 3;
  if (this->_internal_total_scenes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_scenes(), target);
  }

  // int32 total_triggers = 4;
  if (this->_internal_total_triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_triggers(), target);
  }

  // int32 total_voices = 5;
  if (this->_internal_total_voices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_voices(), target);
  }

  // int32 total_common_knowledge = 6;
  if (this->_internal_total_common_knowledge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_common_knowledge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  return target;
}

size_t WorkspaceLimitInfo_WorkspaceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 display_name_max_length = 1;
  if (this->_internal_display_name_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_name_max_length());
  }

  // int32 total_characters = 2;
  if (this->_internal_total_characters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_characters());
  }

  // int32 total_scenes = 3;
  if (this->_internal_total_scenes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_scenes());
  }

  // int32 total_triggers = 4;
  if (this->_internal_total_triggers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_triggers());
  }

  // int32 total_voices = 5;
  if (this->_internal_total_voices() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_voices());
  }

  // int32 total_common_knowledge = 6;
  if (this->_internal_total_common_knowledge() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_common_knowledge());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_WorkspaceLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_WorkspaceLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_WorkspaceLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_WorkspaceLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_WorkspaceLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_WorkspaceLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_display_name_max_length() != 0) {
    _this->_internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
  if (from._internal_total_characters() != 0) {
    _this->_internal_set_total_characters(from._internal_total_characters());
  }
  if (from._internal_total_scenes() != 0) {
    _this->_internal_set_total_scenes(from._internal_total_scenes());
  }
  if (from._internal_total_triggers() != 0) {
    _this->_internal_set_total_triggers(from._internal_total_triggers());
  }
  if (from._internal_total_voices() != 0) {
    _this->_internal_set_total_voices(from._internal_total_voices());
  }
  if (from._internal_total_common_knowledge() != 0) {
    _this->_internal_set_total_common_knowledge(from._internal_total_common_knowledge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_WorkspaceLimit::CopyFrom(const WorkspaceLimitInfo_WorkspaceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_WorkspaceLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_WorkspaceLimit::InternalSwap(WorkspaceLimitInfo_WorkspaceLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_WorkspaceLimit, _impl_.total_common_knowledge_)
      + sizeof(WorkspaceLimitInfo_WorkspaceLimit::_impl_.total_common_knowledge_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_WorkspaceLimit, _impl_.display_name_max_length_)>(
          reinterpret_cast<char*>(&_impl_.display_name_max_length_),
          reinterpret_cast<char*>(&other->_impl_.display_name_max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_WorkspaceLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[18]);
}

// ===================================================================

class WorkspaceLimitInfo_BillingAccountLimit::_Internal {
 public:
};

WorkspaceLimitInfo_BillingAccountLimit::WorkspaceLimitInfo_BillingAccountLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
}
WorkspaceLimitInfo_BillingAccountLimit::WorkspaceLimitInfo_BillingAccountLimit(const WorkspaceLimitInfo_BillingAccountLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_BillingAccountLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_workspaces_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_workspaces_ = from._impl_.total_workspaces_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
}

inline void WorkspaceLimitInfo_BillingAccountLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_workspaces_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_BillingAccountLimit::~WorkspaceLimitInfo_BillingAccountLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_BillingAccountLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceLimitInfo_BillingAccountLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_BillingAccountLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.total_workspaces_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_BillingAccountLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_workspaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_workspaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_BillingAccountLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_workspaces = 1;
  if (this->_internal_total_workspaces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_workspaces(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  return target;
}

size_t WorkspaceLimitInfo_BillingAccountLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_workspaces = 1;
  if (this->_internal_total_workspaces() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_workspaces());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_BillingAccountLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_BillingAccountLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_BillingAccountLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_BillingAccountLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_BillingAccountLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_BillingAccountLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_workspaces() != 0) {
    _this->_internal_set_total_workspaces(from._internal_total_workspaces());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_BillingAccountLimit::CopyFrom(const WorkspaceLimitInfo_BillingAccountLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_BillingAccountLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_BillingAccountLimit::InternalSwap(WorkspaceLimitInfo_BillingAccountLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.total_workspaces_, other->_impl_.total_workspaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_BillingAccountLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[19]);
}

// ===================================================================

class WorkspaceLimitInfo_CommonKnowledgeLimit::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit& memory_records(const WorkspaceLimitInfo_CommonKnowledgeLimit* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit&
WorkspaceLimitInfo_CommonKnowledgeLimit::_Internal::memory_records(const WorkspaceLimitInfo_CommonKnowledgeLimit* msg) {
  return *msg->_impl_.memory_records_;
}
WorkspaceLimitInfo_CommonKnowledgeLimit::WorkspaceLimitInfo_CommonKnowledgeLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
}
WorkspaceLimitInfo_CommonKnowledgeLimit::WorkspaceLimitInfo_CommonKnowledgeLimit(const WorkspaceLimitInfo_CommonKnowledgeLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo_CommonKnowledgeLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memory_records_){nullptr}
    , decltype(_impl_.display_name_max_length_){}
    , decltype(_impl_.description_max_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_memory_records()) {
    _this->_impl_.memory_records_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit(*from._impl_.memory_records_);
  }
  ::memcpy(&_impl_.display_name_max_length_, &from._impl_.display_name_max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.description_max_length_) -
    reinterpret_cast<char*>(&_impl_.display_name_max_length_)) + sizeof(_impl_.description_max_length_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
}

inline void WorkspaceLimitInfo_CommonKnowledgeLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memory_records_){nullptr}
    , decltype(_impl_.display_name_max_length_){0}
    , decltype(_impl_.description_max_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo_CommonKnowledgeLimit::~WorkspaceLimitInfo_CommonKnowledgeLimit() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo_CommonKnowledgeLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.memory_records_;
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.memory_records_ != nullptr) {
    delete _impl_.memory_records_;
  }
  _impl_.memory_records_ = nullptr;
  ::memset(&_impl_.display_name_max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.description_max_length_) -
      reinterpret_cast<char*>(&_impl_.display_name_max_length_)) + sizeof(_impl_.description_max_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo_CommonKnowledgeLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 display_name_max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.display_name_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 description_max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.description_max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit memory_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_records(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo_CommonKnowledgeLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 display_name_max_length = 1;
  if (this->_internal_display_name_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_name_max_length(), target);
  }

  // int32 description_max_length = 2;
  if (this->_internal_description_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_description_max_length(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit memory_records = 3;
  if (this->_internal_has_memory_records()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::memory_records(this),
        _Internal::memory_records(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  return target;
}

size_t WorkspaceLimitInfo_CommonKnowledgeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.TextListLimit memory_records = 3;
  if (this->_internal_has_memory_records()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.memory_records_);
  }

  // int32 display_name_max_length = 1;
  if (this->_internal_display_name_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_name_max_length());
  }

  // int32 description_max_length = 2;
  if (this->_internal_description_max_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_description_max_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo_CommonKnowledgeLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo_CommonKnowledgeLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo_CommonKnowledgeLimit::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo_CommonKnowledgeLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo_CommonKnowledgeLimit*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo_CommonKnowledgeLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_memory_records()) {
    _this->_internal_mutable_memory_records()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit::MergeFrom(
        from._internal_memory_records());
  }
  if (from._internal_display_name_max_length() != 0) {
    _this->_internal_set_display_name_max_length(from._internal_display_name_max_length());
  }
  if (from._internal_description_max_length() != 0) {
    _this->_internal_set_description_max_length(from._internal_description_max_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::CopyFrom(const WorkspaceLimitInfo_CommonKnowledgeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo_CommonKnowledgeLimit::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo_CommonKnowledgeLimit::InternalSwap(WorkspaceLimitInfo_CommonKnowledgeLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CommonKnowledgeLimit, _impl_.description_max_length_)
      + sizeof(WorkspaceLimitInfo_CommonKnowledgeLimit::_impl_.description_max_length_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo_CommonKnowledgeLimit, _impl_.memory_records_)>(
          reinterpret_cast<char*>(&_impl_.memory_records_),
          reinterpret_cast<char*>(&other->_impl_.memory_records_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo_CommonKnowledgeLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[20]);
}

// ===================================================================

class WorkspaceLimitInfo::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit& character(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit& scene(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit& workspace(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit& billing_account(const WorkspaceLimitInfo* msg);
  static const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit& common_knowledge(const WorkspaceLimitInfo* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit&
WorkspaceLimitInfo::_Internal::character(const WorkspaceLimitInfo* msg) {
  return *msg->_impl_.character_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit&
WorkspaceLimitInfo::_Internal::scene(const WorkspaceLimitInfo* msg) {
  return *msg->_impl_.scene_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit&
WorkspaceLimitInfo::_Internal::workspace(const WorkspaceLimitInfo* msg) {
  return *msg->_impl_.workspace_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit&
WorkspaceLimitInfo::_Internal::billing_account(const WorkspaceLimitInfo* msg) {
  return *msg->_impl_.billing_account_;
}
const ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit&
WorkspaceLimitInfo::_Internal::common_knowledge(const WorkspaceLimitInfo* msg) {
  return *msg->_impl_.common_knowledge_;
}
WorkspaceLimitInfo::WorkspaceLimitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
}
WorkspaceLimitInfo::WorkspaceLimitInfo(const WorkspaceLimitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceLimitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_){nullptr}
    , decltype(_impl_.scene_){nullptr}
    , decltype(_impl_.workspace_){nullptr}
    , decltype(_impl_.billing_account_){nullptr}
    , decltype(_impl_.common_knowledge_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    _this->_impl_.character_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit(*from._impl_.character_);
  }
  if (from._internal_has_scene()) {
    _this->_impl_.scene_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit(*from._impl_.scene_);
  }
  if (from._internal_has_workspace()) {
    _this->_impl_.workspace_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit(*from._impl_.workspace_);
  }
  if (from._internal_has_billing_account()) {
    _this->_impl_.billing_account_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit(*from._impl_.billing_account_);
  }
  if (from._internal_has_common_knowledge()) {
    _this->_impl_.common_knowledge_ = new ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit(*from._impl_.common_knowledge_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
}

inline void WorkspaceLimitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_){nullptr}
    , decltype(_impl_.scene_){nullptr}
    , decltype(_impl_.workspace_){nullptr}
    , decltype(_impl_.billing_account_){nullptr}
    , decltype(_impl_.common_knowledge_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceLimitInfo::~WorkspaceLimitInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceLimitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_;
  if (this != internal_default_instance()) delete _impl_.scene_;
  if (this != internal_default_instance()) delete _impl_.workspace_;
  if (this != internal_default_instance()) delete _impl_.billing_account_;
  if (this != internal_default_instance()) delete _impl_.common_knowledge_;
}

void WorkspaceLimitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceLimitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_ != nullptr) {
    delete _impl_.character_;
  }
  _impl_.character_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scene_ != nullptr) {
    delete _impl_.scene_;
  }
  _impl_.scene_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workspace_ != nullptr) {
    delete _impl_.workspace_;
  }
  _impl_.workspace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.billing_account_ != nullptr) {
    delete _impl_.billing_account_;
  }
  _impl_.billing_account_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.common_knowledge_ != nullptr) {
    delete _impl_.common_knowledge_;
  }
  _impl_.common_knowledge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceLimitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit workspace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit billing_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit common_knowledge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_knowledge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceLimitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit character = 1;
  if (this->_internal_has_character()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::character(this),
        _Internal::character(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit scene = 2;
  if (this->_internal_has_scene()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scene(this),
        _Internal::scene(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit workspace = 3;
  if (this->_internal_has_workspace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::workspace(this),
        _Internal::workspace(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit billing_account = 4;
  if (this->_internal_has_billing_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::billing_account(this),
        _Internal::billing_account(this).GetCachedSize(), target, stream);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit common_knowledge = 5;
  if (this->_internal_has_common_knowledge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::common_knowledge(this),
        _Internal::common_knowledge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  return target;
}

size_t WorkspaceLimitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CharacterLimit character = 1;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.SceneLimit scene = 2;
  if (this->_internal_has_scene()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scene_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.WorkspaceLimit workspace = 3;
  if (this->_internal_has_workspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workspace_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.BillingAccountLimit billing_account = 4;
  if (this->_internal_has_billing_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.billing_account_);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceLimitInfo.CommonKnowledgeLimit common_knowledge = 5;
  if (this->_internal_has_common_knowledge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_knowledge_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceLimitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceLimitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceLimitInfo::GetClassData() const { return &_class_data_; }


void WorkspaceLimitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceLimitInfo*>(&to_msg);
  auto& from = static_cast<const WorkspaceLimitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character()) {
    _this->_internal_mutable_character()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit::MergeFrom(
        from._internal_character());
  }
  if (from._internal_has_scene()) {
    _this->_internal_mutable_scene()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit::MergeFrom(
        from._internal_scene());
  }
  if (from._internal_has_workspace()) {
    _this->_internal_mutable_workspace()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit::MergeFrom(
        from._internal_workspace());
  }
  if (from._internal_has_billing_account()) {
    _this->_internal_mutable_billing_account()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit::MergeFrom(
        from._internal_billing_account());
  }
  if (from._internal_has_common_knowledge()) {
    _this->_internal_mutable_common_knowledge()->::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit::MergeFrom(
        from._internal_common_knowledge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceLimitInfo::CopyFrom(const WorkspaceLimitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceLimitInfo::IsInitialized() const {
  return true;
}

void WorkspaceLimitInfo::InternalSwap(WorkspaceLimitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo, _impl_.common_knowledge_)
      + sizeof(WorkspaceLimitInfo::_impl_.common_knowledge_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceLimitInfo, _impl_.character_)>(
          reinterpret_cast<char*>(&_impl_.character_),
          reinterpret_cast<char*>(&other->_impl_.character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceLimitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[21]);
}

// ===================================================================

class GetWorkspaceBillingInfoRequest::_Internal {
 public:
};

GetWorkspaceBillingInfoRequest::GetWorkspaceBillingInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
}
GetWorkspaceBillingInfoRequest::GetWorkspaceBillingInfoRequest(const GetWorkspaceBillingInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkspaceBillingInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
}

inline void GetWorkspaceBillingInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkspaceBillingInfoRequest::~GetWorkspaceBillingInfoRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkspaceBillingInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetWorkspaceBillingInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkspaceBillingInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkspaceBillingInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkspaceBillingInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  return target;
}

size_t GetWorkspaceBillingInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkspaceBillingInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkspaceBillingInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkspaceBillingInfoRequest::GetClassData() const { return &_class_data_; }


void GetWorkspaceBillingInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkspaceBillingInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetWorkspaceBillingInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkspaceBillingInfoRequest::CopyFrom(const GetWorkspaceBillingInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetWorkspaceBillingInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkspaceBillingInfoRequest::IsInitialized() const {
  return true;
}

void GetWorkspaceBillingInfoRequest::InternalSwap(GetWorkspaceBillingInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkspaceBillingInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[22]);
}

// ===================================================================

class WorkspaceBillingInfo_QuotaDetails::_Internal {
 public:
};

WorkspaceBillingInfo_QuotaDetails::WorkspaceBillingInfo_QuotaDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
}
WorkspaceBillingInfo_QuotaDetails::WorkspaceBillingInfo_QuotaDetails(const WorkspaceBillingInfo_QuotaDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceBillingInfo_QuotaDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.has_credits_){}
    , decltype(_impl_.has_paid_subscription_){}
    , decltype(_impl_.current_source_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.has_credits_, &from._impl_.has_credits_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_source_) -
    reinterpret_cast<char*>(&_impl_.has_credits_)) + sizeof(_impl_.current_source_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
}

inline void WorkspaceBillingInfo_QuotaDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.has_credits_){false}
    , decltype(_impl_.has_paid_subscription_){false}
    , decltype(_impl_.current_source_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkspaceBillingInfo_QuotaDetails::~WorkspaceBillingInfo_QuotaDetails() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceBillingInfo_QuotaDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceBillingInfo_QuotaDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceBillingInfo_QuotaDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.has_credits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_source_) -
      reinterpret_cast<char*>(&_impl_.has_credits_)) + sizeof(_impl_.current_source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceBillingInfo_QuotaDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_credits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_credits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_paid_subscription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.has_paid_subscription_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaSource current_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_source(static_cast<::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaSource>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceBillingInfo_QuotaDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_credits = 1;
  if (this->_internal_has_credits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_credits(), target);
  }

  // bool has_paid_subscription = 2;
  if (this->_internal_has_paid_subscription() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_paid_subscription(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaSource current_source = 3;
  if (this->_internal_current_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_current_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  return target;
}

size_t WorkspaceBillingInfo_QuotaDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool has_credits = 1;
  if (this->_internal_has_credits() != 0) {
    total_size += 1 + 1;
  }

  // bool has_paid_subscription = 2;
  if (this->_internal_has_paid_subscription() != 0) {
    total_size += 1 + 1;
  }

  // .ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaSource current_source = 3;
  if (this->_internal_current_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_current_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceBillingInfo_QuotaDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceBillingInfo_QuotaDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceBillingInfo_QuotaDetails::GetClassData() const { return &_class_data_; }


void WorkspaceBillingInfo_QuotaDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceBillingInfo_QuotaDetails*>(&to_msg);
  auto& from = static_cast<const WorkspaceBillingInfo_QuotaDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_credits() != 0) {
    _this->_internal_set_has_credits(from._internal_has_credits());
  }
  if (from._internal_has_paid_subscription() != 0) {
    _this->_internal_set_has_paid_subscription(from._internal_has_paid_subscription());
  }
  if (from._internal_current_source() != 0) {
    _this->_internal_set_current_source(from._internal_current_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceBillingInfo_QuotaDetails::CopyFrom(const WorkspaceBillingInfo_QuotaDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceBillingInfo_QuotaDetails::IsInitialized() const {
  return true;
}

void WorkspaceBillingInfo_QuotaDetails::InternalSwap(WorkspaceBillingInfo_QuotaDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceBillingInfo_QuotaDetails, _impl_.current_source_)
      + sizeof(WorkspaceBillingInfo_QuotaDetails::_impl_.current_source_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceBillingInfo_QuotaDetails, _impl_.has_credits_)>(
          reinterpret_cast<char*>(&_impl_.has_credits_),
          reinterpret_cast<char*>(&other->_impl_.has_credits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceBillingInfo_QuotaDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[23]);
}

// ===================================================================

class WorkspaceBillingInfo::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails& quota_details(const WorkspaceBillingInfo* msg);
};

const ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails&
WorkspaceBillingInfo::_Internal::quota_details(const WorkspaceBillingInfo* msg) {
  return *msg->_impl_.quota_details_;
}
WorkspaceBillingInfo::WorkspaceBillingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
}
WorkspaceBillingInfo::WorkspaceBillingInfo(const WorkspaceBillingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkspaceBillingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.quota_details_){nullptr}
    , decltype(_impl_.is_billing_owner_){}
    , decltype(_impl_.has_usable_quota_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_quota_details()) {
    _this->_impl_.quota_details_ = new ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails(*from._impl_.quota_details_);
  }
  ::memcpy(&_impl_.is_billing_owner_, &from._impl_.is_billing_owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_usable_quota_) -
    reinterpret_cast<char*>(&_impl_.is_billing_owner_)) + sizeof(_impl_.has_usable_quota_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
}

inline void WorkspaceBillingInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.quota_details_){nullptr}
    , decltype(_impl_.is_billing_owner_){false}
    , decltype(_impl_.has_usable_quota_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkspaceBillingInfo::~WorkspaceBillingInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceBillingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quota_details_;
}

void WorkspaceBillingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkspaceBillingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.quota_details_ != nullptr) {
    delete _impl_.quota_details_;
  }
  _impl_.quota_details_ = nullptr;
  ::memset(&_impl_.is_billing_owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_usable_quota_) -
      reinterpret_cast<char*>(&_impl_.is_billing_owner_)) + sizeof(_impl_.has_usable_quota_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkspaceBillingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.WorkspaceBillingInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_billing_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_billing_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_usable_quota = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_usable_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails quota_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_quota_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceBillingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.WorkspaceBillingInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool is_billing_owner = 2;
  if (this->_internal_is_billing_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_billing_owner(), target);
  }

  // bool has_usable_quota = 3;
  if (this->_internal_has_usable_quota() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_usable_quota(), target);
  }

  // .ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails quota_details = 4;
  if (this->_internal_has_quota_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::quota_details(this),
        _Internal::quota_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  return target;
}

size_t WorkspaceBillingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.studio.v1alpha.WorkspaceBillingInfo.QuotaDetails quota_details = 4;
  if (this->_internal_has_quota_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quota_details_);
  }

  // bool is_billing_owner = 2;
  if (this->_internal_is_billing_owner() != 0) {
    total_size += 1 + 1;
  }

  // bool has_usable_quota = 3;
  if (this->_internal_has_usable_quota() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkspaceBillingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkspaceBillingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkspaceBillingInfo::GetClassData() const { return &_class_data_; }


void WorkspaceBillingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkspaceBillingInfo*>(&to_msg);
  auto& from = static_cast<const WorkspaceBillingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_quota_details()) {
    _this->_internal_mutable_quota_details()->::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails::MergeFrom(
        from._internal_quota_details());
  }
  if (from._internal_is_billing_owner() != 0) {
    _this->_internal_set_is_billing_owner(from._internal_is_billing_owner());
  }
  if (from._internal_has_usable_quota() != 0) {
    _this->_internal_set_has_usable_quota(from._internal_has_usable_quota());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkspaceBillingInfo::CopyFrom(const WorkspaceBillingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.WorkspaceBillingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceBillingInfo::IsInitialized() const {
  return true;
}

void WorkspaceBillingInfo::InternalSwap(WorkspaceBillingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceBillingInfo, _impl_.has_usable_quota_)
      + sizeof(WorkspaceBillingInfo::_impl_.has_usable_quota_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceBillingInfo, _impl_.quota_details_)>(
          reinterpret_cast<char*>(&_impl_.quota_details_),
          reinterpret_cast<char*>(&other->_impl_.quota_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkspaceBillingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ListWorkspacesRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::Workspace_Meta*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::Workspace_Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::Workspace_Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::Workspace*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::Workspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::Workspace >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ListWorkspacesResponse*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceShareInfo*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_TextListLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit_CharacterDescriptionLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CharacterLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_SceneLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_WorkspaceLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_BillingAccountLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo_CommonKnowledgeLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo_QuotaDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
