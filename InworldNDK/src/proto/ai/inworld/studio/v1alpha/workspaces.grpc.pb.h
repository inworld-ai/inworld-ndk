// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/workspaces.proto
#ifndef GRPC_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto__INCLUDED
#define GRPC_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto__INCLUDED

#include "ai/inworld/studio/v1alpha/workspaces.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// Service to manage workspaces.
// Workspaces are the root of the resource hierarchy for Inworld users.
class Workspaces final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.Workspaces";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns one workspace
    virtual ::grpc::Status GetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::ai::inworld::studio::v1alpha::Workspace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>> AsyncGetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>>(AsyncGetWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>> PrepareAsyncGetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>>(PrepareAsyncGetWorkspaceRaw(context, request, cq));
    }
    // Returns list of the workspaces.
    virtual ::grpc::Status ListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>> AsyncListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>>(AsyncListWorkspacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>> PrepareAsyncListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>>(PrepareAsyncListWorkspacesRaw(context, request, cq));
    }
    // Updates a workspace.
    virtual ::grpc::Status UpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::ai::inworld::studio::v1alpha::Workspace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>> AsyncUpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>>(AsyncUpdateWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>> PrepareAsyncUpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>>(PrepareAsyncUpdateWorkspaceRaw(context, request, cq));
    }
    // Creates a workspace.
    virtual ::grpc::Status CreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::ai::inworld::studio::v1alpha::Workspace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>> AsyncCreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>>(AsyncCreateWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>> PrepareAsyncCreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>>(PrepareAsyncCreateWorkspaceRaw(context, request, cq));
    }
    // Deletes a workspace.
    virtual ::grpc::Status DeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteWorkspaceRaw(context, request, cq));
    }
    // RPC to share the workspace
    virtual ::grpc::Status ShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncShareWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncShareWorkspaceRaw(context, request, cq));
    }
    // RPC to generate unique resource name from display name for the given
    // workspace resource.
    virtual ::grpc::Status generateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>> AsyncgenerateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>>(AsyncgenerateResourceNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>> PrepareAsyncgenerateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>>(PrepareAsyncgenerateResourceNameRaw(context, request, cq));
    }
    // RPC to get actual sharing info on the workspace.
    virtual ::grpc::Status GetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>> AsyncGetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>>(AsyncGetWorkspaceShareInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>> PrepareAsyncGetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>>(PrepareAsyncGetWorkspaceShareInfoRaw(context, request, cq));
    }
    // RPC to get actual limit info on the workspace.
    virtual ::grpc::Status GetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>> AsyncGetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>>(AsyncGetWorkspaceLimitInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>> PrepareAsyncGetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>>(PrepareAsyncGetWorkspaceLimitInfoRaw(context, request, cq));
    }
    // Return quota information for the linked billing account
    virtual ::grpc::Status GetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>> AsyncGetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>>(AsyncGetWorkspaceBillingInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>> PrepareAsyncGetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>>(PrepareAsyncGetWorkspaceBillingInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Returns one workspace
      virtual void GetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns list of the workspaces.
      virtual void ListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates a workspace.
      virtual void UpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a workspace.
      virtual void CreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a workspace.
      virtual void DeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to share the workspace
      virtual void ShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to generate unique resource name from display name for the given
      // workspace resource.
      virtual void generateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void generateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to get actual sharing info on the workspace.
      virtual void GetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to get actual limit info on the workspace.
      virtual void GetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return quota information for the linked billing account
      virtual void GetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>* AsyncGetWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>* PrepareAsyncGetWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* AsyncListWorkspacesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* PrepareAsyncListWorkspacesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>* AsyncUpdateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>* PrepareAsyncUpdateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>* AsyncCreateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Workspace>* PrepareAsyncCreateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncShareWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncShareWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* AsyncgenerateResourceNameRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* PrepareAsyncgenerateResourceNameRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* AsyncGetWorkspaceShareInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* PrepareAsyncGetWorkspaceShareInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* AsyncGetWorkspaceLimitInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* PrepareAsyncGetWorkspaceLimitInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* AsyncGetWorkspaceBillingInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* PrepareAsyncGetWorkspaceBillingInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::ai::inworld::studio::v1alpha::Workspace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>> AsyncGetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>>(AsyncGetWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>> PrepareAsyncGetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>>(PrepareAsyncGetWorkspaceRaw(context, request, cq));
    }
    ::grpc::Status ListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>> AsyncListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>>(AsyncListWorkspacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>> PrepareAsyncListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>>(PrepareAsyncListWorkspacesRaw(context, request, cq));
    }
    ::grpc::Status UpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::ai::inworld::studio::v1alpha::Workspace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>> AsyncUpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>>(AsyncUpdateWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>> PrepareAsyncUpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>>(PrepareAsyncUpdateWorkspaceRaw(context, request, cq));
    }
    ::grpc::Status CreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::ai::inworld::studio::v1alpha::Workspace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>> AsyncCreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>>(AsyncCreateWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>> PrepareAsyncCreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>>(PrepareAsyncCreateWorkspaceRaw(context, request, cq));
    }
    ::grpc::Status DeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteWorkspaceRaw(context, request, cq));
    }
    ::grpc::Status ShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncShareWorkspaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncShareWorkspaceRaw(context, request, cq));
    }
    ::grpc::Status generateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>> AsyncgenerateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>>(AsyncgenerateResourceNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>> PrepareAsyncgenerateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>>(PrepareAsyncgenerateResourceNameRaw(context, request, cq));
    }
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>> AsyncGetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>>(AsyncGetWorkspaceShareInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>> PrepareAsyncGetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>>(PrepareAsyncGetWorkspaceShareInfoRaw(context, request, cq));
    }
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>> AsyncGetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>>(AsyncGetWorkspaceLimitInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>> PrepareAsyncGetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>>(PrepareAsyncGetWorkspaceLimitInfoRaw(context, request, cq));
    }
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>> AsyncGetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>>(AsyncGetWorkspaceBillingInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>> PrepareAsyncGetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>>(PrepareAsyncGetWorkspaceBillingInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, std::function<void(::grpc::Status)>) override;
      void GetWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListWorkspaces(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, std::function<void(::grpc::Status)>) override;
      void UpdateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, std::function<void(::grpc::Status)>) override;
      void CreateWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShareWorkspace(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void generateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response, std::function<void(::grpc::Status)>) override;
      void generateResourceName(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response, std::function<void(::grpc::Status)>) override;
      void GetWorkspaceShareInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response, std::function<void(::grpc::Status)>) override;
      void GetWorkspaceLimitInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response, std::function<void(::grpc::Status)>) override;
      void GetWorkspaceBillingInfo(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>* AsyncGetWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>* PrepareAsyncGetWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* AsyncListWorkspacesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* PrepareAsyncListWorkspacesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>* AsyncUpdateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>* PrepareAsyncUpdateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>* AsyncCreateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Workspace>* PrepareAsyncCreateWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncShareWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncShareWorkspaceRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* AsyncgenerateResourceNameRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* PrepareAsyncgenerateResourceNameRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* AsyncGetWorkspaceShareInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* PrepareAsyncGetWorkspaceShareInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* AsyncGetWorkspaceLimitInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* PrepareAsyncGetWorkspaceLimitInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* AsyncGetWorkspaceBillingInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* PrepareAsyncGetWorkspaceBillingInfoRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkspace_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWorkspaces_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWorkspace_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWorkspace_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteWorkspace_;
    const ::grpc::internal::RpcMethod rpcmethod_ShareWorkspace_;
    const ::grpc::internal::RpcMethod rpcmethod_generateResourceName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkspaceShareInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkspaceLimitInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkspaceBillingInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns one workspace
    virtual ::grpc::Status GetWorkspace(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response);
    // Returns list of the workspaces.
    virtual ::grpc::Status ListWorkspaces(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response);
    // Updates a workspace.
    virtual ::grpc::Status UpdateWorkspace(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response);
    // Creates a workspace.
    virtual ::grpc::Status CreateWorkspace(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response);
    // Deletes a workspace.
    virtual ::grpc::Status DeleteWorkspace(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::google::protobuf::Empty* response);
    // RPC to share the workspace
    virtual ::grpc::Status ShareWorkspace(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::google::protobuf::Empty* response);
    // RPC to generate unique resource name from display name for the given
    // workspace resource.
    virtual ::grpc::Status generateResourceName(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response);
    // RPC to get actual sharing info on the workspace.
    virtual ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response);
    // RPC to get actual limit info on the workspace.
    virtual ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response);
    // Return quota information for the linked billing account
    virtual ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkspace() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspace(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Workspace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWorkspaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListWorkspaces() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListWorkspaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkspaces(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkspaces(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateWorkspace() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWorkspace(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Workspace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateWorkspace() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorkspace(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Workspace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteWorkspace() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkspace(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShareWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShareWorkspace() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ShareWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareWorkspace(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_generateResourceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_generateResourceName() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_generateResourceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generateResourceName(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgenerateResourceName(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkspaceShareInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkspaceShareInfo() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetWorkspaceShareInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspaceShareInfo(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkspaceLimitInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkspaceLimitInfo() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetWorkspaceLimitInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspaceLimitInfo(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkspaceBillingInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkspaceBillingInfo() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetWorkspaceBillingInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspaceBillingInfo(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetWorkspace<WithAsyncMethod_ListWorkspaces<WithAsyncMethod_UpdateWorkspace<WithAsyncMethod_CreateWorkspace<WithAsyncMethod_DeleteWorkspace<WithAsyncMethod_ShareWorkspace<WithAsyncMethod_generateResourceName<WithAsyncMethod_GetWorkspaceShareInfo<WithAsyncMethod_GetWorkspaceLimitInfo<WithAsyncMethod_GetWorkspaceBillingInfo<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkspace() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response) { return this->GetWorkspace(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkspace(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListWorkspaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListWorkspaces() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* request, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* response) { return this->ListWorkspaces(context, request, response); }));}
    void SetMessageAllocatorFor_ListWorkspaces(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListWorkspaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkspaces(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWorkspaces(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateWorkspace() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response) { return this->UpdateWorkspace(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateWorkspace(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateWorkspace() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* request, ::ai::inworld::studio::v1alpha::Workspace* response) { return this->CreateWorkspace(context, request, response); }));}
    void SetMessageAllocatorFor_CreateWorkspace(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteWorkspace() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* request, ::google::protobuf::Empty* response) { return this->DeleteWorkspace(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteWorkspace(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShareWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShareWorkspace() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* request, ::google::protobuf::Empty* response) { return this->ShareWorkspace(context, request, response); }));}
    void SetMessageAllocatorFor_ShareWorkspace(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShareWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_generateResourceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_generateResourceName() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* request, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* response) { return this->generateResourceName(context, request, response); }));}
    void SetMessageAllocatorFor_generateResourceName(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_generateResourceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generateResourceName(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generateResourceName(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkspaceShareInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkspaceShareInfo() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* response) { return this->GetWorkspaceShareInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkspaceShareInfo(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkspaceShareInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspaceShareInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkspaceLimitInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkspaceLimitInfo() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* response) { return this->GetWorkspaceLimitInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkspaceLimitInfo(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkspaceLimitInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspaceLimitInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkspaceBillingInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkspaceBillingInfo() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* request, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* response) { return this->GetWorkspaceBillingInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkspaceBillingInfo(
        ::grpc::MessageAllocator< ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkspaceBillingInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspaceBillingInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetWorkspace<WithCallbackMethod_ListWorkspaces<WithCallbackMethod_UpdateWorkspace<WithCallbackMethod_CreateWorkspace<WithCallbackMethod_DeleteWorkspace<WithCallbackMethod_ShareWorkspace<WithCallbackMethod_generateResourceName<WithCallbackMethod_GetWorkspaceShareInfo<WithCallbackMethod_GetWorkspaceLimitInfo<WithCallbackMethod_GetWorkspaceBillingInfo<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkspace() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWorkspaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListWorkspaces() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListWorkspaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkspaces(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateWorkspace() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateWorkspace() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteWorkspace() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShareWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShareWorkspace() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ShareWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_generateResourceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_generateResourceName() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_generateResourceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generateResourceName(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkspaceShareInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkspaceShareInfo() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetWorkspaceShareInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkspaceLimitInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkspaceLimitInfo() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetWorkspaceLimitInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkspaceBillingInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkspaceBillingInfo() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetWorkspaceBillingInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkspace() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListWorkspaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListWorkspaces() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListWorkspaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkspaces(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkspaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateWorkspace() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWorkspace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateWorkspace() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorkspace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteWorkspace() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkspace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShareWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShareWorkspace() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ShareWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareWorkspace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_generateResourceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_generateResourceName() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_generateResourceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generateResourceName(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgenerateResourceName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkspaceShareInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkspaceShareInfo() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetWorkspaceShareInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspaceShareInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkspaceLimitInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkspaceLimitInfo() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetWorkspaceLimitInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspaceLimitInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkspaceBillingInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkspaceBillingInfo() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetWorkspaceBillingInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkspaceBillingInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkspace() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkspace(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListWorkspaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListWorkspaces() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListWorkspaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListWorkspaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkspaces(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWorkspaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateWorkspace() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateWorkspace(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateWorkspace() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateWorkspace(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteWorkspace() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteWorkspace(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShareWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShareWorkspace() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShareWorkspace(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShareWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareWorkspace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_generateResourceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_generateResourceName() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->generateResourceName(context, request, response); }));
    }
    ~WithRawCallbackMethod_generateResourceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generateResourceName(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generateResourceName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkspaceShareInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkspaceShareInfo() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkspaceShareInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkspaceShareInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspaceShareInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkspaceLimitInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkspaceLimitInfo() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkspaceLimitInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkspaceLimitInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspaceLimitInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkspaceBillingInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkspaceBillingInfo() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkspaceBillingInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkspaceBillingInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkspaceBillingInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkspace() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>* streamer) {
                       return this->StreamedGetWorkspace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkspace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetWorkspaceRequest,::ai::inworld::studio::v1alpha::Workspace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWorkspaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListWorkspaces() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ListWorkspacesRequest, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ListWorkspacesRequest, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* streamer) {
                       return this->StreamedListWorkspaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListWorkspaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWorkspaces(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListWorkspacesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListWorkspacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWorkspaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ListWorkspacesRequest,::ai::inworld::studio::v1alpha::ListWorkspacesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateWorkspace() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>* streamer) {
                       return this->StreamedUpdateWorkspace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWorkspace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::UpdateWorkspaceRequest,::ai::inworld::studio::v1alpha::Workspace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateWorkspace() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest, ::ai::inworld::studio::v1alpha::Workspace>* streamer) {
                       return this->StreamedCreateWorkspace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest* /*request*/, ::ai::inworld::studio::v1alpha::Workspace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWorkspace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::CreateWorkspaceRequest,::ai::inworld::studio::v1alpha::Workspace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteWorkspace() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteWorkspace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteWorkspace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeleteWorkspaceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShareWorkspace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShareWorkspace() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedShareWorkspace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShareWorkspace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShareWorkspace(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShareWorkspace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ShareWorkspaceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_generateResourceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_generateResourceName() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* streamer) {
                       return this->StreamedgenerateResourceName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_generateResourceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status generateResourceName(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest* /*request*/, ::ai::inworld::studio::v1alpha::GenerateResourceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgenerateResourceName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GenerateResourceNameRequest,::ai::inworld::studio::v1alpha::GenerateResourceNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkspaceShareInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkspaceShareInfo() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* streamer) {
                       return this->StreamedGetWorkspaceShareInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkspaceShareInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkspaceShareInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceShareInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkspaceShareInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetWorkspaceShareInfoRequest,::ai::inworld::studio::v1alpha::WorkspaceShareInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkspaceLimitInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkspaceLimitInfo() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* streamer) {
                       return this->StreamedGetWorkspaceLimitInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkspaceLimitInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkspaceLimitInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceLimitInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkspaceLimitInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetWorkspaceLimitInfoRequest,::ai::inworld::studio::v1alpha::WorkspaceLimitInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkspaceBillingInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkspaceBillingInfo() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* streamer) {
                       return this->StreamedGetWorkspaceBillingInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkspaceBillingInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkspaceBillingInfo(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest* /*request*/, ::ai::inworld::studio::v1alpha::WorkspaceBillingInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkspaceBillingInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetWorkspaceBillingInfoRequest,::ai::inworld::studio::v1alpha::WorkspaceBillingInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetWorkspace<WithStreamedUnaryMethod_ListWorkspaces<WithStreamedUnaryMethod_UpdateWorkspace<WithStreamedUnaryMethod_CreateWorkspace<WithStreamedUnaryMethod_DeleteWorkspace<WithStreamedUnaryMethod_ShareWorkspace<WithStreamedUnaryMethod_generateResourceName<WithStreamedUnaryMethod_GetWorkspaceShareInfo<WithStreamedUnaryMethod_GetWorkspaceLimitInfo<WithStreamedUnaryMethod_GetWorkspaceBillingInfo<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetWorkspace<WithStreamedUnaryMethod_ListWorkspaces<WithStreamedUnaryMethod_UpdateWorkspace<WithStreamedUnaryMethod_CreateWorkspace<WithStreamedUnaryMethod_DeleteWorkspace<WithStreamedUnaryMethod_ShareWorkspace<WithStreamedUnaryMethod_generateResourceName<WithStreamedUnaryMethod_GetWorkspaceShareInfo<WithStreamedUnaryMethod_GetWorkspaceLimitInfo<WithStreamedUnaryMethod_GetWorkspaceBillingInfo<Service > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_ai_2finworld_2fstudio_2fv1alpha_2fworkspaces_2eproto__INCLUDED
