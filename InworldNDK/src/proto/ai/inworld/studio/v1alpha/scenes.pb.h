// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/scenes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class CreateSceneRequest;
struct CreateSceneRequestDefaultTypeInternal;
extern CreateSceneRequestDefaultTypeInternal _CreateSceneRequest_default_instance_;
class DeleteSceneRequest;
struct DeleteSceneRequestDefaultTypeInternal;
extern DeleteSceneRequestDefaultTypeInternal _DeleteSceneRequest_default_instance_;
class DeploySceneRequest;
struct DeploySceneRequestDefaultTypeInternal;
extern DeploySceneRequestDefaultTypeInternal _DeploySceneRequest_default_instance_;
class GetSceneRequest;
struct GetSceneRequestDefaultTypeInternal;
extern GetSceneRequestDefaultTypeInternal _GetSceneRequest_default_instance_;
class ListScenesRequest;
struct ListScenesRequestDefaultTypeInternal;
extern ListScenesRequestDefaultTypeInternal _ListScenesRequest_default_instance_;
class ListScenesResponse;
struct ListScenesResponseDefaultTypeInternal;
extern ListScenesResponseDefaultTypeInternal _ListScenesResponse_default_instance_;
class Scene;
struct SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Scene_CharacterReference;
struct Scene_CharacterReferenceDefaultTypeInternal;
extern Scene_CharacterReferenceDefaultTypeInternal _Scene_CharacterReference_default_instance_;
class Scene_CharacterReference_Character;
struct Scene_CharacterReference_CharacterDefaultTypeInternal;
extern Scene_CharacterReference_CharacterDefaultTypeInternal _Scene_CharacterReference_Character_default_instance_;
class Scene_CharacterReference_Character_CharacterAssets;
struct Scene_CharacterReference_Character_CharacterAssetsDefaultTypeInternal;
extern Scene_CharacterReference_Character_CharacterAssetsDefaultTypeInternal _Scene_CharacterReference_Character_CharacterAssets_default_instance_;
class Scene_CharacterReference_Character_CharacterDescription;
struct Scene_CharacterReference_Character_CharacterDescriptionDefaultTypeInternal;
extern Scene_CharacterReference_Character_CharacterDescriptionDefaultTypeInternal _Scene_CharacterReference_Character_CharacterDescription_default_instance_;
class Scene_Meta;
struct Scene_MetaDefaultTypeInternal;
extern Scene_MetaDefaultTypeInternal _Scene_Meta_default_instance_;
class Scene_SceneTrigger;
struct Scene_SceneTriggerDefaultTypeInternal;
extern Scene_SceneTriggerDefaultTypeInternal _Scene_SceneTrigger_default_instance_;
class UpdateSceneRequest;
struct UpdateSceneRequestDefaultTypeInternal;
extern UpdateSceneRequestDefaultTypeInternal _UpdateSceneRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::CreateSceneRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CreateSceneRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeleteSceneRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeleteSceneRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeploySceneRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeploySceneRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetSceneRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetSceneRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListScenesRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListScenesRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListScenesResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListScenesResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene_CharacterReference* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene_Meta* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_Meta>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_SceneTrigger>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdateSceneRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdateSceneRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

enum SceneItemView : int {
  SCENE_ITEM_VIEW_UNSPECIFIED = 0,
  SCENE_ITEM_VIEW_DEFAULT = 1,
  SCENE_ITEM_VIEW_WITH_META = 2,
  SceneItemView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SceneItemView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SceneItemView_IsValid(int value);
constexpr SceneItemView SceneItemView_MIN = SCENE_ITEM_VIEW_UNSPECIFIED;
constexpr SceneItemView SceneItemView_MAX = SCENE_ITEM_VIEW_WITH_META;
constexpr int SceneItemView_ARRAYSIZE = SceneItemView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneItemView_descriptor();
template<typename T>
inline const std::string& SceneItemView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SceneItemView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SceneItemView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SceneItemView_descriptor(), enum_t_value);
}
inline bool SceneItemView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SceneItemView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SceneItemView>(
    SceneItemView_descriptor(), name, value);
}
// ===================================================================

class GetSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetSceneRequest) */ {
 public:
  inline GetSceneRequest() : GetSceneRequest(nullptr) {}
  ~GetSceneRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSceneRequest(const GetSceneRequest& from);
  GetSceneRequest(GetSceneRequest&& from) noexcept
    : GetSceneRequest() {
    *this = ::std::move(from);
  }

  inline GetSceneRequest& operator=(const GetSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSceneRequest& operator=(GetSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSceneRequest* internal_default_instance() {
    return reinterpret_cast<const GetSceneRequest*>(
               &_GetSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSceneRequest& a, GetSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSceneRequest& from) {
    GetSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSceneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetSceneRequest";
  }
  protected:
  explicit GetSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ai.inworld.studio.v1alpha.SceneItemView view = 2;
  void clear_view();
  ::ai::inworld::studio::v1alpha::SceneItemView view() const;
  void set_view(::ai::inworld::studio::v1alpha::SceneItemView value);
  private:
  ::ai::inworld::studio::v1alpha::SceneItemView _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::SceneItemView value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class ListScenesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListScenesRequest) */ {
 public:
  inline ListScenesRequest() : ListScenesRequest(nullptr) {}
  ~ListScenesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListScenesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListScenesRequest(const ListScenesRequest& from);
  ListScenesRequest(ListScenesRequest&& from) noexcept
    : ListScenesRequest() {
    *this = ::std::move(from);
  }

  inline ListScenesRequest& operator=(const ListScenesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScenesRequest& operator=(ListScenesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScenesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScenesRequest* internal_default_instance() {
    return reinterpret_cast<const ListScenesRequest*>(
               &_ListScenesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListScenesRequest& a, ListScenesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScenesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScenesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScenesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScenesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListScenesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListScenesRequest& from) {
    ListScenesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScenesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListScenesRequest";
  }
  protected:
  explicit ListScenesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListScenesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class CreateSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateSceneRequest) */ {
 public:
  inline CreateSceneRequest() : CreateSceneRequest(nullptr) {}
  ~CreateSceneRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSceneRequest(const CreateSceneRequest& from);
  CreateSceneRequest(CreateSceneRequest&& from) noexcept
    : CreateSceneRequest() {
    *this = ::std::move(from);
  }

  inline CreateSceneRequest& operator=(const CreateSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSceneRequest& operator=(CreateSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSceneRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSceneRequest*>(
               &_CreateSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateSceneRequest& a, CreateSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSceneRequest& from) {
    CreateSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSceneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateSceneRequest";
  }
  protected:
  explicit CreateSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSceneFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .ai.inworld.studio.v1alpha.Scene scene = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_scene() const;
  private:
  bool _internal_has_scene() const;
  public:
  void clear_scene();
  const ::ai::inworld::studio::v1alpha::Scene& scene() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene* release_scene();
  ::ai::inworld::studio::v1alpha::Scene* mutable_scene();
  void set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* scene);
  private:
  const ::ai::inworld::studio::v1alpha::Scene& _internal_scene() const;
  ::ai::inworld::studio::v1alpha::Scene* _internal_mutable_scene();
  public:
  void unsafe_arena_set_allocated_scene(
      ::ai::inworld::studio::v1alpha::Scene* scene);
  ::ai::inworld::studio::v1alpha::Scene* unsafe_arena_release_scene();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::ai::inworld::studio::v1alpha::Scene* scene_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class UpdateSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateSceneRequest) */ {
 public:
  inline UpdateSceneRequest() : UpdateSceneRequest(nullptr) {}
  ~UpdateSceneRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSceneRequest(const UpdateSceneRequest& from);
  UpdateSceneRequest(UpdateSceneRequest&& from) noexcept
    : UpdateSceneRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSceneRequest& operator=(const UpdateSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSceneRequest& operator=(UpdateSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSceneRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSceneRequest*>(
               &_UpdateSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateSceneRequest& a, UpdateSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSceneRequest& from) {
    UpdateSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSceneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateSceneRequest";
  }
  protected:
  explicit UpdateSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.Scene scene = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_scene() const;
  private:
  bool _internal_has_scene() const;
  public:
  void clear_scene();
  const ::ai::inworld::studio::v1alpha::Scene& scene() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene* release_scene();
  ::ai::inworld::studio::v1alpha::Scene* mutable_scene();
  void set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* scene);
  private:
  const ::ai::inworld::studio::v1alpha::Scene& _internal_scene() const;
  ::ai::inworld::studio::v1alpha::Scene* _internal_mutable_scene();
  public:
  void unsafe_arena_set_allocated_scene(
      ::ai::inworld::studio::v1alpha::Scene* scene);
  ::ai::inworld::studio::v1alpha::Scene* unsafe_arena_release_scene();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ai::inworld::studio::v1alpha::Scene* scene_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class DeleteSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteSceneRequest) */ {
 public:
  inline DeleteSceneRequest() : DeleteSceneRequest(nullptr) {}
  ~DeleteSceneRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSceneRequest(const DeleteSceneRequest& from);
  DeleteSceneRequest(DeleteSceneRequest&& from) noexcept
    : DeleteSceneRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSceneRequest& operator=(const DeleteSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSceneRequest& operator=(DeleteSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSceneRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSceneRequest*>(
               &_DeleteSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteSceneRequest& a, DeleteSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSceneRequest& from) {
    DeleteSceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSceneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteSceneRequest";
  }
  protected:
  explicit DeleteSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene_CharacterReference_Character_CharacterDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription) */ {
 public:
  inline Scene_CharacterReference_Character_CharacterDescription() : Scene_CharacterReference_Character_CharacterDescription(nullptr) {}
  ~Scene_CharacterReference_Character_CharacterDescription() override;
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference_Character_CharacterDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene_CharacterReference_Character_CharacterDescription(const Scene_CharacterReference_Character_CharacterDescription& from);
  Scene_CharacterReference_Character_CharacterDescription(Scene_CharacterReference_Character_CharacterDescription&& from) noexcept
    : Scene_CharacterReference_Character_CharacterDescription() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference_Character_CharacterDescription& operator=(const Scene_CharacterReference_Character_CharacterDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference_Character_CharacterDescription& operator=(Scene_CharacterReference_Character_CharacterDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference_Character_CharacterDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference_Character_CharacterDescription* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference_Character_CharacterDescription*>(
               &_Scene_CharacterReference_Character_CharacterDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Scene_CharacterReference_Character_CharacterDescription& a, Scene_CharacterReference_Character_CharacterDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference_Character_CharacterDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference_Character_CharacterDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference_Character_CharacterDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference_Character_CharacterDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference_Character_CharacterDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference_Character_CharacterDescription& from) {
    Scene_CharacterReference_Character_CharacterDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_CharacterReference_Character_CharacterDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription";
  }
  protected:
  explicit Scene_CharacterReference_Character_CharacterDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGivenNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string given_name = 1;
  void clear_given_name();
  const std::string& given_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_given_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_given_name();
  PROTOBUF_NODISCARD std::string* release_given_name();
  void set_allocated_given_name(std::string* given_name);
  private:
  const std::string& _internal_given_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_given_name(const std::string& value);
  std::string* _internal_mutable_given_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr given_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene_CharacterReference_Character_CharacterAssets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets) */ {
 public:
  inline Scene_CharacterReference_Character_CharacterAssets() : Scene_CharacterReference_Character_CharacterAssets(nullptr) {}
  ~Scene_CharacterReference_Character_CharacterAssets() override;
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference_Character_CharacterAssets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene_CharacterReference_Character_CharacterAssets(const Scene_CharacterReference_Character_CharacterAssets& from);
  Scene_CharacterReference_Character_CharacterAssets(Scene_CharacterReference_Character_CharacterAssets&& from) noexcept
    : Scene_CharacterReference_Character_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference_Character_CharacterAssets& operator=(const Scene_CharacterReference_Character_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference_Character_CharacterAssets& operator=(Scene_CharacterReference_Character_CharacterAssets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference_Character_CharacterAssets& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference_Character_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference_Character_CharacterAssets*>(
               &_Scene_CharacterReference_Character_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Scene_CharacterReference_Character_CharacterAssets& a, Scene_CharacterReference_Character_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference_Character_CharacterAssets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference_Character_CharacterAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference_Character_CharacterAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference_Character_CharacterAssets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference_Character_CharacterAssets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference_Character_CharacterAssets& from) {
    Scene_CharacterReference_Character_CharacterAssets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_CharacterReference_Character_CharacterAssets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets";
  }
  protected:
  explicit Scene_CharacterReference_Character_CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 1,
    kRpmImageUriFieldNumber = 2,
    kRpmImageUriPortraitFieldNumber = 3,
    kRpmImageUriPostureFieldNumber = 4,
  };
  // string rpm_model_uri = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_model_uri();
  const std::string& rpm_model_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpm_model_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpm_model_uri();
  PROTOBUF_NODISCARD std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* rpm_model_uri);
  private:
  const std::string& _internal_rpm_model_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_model_uri(const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();
  public:

  // string rpm_image_uri = 2 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  PROTOBUF_DEPRECATED void clear_rpm_image_uri();
  PROTOBUF_DEPRECATED const std::string& rpm_image_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_rpm_image_uri(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_rpm_image_uri();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_rpm_image_uri();
  PROTOBUF_DEPRECATED void set_allocated_rpm_image_uri(std::string* rpm_image_uri);
  private:
  const std::string& _internal_rpm_image_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri();
  public:

  // string rpm_image_uri_portrait = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_portrait();
  const std::string& rpm_image_uri_portrait() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpm_image_uri_portrait(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpm_image_uri_portrait();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait);
  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_portrait(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();
  public:

  // string rpm_image_uri_posture = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_posture();
  const std::string& rpm_image_uri_posture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpm_image_uri_posture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpm_image_uri_posture();
  PROTOBUF_NODISCARD std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture);
  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpm_image_uri_posture(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_model_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_portrait_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_posture_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene_CharacterReference_Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character) */ {
 public:
  inline Scene_CharacterReference_Character() : Scene_CharacterReference_Character(nullptr) {}
  ~Scene_CharacterReference_Character() override;
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference_Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene_CharacterReference_Character(const Scene_CharacterReference_Character& from);
  Scene_CharacterReference_Character(Scene_CharacterReference_Character&& from) noexcept
    : Scene_CharacterReference_Character() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference_Character& operator=(const Scene_CharacterReference_Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference_Character& operator=(Scene_CharacterReference_Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference_Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference_Character* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference_Character*>(
               &_Scene_CharacterReference_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Scene_CharacterReference_Character& a, Scene_CharacterReference_Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference_Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference_Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference_Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference_Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference_Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference_Character& from) {
    Scene_CharacterReference_Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_CharacterReference_Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference.Character";
  }
  protected:
  explicit Scene_CharacterReference_Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scene_CharacterReference_Character_CharacterDescription CharacterDescription;
  typedef Scene_CharacterReference_Character_CharacterAssets CharacterAssets;

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultCharacterDescriptionFieldNumber = 1,
    kDefaultCharacterAssetsFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription default_character_description = 1;
  bool has_default_character_description() const;
  private:
  bool _internal_has_default_character_description() const;
  public:
  void clear_default_character_description();
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& default_character_description() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* release_default_character_description();
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* mutable_default_character_description();
  void set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* default_character_description);
  private:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& _internal_default_character_description() const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* _internal_mutable_default_character_description();
  public:
  void unsafe_arena_set_allocated_default_character_description(
      ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* default_character_description);
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* unsafe_arena_release_default_character_description();

  // .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets default_character_assets = 2;
  bool has_default_character_assets() const;
  private:
  bool _internal_has_default_character_assets() const;
  public:
  void clear_default_character_assets();
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& default_character_assets() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* release_default_character_assets();
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* mutable_default_character_assets();
  void set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* default_character_assets);
  private:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& _internal_default_character_assets() const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* _internal_mutable_default_character_assets();
  public:
  void unsafe_arena_set_allocated_default_character_assets(
      ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* default_character_assets);
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* unsafe_arena_release_default_character_assets();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* default_character_description_;
    ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* default_character_assets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene_CharacterReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.CharacterReference) */ {
 public:
  inline Scene_CharacterReference() : Scene_CharacterReference(nullptr) {}
  ~Scene_CharacterReference() override;
  explicit PROTOBUF_CONSTEXPR Scene_CharacterReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene_CharacterReference(const Scene_CharacterReference& from);
  Scene_CharacterReference(Scene_CharacterReference&& from) noexcept
    : Scene_CharacterReference() {
    *this = ::std::move(from);
  }

  inline Scene_CharacterReference& operator=(const Scene_CharacterReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_CharacterReference& operator=(Scene_CharacterReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_CharacterReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_CharacterReference* internal_default_instance() {
    return reinterpret_cast<const Scene_CharacterReference*>(
               &_Scene_CharacterReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Scene_CharacterReference& a, Scene_CharacterReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_CharacterReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_CharacterReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_CharacterReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_CharacterReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene_CharacterReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene_CharacterReference& from) {
    Scene_CharacterReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_CharacterReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.CharacterReference";
  }
  protected:
  explicit Scene_CharacterReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scene_CharacterReference_Character Character;

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterOverloadsFieldNumber = 4,
    kNameFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character character_overloads = 4 [(.google.api.field_behavior) = OPTIONAL];
  int character_overloads_size() const;
  private:
  int _internal_character_overloads_size() const;
  public:
  void clear_character_overloads();
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* mutable_character_overloads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character >*
      mutable_character_overloads();
  private:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character& _internal_character_overloads(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* _internal_add_character_overloads();
  public:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character& character_overloads(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* add_character_overloads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character >&
      character_overloads() const;

  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string character = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_character();
  const std::string& character() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* character);
  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(const std::string& value);
  std::string* _internal_mutable_character();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.CharacterReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character > character_overloads_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene_SceneTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.SceneTrigger) */ {
 public:
  inline Scene_SceneTrigger() : Scene_SceneTrigger(nullptr) {}
  ~Scene_SceneTrigger() override;
  explicit PROTOBUF_CONSTEXPR Scene_SceneTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene_SceneTrigger(const Scene_SceneTrigger& from);
  Scene_SceneTrigger(Scene_SceneTrigger&& from) noexcept
    : Scene_SceneTrigger() {
    *this = ::std::move(from);
  }

  inline Scene_SceneTrigger& operator=(const Scene_SceneTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_SceneTrigger& operator=(Scene_SceneTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_SceneTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_SceneTrigger* internal_default_instance() {
    return reinterpret_cast<const Scene_SceneTrigger*>(
               &_Scene_SceneTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Scene_SceneTrigger& a, Scene_SceneTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_SceneTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_SceneTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_SceneTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_SceneTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene_SceneTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene_SceneTrigger& from) {
    Scene_SceneTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_SceneTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.SceneTrigger";
  }
  protected:
  explicit Scene_SceneTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string trigger = 1 [(.google.api.resource_reference) = {
  void clear_trigger();
  const std::string& trigger() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger();
  PROTOBUF_NODISCARD std::string* release_trigger();
  void set_allocated_trigger(std::string* trigger);
  private:
  const std::string& _internal_trigger() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger(const std::string& value);
  std::string* _internal_mutable_trigger();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.SceneTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene_Meta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene.Meta) */ {
 public:
  inline Scene_Meta() : Scene_Meta(nullptr) {}
  ~Scene_Meta() override;
  explicit PROTOBUF_CONSTEXPR Scene_Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene_Meta(const Scene_Meta& from);
  Scene_Meta(Scene_Meta&& from) noexcept
    : Scene_Meta() {
    *this = ::std::move(from);
  }

  inline Scene_Meta& operator=(const Scene_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_Meta& operator=(Scene_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene_Meta* internal_default_instance() {
    return reinterpret_cast<const Scene_Meta*>(
               &_Scene_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Scene_Meta& a, Scene_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene_Meta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene_Meta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene_Meta& from) {
    Scene_Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene.Meta";
  }
  protected:
  explicit Scene_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTriggersFieldNumber = 1,
    kTotalCharactersFieldNumber = 2,
  };
  // int32 total_triggers = 1;
  void clear_total_triggers();
  int32_t total_triggers() const;
  void set_total_triggers(int32_t value);
  private:
  int32_t _internal_total_triggers() const;
  void _internal_set_total_triggers(int32_t value);
  public:

  // int32 total_characters = 2;
  void clear_total_characters();
  int32_t total_characters() const;
  void set_total_characters(int32_t value);
  private:
  int32_t _internal_total_characters() const;
  void _internal_set_total_characters(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t total_triggers_;
    int32_t total_characters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class Scene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  ~Scene() override;
  explicit PROTOBUF_CONSTEXPR Scene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene& from) {
    Scene::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scene_CharacterReference CharacterReference;
  typedef Scene_SceneTrigger SceneTrigger;
  typedef Scene_Meta Meta;

  // accessors -------------------------------------------------------

  enum : int {
    kSceneTriggersFieldNumber = 3,
    kCharacterReferencesFieldNumber = 4,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDisplayNameFieldNumber = 5,
    kMetaFieldNumber = 6,
  };
  // repeated .ai.inworld.studio.v1alpha.Scene.SceneTrigger scene_triggers = 3;
  int scene_triggers_size() const;
  private:
  int _internal_scene_triggers_size() const;
  public:
  void clear_scene_triggers();
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* mutable_scene_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger >*
      mutable_scene_triggers();
  private:
  const ::ai::inworld::studio::v1alpha::Scene_SceneTrigger& _internal_scene_triggers(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* _internal_add_scene_triggers();
  public:
  const ::ai::inworld::studio::v1alpha::Scene_SceneTrigger& scene_triggers(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* add_scene_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger >&
      scene_triggers() const;

  // repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference character_references = 4;
  int character_references_size() const;
  private:
  int _internal_character_references_size() const;
  public:
  void clear_character_references();
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* mutable_character_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference >*
      mutable_character_references();
  private:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference& _internal_character_references(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* _internal_add_character_references();
  public:
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference& character_references(int index) const;
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* add_character_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference >&
      character_references() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string display_name = 5 [(.ai.inworld.options.examples) = {
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .ai.inworld.studio.v1alpha.Scene.Meta meta = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::ai::inworld::studio::v1alpha::Scene_Meta& meta() const;
  PROTOBUF_NODISCARD ::ai::inworld::studio::v1alpha::Scene_Meta* release_meta();
  ::ai::inworld::studio::v1alpha::Scene_Meta* mutable_meta();
  void set_allocated_meta(::ai::inworld::studio::v1alpha::Scene_Meta* meta);
  private:
  const ::ai::inworld::studio::v1alpha::Scene_Meta& _internal_meta() const;
  ::ai::inworld::studio::v1alpha::Scene_Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::ai::inworld::studio::v1alpha::Scene_Meta* meta);
  ::ai::inworld::studio::v1alpha::Scene_Meta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger > scene_triggers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference > character_references_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::ai::inworld::studio::v1alpha::Scene_Meta* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class ListScenesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListScenesResponse) */ {
 public:
  inline ListScenesResponse() : ListScenesResponse(nullptr) {}
  ~ListScenesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListScenesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListScenesResponse(const ListScenesResponse& from);
  ListScenesResponse(ListScenesResponse&& from) noexcept
    : ListScenesResponse() {
    *this = ::std::move(from);
  }

  inline ListScenesResponse& operator=(const ListScenesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScenesResponse& operator=(ListScenesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScenesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScenesResponse* internal_default_instance() {
    return reinterpret_cast<const ListScenesResponse*>(
               &_ListScenesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListScenesResponse& a, ListScenesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScenesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScenesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScenesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScenesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListScenesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListScenesResponse& from) {
    ListScenesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScenesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListScenesResponse";
  }
  protected:
  explicit ListScenesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Scene scenes = 1;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;
  public:
  void clear_scenes();
  ::ai::inworld::studio::v1alpha::Scene* mutable_scenes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >*
      mutable_scenes();
  private:
  const ::ai::inworld::studio::v1alpha::Scene& _internal_scenes(int index) const;
  ::ai::inworld::studio::v1alpha::Scene* _internal_add_scenes();
  public:
  const ::ai::inworld::studio::v1alpha::Scene& scenes(int index) const;
  ::ai::inworld::studio::v1alpha::Scene* add_scenes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >&
      scenes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListScenesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene > scenes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// -------------------------------------------------------------------

class DeploySceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeploySceneRequest) */ {
 public:
  inline DeploySceneRequest() : DeploySceneRequest(nullptr) {}
  ~DeploySceneRequest() override;
  explicit PROTOBUF_CONSTEXPR DeploySceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeploySceneRequest(const DeploySceneRequest& from);
  DeploySceneRequest(DeploySceneRequest&& from) noexcept
    : DeploySceneRequest() {
    *this = ::std::move(from);
  }

  inline DeploySceneRequest& operator=(const DeploySceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploySceneRequest& operator=(DeploySceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeploySceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeploySceneRequest* internal_default_instance() {
    return reinterpret_cast<const DeploySceneRequest*>(
               &_DeploySceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeploySceneRequest& a, DeploySceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploySceneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploySceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeploySceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeploySceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeploySceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeploySceneRequest& from) {
    DeploySceneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeploySceneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeploySceneRequest";
  }
  protected:
  explicit DeploySceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeploySceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSceneRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSceneRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetSceneRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetSceneRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSceneRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetSceneRequest.name)
}
inline std::string* GetSceneRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetSceneRequest.name)
  return _s;
}
inline const std::string& GetSceneRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetSceneRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSceneRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSceneRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetSceneRequest.name)
  return _impl_.name_.Release();
}
inline void GetSceneRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetSceneRequest.name)
}

// .ai.inworld.studio.v1alpha.SceneItemView view = 2;
inline void GetSceneRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::SceneItemView GetSceneRequest::_internal_view() const {
  return static_cast< ::ai::inworld::studio::v1alpha::SceneItemView >(_impl_.view_);
}
inline ::ai::inworld::studio::v1alpha::SceneItemView GetSceneRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetSceneRequest.view)
  return _internal_view();
}
inline void GetSceneRequest::_internal_set_view(::ai::inworld::studio::v1alpha::SceneItemView value) {
  
  _impl_.view_ = value;
}
inline void GetSceneRequest::set_view(::ai::inworld::studio::v1alpha::SceneItemView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetSceneRequest.view)
}

// -------------------------------------------------------------------

// ListScenesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListScenesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListScenesRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListScenesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
}
inline std::string* ListScenesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
  return _s;
}
inline const std::string& ListScenesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListScenesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListScenesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListScenesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListScenesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesRequest.parent)
}

// int32 page_size = 2;
inline void ListScenesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListScenesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListScenesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.page_size)
  return _internal_page_size();
}
inline void ListScenesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListScenesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.page_size)
}

// string page_token = 3;
inline void ListScenesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListScenesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListScenesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
}
inline std::string* ListScenesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
  return _s;
}
inline const std::string& ListScenesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListScenesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListScenesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListScenesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListScenesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesRequest.page_token)
}

// string filter = 4;
inline void ListScenesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListScenesRequest::filter() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListScenesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
}
inline std::string* ListScenesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
  return _s;
}
inline const std::string& ListScenesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListScenesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListScenesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListScenesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListScenesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesRequest.filter)
}

// -------------------------------------------------------------------

// CreateSceneRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSceneRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateSceneRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSceneRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
}
inline std::string* CreateSceneRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
  return _s;
}
inline const std::string& CreateSceneRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateSceneRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSceneRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSceneRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateSceneRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateSceneRequest.parent)
}

// .ai.inworld.studio.v1alpha.Scene scene = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSceneRequest::_internal_has_scene() const {
  return this != internal_default_instance() && _impl_.scene_ != nullptr;
}
inline bool CreateSceneRequest::has_scene() const {
  return _internal_has_scene();
}
inline void CreateSceneRequest::clear_scene() {
  if (GetArenaForAllocation() == nullptr && _impl_.scene_ != nullptr) {
    delete _impl_.scene_;
  }
  _impl_.scene_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Scene& CreateSceneRequest::_internal_scene() const {
  const ::ai::inworld::studio::v1alpha::Scene* p = _impl_.scene_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene&>(
      ::ai::inworld::studio::v1alpha::_Scene_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene& CreateSceneRequest::scene() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
  return _internal_scene();
}
inline void CreateSceneRequest::unsafe_arena_set_allocated_scene(
    ::ai::inworld::studio::v1alpha::Scene* scene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scene_);
  }
  _impl_.scene_ = scene;
  if (scene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::release_scene() {
  
  ::ai::inworld::studio::v1alpha::Scene* temp = _impl_.scene_;
  _impl_.scene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::unsafe_arena_release_scene() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
  
  ::ai::inworld::studio::v1alpha::Scene* temp = _impl_.scene_;
  _impl_.scene_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::_internal_mutable_scene() {
  
  if (_impl_.scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene>(GetArenaForAllocation());
    _impl_.scene_ = p;
  }
  return _impl_.scene_;
}
inline ::ai::inworld::studio::v1alpha::Scene* CreateSceneRequest::mutable_scene() {
  ::ai::inworld::studio::v1alpha::Scene* _msg = _internal_mutable_scene();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
  return _msg;
}
inline void CreateSceneRequest::set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scene_;
  }
  if (scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scene);
    if (message_arena != submessage_arena) {
      scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateSceneRequest.scene)
}

// -------------------------------------------------------------------

// UpdateSceneRequest

// .ai.inworld.studio.v1alpha.Scene scene = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSceneRequest::_internal_has_scene() const {
  return this != internal_default_instance() && _impl_.scene_ != nullptr;
}
inline bool UpdateSceneRequest::has_scene() const {
  return _internal_has_scene();
}
inline void UpdateSceneRequest::clear_scene() {
  if (GetArenaForAllocation() == nullptr && _impl_.scene_ != nullptr) {
    delete _impl_.scene_;
  }
  _impl_.scene_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Scene& UpdateSceneRequest::_internal_scene() const {
  const ::ai::inworld::studio::v1alpha::Scene* p = _impl_.scene_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene&>(
      ::ai::inworld::studio::v1alpha::_Scene_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene& UpdateSceneRequest::scene() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
  return _internal_scene();
}
inline void UpdateSceneRequest::unsafe_arena_set_allocated_scene(
    ::ai::inworld::studio::v1alpha::Scene* scene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scene_);
  }
  _impl_.scene_ = scene;
  if (scene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::release_scene() {
  
  ::ai::inworld::studio::v1alpha::Scene* temp = _impl_.scene_;
  _impl_.scene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::unsafe_arena_release_scene() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
  
  ::ai::inworld::studio::v1alpha::Scene* temp = _impl_.scene_;
  _impl_.scene_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::_internal_mutable_scene() {
  
  if (_impl_.scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene>(GetArenaForAllocation());
    _impl_.scene_ = p;
  }
  return _impl_.scene_;
}
inline ::ai::inworld::studio::v1alpha::Scene* UpdateSceneRequest::mutable_scene() {
  ::ai::inworld::studio::v1alpha::Scene* _msg = _internal_mutable_scene();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
  return _msg;
}
inline void UpdateSceneRequest::set_allocated_scene(::ai::inworld::studio::v1alpha::Scene* scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scene_;
  }
  if (scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scene);
    if (message_arena != submessage_arena) {
      scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.scene)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSceneRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateSceneRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSceneRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSceneRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSceneRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSceneRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSceneRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSceneRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSceneRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
  return _msg;
}
inline void UpdateSceneRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateSceneRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteSceneRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSceneRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteSceneRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSceneRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
}
inline std::string* DeleteSceneRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
  return _s;
}
inline const std::string& DeleteSceneRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteSceneRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSceneRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSceneRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteSceneRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteSceneRequest.name)
}

// -------------------------------------------------------------------

// Scene_CharacterReference_Character_CharacterDescription

// string given_name = 1;
inline void Scene_CharacterReference_Character_CharacterDescription::clear_given_name() {
  _impl_.given_name_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::given_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
  return _internal_given_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference_Character_CharacterDescription::set_given_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.given_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::mutable_given_name() {
  std::string* _s = _internal_mutable_given_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::_internal_given_name() const {
  return _impl_.given_name_.Get();
}
inline void Scene_CharacterReference_Character_CharacterDescription::_internal_set_given_name(const std::string& value) {
  
  _impl_.given_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::_internal_mutable_given_name() {
  
  return _impl_.given_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::release_given_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
  return _impl_.given_name_.Release();
}
inline void Scene_CharacterReference_Character_CharacterDescription::set_allocated_given_name(std::string* given_name) {
  if (given_name != nullptr) {
    
  } else {
    
  }
  _impl_.given_name_.SetAllocated(given_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.given_name_.IsDefault()) {
    _impl_.given_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.given_name)
}

// string description = 2;
inline void Scene_CharacterReference_Character_CharacterDescription::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference_Character_CharacterDescription::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterDescription::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Scene_CharacterReference_Character_CharacterDescription::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterDescription::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
  return _impl_.description_.Release();
}
inline void Scene_CharacterReference_Character_CharacterDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription.description)
}

// -------------------------------------------------------------------

// Scene_CharacterReference_Character_CharacterAssets

// string rpm_model_uri = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_model_uri() {
  _impl_.rpm_model_uri_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_model_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference_Character_CharacterAssets::set_rpm_model_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_model_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_model_uri() {
  std::string* _s = _internal_mutable_rpm_model_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_model_uri() const {
  return _impl_.rpm_model_uri_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  
  _impl_.rpm_model_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_model_uri() {
  
  return _impl_.rpm_model_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_model_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
  return _impl_.rpm_model_uri_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_model_uri(std::string* rpm_model_uri) {
  if (rpm_model_uri != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_model_uri_.SetAllocated(rpm_model_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_model_uri_.IsDefault()) {
    _impl_.rpm_model_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri = 2 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_image_uri() {
  _impl_.rpm_image_uri_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_image_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
  return _internal_rpm_image_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference_Character_CharacterAssets::set_rpm_image_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_image_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_image_uri() {
  std::string* _s = _internal_mutable_rpm_image_uri();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_image_uri() const {
  return _impl_.rpm_image_uri_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_image_uri(const std::string& value) {
  
  _impl_.rpm_image_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_image_uri() {
  
  return _impl_.rpm_image_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_image_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
  return _impl_.rpm_image_uri_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_image_uri(std::string* rpm_image_uri) {
  if (rpm_image_uri != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_image_uri_.SetAllocated(rpm_image_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_image_uri_.IsDefault()) {
    _impl_.rpm_image_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri)
}

// string rpm_image_uri_portrait = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_image_uri_portrait() {
  _impl_.rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_image_uri_portrait() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference_Character_CharacterAssets::set_rpm_image_uri_portrait(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_image_uri_portrait_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_image_uri_portrait() {
  std::string* _s = _internal_mutable_rpm_image_uri_portrait();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  return _impl_.rpm_image_uri_portrait_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  
  _impl_.rpm_image_uri_portrait_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  
  return _impl_.rpm_image_uri_portrait_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_image_uri_portrait() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
  return _impl_.rpm_image_uri_portrait_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait) {
  if (rpm_image_uri_portrait != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_image_uri_portrait_.SetAllocated(rpm_image_uri_portrait, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_image_uri_portrait_.IsDefault()) {
    _impl_.rpm_image_uri_portrait_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Scene_CharacterReference_Character_CharacterAssets::clear_rpm_image_uri_posture() {
  _impl_.rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::rpm_image_uri_posture() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference_Character_CharacterAssets::set_rpm_image_uri_posture(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpm_image_uri_posture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::mutable_rpm_image_uri_posture() {
  std::string* _s = _internal_mutable_rpm_image_uri_posture();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
  return _s;
}
inline const std::string& Scene_CharacterReference_Character_CharacterAssets::_internal_rpm_image_uri_posture() const {
  return _impl_.rpm_image_uri_posture_.Get();
}
inline void Scene_CharacterReference_Character_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  
  _impl_.rpm_image_uri_posture_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  
  return _impl_.rpm_image_uri_posture_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference_Character_CharacterAssets::release_rpm_image_uri_posture() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
  return _impl_.rpm_image_uri_posture_.Release();
}
inline void Scene_CharacterReference_Character_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture) {
  if (rpm_image_uri_posture != nullptr) {
    
  } else {
    
  }
  _impl_.rpm_image_uri_posture_.SetAllocated(rpm_image_uri_posture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpm_image_uri_posture_.IsDefault()) {
    _impl_.rpm_image_uri_posture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets.rpm_image_uri_posture)
}

// -------------------------------------------------------------------

// Scene_CharacterReference_Character

// .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterDescription default_character_description = 1;
inline bool Scene_CharacterReference_Character::_internal_has_default_character_description() const {
  return this != internal_default_instance() && _impl_.default_character_description_ != nullptr;
}
inline bool Scene_CharacterReference_Character::has_default_character_description() const {
  return _internal_has_default_character_description();
}
inline void Scene_CharacterReference_Character::clear_default_character_description() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_character_description_ != nullptr) {
    delete _impl_.default_character_description_;
  }
  _impl_.default_character_description_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& Scene_CharacterReference_Character::_internal_default_character_description() const {
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* p = _impl_.default_character_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription&>(
      ::ai::inworld::studio::v1alpha::_Scene_CharacterReference_Character_CharacterDescription_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription& Scene_CharacterReference_Character::default_character_description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
  return _internal_default_character_description();
}
inline void Scene_CharacterReference_Character::unsafe_arena_set_allocated_default_character_description(
    ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* default_character_description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_character_description_);
  }
  _impl_.default_character_description_ = default_character_description;
  if (default_character_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::release_default_character_description() {
  
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* temp = _impl_.default_character_description_;
  _impl_.default_character_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::unsafe_arena_release_default_character_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
  
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* temp = _impl_.default_character_description_;
  _impl_.default_character_description_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::_internal_mutable_default_character_description() {
  
  if (_impl_.default_character_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription>(GetArenaForAllocation());
    _impl_.default_character_description_ = p;
  }
  return _impl_.default_character_description_;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* Scene_CharacterReference_Character::mutable_default_character_description() {
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* _msg = _internal_mutable_default_character_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
  return _msg;
}
inline void Scene_CharacterReference_Character::set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterDescription* default_character_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_character_description_;
  }
  if (default_character_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_character_description);
    if (message_arena != submessage_arena) {
      default_character_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_character_description, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default_character_description_ = default_character_description;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_description)
}

// .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.CharacterAssets default_character_assets = 2;
inline bool Scene_CharacterReference_Character::_internal_has_default_character_assets() const {
  return this != internal_default_instance() && _impl_.default_character_assets_ != nullptr;
}
inline bool Scene_CharacterReference_Character::has_default_character_assets() const {
  return _internal_has_default_character_assets();
}
inline void Scene_CharacterReference_Character::clear_default_character_assets() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_character_assets_ != nullptr) {
    delete _impl_.default_character_assets_;
  }
  _impl_.default_character_assets_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& Scene_CharacterReference_Character::_internal_default_character_assets() const {
  const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* p = _impl_.default_character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets&>(
      ::ai::inworld::studio::v1alpha::_Scene_CharacterReference_Character_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets& Scene_CharacterReference_Character::default_character_assets() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
  return _internal_default_character_assets();
}
inline void Scene_CharacterReference_Character::unsafe_arena_set_allocated_default_character_assets(
    ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* default_character_assets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_character_assets_);
  }
  _impl_.default_character_assets_ = default_character_assets;
  if (default_character_assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::release_default_character_assets() {
  
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* temp = _impl_.default_character_assets_;
  _impl_.default_character_assets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::unsafe_arena_release_default_character_assets() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
  
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* temp = _impl_.default_character_assets_;
  _impl_.default_character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::_internal_mutable_default_character_assets() {
  
  if (_impl_.default_character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets>(GetArenaForAllocation());
    _impl_.default_character_assets_ = p;
  }
  return _impl_.default_character_assets_;
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* Scene_CharacterReference_Character::mutable_default_character_assets() {
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* _msg = _internal_mutable_default_character_assets();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
  return _msg;
}
inline void Scene_CharacterReference_Character::set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character_CharacterAssets* default_character_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_character_assets_;
  }
  if (default_character_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_character_assets);
    if (message_arena != submessage_arena) {
      default_character_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_character_assets, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default_character_assets_ = default_character_assets;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.Character.default_character_assets)
}

// -------------------------------------------------------------------

// Scene_CharacterReference

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Scene_CharacterReference::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
}
inline std::string* Scene_CharacterReference::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
  return _s;
}
inline const std::string& Scene_CharacterReference::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Scene_CharacterReference::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
  return _impl_.name_.Release();
}
inline void Scene_CharacterReference::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.name)
}

// string character = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void Scene_CharacterReference::clear_character() {
  _impl_.character_.ClearToEmpty();
}
inline const std::string& Scene_CharacterReference::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
  return _internal_character();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_CharacterReference::set_character(ArgT0&& arg0, ArgT... args) {
 
 _impl_.character_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
}
inline std::string* Scene_CharacterReference::mutable_character() {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
  return _s;
}
inline const std::string& Scene_CharacterReference::_internal_character() const {
  return _impl_.character_.Get();
}
inline void Scene_CharacterReference::_internal_set_character(const std::string& value) {
  
  _impl_.character_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference::_internal_mutable_character() {
  
  return _impl_.character_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_CharacterReference::release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
  return _impl_.character_.Release();
}
inline void Scene_CharacterReference::set_allocated_character(std::string* character) {
  if (character != nullptr) {
    
  } else {
    
  }
  _impl_.character_.SetAllocated(character, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.character_.IsDefault()) {
    _impl_.character_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.CharacterReference.character)
}

// repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference.Character character_overloads = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Scene_CharacterReference::_internal_character_overloads_size() const {
  return _impl_.character_overloads_.size();
}
inline int Scene_CharacterReference::character_overloads_size() const {
  return _internal_character_overloads_size();
}
inline void Scene_CharacterReference::clear_character_overloads() {
  _impl_.character_overloads_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* Scene_CharacterReference::mutable_character_overloads(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _impl_.character_overloads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character >*
Scene_CharacterReference::mutable_character_overloads() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return &_impl_.character_overloads_;
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character& Scene_CharacterReference::_internal_character_overloads(int index) const {
  return _impl_.character_overloads_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character& Scene_CharacterReference::character_overloads(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _internal_character_overloads(index);
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* Scene_CharacterReference::_internal_add_character_overloads() {
  return _impl_.character_overloads_.Add();
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* Scene_CharacterReference::add_character_overloads() {
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character* _add = _internal_add_character_overloads();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference_Character >&
Scene_CharacterReference::character_overloads() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.CharacterReference.character_overloads)
  return _impl_.character_overloads_;
}

// -------------------------------------------------------------------

// Scene_SceneTrigger

// string trigger = 1 [(.google.api.resource_reference) = {
inline void Scene_SceneTrigger::clear_trigger() {
  _impl_.trigger_.ClearToEmpty();
}
inline const std::string& Scene_SceneTrigger::trigger() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
  return _internal_trigger();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_SceneTrigger::set_trigger(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trigger_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
}
inline std::string* Scene_SceneTrigger::mutable_trigger() {
  std::string* _s = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
  return _s;
}
inline const std::string& Scene_SceneTrigger::_internal_trigger() const {
  return _impl_.trigger_.Get();
}
inline void Scene_SceneTrigger::_internal_set_trigger(const std::string& value) {
  
  _impl_.trigger_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_SceneTrigger::_internal_mutable_trigger() {
  
  return _impl_.trigger_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_SceneTrigger::release_trigger() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
  return _impl_.trigger_.Release();
}
inline void Scene_SceneTrigger::set_allocated_trigger(std::string* trigger) {
  if (trigger != nullptr) {
    
  } else {
    
  }
  _impl_.trigger_.SetAllocated(trigger, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_.IsDefault()) {
    _impl_.trigger_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.SceneTrigger.trigger)
}

// string description = 2;
inline void Scene_SceneTrigger::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Scene_SceneTrigger::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene_SceneTrigger::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
}
inline std::string* Scene_SceneTrigger::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
  return _s;
}
inline const std::string& Scene_SceneTrigger::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Scene_SceneTrigger::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene_SceneTrigger::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene_SceneTrigger::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
  return _impl_.description_.Release();
}
inline void Scene_SceneTrigger::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.SceneTrigger.description)
}

// -------------------------------------------------------------------

// Scene_Meta

// int32 total_triggers = 1;
inline void Scene_Meta::clear_total_triggers() {
  _impl_.total_triggers_ = 0;
}
inline int32_t Scene_Meta::_internal_total_triggers() const {
  return _impl_.total_triggers_;
}
inline int32_t Scene_Meta::total_triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.Meta.total_triggers)
  return _internal_total_triggers();
}
inline void Scene_Meta::_internal_set_total_triggers(int32_t value) {
  
  _impl_.total_triggers_ = value;
}
inline void Scene_Meta::set_total_triggers(int32_t value) {
  _internal_set_total_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.Meta.total_triggers)
}

// int32 total_characters = 2;
inline void Scene_Meta::clear_total_characters() {
  _impl_.total_characters_ = 0;
}
inline int32_t Scene_Meta::_internal_total_characters() const {
  return _impl_.total_characters_;
}
inline int32_t Scene_Meta::total_characters() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.Meta.total_characters)
  return _internal_total_characters();
}
inline void Scene_Meta::_internal_set_total_characters(int32_t value) {
  
  _impl_.total_characters_ = value;
}
inline void Scene_Meta::set_total_characters(int32_t value) {
  _internal_set_total_characters(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.Meta.total_characters)
}

// -------------------------------------------------------------------

// Scene

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Scene::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Scene::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.name)
}
inline std::string* Scene::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.name)
  return _s;
}
inline const std::string& Scene::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Scene::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.name)
  return _impl_.name_.Release();
}
inline void Scene::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.name)
}

// string description = 2;
inline void Scene::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Scene::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.description)
}
inline std::string* Scene::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.description)
  return _s;
}
inline const std::string& Scene::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Scene::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.description)
  return _impl_.description_.Release();
}
inline void Scene::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.description)
}

// repeated .ai.inworld.studio.v1alpha.Scene.SceneTrigger scene_triggers = 3;
inline int Scene::_internal_scene_triggers_size() const {
  return _impl_.scene_triggers_.size();
}
inline int Scene::scene_triggers_size() const {
  return _internal_scene_triggers_size();
}
inline void Scene::clear_scene_triggers() {
  _impl_.scene_triggers_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* Scene::mutable_scene_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _impl_.scene_triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger >*
Scene::mutable_scene_triggers() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return &_impl_.scene_triggers_;
}
inline const ::ai::inworld::studio::v1alpha::Scene_SceneTrigger& Scene::_internal_scene_triggers(int index) const {
  return _impl_.scene_triggers_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Scene_SceneTrigger& Scene::scene_triggers(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _internal_scene_triggers(index);
}
inline ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* Scene::_internal_add_scene_triggers() {
  return _impl_.scene_triggers_.Add();
}
inline ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* Scene::add_scene_triggers() {
  ::ai::inworld::studio::v1alpha::Scene_SceneTrigger* _add = _internal_add_scene_triggers();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_SceneTrigger >&
Scene::scene_triggers() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.scene_triggers)
  return _impl_.scene_triggers_;
}

// repeated .ai.inworld.studio.v1alpha.Scene.CharacterReference character_references = 4;
inline int Scene::_internal_character_references_size() const {
  return _impl_.character_references_.size();
}
inline int Scene::character_references_size() const {
  return _internal_character_references_size();
}
inline void Scene::clear_character_references() {
  _impl_.character_references_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference* Scene::mutable_character_references(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.character_references)
  return _impl_.character_references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference >*
Scene::mutable_character_references() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Scene.character_references)
  return &_impl_.character_references_;
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference& Scene::_internal_character_references(int index) const {
  return _impl_.character_references_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Scene_CharacterReference& Scene::character_references(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.character_references)
  return _internal_character_references(index);
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference* Scene::_internal_add_character_references() {
  return _impl_.character_references_.Add();
}
inline ::ai::inworld::studio::v1alpha::Scene_CharacterReference* Scene::add_character_references() {
  ::ai::inworld::studio::v1alpha::Scene_CharacterReference* _add = _internal_add_character_references();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Scene.character_references)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene_CharacterReference >&
Scene::character_references() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Scene.character_references)
  return _impl_.character_references_;
}

// string display_name = 5 [(.ai.inworld.options.examples) = {
inline void Scene::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Scene::display_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scene::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Scene.display_name)
}
inline std::string* Scene::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.display_name)
  return _s;
}
inline const std::string& Scene::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Scene::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Scene::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Scene::release_display_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.display_name)
  return _impl_.display_name_.Release();
}
inline void Scene::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.display_name)
}

// .ai.inworld.studio.v1alpha.Scene.Meta meta = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Scene::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool Scene::has_meta() const {
  return _internal_has_meta();
}
inline void Scene::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Scene_Meta& Scene::_internal_meta() const {
  const ::ai::inworld::studio::v1alpha::Scene_Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Scene_Meta&>(
      ::ai::inworld::studio::v1alpha::_Scene_Meta_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Scene_Meta& Scene::meta() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Scene.meta)
  return _internal_meta();
}
inline void Scene::unsafe_arena_set_allocated_meta(
    ::ai::inworld::studio::v1alpha::Scene_Meta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Scene.meta)
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::release_meta() {
  
  ::ai::inworld::studio::v1alpha::Scene_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Scene.meta)
  
  ::ai::inworld::studio::v1alpha::Scene_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Scene_Meta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::ai::inworld::studio::v1alpha::Scene_Meta* Scene::mutable_meta() {
  ::ai::inworld::studio::v1alpha::Scene_Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Scene.meta)
  return _msg;
}
inline void Scene::set_allocated_meta(::ai::inworld::studio::v1alpha::Scene_Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Scene.meta)
}

// -------------------------------------------------------------------

// ListScenesResponse

// repeated .ai.inworld.studio.v1alpha.Scene scenes = 1;
inline int ListScenesResponse::_internal_scenes_size() const {
  return _impl_.scenes_.size();
}
inline int ListScenesResponse::scenes_size() const {
  return _internal_scenes_size();
}
inline void ListScenesResponse::clear_scenes() {
  _impl_.scenes_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Scene* ListScenesResponse::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _impl_.scenes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >*
ListScenesResponse::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return &_impl_.scenes_;
}
inline const ::ai::inworld::studio::v1alpha::Scene& ListScenesResponse::_internal_scenes(int index) const {
  return _impl_.scenes_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Scene& ListScenesResponse::scenes(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _internal_scenes(index);
}
inline ::ai::inworld::studio::v1alpha::Scene* ListScenesResponse::_internal_add_scenes() {
  return _impl_.scenes_.Add();
}
inline ::ai::inworld::studio::v1alpha::Scene* ListScenesResponse::add_scenes() {
  ::ai::inworld::studio::v1alpha::Scene* _add = _internal_add_scenes();
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >&
ListScenesResponse::scenes() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListScenesResponse.scenes)
  return _impl_.scenes_;
}

// string next_page_token = 2;
inline void ListScenesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListScenesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListScenesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
}
inline std::string* ListScenesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
  return _s;
}
inline const std::string& ListScenesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListScenesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListScenesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListScenesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListScenesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListScenesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeploySceneRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeploySceneRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeploySceneRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeploySceneRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
}
inline std::string* DeploySceneRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
  return _s;
}
inline const std::string& DeploySceneRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeploySceneRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeploySceneRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeploySceneRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
  return _impl_.name_.Release();
}
inline void DeploySceneRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeploySceneRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::SceneItemView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::SceneItemView>() {
  return ::ai::inworld::studio::v1alpha::SceneItemView_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2fscenes_2eproto
