// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/users.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/users.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
PROTOBUF_CONSTEXPR GenerateTokenUserRequest::GenerateTokenUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateTokenUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateTokenUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateTokenUserRequestDefaultTypeInternal() {}
  union {
    GenerateTokenUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateTokenUserRequestDefaultTypeInternal _GenerateTokenUserRequest_default_instance_;
PROTOBUF_CONSTEXPR GenerateTokenUserResponse::GenerateTokenUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expiration_time_)*/nullptr
  , /*decltype(_impl_.is_created_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateTokenUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateTokenUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateTokenUserResponseDefaultTypeInternal() {}
  union {
    GenerateTokenUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateTokenUserResponseDefaultTypeInternal _GenerateTokenUserResponse_default_instance_;
PROTOBUF_CONSTEXPR LinkAccountRequest::LinkAccountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oculus_oauth_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkAccountRequestDefaultTypeInternal() {}
  union {
    LinkAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkAccountRequestDefaultTypeInternal _LinkAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserRequest::GetUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserRequestDefaultTypeInternal() {}
  union {
    GetUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
PROTOBUF_CONSTEXPR AcceptTosRequest::AcceptTosRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptTosRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptTosRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptTosRequestDefaultTypeInternal() {}
  union {
    AcceptTosRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptTosRequestDefaultTypeInternal _AcceptTosRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateUserRequest::UpdateUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateUserRequestDefaultTypeInternal() {}
  union {
    UpdateUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oculus_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firebase_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tos_acceptance_version_)*/0
  , /*decltype(_impl_.marketing_consent_)*/0
  , /*decltype(_impl_.marketing_platform_purpose_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto = nullptr;

const uint32_t TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserRequest, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserResponse, _impl_.expiration_time_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateTokenUserResponse, _impl_.is_created_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::LinkAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::LinkAccountRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::LinkAccountRequest, _impl_.oculus_oauth_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GetUserRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::AcceptTosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::AcceptTosRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::UpdateUserRequest, _impl_.update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _impl_.oculus_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _impl_.firebase_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _impl_.tos_acceptance_version_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _impl_.marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::User, _impl_.marketing_platform_purpose_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateTokenUserRequest)},
  { 8, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateTokenUserResponse)},
  { 18, -1, -1, sizeof(::ai::inworld::studio::v1alpha::LinkAccountRequest)},
  { 26, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GetUserRequest)},
  { 33, -1, -1, sizeof(::ai::inworld::studio::v1alpha::AcceptTosRequest)},
  { 40, -1, -1, sizeof(::ai::inworld::studio::v1alpha::UpdateUserRequest)},
  { 48, -1, -1, sizeof(::ai::inworld::studio::v1alpha::User)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::studio::v1alpha::_GenerateTokenUserRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GenerateTokenUserResponse_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_LinkAccountRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GetUserRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_AcceptTosRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_UpdateUserRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_User_default_instance_._instance,
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%ai/inworld/studio/v1alpha/users.proto\022"
  "\031ai.inworld.studio.v1alpha\032\034google/api/a"
  "nnotations.proto\032\027google/api/client.prot"
  "o\032\037google/api/field_behavior.proto\032\031goog"
  "le/api/resource.proto\032\033google/protobuf/e"
  "mpty.proto\032 google/protobuf/field_mask.p"
  "roto\032\037google/protobuf/timestamp.proto\"a\n"
  "\030GenerateTokenUserRequest\0226\n\004type\030\001 \001(\0162"
  "#.ai.inworld.studio.v1alpha.AuthTypeB\003\340A"
  "\002\022\r\n\005token\030\002 \001(\t\"\206\001\n\031GenerateTokenUserRe"
  "sponse\022\r\n\005token\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\0223\n\017e"
  "xpiration_time\030\003 \001(\0132\032.google.protobuf.T"
  "imestamp\022\027\n\nis_created\030\004 \001(\010B\003\340A\003\"[\n\022Lin"
  "kAccountRequest\022)\n\004name\030\001 \001(\tB\033\340A\002\372A\025\n\023a"
  "pi.inworld.ai/User\022\032\n\022oculus_oauth_token"
  "\030\002 \001(\t\";\n\016GetUserRequest\022)\n\004name\030\001 \001(\tB\033"
  "\340A\002\372A\025\n\023api.inworld.ai/User\"=\n\020AcceptTos"
  "Request\022)\n\004user\030\001 \001(\tB\033\340A\002\372A\025\n\023api.inwor"
  "ld.ai/User\"}\n\021UpdateUserRequest\0222\n\004user\030"
  "\001 \001(\0132\037.ai.inworld.studio.v1alpha.UserB\003"
  "\340A\002\0224\n\013update_mask\030\002 \001(\0132\032.google.protob"
  "uf.FieldMaskB\003\340A\002\"\312\002\n\004User\022\021\n\004name\030\001 \001(\t"
  "B\003\340A\002\022\026\n\toculus_id\030\003 \001(\tB\003\340A\003\022\030\n\013firebas"
  "e_id\030\004 \001(\tB\003\340A\003\022#\n\026tos_acceptance_versio"
  "n\030\005 \001(\005B\003\340A\003\022F\n\021marketing_consent\030\006 \001(\0162"
  "+.ai.inworld.studio.v1alpha.MarketingCon"
  "sent\022W\n\032marketing_platform_purpose\030\007 \001(\016"
  "23.ai.inworld.studio.v1alpha.MarketingPl"
  "atformPurpose:&\352A#\n\023api.inworld.ai/User\022"
  "\014users/{user}J\004\010\002\020\003R\tgoogle_id*t\n\020Market"
  "ingConsent\022!\n\035MARKETING_CONSENT_UNSPECIF"
  "IED\020\000\022\036\n\032MARKETING_CONSENT_DECLINED\020\001\022\035\n"
  "\031MARKETING_CONSENT_GRANTED\020\002*\270\002\n\030Marketi"
  "ngPlatformPurpose\022*\n&MARKETING_PLATFORM_"
  "PURPOSE_UNSPECIFIED\020\000\0221\n-MARKETING_PLATF"
  "ORM_PURPOSE_GAME_AND_METAVERSE\020\001\022,\n(MARK"
  "ETING_PLATFORM_PURPOSE_ENTERTAINMENT\020\002\0222"
  "\n.MARKETING_PLATFORM_PURPOSE_SALES_AND_M"
  "ARKETING\020\003\0225\n1MARKETING_PLATFORM_PURPOSE"
  "_TRAINING_AND_EDUCATION\020\004\022$\n MARKETING_P"
  "LATFORM_PURPOSE_OTHER\020\005*_\n\010AuthType\022\031\n\025A"
  "UTH_TYPE_UNSPECIFIED\020\000\022\032\n\026AUTH_TYPE_OCUL"
  "US_NONCE\020\002\022\026\n\022AUTH_TYPE_FIREBASE\020\003\"\004\010\001\020\001"
  "2\337\005\n\005Users\022\253\001\n\021GenerateTokenUser\0223.ai.in"
  "world.studio.v1alpha.GenerateTokenUserRe"
  "quest\0324.ai.inworld.studio.v1alpha.Genera"
  "teTokenUserResponse\"+\202\323\344\223\002%\" /v1alpha/us"
  "ers:generateTokenUser:\001*\022\201\001\n\017LinkAccount"
  "User\022-.ai.inworld.studio.v1alpha.LinkAcc"
  "ountRequest\032\026.google.protobuf.Empty\"\'\202\323\344"
  "\223\002!\"\034/v1alpha/{name=users/*}:link:\001*\022}\n\007"
  "GetUser\022).ai.inworld.studio.v1alpha.GetU"
  "serRequest\032\037.ai.inworld.studio.v1alpha.U"
  "ser\"&\202\323\344\223\002\031\022\027/v1alpha/{name=users/*}\332A\004n"
  "ame\022\232\001\n\nUpdateUser\022,.ai.inworld.studio.v"
  "1alpha.UpdateUserRequest\032\037.ai.inworld.st"
  "udio.v1alpha.User\"=\202\323\344\223\002$2\034/v1alpha/{use"
  "r.name=users/*}:\004user\332A\020user,update_mask"
  "\022\207\001\n\tAcceptTos\022+.ai.inworld.studio.v1alp"
  "ha.AcceptTosRequest\032\037.ai.inworld.studio."
  "v1alpha.User\",\202\323\344\223\002&\"!/v1alpha/{user=use"
  "rs/*}:acceptTos:\001*B\224\001\n\031ai.inworld.studio"
  ".v1alphaB\nUsersProtoP\001ZMgithub.com/inwor"
  "ld-ai/inworld/serving/grpc-gateway/build"
  "/proto/studio/v1alpha\252\002\031Ai.Inworld.Studi"
  "o.V1Alphab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto = {
    false, false, 2617, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto,
    "ai/inworld/studio/v1alpha/users.proto",
    &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_deps, 7, 7,
    schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto::offsets,
    file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto,
    file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter() {
  return &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketingConsent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[0];
}
bool MarketingConsent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketingPlatformPurpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[1];
}
bool MarketingPlatformPurpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[2];
}
bool AuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GenerateTokenUserRequest::_Internal {
 public:
};

GenerateTokenUserRequest::GenerateTokenUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
}
GenerateTokenUserRequest::GenerateTokenUserRequest(const GenerateTokenUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateTokenUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
}

inline void GenerateTokenUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateTokenUserRequest::~GenerateTokenUserRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateTokenUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void GenerateTokenUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateTokenUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateTokenUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::studio::v1alpha::AuthType>(val));
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateTokenUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  return target;
}

size_t GenerateTokenUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateTokenUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateTokenUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateTokenUserRequest::GetClassData() const { return &_class_data_; }


void GenerateTokenUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateTokenUserRequest*>(&to_msg);
  auto& from = static_cast<const GenerateTokenUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateTokenUserRequest::CopyFrom(const GenerateTokenUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateTokenUserRequest::IsInitialized() const {
  return true;
}

void GenerateTokenUserRequest::InternalSwap(GenerateTokenUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateTokenUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[0]);
}

// ===================================================================

class GenerateTokenUserResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time(const GenerateTokenUserResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GenerateTokenUserResponse::_Internal::expiration_time(const GenerateTokenUserResponse* msg) {
  return *msg->_impl_.expiration_time_;
}
void GenerateTokenUserResponse::clear_expiration_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
}
GenerateTokenUserResponse::GenerateTokenUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
}
GenerateTokenUserResponse::GenerateTokenUserResponse(const GenerateTokenUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateTokenUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.is_created_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_expiration_time()) {
    _this->_impl_.expiration_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiration_time_);
  }
  _this->_impl_.is_created_ = from._impl_.is_created_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
}

inline void GenerateTokenUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.is_created_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateTokenUserResponse::~GenerateTokenUserResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateTokenUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.expiration_time_;
}

void GenerateTokenUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateTokenUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
  _impl_.is_created_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateTokenUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_created = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateTokenUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp expiration_time = 3;
  if (this->_internal_has_expiration_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expiration_time(this),
        _Internal::expiration_time(this).GetCachedSize(), target, stream);
  }

  // bool is_created = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_is_created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  return target;
}

size_t GenerateTokenUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.Timestamp expiration_time = 3;
  if (this->_internal_has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_time_);
  }

  // bool is_created = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_is_created() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateTokenUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateTokenUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateTokenUserResponse::GetClassData() const { return &_class_data_; }


void GenerateTokenUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateTokenUserResponse*>(&to_msg);
  auto& from = static_cast<const GenerateTokenUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_expiration_time()) {
    _this->_internal_mutable_expiration_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiration_time());
  }
  if (from._internal_is_created() != 0) {
    _this->_internal_set_is_created(from._internal_is_created());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateTokenUserResponse::CopyFrom(const GenerateTokenUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateTokenUserResponse::IsInitialized() const {
  return true;
}

void GenerateTokenUserResponse::InternalSwap(GenerateTokenUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateTokenUserResponse, _impl_.is_created_)
      + sizeof(GenerateTokenUserResponse::_impl_.is_created_)
      - PROTOBUF_FIELD_OFFSET(GenerateTokenUserResponse, _impl_.expiration_time_)>(
          reinterpret_cast<char*>(&_impl_.expiration_time_),
          reinterpret_cast<char*>(&other->_impl_.expiration_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateTokenUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[1]);
}

// ===================================================================

class LinkAccountRequest::_Internal {
 public:
};

LinkAccountRequest::LinkAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.LinkAccountRequest)
}
LinkAccountRequest::LinkAccountRequest(const LinkAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkAccountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.oculus_oauth_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oculus_oauth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oculus_oauth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oculus_oauth_token().empty()) {
    _this->_impl_.oculus_oauth_token_.Set(from._internal_oculus_oauth_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.LinkAccountRequest)
}

inline void LinkAccountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.oculus_oauth_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oculus_oauth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oculus_oauth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkAccountRequest::~LinkAccountRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.LinkAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.oculus_oauth_token_.Destroy();
}

void LinkAccountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.LinkAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.oculus_oauth_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.LinkAccountRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string oculus_oauth_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oculus_oauth_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.LinkAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.LinkAccountRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string oculus_oauth_token = 2;
  if (!this->_internal_oculus_oauth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oculus_oauth_token().data(), static_cast<int>(this->_internal_oculus_oauth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oculus_oauth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.LinkAccountRequest)
  return target;
}

size_t LinkAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.LinkAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string oculus_oauth_token = 2;
  if (!this->_internal_oculus_oauth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oculus_oauth_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkAccountRequest::GetClassData() const { return &_class_data_; }


void LinkAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkAccountRequest*>(&to_msg);
  auto& from = static_cast<const LinkAccountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.LinkAccountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_oculus_oauth_token().empty()) {
    _this->_internal_set_oculus_oauth_token(from._internal_oculus_oauth_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkAccountRequest::CopyFrom(const LinkAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.LinkAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAccountRequest::IsInitialized() const {
  return true;
}

void LinkAccountRequest::InternalSwap(LinkAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oculus_oauth_token_, lhs_arena,
      &other->_impl_.oculus_oauth_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[2]);
}

// ===================================================================

class GetUserRequest::_Internal {
 public:
};

GetUserRequest::GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GetUserRequest)
}
GetUserRequest::GetUserRequest(const GetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GetUserRequest)
}

inline void GetUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserRequest::~GetUserRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GetUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GetUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GetUserRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GetUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GetUserRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GetUserRequest)
  return target;
}

size_t GetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GetUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserRequest::GetClassData() const { return &_class_data_; }


void GetUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserRequest*>(&to_msg);
  auto& from = static_cast<const GetUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserRequest::CopyFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRequest::IsInitialized() const {
  return true;
}

void GetUserRequest::InternalSwap(GetUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[3]);
}

// ===================================================================

class AcceptTosRequest::_Internal {
 public:
};

AcceptTosRequest::AcceptTosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.AcceptTosRequest)
}
AcceptTosRequest::AcceptTosRequest(const AcceptTosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptTosRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.AcceptTosRequest)
}

inline void AcceptTosRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AcceptTosRequest::~AcceptTosRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.AcceptTosRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptTosRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void AcceptTosRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptTosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.AcceptTosRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptTosRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.AcceptTosRequest.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcceptTosRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.AcceptTosRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.AcceptTosRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.AcceptTosRequest)
  return target;
}

size_t AcceptTosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.AcceptTosRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptTosRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptTosRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptTosRequest::GetClassData() const { return &_class_data_; }


void AcceptTosRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptTosRequest*>(&to_msg);
  auto& from = static_cast<const AcceptTosRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.AcceptTosRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptTosRequest::CopyFrom(const AcceptTosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.AcceptTosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptTosRequest::IsInitialized() const {
  return true;
}

void AcceptTosRequest::InternalSwap(AcceptTosRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptTosRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[4]);
}

// ===================================================================

class UpdateUserRequest::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::User& user(const UpdateUserRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateUserRequest* msg);
};

const ::ai::inworld::studio::v1alpha::User&
UpdateUserRequest::_Internal::user(const UpdateUserRequest* msg) {
  return *msg->_impl_.user_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateUserRequest::_Internal::update_mask(const UpdateUserRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdateUserRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
}
UpdateUserRequest::UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.UpdateUserRequest)
}
UpdateUserRequest::UpdateUserRequest(const UpdateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::ai::inworld::studio::v1alpha::User(*from._impl_.user_);
  }
  if (from._internal_has_update_mask()) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.UpdateUserRequest)
}

inline void UpdateUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateUserRequest::~UpdateUserRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.UpdateUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdateUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.UpdateUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.UpdateUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_update_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.UpdateUserRequest)
  return target;
}

size_t UpdateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.UpdateUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserRequest::GetClassData() const { return &_class_data_; }


void UpdateUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateUserRequest*>(&to_msg);
  auto& from = static_cast<const UpdateUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::ai::inworld::studio::v1alpha::User::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_update_mask()) {
    _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_update_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserRequest::CopyFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserRequest::IsInitialized() const {
  return true;
}

void UpdateUserRequest::InternalSwap(UpdateUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateUserRequest, _impl_.update_mask_)
      + sizeof(UpdateUserRequest::_impl_.update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateUserRequest, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[5]);
}

// ===================================================================

class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.oculus_id_){}
    , decltype(_impl_.firebase_id_){}
    , decltype(_impl_.tos_acceptance_version_){}
    , decltype(_impl_.marketing_consent_){}
    , decltype(_impl_.marketing_platform_purpose_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oculus_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oculus_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oculus_id().empty()) {
    _this->_impl_.oculus_id_.Set(from._internal_oculus_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firebase_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firebase_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firebase_id().empty()) {
    _this->_impl_.firebase_id_.Set(from._internal_firebase_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tos_acceptance_version_, &from._impl_.tos_acceptance_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marketing_platform_purpose_) -
    reinterpret_cast<char*>(&_impl_.tos_acceptance_version_)) + sizeof(_impl_.marketing_platform_purpose_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.User)
}

inline void User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.oculus_id_){}
    , decltype(_impl_.firebase_id_){}
    , decltype(_impl_.tos_acceptance_version_){0}
    , decltype(_impl_.marketing_consent_){0}
    , decltype(_impl_.marketing_platform_purpose_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oculus_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oculus_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firebase_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firebase_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User::~User() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.oculus_id_.Destroy();
  _impl_.firebase_id_.Destroy();
}

void User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.oculus_id_.ClearToEmpty();
  _impl_.firebase_id_.ClearToEmpty();
  ::memset(&_impl_.tos_acceptance_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.marketing_platform_purpose_) -
      reinterpret_cast<char*>(&_impl_.tos_acceptance_version_)) + sizeof(_impl_.marketing_platform_purpose_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.User.name"));
        } else
          goto handle_unusual;
        continue;
      // string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oculus_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.User.oculus_id"));
        } else
          goto handle_unusual;
        continue;
      // string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_firebase_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.User.firebase_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tos_acceptance_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_marketing_consent(static_cast<::ai::inworld::studio::v1alpha::MarketingConsent>(val));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.MarketingPlatformPurpose marketing_platform_purpose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_marketing_platform_purpose(static_cast<::ai::inworld::studio::v1alpha::MarketingPlatformPurpose>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.User.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_oculus_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oculus_id().data(), static_cast<int>(this->_internal_oculus_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.User.oculus_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oculus_id(), target);
  }

  // string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_firebase_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firebase_id().data(), static_cast<int>(this->_internal_firebase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.User.firebase_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_firebase_id(), target);
  }

  // int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_tos_acceptance_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tos_acceptance_version(), target);
  }

  // .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
  if (this->_internal_marketing_consent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_marketing_consent(), target);
  }

  // .ai.inworld.studio.v1alpha.MarketingPlatformPurpose marketing_platform_purpose = 7;
  if (this->_internal_marketing_platform_purpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_marketing_platform_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_oculus_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oculus_id());
  }

  // string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_firebase_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firebase_id());
  }

  // int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_tos_acceptance_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tos_acceptance_version());
  }

  // .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
  if (this->_internal_marketing_consent() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_marketing_consent());
  }

  // .ai.inworld.studio.v1alpha.MarketingPlatformPurpose marketing_platform_purpose = 7;
  if (this->_internal_marketing_platform_purpose() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_marketing_platform_purpose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }


void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_oculus_id().empty()) {
    _this->_internal_set_oculus_id(from._internal_oculus_id());
  }
  if (!from._internal_firebase_id().empty()) {
    _this->_internal_set_firebase_id(from._internal_firebase_id());
  }
  if (from._internal_tos_acceptance_version() != 0) {
    _this->_internal_set_tos_acceptance_version(from._internal_tos_acceptance_version());
  }
  if (from._internal_marketing_consent() != 0) {
    _this->_internal_set_marketing_consent(from._internal_marketing_consent());
  }
  if (from._internal_marketing_platform_purpose() != 0) {
    _this->_internal_set_marketing_platform_purpose(from._internal_marketing_platform_purpose());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oculus_id_, lhs_arena,
      &other->_impl_.oculus_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firebase_id_, lhs_arena,
      &other->_impl_.firebase_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, _impl_.marketing_platform_purpose_)
      + sizeof(User::_impl_.marketing_platform_purpose_)
      - PROTOBUF_FIELD_OFFSET(User, _impl_.tos_acceptance_version_)>(
          reinterpret_cast<char*>(&_impl_.tos_acceptance_version_),
          reinterpret_cast<char*>(&other->_impl_.tos_acceptance_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fusers_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateTokenUserRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateTokenUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateTokenUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateTokenUserResponse*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateTokenUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateTokenUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::LinkAccountRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::LinkAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::LinkAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GetUserRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::AcceptTosRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::AcceptTosRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::AcceptTosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::UpdateUserRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::UpdateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::UpdateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::User*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::User >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
