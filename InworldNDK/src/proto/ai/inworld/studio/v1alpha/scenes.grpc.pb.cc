// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/scenes.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/scenes.pb.h"
#include "ai/inworld/studio/v1alpha/scenes.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* Scenes_method_names[] = {
  "/ai.inworld.studio.v1alpha.Scenes/DeployScene",
  "/ai.inworld.studio.v1alpha.Scenes/GetScene",
  "/ai.inworld.studio.v1alpha.Scenes/ListScenes",
  "/ai.inworld.studio.v1alpha.Scenes/UpdateScene",
  "/ai.inworld.studio.v1alpha.Scenes/CreateScene",
  "/ai.inworld.studio.v1alpha.Scenes/DeleteScene",
};

std::unique_ptr< Scenes::Stub> Scenes::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Scenes::Stub> stub(new Scenes::Stub(channel, options));
  return stub;
}

Scenes::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DeployScene_(Scenes_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScene_(Scenes_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListScenes_(Scenes_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateScene_(Scenes_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateScene_(Scenes_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteScene_(Scenes_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Scenes::Stub::DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeployScene_, context, request, response);
}

void Scenes::Stub::async::DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployScene_, context, request, response, std::move(f));
}

void Scenes::Stub::async::DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Scenes::Stub::PrepareAsyncDeploySceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeployScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Scenes::Stub::AsyncDeploySceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeploySceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scenes::Stub::GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetScene_, context, request, response);
}

void Scenes::Stub::async::GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetScene_, context, request, response, std::move(f));
}

void Scenes::Stub::async::GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* Scenes::Stub::PrepareAsyncGetSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Scene, ::ai::inworld::studio::v1alpha::GetSceneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* Scenes::Stub::AsyncGetSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scenes::Stub::ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListScenes_, context, request, response);
}

void Scenes::Stub::async::ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListScenes_, context, request, response, std::move(f));
}

void Scenes::Stub::async::ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListScenes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>* Scenes::Stub::PrepareAsyncListScenesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ListScenesResponse, ::ai::inworld::studio::v1alpha::ListScenesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListScenes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>* Scenes::Stub::AsyncListScenesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListScenesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scenes::Stub::UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateScene_, context, request, response);
}

void Scenes::Stub::async::UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScene_, context, request, response, std::move(f));
}

void Scenes::Stub::async::UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* Scenes::Stub::PrepareAsyncUpdateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Scene, ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* Scenes::Stub::AsyncUpdateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scenes::Stub::CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateScene_, context, request, response);
}

void Scenes::Stub::async::CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateScene_, context, request, response, std::move(f));
}

void Scenes::Stub::async::CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* Scenes::Stub::PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::Scene, ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* Scenes::Stub::AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scenes::Stub::DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteScene_, context, request, response);
}

void Scenes::Stub::async::DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteScene_, context, request, response, std::move(f));
}

void Scenes::Stub::async::DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Scenes::Stub::PrepareAsyncDeleteSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Scenes::Stub::AsyncDeleteSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

Scenes::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenes_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenes::Service, ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scenes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::DeploySceneRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeployScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenes_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenes::Service, ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scenes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GetSceneRequest* req,
             ::ai::inworld::studio::v1alpha::Scene* resp) {
               return service->GetScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenes_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenes::Service, ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scenes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::ListScenesRequest* req,
             ::ai::inworld::studio::v1alpha::ListScenesResponse* resp) {
               return service->ListScenes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenes_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenes::Service, ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scenes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* req,
             ::ai::inworld::studio::v1alpha::Scene* resp) {
               return service->UpdateScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenes_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenes::Service, ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scenes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::CreateSceneRequest* req,
             ::ai::inworld::studio::v1alpha::Scene* resp) {
               return service->CreateScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scenes_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scenes::Service, ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scenes::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteScene(ctx, req, resp);
             }, this)));
}

Scenes::Service::~Service() {
}

::grpc::Status Scenes::Service::DeployScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenes::Service::GetScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenes::Service::ListScenes(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenes::Service::UpdateScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenes::Service::CreateScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scenes::Service::DeleteScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

