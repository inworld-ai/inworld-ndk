// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/errors.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
PROTOBUF_CONSTEXPR BadRequest_FieldViolation_MetadataEntry_DoNotUse::BadRequest_FieldViolation_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct BadRequest_FieldViolation_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BadRequest_FieldViolation_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BadRequest_FieldViolation_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BadRequest_FieldViolation_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadRequest_FieldViolation_MetadataEntry_DoNotUseDefaultTypeInternal _BadRequest_FieldViolation_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BadRequest_FieldViolation::BadRequest_FieldViolation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BadRequest_FieldViolationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BadRequest_FieldViolationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BadRequest_FieldViolationDefaultTypeInternal() {}
  union {
    BadRequest_FieldViolation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadRequest_FieldViolationDefaultTypeInternal _BadRequest_FieldViolation_default_instance_;
PROTOBUF_CONSTEXPR BadRequest::BadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_violations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BadRequestDefaultTypeInternal() {}
  union {
    BadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadRequestDefaultTypeInternal _BadRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto = nullptr;

const uint32_t TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::BadRequest, _impl_.field_violations_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::ai::inworld::studio::v1alpha::BadRequest_FieldViolation)},
  { 19, -1, -1, sizeof(::ai::inworld::studio::v1alpha::BadRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::studio::v1alpha::_BadRequest_FieldViolation_MetadataEntry_DoNotUse_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_BadRequest_FieldViolation_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_BadRequest_default_instance_._instance,
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&ai/inworld/studio/v1alpha/errors.proto"
  "\022\031ai.inworld.studio.v1alpha\"\232\002\n\nBadReque"
  "st\022N\n\020field_violations\030\001 \003(\01324.ai.inworl"
  "d.studio.v1alpha.BadRequest.FieldViolati"
  "on\032\273\001\n\016FieldViolation\022\r\n\005field\030\001 \001(\t\022\023\n\013"
  "description\030\002 \001(\t\022T\n\010metadata\030\003 \003(\0132B.ai"
  ".inworld.studio.v1alpha.BadRequest.Field"
  "Violation.MetadataEntry\032/\n\rMetadataEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\225\001\n\031ai."
  "inworld.studio.v1alphaB\013ErrorsProtoP\001ZMg"
  "ithub.com/inworld-ai/inworld/serving/grp"
  "c-gateway/build/proto/studio/v1alpha\252\002\031A"
  "i.Inworld.Studio.V1Alphab\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto = {
    false, false, 512, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto,
    "ai/inworld/studio/v1alpha/errors.proto",
    &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto::offsets,
    file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto,
    file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_getter() {
  return &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================

BadRequest_FieldViolation_MetadataEntry_DoNotUse::BadRequest_FieldViolation_MetadataEntry_DoNotUse() {}
BadRequest_FieldViolation_MetadataEntry_DoNotUse::BadRequest_FieldViolation_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BadRequest_FieldViolation_MetadataEntry_DoNotUse::MergeFrom(const BadRequest_FieldViolation_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BadRequest_FieldViolation_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto[0]);
}

// ===================================================================

class BadRequest_FieldViolation::_Internal {
 public:
};

BadRequest_FieldViolation::BadRequest_FieldViolation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BadRequest_FieldViolation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
}
BadRequest_FieldViolation::BadRequest_FieldViolation(const BadRequest_FieldViolation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BadRequest_FieldViolation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.field_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
}

inline void BadRequest_FieldViolation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.field_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BadRequest_FieldViolation::~BadRequest_FieldViolation() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BadRequest_FieldViolation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.field_.Destroy();
  _impl_.description_.Destroy();
}

void BadRequest_FieldViolation::ArenaDtor(void* object) {
  BadRequest_FieldViolation* _this = reinterpret_cast< BadRequest_FieldViolation* >(object);
  _this->_impl_.metadata_.Destruct();
}
void BadRequest_FieldViolation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BadRequest_FieldViolation::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.field_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BadRequest_FieldViolation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.BadRequest.FieldViolation.field"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.BadRequest.FieldViolation.description"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BadRequest_FieldViolation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.BadRequest.FieldViolation.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.BadRequest.FieldViolation.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // map<string, string> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = BadRequest_FieldViolation_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ai.inworld.studio.v1alpha.BadRequest.FieldViolation.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ai.inworld.studio.v1alpha.BadRequest.FieldViolation.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  return target;
}

size_t BadRequest_FieldViolation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += BadRequest_FieldViolation_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BadRequest_FieldViolation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BadRequest_FieldViolation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BadRequest_FieldViolation::GetClassData() const { return &_class_data_; }


void BadRequest_FieldViolation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BadRequest_FieldViolation*>(&to_msg);
  auto& from = static_cast<const BadRequest_FieldViolation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BadRequest_FieldViolation::CopyFrom(const BadRequest_FieldViolation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.BadRequest.FieldViolation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BadRequest_FieldViolation::IsInitialized() const {
  return true;
}

void BadRequest_FieldViolation::InternalSwap(BadRequest_FieldViolation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BadRequest_FieldViolation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto[1]);
}

// ===================================================================

class BadRequest::_Internal {
 public:
};

BadRequest::BadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.BadRequest)
}
BadRequest::BadRequest(const BadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_violations_){from._impl_.field_violations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.BadRequest)
}

inline void BadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_violations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BadRequest::~BadRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.BadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_violations_.~RepeatedPtrField();
}

void BadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.BadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_violations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ai.inworld.studio.v1alpha.BadRequest.FieldViolation field_violations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_violations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.BadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.BadRequest.FieldViolation field_violations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_violations_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_violations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.BadRequest)
  return target;
}

size_t BadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.BadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.BadRequest.FieldViolation field_violations = 1;
  total_size += 1UL * this->_internal_field_violations_size();
  for (const auto& msg : this->_impl_.field_violations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BadRequest::GetClassData() const { return &_class_data_; }


void BadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BadRequest*>(&to_msg);
  auto& from = static_cast<const BadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.BadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_violations_.MergeFrom(from._impl_.field_violations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BadRequest::CopyFrom(const BadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.BadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BadRequest::IsInitialized() const {
  return true;
}

void BadRequest::InternalSwap(BadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_violations_.InternalSwap(&other->_impl_.field_violations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ferrors_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::BadRequest_FieldViolation_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::BadRequest_FieldViolation*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::BadRequest_FieldViolation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::BadRequest_FieldViolation >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::BadRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::BadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::BadRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
