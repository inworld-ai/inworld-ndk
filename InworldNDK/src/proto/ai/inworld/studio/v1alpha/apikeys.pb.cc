// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/apikeys.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/apikeys.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
PROTOBUF_CONSTEXPR ApiKey_UsageLimits::ApiKey_UsageLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expiration_time_)*/nullptr
  , /*decltype(_impl_.daily_limit_seconds_amount_)*/int64_t{0}
  , /*decltype(_impl_.total_limit_seconds_amount_)*/int64_t{0}
  , /*decltype(_impl_.max_concurrent_sessions_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiKey_UsageLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiKey_UsageLimitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiKey_UsageLimitsDefaultTypeInternal() {}
  union {
    ApiKey_UsageLimits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiKey_UsageLimitsDefaultTypeInternal _ApiKey_UsageLimits_default_instance_;
PROTOBUF_CONSTEXPR ApiKey::ApiKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usage_limits_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiKeyDefaultTypeInternal() {}
  union {
    ApiKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiKeyDefaultTypeInternal _ApiKey_default_instance_;
PROTOBUF_CONSTEXPR GenerateApiKeyRequest::GenerateApiKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateApiKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateApiKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateApiKeyRequestDefaultTypeInternal() {}
  union {
    GenerateApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateApiKeyRequestDefaultTypeInternal _GenerateApiKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR ListApiKeysRequest::ListApiKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListApiKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListApiKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListApiKeysRequestDefaultTypeInternal() {}
  union {
    ListApiKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListApiKeysRequestDefaultTypeInternal _ListApiKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR SuspendApiKeyRequest::SuspendApiKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SuspendApiKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuspendApiKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuspendApiKeyRequestDefaultTypeInternal() {}
  union {
    SuspendApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuspendApiKeyRequestDefaultTypeInternal _SuspendApiKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR ActivateApiKeyRequest::ActivateApiKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivateApiKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivateApiKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivateApiKeyRequestDefaultTypeInternal() {}
  union {
    ActivateApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivateApiKeyRequestDefaultTypeInternal _ActivateApiKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteApiKeyRequest::DeleteApiKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteApiKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteApiKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteApiKeyRequestDefaultTypeInternal() {}
  union {
    DeleteApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteApiKeyRequestDefaultTypeInternal _DeleteApiKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR ListApiKeysResponse::ListApiKeysResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.api_keys_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListApiKeysResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListApiKeysResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListApiKeysResponseDefaultTypeInternal() {}
  union {
    ListApiKeysResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListApiKeysResponseDefaultTypeInternal _ListApiKeysResponse_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static ::_pb::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto = nullptr;

const uint32_t TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits, _impl_.max_concurrent_sessions_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits, _impl_.daily_limit_seconds_amount_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits, _impl_.total_limit_seconds_amount_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits, _impl_.expiration_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ApiKey, _impl_.usage_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, _impl_.parent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysRequest, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysResponse, _impl_.api_keys_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::ListApiKeysResponse, _impl_.next_page_token_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ApiKey_UsageLimits)},
  { 10, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ApiKey)},
  { 21, -1, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateApiKeyRequest)},
  { 28, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ListApiKeysRequest)},
  { 37, -1, -1, sizeof(::ai::inworld::studio::v1alpha::SuspendApiKeyRequest)},
  { 44, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ActivateApiKeyRequest)},
  { 51, -1, -1, sizeof(::ai::inworld::studio::v1alpha::DeleteApiKeyRequest)},
  { 58, -1, -1, sizeof(::ai::inworld::studio::v1alpha::ListApiKeysResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ai::inworld::studio::v1alpha::_ApiKey_UsageLimits_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ApiKey_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_GenerateApiKeyRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ListApiKeysRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_SuspendApiKeyRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ActivateApiKeyRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_DeleteApiKeyRequest_default_instance_._instance,
  &::ai::inworld::studio::v1alpha::_ListApiKeysResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'ai/inworld/studio/v1alpha/apikeys.prot"
  "o\022\031ai.inworld.studio.v1alpha\032\034google/api"
  "/annotations.proto\032\027google/api/client.pr"
  "oto\032\037google/api/field_behavior.proto\032\031go"
  "ogle/api/resource.proto\032\033google/protobuf"
  "/empty.proto\032\037google/protobuf/timestamp."
  "proto\032\roptions.proto\"\377\003\n\006ApiKey\022\014\n\004name\030"
  "\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\016\n\006secret\030\003 \001(\t\0226\n\005st"
  "ate\030\004 \001(\0162\'.ai.inworld.studio.v1alpha.Ap"
  "iKey.State\022C\n\014usage_limits\030\005 \001(\0132-.ai.in"
  "world.studio.v1alpha.ApiKey.UsageLimits\032"
  "\277\001\n\013UsageLimits\022$\n\027max_concurrent_sessio"
  "ns\030\001 \001(\005B\003\340A\001\022\'\n\032daily_limit_seconds_amo"
  "unt\030\002 \001(\003B\003\340A\001\022\'\n\032total_limit_seconds_am"
  "ount\030\003 \001(\003B\003\340A\001\0228\n\017expiration_time\030\004 \001(\013"
  "2\032.google.protobuf.TimestampB\003\340A\001\"F\n\005Sta"
  "te\022\025\n\021STATE_UNSPECIFIED\020\000\022\n\n\006ACTIVE\020\001\022\r\n"
  "\tSUSPENDED\020\002\022\013\n\007DELETED\020\003:C\352A@\n\025api.inwo"
  "rld.ai/ApiKey\022\'workspaces/{workspace}/ap"
  "ikeys/{apikey}\"d\n\025GenerateApiKeyRequest\022"
  "K\n\006parent\030\001 \001(\tB;\340A\002\372A\027\022\025api.inworld.ai/"
  "ApiKey\242\317\"\032\n\030\032\026workspaces/workspace-1\"\210\001\n"
  "\022ListApiKeysRequest\022K\n\006parent\030\001 \001(\tB;\340A\002"
  "\372A\027\022\025api.inworld.ai/ApiKey\242\317\"\032\n\030\032\026worksp"
  "aces/workspace-1\022\021\n\tpage_size\030\002 \001(\005\022\022\n\np"
  "age_token\030\003 \001(\t\"\217\001\n\024SuspendApiKeyRequest"
  "\022w\n\004name\030\001 \001(\tBi\340A\002\372A\027\n\025api.inworld.ai/A"
  "piKey\242\317\"H\nF\032Dworkspaces/workspace-1/apik"
  "eys/00000000-0000-0000-0000-100000000000"
  "0\"\220\001\n\025ActivateApiKeyRequest\022w\n\004name\030\001 \001("
  "\tBi\340A\002\372A\027\n\025api.inworld.ai/ApiKey\242\317\"H\nF\032D"
  "workspaces/workspace-1/apikeys/00000000-"
  "0000-0000-0000-1000000000000\"\216\001\n\023DeleteA"
  "piKeyRequest\022w\n\004name\030\001 \001(\tBi\340A\002\372A\027\n\025api."
  "inworld.ai/ApiKey\242\317\"H\nF\032Dworkspaces/work"
  "space-1/apikeys/00000000-0000-0000-0000-"
  "1000000000000\"c\n\023ListApiKeysResponse\0223\n\010"
  "api_keys\030\001 \003(\0132!.ai.inworld.studio.v1alp"
  "ha.ApiKey\022\027\n\017next_page_token\030\002 \001(\t2\300\006\n\007A"
  "piKeys\022\245\001\n\013ListApiKeys\022-.ai.inworld.stud"
  "io.v1alpha.ListApiKeysRequest\032..ai.inwor"
  "ld.studio.v1alpha.ListApiKeysResponse\"7\202"
  "\323\344\223\002(\022&/v1alpha/{parent=workspaces/*}/ap"
  "ikeys\332A\006parent\022\245\001\n\rSuspendApiKey\022/.ai.in"
  "world.studio.v1alpha.SuspendApiKeyReques"
  "t\032!.ai.inworld.studio.v1alpha.ApiKey\"@\202\323"
  "\344\223\0023\"./v1alpha/{name=workspaces/*/apikey"
  "s/*}:suspend:\001*\332A\004name\022\250\001\n\016ActivateApiKe"
  "y\0220.ai.inworld.studio.v1alpha.ActivateAp"
  "iKeyRequest\032!.ai.inworld.studio.v1alpha."
  "ApiKey\"A\202\323\344\223\0024\"//v1alpha/{name=workspace"
  "s/*/apikeys/*}:activate:\001*\332A\004name\022\215\001\n\014De"
  "leteApiKey\022..ai.inworld.studio.v1alpha.D"
  "eleteApiKeyRequest\032\026.google.protobuf.Emp"
  "ty\"5\202\323\344\223\002(*&/v1alpha/{name=workspaces/*/"
  "apikeys/*}\332A\004name\022\251\001\n\016GenerateApiKey\0220.a"
  "i.inworld.studio.v1alpha.GenerateApiKeyR"
  "equest\032!.ai.inworld.studio.v1alpha.ApiKe"
  "y\"B\202\323\344\223\0023\"./v1alpha/{parent=workspaces/*"
  "}/apikey:generate:\001*\332A\006parentB\226\001\n\031ai.inw"
  "orld.studio.v1alphaB\014ApiKeysProtoP\001ZMgit"
  "hub.com/inworld-ai/inworld/serving/grpc-"
  "gateway/build/proto/studio/v1alpha\252\002\031Ai."
  "Inworld.Studio.V1Alphab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_options_2eproto,
};
static ::_pbi::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto = {
    false, false, 2550, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto,
    "ai/inworld/studio/v1alpha/apikeys.proto",
    &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_deps, 7, 8,
    schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto::offsets,
    file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto,
    file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter() {
  return &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApiKey_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[0];
}
bool ApiKey_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ApiKey_State ApiKey::STATE_UNSPECIFIED;
constexpr ApiKey_State ApiKey::ACTIVE;
constexpr ApiKey_State ApiKey::SUSPENDED;
constexpr ApiKey_State ApiKey::DELETED;
constexpr ApiKey_State ApiKey::State_MIN;
constexpr ApiKey_State ApiKey::State_MAX;
constexpr int ApiKey::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ApiKey_UsageLimits::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time(const ApiKey_UsageLimits* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ApiKey_UsageLimits::_Internal::expiration_time(const ApiKey_UsageLimits* msg) {
  return *msg->_impl_.expiration_time_;
}
void ApiKey_UsageLimits::clear_expiration_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
}
ApiKey_UsageLimits::ApiKey_UsageLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
}
ApiKey_UsageLimits::ApiKey_UsageLimits(const ApiKey_UsageLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApiKey_UsageLimits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.daily_limit_seconds_amount_){}
    , decltype(_impl_.total_limit_seconds_amount_){}
    , decltype(_impl_.max_concurrent_sessions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expiration_time()) {
    _this->_impl_.expiration_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiration_time_);
  }
  ::memcpy(&_impl_.daily_limit_seconds_amount_, &from._impl_.daily_limit_seconds_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_concurrent_sessions_) -
    reinterpret_cast<char*>(&_impl_.daily_limit_seconds_amount_)) + sizeof(_impl_.max_concurrent_sessions_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
}

inline void ApiKey_UsageLimits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.daily_limit_seconds_amount_){int64_t{0}}
    , decltype(_impl_.total_limit_seconds_amount_){int64_t{0}}
    , decltype(_impl_.max_concurrent_sessions_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ApiKey_UsageLimits::~ApiKey_UsageLimits() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiKey_UsageLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expiration_time_;
}

void ApiKey_UsageLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiKey_UsageLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
  ::memset(&_impl_.daily_limit_seconds_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_concurrent_sessions_) -
      reinterpret_cast<char*>(&_impl_.daily_limit_seconds_amount_)) + sizeof(_impl_.max_concurrent_sessions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiKey_UsageLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_concurrent_sessions = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_concurrent_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 daily_limit_seconds_amount = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.daily_limit_seconds_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_limit_seconds_amount = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_limit_seconds_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_time = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiKey_UsageLimits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_concurrent_sessions = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_max_concurrent_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_concurrent_sessions(), target);
  }

  // int64 daily_limit_seconds_amount = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_daily_limit_seconds_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_daily_limit_seconds_amount(), target);
  }

  // int64 total_limit_seconds_amount = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_total_limit_seconds_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_limit_seconds_amount(), target);
  }

  // .google.protobuf.Timestamp expiration_time = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_expiration_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expiration_time(this),
        _Internal::expiration_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  return target;
}

size_t ApiKey_UsageLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp expiration_time = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_time_);
  }

  // int64 daily_limit_seconds_amount = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_daily_limit_seconds_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_daily_limit_seconds_amount());
  }

  // int64 total_limit_seconds_amount = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_total_limit_seconds_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_limit_seconds_amount());
  }

  // int32 max_concurrent_sessions = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_max_concurrent_sessions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_concurrent_sessions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiKey_UsageLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiKey_UsageLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiKey_UsageLimits::GetClassData() const { return &_class_data_; }


void ApiKey_UsageLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiKey_UsageLimits*>(&to_msg);
  auto& from = static_cast<const ApiKey_UsageLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expiration_time()) {
    _this->_internal_mutable_expiration_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiration_time());
  }
  if (from._internal_daily_limit_seconds_amount() != 0) {
    _this->_internal_set_daily_limit_seconds_amount(from._internal_daily_limit_seconds_amount());
  }
  if (from._internal_total_limit_seconds_amount() != 0) {
    _this->_internal_set_total_limit_seconds_amount(from._internal_total_limit_seconds_amount());
  }
  if (from._internal_max_concurrent_sessions() != 0) {
    _this->_internal_set_max_concurrent_sessions(from._internal_max_concurrent_sessions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiKey_UsageLimits::CopyFrom(const ApiKey_UsageLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ApiKey.UsageLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiKey_UsageLimits::IsInitialized() const {
  return true;
}

void ApiKey_UsageLimits::InternalSwap(ApiKey_UsageLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApiKey_UsageLimits, _impl_.max_concurrent_sessions_)
      + sizeof(ApiKey_UsageLimits::_impl_.max_concurrent_sessions_)
      - PROTOBUF_FIELD_OFFSET(ApiKey_UsageLimits, _impl_.expiration_time_)>(
          reinterpret_cast<char*>(&_impl_.expiration_time_),
          reinterpret_cast<char*>(&other->_impl_.expiration_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiKey_UsageLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[0]);
}

// ===================================================================

class ApiKey::_Internal {
 public:
  static const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits& usage_limits(const ApiKey* msg);
};

const ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits&
ApiKey::_Internal::usage_limits(const ApiKey* msg) {
  return *msg->_impl_.usage_limits_;
}
ApiKey::ApiKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ApiKey)
}
ApiKey::ApiKey(const ApiKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApiKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.usage_limits_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_usage_limits()) {
    _this->_impl_.usage_limits_ = new ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits(*from._impl_.usage_limits_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ApiKey)
}

inline void ApiKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.usage_limits_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApiKey::~ApiKey() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ApiKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.key_.Destroy();
  _impl_.secret_.Destroy();
  if (this != internal_default_instance()) delete _impl_.usage_limits_;
}

void ApiKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ApiKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.usage_limits_ != nullptr) {
    delete _impl_.usage_limits_;
  }
  _impl_.usage_limits_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ApiKey.name"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ApiKey.key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ApiKey.secret"));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ai::inworld::studio::v1alpha::ApiKey_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .ai.inworld.studio.v1alpha.ApiKey.UsageLimits usage_limits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ApiKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ApiKey.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ApiKey.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string secret = 3;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ApiKey.secret");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secret(), target);
  }

  // .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // .ai.inworld.studio.v1alpha.ApiKey.UsageLimits usage_limits = 5;
  if (this->_internal_has_usage_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::usage_limits(this),
        _Internal::usage_limits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ApiKey)
  return target;
}

size_t ApiKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ApiKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string secret = 3;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // .ai.inworld.studio.v1alpha.ApiKey.UsageLimits usage_limits = 5;
  if (this->_internal_has_usage_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usage_limits_);
  }

  // .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiKey::GetClassData() const { return &_class_data_; }


void ApiKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiKey*>(&to_msg);
  auto& from = static_cast<const ApiKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ApiKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (from._internal_has_usage_limits()) {
    _this->_internal_mutable_usage_limits()->::ai::inworld::studio::v1alpha::ApiKey_UsageLimits::MergeFrom(
        from._internal_usage_limits());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiKey::CopyFrom(const ApiKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ApiKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiKey::IsInitialized() const {
  return true;
}

void ApiKey::InternalSwap(ApiKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApiKey, _impl_.state_)
      + sizeof(ApiKey::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ApiKey, _impl_.usage_limits_)>(
          reinterpret_cast<char*>(&_impl_.usage_limits_),
          reinterpret_cast<char*>(&other->_impl_.usage_limits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[1]);
}

// ===================================================================

class GenerateApiKeyRequest::_Internal {
 public:
};

GenerateApiKeyRequest::GenerateApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
}
GenerateApiKeyRequest::GenerateApiKeyRequest(const GenerateApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateApiKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    _this->_impl_.parent_.Set(from._internal_parent(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
}

inline void GenerateApiKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateApiKeyRequest::~GenerateApiKeyRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_.Destroy();
}

void GenerateApiKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateApiKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateApiKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  return target;
}

size_t GenerateApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateApiKeyRequest::GetClassData() const { return &_class_data_; }


void GenerateApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateApiKeyRequest*>(&to_msg);
  auto& from = static_cast<const GenerateApiKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _this->_internal_set_parent(from._internal_parent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateApiKeyRequest::CopyFrom(const GenerateApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateApiKeyRequest::IsInitialized() const {
  return true;
}

void GenerateApiKeyRequest::InternalSwap(GenerateApiKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_, lhs_arena,
      &other->_impl_.parent_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateApiKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[2]);
}

// ===================================================================

class ListApiKeysRequest::_Internal {
 public:
};

ListApiKeysRequest::ListApiKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ListApiKeysRequest)
}
ListApiKeysRequest::ListApiKeysRequest(const ListApiKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListApiKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    _this->_impl_.parent_.Set(from._internal_parent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ListApiKeysRequest)
}

inline void ListApiKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListApiKeysRequest::~ListApiKeysRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListApiKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_.Destroy();
  _impl_.page_token_.Destroy();
}

void ListApiKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListApiKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListApiKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListApiKeysRequest.parent"));
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListApiKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListApiKeysRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  return target;
}

size_t ListApiKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListApiKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListApiKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListApiKeysRequest::GetClassData() const { return &_class_data_; }


void ListApiKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListApiKeysRequest*>(&to_msg);
  auto& from = static_cast<const ListApiKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _this->_internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListApiKeysRequest::CopyFrom(const ListApiKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ListApiKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListApiKeysRequest::IsInitialized() const {
  return true;
}

void ListApiKeysRequest::InternalSwap(ListApiKeysRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_, lhs_arena,
      &other->_impl_.parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  swap(_impl_.page_size_, other->_impl_.page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListApiKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[3]);
}

// ===================================================================

class SuspendApiKeyRequest::_Internal {
 public:
};

SuspendApiKeyRequest::SuspendApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
}
SuspendApiKeyRequest::SuspendApiKeyRequest(const SuspendApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SuspendApiKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
}

inline void SuspendApiKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SuspendApiKeyRequest::~SuspendApiKeyRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SuspendApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SuspendApiKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SuspendApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuspendApiKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SuspendApiKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  return target;
}

size_t SuspendApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SuspendApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SuspendApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SuspendApiKeyRequest::GetClassData() const { return &_class_data_; }


void SuspendApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SuspendApiKeyRequest*>(&to_msg);
  auto& from = static_cast<const SuspendApiKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SuspendApiKeyRequest::CopyFrom(const SuspendApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuspendApiKeyRequest::IsInitialized() const {
  return true;
}

void SuspendApiKeyRequest::InternalSwap(SuspendApiKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SuspendApiKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[4]);
}

// ===================================================================

class ActivateApiKeyRequest::_Internal {
 public:
};

ActivateApiKeyRequest::ActivateApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
}
ActivateApiKeyRequest::ActivateApiKeyRequest(const ActivateApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivateApiKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
}

inline void ActivateApiKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivateApiKeyRequest::~ActivateApiKeyRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivateApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ActivateApiKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivateApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateApiKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateApiKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  return target;
}

size_t ActivateApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivateApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateApiKeyRequest::GetClassData() const { return &_class_data_; }


void ActivateApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivateApiKeyRequest*>(&to_msg);
  auto& from = static_cast<const ActivateApiKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateApiKeyRequest::CopyFrom(const ActivateApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateApiKeyRequest::IsInitialized() const {
  return true;
}

void ActivateApiKeyRequest::InternalSwap(ActivateApiKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateApiKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[5]);
}

// ===================================================================

class DeleteApiKeyRequest::_Internal {
 public:
};

DeleteApiKeyRequest::DeleteApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
}
DeleteApiKeyRequest::DeleteApiKeyRequest(const DeleteApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteApiKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
}

inline void DeleteApiKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteApiKeyRequest::~DeleteApiKeyRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeleteApiKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteApiKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteApiKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  return target;
}

size_t DeleteApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteApiKeyRequest::GetClassData() const { return &_class_data_; }


void DeleteApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteApiKeyRequest*>(&to_msg);
  auto& from = static_cast<const DeleteApiKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteApiKeyRequest::CopyFrom(const DeleteApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteApiKeyRequest::IsInitialized() const {
  return true;
}

void DeleteApiKeyRequest::InternalSwap(DeleteApiKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteApiKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[6]);
}

// ===================================================================

class ListApiKeysResponse::_Internal {
 public:
};

ListApiKeysResponse::ListApiKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.ListApiKeysResponse)
}
ListApiKeysResponse::ListApiKeysResponse(const ListApiKeysResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListApiKeysResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.api_keys_){from._impl_.api_keys_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.ListApiKeysResponse)
}

inline void ListApiKeysResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.api_keys_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListApiKeysResponse::~ListApiKeysResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListApiKeysResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.api_keys_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListApiKeysResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListApiKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.api_keys_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListApiKeysResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_api_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListApiKeysResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_api_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_api_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  return target;
}

size_t ListApiKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
  total_size += 1UL * this->_internal_api_keys_size();
  for (const auto& msg : this->_impl_.api_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListApiKeysResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListApiKeysResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListApiKeysResponse::GetClassData() const { return &_class_data_; }


void ListApiKeysResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListApiKeysResponse*>(&to_msg);
  auto& from = static_cast<const ListApiKeysResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.api_keys_.MergeFrom(from._impl_.api_keys_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListApiKeysResponse::CopyFrom(const ListApiKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.ListApiKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListApiKeysResponse::IsInitialized() const {
  return true;
}

void ListApiKeysResponse::InternalSwap(ListApiKeysResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.api_keys_.InternalSwap(&other->_impl_.api_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListApiKeysResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_getter, &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto_once,
      file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2fapikeys_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ApiKey_UsageLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ApiKey*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ApiKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ApiKey >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ListApiKeysRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ListApiKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ListApiKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::ListApiKeysResponse*
Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::ListApiKeysResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::ListApiKeysResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
