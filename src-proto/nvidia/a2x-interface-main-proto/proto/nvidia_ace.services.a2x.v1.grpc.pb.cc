#include "ProtoDisableWarning.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia/a2x-interface-main-proto/proto/nvidia_ace.services.a2x.v1.proto

#include "nvidia/a2x-interface-main-proto/proto/nvidia_ace.services.a2x.v1.pb.h"
#include "nvidia/a2x-interface-main-proto/proto/nvidia_ace.services.a2x.v1.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nvidia_ace {
namespace services {
namespace a2x {
namespace v1 {

static const char* A2XService_method_names[] = {
  "/nvidia_ace.services.a2x.v1.A2XService/PushAudioStream",
};

std::unique_ptr< A2XService::Stub> A2XService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< A2XService::Stub> stub(new A2XService::Stub(channel));
  return stub;
}

A2XService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushAudioStream_(A2XService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::nvidia_ace::a2x::v1::AudioStream>* A2XService::Stub::PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) {
  return ::grpc::internal::ClientWriterFactory< ::nvidia_ace::a2x::v1::AudioStream>::Create(channel_.get(), rpcmethod_PushAudioStream_, context, response);
}

void A2XService::Stub::experimental_async::PushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::experimental::ClientWriteReactor< ::nvidia_ace::a2x::v1::AudioStream>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::nvidia_ace::a2x::v1::AudioStream>::Create(stub_->channel_.get(), stub_->rpcmethod_PushAudioStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::nvidia_ace::a2x::v1::AudioStream>* A2XService::Stub::AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia_ace::a2x::v1::AudioStream>::Create(channel_.get(), cq, rpcmethod_PushAudioStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::nvidia_ace::a2x::v1::AudioStream>* A2XService::Stub::PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::nvidia_ace::a2x::v1::AudioStream>::Create(channel_.get(), cq, rpcmethod_PushAudioStream_, context, response, false, nullptr);
}

A2XService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      A2XService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< A2XService::Service, ::nvidia_ace::a2x::v1::AudioStream, ::nvidia_ace::status::v1::Status>(
          [](A2XService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::nvidia_ace::a2x::v1::AudioStream>* reader,
             ::nvidia_ace::status::v1::Status* resp) {
               return service->PushAudioStream(ctx, reader, resp);
             }, this)));
}

A2XService::Service::~Service() {
}

::grpc::Status A2XService::Service::PushAudioStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia_ace::a2x::v1::AudioStream>* reader, ::nvidia_ace::status::v1::Status* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvidia_ace
}  // namespace services
}  // namespace a2x
}  // namespace v1

