#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.animation_data.v1.proto

#include "nvidia/a2f/nvidia_ace.animation_data.v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnimationData_MetadataEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimationIds_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto;
namespace nvidia_ace {
namespace animation_data {
namespace v1 {
class AnimationDataStreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationDataStreamHeader> _instance;
} _AnimationDataStreamHeader_default_instance_;
class AnimationDataStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationDataStream> _instance;
} _AnimationDataStream_default_instance_;
class AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationData_MetadataEntry_DoNotUse> _instance;
} _AnimationData_MetadataEntry_DoNotUse_default_instance_;
class AnimationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationData> _instance;
} _AnimationData_default_instance_;
class AudioWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioWithTimeCode> _instance;
} _AudioWithTimeCode_default_instance_;
class SkelAnimationHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkelAnimationHeader> _instance;
} _SkelAnimationHeader_default_instance_;
class SkelAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkelAnimation> _instance;
} _SkelAnimation_default_instance_;
class CameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Camera> _instance;
} _Camera_default_instance_;
class FloatArrayWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatArrayWithTimeCode> _instance;
} _FloatArrayWithTimeCode_default_instance_;
class Float3ArrayWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float3ArrayWithTimeCode> _instance;
} _Float3ArrayWithTimeCode_default_instance_;
class QuatFArrayWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuatFArrayWithTimeCode> _instance;
} _QuatFArrayWithTimeCode_default_instance_;
class Float3WithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float3WithTimeCode> _instance;
} _Float3WithTimeCode_default_instance_;
class QuatFWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuatFWithTimeCode> _instance;
} _QuatFWithTimeCode_default_instance_;
class FloatWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatWithTimeCode> _instance;
} _FloatWithTimeCode_default_instance_;
class QuatFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuatF> _instance;
} _QuatF_default_instance_;
class Float3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float3> _instance;
} _Float3_default_instance_;
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace
static void InitDefaultsscc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_AnimationData_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::AnimationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_AnimationData_MetadataEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AnimationData_MetadataEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_AnimationData_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnimationData_MetadataEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnimationData_MetadataEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_AnimationDataStream_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::AnimationDataStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_Status_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_AnimationDataStreamHeader_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_AnimationIds_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto.base,
      &scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto.base,
      &scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_AudioWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::AudioWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_Camera_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::Camera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_Float3_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::Float3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_Float3ArrayWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_Float3WithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::Float3WithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_FloatArrayWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_FloatWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::FloatWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_QuatF_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::QuatF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_QuatFArrayWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_QuatFWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::QuatFWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_SkelAnimation_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::SkelAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {
      &scc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_;
    new (ptr) ::nvidia_ace::animation_data::v1::SkelAnimationHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, animation_ids_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, source_service_id_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, audio_header_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, skel_animation_header_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, start_time_code_since_epoch_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, stream_part_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, skel_animation_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, audio_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, camera_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, metadata_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AudioWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AudioWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AudioWithTimeCode, audio_buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimationHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimationHeader, blend_shapes_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimationHeader, joints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, blend_shape_weights_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, translations_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, rotations_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, scales_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, position_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, rotation_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, focal_length_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, focus_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatWithTimeCode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, real_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, i_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, j_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, x_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, y_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader)},
  { 15, -1, sizeof(::nvidia_ace::animation_data::v1::AnimationDataStream)},
  { 24, 31, sizeof(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse)},
  { 33, 42, sizeof(::nvidia_ace::animation_data::v1::AnimationData)},
  { 46, -1, sizeof(::nvidia_ace::animation_data::v1::AudioWithTimeCode)},
  { 53, -1, sizeof(::nvidia_ace::animation_data::v1::SkelAnimationHeader)},
  { 60, -1, sizeof(::nvidia_ace::animation_data::v1::SkelAnimation)},
  { 69, -1, sizeof(::nvidia_ace::animation_data::v1::Camera)},
  { 78, -1, sizeof(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode)},
  { 85, -1, sizeof(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode)},
  { 92, -1, sizeof(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode)},
  { 99, -1, sizeof(::nvidia_ace::animation_data::v1::Float3WithTimeCode)},
  { 106, -1, sizeof(::nvidia_ace::animation_data::v1::QuatFWithTimeCode)},
  { 113, -1, sizeof(::nvidia_ace::animation_data::v1::FloatWithTimeCode)},
  { 120, -1, sizeof(::nvidia_ace::animation_data::v1::QuatF)},
  { 129, -1, sizeof(::nvidia_ace::animation_data::v1::Float3)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_AnimationDataStreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_AnimationDataStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_AnimationData_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_AnimationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_AudioWithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_SkelAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_FloatArrayWithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_Float3ArrayWithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_QuatFArrayWithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_Float3WithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_QuatFWithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_FloatWithTimeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_QuatF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::animation_data::v1::_Float3_default_instance_),
};

const char descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-nvidia/a2f/nvidia_ace.animation_data.v"
  "1.proto\022\034nvidia_ace.animation_data.v1\032+n"
  "vidia/a2f/nvidia_ace.animation_id.v1.pro"
  "to\032$nvidia/a2f/nvidia_ace.audio.v1.proto"
  "\032%nvidia/a2f/nvidia_ace.status.v1.proto\032"
  "\031google/protobuf/any.proto\"\366\002\n\031Animation"
  "DataStreamHeader\022\?\n\ranimation_ids\030\001 \001(\0132"
  "(.nvidia_ace.animation_id.v1.AnimationId"
  "s\022\036\n\021source_service_id\030\002 \001(\tH\000\210\001\001\022;\n\014aud"
  "io_header\030\003 \001(\0132 .nvidia_ace.audio.v1.Au"
  "dioHeaderH\001\210\001\001\022U\n\025skel_animation_header\030"
  "\004 \001(\01321.nvidia_ace.animation_data.v1.Ske"
  "lAnimationHeaderH\002\210\001\001\022#\n\033start_time_code"
  "_since_epoch\030\005 \001(\001B\024\n\022_source_service_id"
  "B\017\n\r_audio_headerB\030\n\026_skel_animation_hea"
  "der\"\374\001\n\023AnimationDataStream\022_\n\034animation"
  "_data_stream_header\030\001 \001(\01327.nvidia_ace.a"
  "nimation_data.v1.AnimationDataStreamHead"
  "erH\000\022E\n\016animation_data\030\002 \001(\0132+.nvidia_ac"
  "e.animation_data.v1.AnimationDataH\000\022.\n\006s"
  "tatus\030\003 \001(\0132\034.nvidia_ace.status.v1.Statu"
  "sH\000B\r\n\013stream_part\"\225\003\n\rAnimationData\022H\n\016"
  "skel_animation\030\001 \001(\0132+.nvidia_ace.animat"
  "ion_data.v1.SkelAnimationH\000\210\001\001\022C\n\005audio\030"
  "\002 \001(\0132/.nvidia_ace.animation_data.v1.Aud"
  "ioWithTimeCodeH\001\210\001\001\0229\n\006camera\030\003 \001(\0132$.nv"
  "idia_ace.animation_data.v1.CameraH\002\210\001\001\022K"
  "\n\010metadata\030\004 \003(\01329.nvidia_ace.animation_"
  "data.v1.AnimationData.MetadataEntry\032E\n\rM"
  "etadataEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\013"
  "2\024.google.protobuf.Any:\0028\001B\021\n\017_skel_anim"
  "ationB\010\n\006_audioB\t\n\007_camera\"<\n\021AudioWithT"
  "imeCode\022\021\n\ttime_code\030\001 \001(\001\022\024\n\014audio_buff"
  "er\030\002 \001(\014\";\n\023SkelAnimationHeader\022\024\n\014blend"
  "_shapes\030\001 \003(\t\022\016\n\006joints\030\002 \003(\t\"\277\002\n\rSkelAn"
  "imation\022Q\n\023blend_shape_weights\030\001 \003(\01324.n"
  "vidia_ace.animation_data.v1.FloatArrayWi"
  "thTimeCode\022K\n\014translations\030\002 \003(\01325.nvidi"
  "a_ace.animation_data.v1.Float3ArrayWithT"
  "imeCode\022G\n\trotations\030\003 \003(\01324.nvidia_ace."
  "animation_data.v1.QuatFArrayWithTimeCode"
  "\022E\n\006scales\030\004 \003(\01325.nvidia_ace.animation_"
  "data.v1.Float3ArrayWithTimeCode\"\237\002\n\006Came"
  "ra\022B\n\010position\030\001 \003(\01320.nvidia_ace.animat"
  "ion_data.v1.Float3WithTimeCode\022A\n\010rotati"
  "on\030\002 \003(\0132/.nvidia_ace.animation_data.v1."
  "QuatFWithTimeCode\022E\n\014focal_length\030\003 \003(\0132"
  "/.nvidia_ace.animation_data.v1.FloatWith"
  "TimeCode\022G\n\016focus_distance\030\004 \003(\0132/.nvidi"
  "a_ace.animation_data.v1.FloatWithTimeCod"
  "e\";\n\026FloatArrayWithTimeCode\022\021\n\ttime_code"
  "\030\001 \001(\001\022\016\n\006values\030\002 \003(\002\"b\n\027Float3ArrayWit"
  "hTimeCode\022\021\n\ttime_code\030\001 \001(\001\0224\n\006values\030\002"
  " \003(\0132$.nvidia_ace.animation_data.v1.Floa"
  "t3\"`\n\026QuatFArrayWithTimeCode\022\021\n\ttime_cod"
  "e\030\001 \001(\001\0223\n\006values\030\002 \003(\0132#.nvidia_ace.ani"
  "mation_data.v1.QuatF\"\\\n\022Float3WithTimeCo"
  "de\022\021\n\ttime_code\030\001 \001(\001\0223\n\005value\030\002 \001(\0132$.n"
  "vidia_ace.animation_data.v1.Float3\"Z\n\021Qu"
  "atFWithTimeCode\022\021\n\ttime_code\030\001 \001(\001\0222\n\005va"
  "lue\030\002 \001(\0132#.nvidia_ace.animation_data.v1"
  ".QuatF\"5\n\021FloatWithTimeCode\022\021\n\ttime_code"
  "\030\001 \001(\001\022\r\n\005value\030\002 \001(\002\"6\n\005QuatF\022\014\n\004real\030\001"
  " \001(\002\022\t\n\001i\030\002 \001(\002\022\t\n\001j\030\003 \001(\002\022\t\n\001k\030\004 \001(\002\")\n"
  "\006Float3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto_sccs[16] = {
  &scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_AnimationData_MetadataEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
  &scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto = {
  false, false, descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto, "nvidia/a2f/nvidia_ace.animation_data.v1.proto", 2608,
  &descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto_once, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto_sccs, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto_deps, 16, 4,
  schemas, file_default_instances, TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto::offsets,
  file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto, 16, file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto, file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto)), true);
namespace nvidia_ace {
namespace animation_data {
namespace v1 {

// ===================================================================

class AnimationDataStreamHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationDataStreamHeader>()._has_bits_);
  static const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids(const AnimationDataStreamHeader* msg);
  static void set_has_source_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nvidia_ace::audio::v1::AudioHeader& audio_header(const AnimationDataStreamHeader* msg);
  static void set_has_audio_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& skel_animation_header(const AnimationDataStreamHeader* msg);
  static void set_has_skel_animation_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::nvidia_ace::animation_id::v1::AnimationIds&
AnimationDataStreamHeader::_Internal::animation_ids(const AnimationDataStreamHeader* msg) {
  return *msg->animation_ids_;
}
const ::nvidia_ace::audio::v1::AudioHeader&
AnimationDataStreamHeader::_Internal::audio_header(const AnimationDataStreamHeader* msg) {
  return *msg->audio_header_;
}
const ::nvidia_ace::animation_data::v1::SkelAnimationHeader&
AnimationDataStreamHeader::_Internal::skel_animation_header(const AnimationDataStreamHeader* msg) {
  return *msg->skel_animation_header_;
}
void AnimationDataStreamHeader::clear_animation_ids() {
  if (GetArena() == nullptr && animation_ids_ != nullptr) {
    delete animation_ids_;
  }
  animation_ids_ = nullptr;
}
void AnimationDataStreamHeader::clear_audio_header() {
  if (GetArena() == nullptr && audio_header_ != nullptr) {
    delete audio_header_;
  }
  audio_header_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
AnimationDataStreamHeader::AnimationDataStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
}
AnimationDataStreamHeader::AnimationDataStreamHeader(const AnimationDataStreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_service_id()) {
    source_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_service_id(), 
      GetArena());
  }
  if (from._internal_has_animation_ids()) {
    animation_ids_ = new ::nvidia_ace::animation_id::v1::AnimationIds(*from.animation_ids_);
  } else {
    animation_ids_ = nullptr;
  }
  if (from._internal_has_audio_header()) {
    audio_header_ = new ::nvidia_ace::audio::v1::AudioHeader(*from.audio_header_);
  } else {
    audio_header_ = nullptr;
  }
  if (from._internal_has_skel_animation_header()) {
    skel_animation_header_ = new ::nvidia_ace::animation_data::v1::SkelAnimationHeader(*from.skel_animation_header_);
  } else {
    skel_animation_header_ = nullptr;
  }
  start_time_code_since_epoch_ = from.start_time_code_since_epoch_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
}

void AnimationDataStreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  source_service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&animation_ids_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_code_since_epoch_) -
      reinterpret_cast<char*>(&animation_ids_)) + sizeof(start_time_code_since_epoch_));
}

AnimationDataStreamHeader::~AnimationDataStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimationDataStreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_service_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete animation_ids_;
  if (this != internal_default_instance()) delete audio_header_;
  if (this != internal_default_instance()) delete skel_animation_header_;
}

void AnimationDataStreamHeader::ArenaDtor(void* object) {
  AnimationDataStreamHeader* _this = reinterpret_cast< AnimationDataStreamHeader* >(object);
  (void)_this;
}
void AnimationDataStreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationDataStreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationDataStreamHeader& AnimationDataStreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AnimationDataStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    source_service_id_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && animation_ids_ != nullptr) {
    delete animation_ids_;
  }
  animation_ids_ = nullptr;
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && audio_header_ != nullptr) {
        delete audio_header_;
      }
      audio_header_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && skel_animation_header_ != nullptr) {
        delete skel_animation_header_;
      }
      skel_animation_header_ = nullptr;
    }
  }
  start_time_code_since_epoch_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationDataStreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_service_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_service_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_skel_animation_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_time_code_since_epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          start_time_code_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationDataStreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  if (this->has_animation_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::animation_ids(this), target, stream);
  }

  // string source_service_id = 2;
  if (_internal_has_source_service_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_service_id().data(), static_cast<int>(this->_internal_source_service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_service_id(), target);
  }

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
  if (_internal_has_audio_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::audio_header(this), target, stream);
  }

  // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
  if (_internal_has_skel_animation_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::skel_animation_header(this), target, stream);
  }

  // double start_time_code_since_epoch = 5;
  if (!(this->start_time_code_since_epoch() <= 0 && this->start_time_code_since_epoch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_start_time_code_since_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  return target;
}

size_t AnimationDataStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_service_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_service_id());
  }

  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  if (this->has_animation_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animation_ids_);
  }

  if (cached_has_bits & 0x00000006u) {
    // .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_header_);
    }

    // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skel_animation_header_);
    }

  }
  // double start_time_code_since_epoch = 5;
  if (!(this->start_time_code_since_epoch() <= 0 && this->start_time_code_since_epoch() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationDataStreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationDataStreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationDataStreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
    MergeFrom(*source);
  }
}

void AnimationDataStreamHeader::MergeFrom(const AnimationDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_service_id()) {
    _internal_set_source_service_id(from._internal_source_service_id());
  }
  if (from.has_animation_ids()) {
    _internal_mutable_animation_ids()->::nvidia_ace::animation_id::v1::AnimationIds::MergeFrom(from._internal_animation_ids());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_audio_header()->::nvidia_ace::audio::v1::AudioHeader::MergeFrom(from._internal_audio_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_skel_animation_header()->::nvidia_ace::animation_data::v1::SkelAnimationHeader::MergeFrom(from._internal_skel_animation_header());
    }
  }
  if (!(from.start_time_code_since_epoch() <= 0 && from.start_time_code_since_epoch() >= 0)) {
    _internal_set_start_time_code_since_epoch(from._internal_start_time_code_since_epoch());
  }
}

void AnimationDataStreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationDataStreamHeader::CopyFrom(const AnimationDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationDataStreamHeader::IsInitialized() const {
  return true;
}

void AnimationDataStreamHeader::InternalSwap(AnimationDataStreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_service_id_.Swap(&other->source_service_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, start_time_code_since_epoch_)
      + sizeof(AnimationDataStreamHeader::start_time_code_since_epoch_)
      - PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, animation_ids_)>(
          reinterpret_cast<char*>(&animation_ids_),
          reinterpret_cast<char*>(&other->animation_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationDataStreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnimationDataStream::_Internal {
 public:
  static const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& animation_data_stream_header(const AnimationDataStream* msg);
  static const ::nvidia_ace::animation_data::v1::AnimationData& animation_data(const AnimationDataStream* msg);
  static const ::nvidia_ace::status::v1::Status& status(const AnimationDataStream* msg);
};

const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader&
AnimationDataStream::_Internal::animation_data_stream_header(const AnimationDataStream* msg) {
  return *msg->stream_part_.animation_data_stream_header_;
}
const ::nvidia_ace::animation_data::v1::AnimationData&
AnimationDataStream::_Internal::animation_data(const AnimationDataStream* msg) {
  return *msg->stream_part_.animation_data_;
}
const ::nvidia_ace::status::v1::Status&
AnimationDataStream::_Internal::status(const AnimationDataStream* msg) {
  return *msg->stream_part_.status_;
}
void AnimationDataStream::set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(animation_data_stream_header);
    if (message_arena != submessage_arena) {
      animation_data_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_data_stream_header, submessage_arena);
    }
    set_has_animation_data_stream_header();
    stream_part_.animation_data_stream_header_ = animation_data_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
}
void AnimationDataStream::set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(animation_data);
    if (message_arena != submessage_arena) {
      animation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_data, submessage_arena);
    }
    set_has_animation_data();
    stream_part_.animation_data_ = animation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
}
void AnimationDataStream::set_allocated_status(::nvidia_ace::status::v1::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    stream_part_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.status)
}
void AnimationDataStream::clear_status() {
  if (_internal_has_status()) {
    if (GetArena() == nullptr) {
      delete stream_part_.status_;
    }
    clear_has_stream_part();
  }
}
AnimationDataStream::AnimationDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AnimationDataStream)
}
AnimationDataStream::AnimationDataStream(const AnimationDataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream_part();
  switch (from.stream_part_case()) {
    case kAnimationDataStreamHeader: {
      _internal_mutable_animation_data_stream_header()->::nvidia_ace::animation_data::v1::AnimationDataStreamHeader::MergeFrom(from._internal_animation_data_stream_header());
      break;
    }
    case kAnimationData: {
      _internal_mutable_animation_data()->::nvidia_ace::animation_data::v1::AnimationData::MergeFrom(from._internal_animation_data());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::nvidia_ace::status::v1::Status::MergeFrom(from._internal_status());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AnimationDataStream)
}

void AnimationDataStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  clear_has_stream_part();
}

AnimationDataStream::~AnimationDataStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AnimationDataStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimationDataStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
}

void AnimationDataStream::ArenaDtor(void* object) {
  AnimationDataStream* _this = reinterpret_cast< AnimationDataStream* >(object);
  (void)_this;
}
void AnimationDataStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationDataStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationDataStream& AnimationDataStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AnimationDataStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  switch (stream_part_case()) {
    case kAnimationDataStreamHeader: {
      if (GetArena() == nullptr) {
        delete stream_part_.animation_data_stream_header_;
      }
      break;
    }
    case kAnimationData: {
      if (GetArena() == nullptr) {
        delete stream_part_.animation_data_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete stream_part_.status_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}


void AnimationDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationDataStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation_data_stream_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.status.v1.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationDataStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
  if (_internal_has_animation_data_stream_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::animation_data_stream_header(this), target, stream);
  }

  // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
  if (_internal_has_animation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::animation_data(this), target, stream);
  }

  // .nvidia_ace.status.v1.Status status = 3;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AnimationDataStream)
  return target;
}

size_t AnimationDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
    case kAnimationDataStreamHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.animation_data_stream_header_);
      break;
    }
    // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
    case kAnimationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.animation_data_);
      break;
    }
    // .nvidia_ace.status.v1.Status status = 3;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.status_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationDataStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationDataStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationDataStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.AnimationDataStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.AnimationDataStream)
    MergeFrom(*source);
  }
}

void AnimationDataStream::MergeFrom(const AnimationDataStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_part_case()) {
    case kAnimationDataStreamHeader: {
      _internal_mutable_animation_data_stream_header()->::nvidia_ace::animation_data::v1::AnimationDataStreamHeader::MergeFrom(from._internal_animation_data_stream_header());
      break;
    }
    case kAnimationData: {
      _internal_mutable_animation_data()->::nvidia_ace::animation_data::v1::AnimationData::MergeFrom(from._internal_animation_data());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::nvidia_ace::status::v1::Status::MergeFrom(from._internal_status());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
}

void AnimationDataStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationDataStream::CopyFrom(const AnimationDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationDataStream::IsInitialized() const {
  return true;
}

void AnimationDataStream::InternalSwap(AnimationDataStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_part_, other->stream_part_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationDataStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AnimationData_MetadataEntry_DoNotUse::AnimationData_MetadataEntry_DoNotUse() {}
AnimationData_MetadataEntry_DoNotUse::AnimationData_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnimationData_MetadataEntry_DoNotUse::MergeFrom(const AnimationData_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnimationData_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AnimationData_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AnimationData::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationData>()._has_bits_);
  static const ::nvidia_ace::animation_data::v1::SkelAnimation& skel_animation(const AnimationData* msg);
  static void set_has_skel_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& audio(const AnimationData* msg);
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::nvidia_ace::animation_data::v1::Camera& camera(const AnimationData* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::nvidia_ace::animation_data::v1::SkelAnimation&
AnimationData::_Internal::skel_animation(const AnimationData* msg) {
  return *msg->skel_animation_;
}
const ::nvidia_ace::animation_data::v1::AudioWithTimeCode&
AnimationData::_Internal::audio(const AnimationData* msg) {
  return *msg->audio_;
}
const ::nvidia_ace::animation_data::v1::Camera&
AnimationData::_Internal::camera(const AnimationData* msg) {
  return *msg->camera_;
}
void AnimationData::clear_metadata() {
  metadata_.Clear();
}
AnimationData::AnimationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AnimationData)
}
AnimationData::AnimationData(const AnimationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_skel_animation()) {
    skel_animation_ = new ::nvidia_ace::animation_data::v1::SkelAnimation(*from.skel_animation_);
  } else {
    skel_animation_ = nullptr;
  }
  if (from._internal_has_audio()) {
    audio_ = new ::nvidia_ace::animation_data::v1::AudioWithTimeCode(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::nvidia_ace::animation_data::v1::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AnimationData)
}

void AnimationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&skel_animation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&camera_) -
      reinterpret_cast<char*>(&skel_animation_)) + sizeof(camera_));
}

AnimationData::~AnimationData() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AnimationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete skel_animation_;
  if (this != internal_default_instance()) delete audio_;
  if (this != internal_default_instance()) delete camera_;
}

void AnimationData::ArenaDtor(void* object) {
  AnimationData* _this = reinterpret_cast< AnimationData* >(object);
  (void)_this;
}
void AnimationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationData& AnimationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AnimationData::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AnimationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && skel_animation_ != nullptr) {
        delete skel_animation_;
      }
      skel_animation_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && audio_ != nullptr) {
        delete audio_;
      }
      audio_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && camera_ != nullptr) {
        delete camera_;
      }
      camera_ = nullptr;
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_skel_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.Camera camera = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AnimationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
  if (_internal_has_skel_animation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::skel_animation(this), target, stream);
  }

  // .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
  if (_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio(this), target, stream);
  }

  // .nvidia_ace.animation_data.v1.Camera camera = 3;
  if (_internal_has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::camera(this), target, stream);
  }

  // map<string, .google.protobuf.Any> metadata = 4;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.animation_data.v1.AnimationData.MetadataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AnimationData_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = AnimationData_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AnimationData)
  return target;
}

size_t AnimationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AnimationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> metadata = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += AnimationData_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skel_animation_);
    }

    // .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_);
    }

    // .nvidia_ace.animation_data.v1.Camera camera = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.AnimationData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.AnimationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.AnimationData)
    MergeFrom(*source);
  }
}

void AnimationData::MergeFrom(const AnimationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AnimationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_skel_animation()->::nvidia_ace::animation_data::v1::SkelAnimation::MergeFrom(from._internal_skel_animation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_audio()->::nvidia_ace::animation_data::v1::AudioWithTimeCode::MergeFrom(from._internal_audio());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_camera()->::nvidia_ace::animation_data::v1::Camera::MergeFrom(from._internal_camera());
    }
  }
}

void AnimationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.AnimationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationData::CopyFrom(const AnimationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AnimationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationData::IsInitialized() const {
  return true;
}

void AnimationData::InternalSwap(AnimationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationData, camera_)
      + sizeof(AnimationData::camera_)
      - PROTOBUF_FIELD_OFFSET(AnimationData, skel_animation_)>(
          reinterpret_cast<char*>(&skel_animation_),
          reinterpret_cast<char*>(&other->skel_animation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioWithTimeCode::_Internal {
 public:
};

AudioWithTimeCode::AudioWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AudioWithTimeCode)
}
AudioWithTimeCode::AudioWithTimeCode(const AudioWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_buffer().empty()) {
    audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_buffer(), 
      GetArena());
  }
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AudioWithTimeCode)
}

void AudioWithTimeCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  audio_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_code_ = 0;
}

AudioWithTimeCode::~AudioWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audio_buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioWithTimeCode::ArenaDtor(void* object) {
  AudioWithTimeCode* _this = reinterpret_cast< AudioWithTimeCode* >(object);
  (void)_this;
}
void AudioWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioWithTimeCode& AudioWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_buffer_.ClearToEmpty();
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes audio_buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audio_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // bytes audio_buffer = 2;
  if (this->audio_buffer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audio_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  return target;
}

size_t AudioWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio_buffer = 2;
  if (this->audio_buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio_buffer());
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.AudioWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.AudioWithTimeCode)
    MergeFrom(*source);
  }
}

void AudioWithTimeCode::MergeFrom(const AudioWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_buffer().size() > 0) {
    _internal_set_audio_buffer(from._internal_audio_buffer());
  }
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void AudioWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioWithTimeCode::CopyFrom(const AudioWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioWithTimeCode::IsInitialized() const {
  return true;
}

void AudioWithTimeCode::InternalSwap(AudioWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  audio_buffer_.Swap(&other->audio_buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_code_, other->time_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SkelAnimationHeader::_Internal {
 public:
};

SkelAnimationHeader::SkelAnimationHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blend_shapes_(arena),
  joints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.SkelAnimationHeader)
}
SkelAnimationHeader::SkelAnimationHeader(const SkelAnimationHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blend_shapes_(from.blend_shapes_),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.SkelAnimationHeader)
}

void SkelAnimationHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
}

SkelAnimationHeader::~SkelAnimationHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SkelAnimationHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SkelAnimationHeader::ArenaDtor(void* object) {
  SkelAnimationHeader* _this = reinterpret_cast< SkelAnimationHeader* >(object);
  (void)_this;
}
void SkelAnimationHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SkelAnimationHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkelAnimationHeader& SkelAnimationHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void SkelAnimationHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blend_shapes_.Clear();
  joints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkelAnimationHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string blend_shapes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blend_shapes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string joints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_joints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nvidia_ace.animation_data.v1.SkelAnimationHeader.joints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkelAnimationHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blend_shapes = 1;
  for (int i = 0, n = this->_internal_blend_shapes_size(); i < n; i++) {
    const auto& s = this->_internal_blend_shapes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes");
    target = stream->WriteString(1, s, target);
  }

  // repeated string joints = 2;
  for (int i = 0, n = this->_internal_joints_size(); i < n; i++) {
    const auto& s = this->_internal_joints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia_ace.animation_data.v1.SkelAnimationHeader.joints");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  return target;
}

size_t SkelAnimationHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blend_shapes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blend_shapes_.size());
  for (int i = 0, n = blend_shapes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blend_shapes_.Get(i));
  }

  // repeated string joints = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(joints_.size());
  for (int i = 0, n = joints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      joints_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkelAnimationHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SkelAnimationHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkelAnimationHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.SkelAnimationHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.SkelAnimationHeader)
    MergeFrom(*source);
  }
}

void SkelAnimationHeader::MergeFrom(const SkelAnimationHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blend_shapes_.MergeFrom(from.blend_shapes_);
  joints_.MergeFrom(from.joints_);
}

void SkelAnimationHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkelAnimationHeader::CopyFrom(const SkelAnimationHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkelAnimationHeader::IsInitialized() const {
  return true;
}

void SkelAnimationHeader::InternalSwap(SkelAnimationHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blend_shapes_.InternalSwap(&other->blend_shapes_);
  joints_.InternalSwap(&other->joints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkelAnimationHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SkelAnimation::_Internal {
 public:
};

SkelAnimation::SkelAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blend_shape_weights_(arena),
  translations_(arena),
  rotations_(arena),
  scales_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.SkelAnimation)
}
SkelAnimation::SkelAnimation(const SkelAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blend_shape_weights_(from.blend_shape_weights_),
      translations_(from.translations_),
      rotations_(from.rotations_),
      scales_(from.scales_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.SkelAnimation)
}

void SkelAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
}

SkelAnimation::~SkelAnimation() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.SkelAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SkelAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SkelAnimation::ArenaDtor(void* object) {
  SkelAnimation* _this = reinterpret_cast< SkelAnimation* >(object);
  (void)_this;
}
void SkelAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SkelAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkelAnimation& SkelAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkelAnimation_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void SkelAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.SkelAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blend_shape_weights_.Clear();
  translations_.Clear();
  rotations_.Clear();
  scales_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkelAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blend_shape_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_translations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scales(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkelAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.SkelAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blend_shape_weights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blend_shape_weights(i), target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_translations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_translations(i), target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rotations(i), target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scales_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_scales(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.SkelAnimation)
  return target;
}

size_t SkelAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.SkelAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
  total_size += 1UL * this->_internal_blend_shape_weights_size();
  for (const auto& msg : this->blend_shape_weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
  total_size += 1UL * this->_internal_translations_size();
  for (const auto& msg : this->translations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
  total_size += 1UL * this->_internal_rotations_size();
  for (const auto& msg : this->rotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
  total_size += 1UL * this->_internal_scales_size();
  for (const auto& msg : this->scales_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkelAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.SkelAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const SkelAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkelAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.SkelAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.SkelAnimation)
    MergeFrom(*source);
  }
}

void SkelAnimation::MergeFrom(const SkelAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.SkelAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blend_shape_weights_.MergeFrom(from.blend_shape_weights_);
  translations_.MergeFrom(from.translations_);
  rotations_.MergeFrom(from.rotations_);
  scales_.MergeFrom(from.scales_);
}

void SkelAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.SkelAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkelAnimation::CopyFrom(const SkelAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.SkelAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkelAnimation::IsInitialized() const {
  return true;
}

void SkelAnimation::InternalSwap(SkelAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blend_shape_weights_.InternalSwap(&other->blend_shape_weights_);
  translations_.InternalSwap(&other->translations_);
  rotations_.InternalSwap(&other->rotations_);
  scales_.InternalSwap(&other->scales_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkelAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Camera::_Internal {
 public:
};

Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  rotation_(arena),
  focal_length_(arena),
  focus_distance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      rotation_(from.rotation_),
      focal_length_(from.focal_length_),
      focus_distance_(from.focus_distance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Camera)
}

void Camera::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Camera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera& Camera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Camera_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  rotation_.Clear();
  focal_length_.Clear();
  focus_distance_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_focal_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_focus_distance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_position_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_position(i), target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rotation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rotation(i), target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_focal_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_focal_length(i), target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_focus_distance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_focus_distance(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
  total_size += 1UL * this->_internal_position_size();
  for (const auto& msg : this->position_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
  total_size += 1UL * this->_internal_rotation_size();
  for (const auto& msg : this->rotation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
  total_size += 1UL * this->_internal_focal_length_size();
  for (const auto& msg : this->focal_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
  total_size += 1UL * this->_internal_focus_distance_size();
  for (const auto& msg : this->focus_distance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.Camera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  rotation_.MergeFrom(from.rotation_);
  focal_length_.MergeFrom(from.focal_length_);
  focus_distance_.MergeFrom(from.focus_distance_);
}

void Camera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  rotation_.InternalSwap(&other->rotation_);
  focal_length_.InternalSwap(&other->focal_length_);
  focus_distance_.InternalSwap(&other->focus_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FloatArrayWithTimeCode::_Internal {
 public:
};

FloatArrayWithTimeCode::FloatArrayWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
}
FloatArrayWithTimeCode::FloatArrayWithTimeCode(const FloatArrayWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
}

void FloatArrayWithTimeCode::SharedCtor() {
  time_code_ = 0;
}

FloatArrayWithTimeCode::~FloatArrayWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatArrayWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatArrayWithTimeCode::ArenaDtor(void* object) {
  FloatArrayWithTimeCode* _this = reinterpret_cast< FloatArrayWithTimeCode* >(object);
  (void)_this;
}
void FloatArrayWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatArrayWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatArrayWithTimeCode& FloatArrayWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void FloatArrayWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatArrayWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatArrayWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  return target;
}

size_t FloatArrayWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatArrayWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatArrayWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatArrayWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
    MergeFrom(*source);
  }
}

void FloatArrayWithTimeCode::MergeFrom(const FloatArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void FloatArrayWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArrayWithTimeCode::CopyFrom(const FloatArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArrayWithTimeCode::IsInitialized() const {
  return true;
}

void FloatArrayWithTimeCode::InternalSwap(FloatArrayWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(time_code_, other->time_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatArrayWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Float3ArrayWithTimeCode::_Internal {
 public:
};

Float3ArrayWithTimeCode::Float3ArrayWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
}
Float3ArrayWithTimeCode::Float3ArrayWithTimeCode(const Float3ArrayWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
}

void Float3ArrayWithTimeCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  time_code_ = 0;
}

Float3ArrayWithTimeCode::~Float3ArrayWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Float3ArrayWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Float3ArrayWithTimeCode::ArenaDtor(void* object) {
  Float3ArrayWithTimeCode* _this = reinterpret_cast< Float3ArrayWithTimeCode* >(object);
  (void)_this;
}
void Float3ArrayWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float3ArrayWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float3ArrayWithTimeCode& Float3ArrayWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float3ArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void Float3ArrayWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float3ArrayWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float3ArrayWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  return target;
}

size_t Float3ArrayWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float3ArrayWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const Float3ArrayWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Float3ArrayWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
    MergeFrom(*source);
  }
}

void Float3ArrayWithTimeCode::MergeFrom(const Float3ArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void Float3ArrayWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float3ArrayWithTimeCode::CopyFrom(const Float3ArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float3ArrayWithTimeCode::IsInitialized() const {
  return true;
}

void Float3ArrayWithTimeCode::InternalSwap(Float3ArrayWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(time_code_, other->time_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Float3ArrayWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuatFArrayWithTimeCode::_Internal {
 public:
};

QuatFArrayWithTimeCode::QuatFArrayWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
}
QuatFArrayWithTimeCode::QuatFArrayWithTimeCode(const QuatFArrayWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
}

void QuatFArrayWithTimeCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  time_code_ = 0;
}

QuatFArrayWithTimeCode::~QuatFArrayWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuatFArrayWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QuatFArrayWithTimeCode::ArenaDtor(void* object) {
  QuatFArrayWithTimeCode* _this = reinterpret_cast< QuatFArrayWithTimeCode* >(object);
  (void)_this;
}
void QuatFArrayWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuatFArrayWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuatFArrayWithTimeCode& QuatFArrayWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuatFArrayWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void QuatFArrayWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuatFArrayWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuatFArrayWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  return target;
}

size_t QuatFArrayWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuatFArrayWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const QuatFArrayWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuatFArrayWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
    MergeFrom(*source);
  }
}

void QuatFArrayWithTimeCode::MergeFrom(const QuatFArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void QuatFArrayWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuatFArrayWithTimeCode::CopyFrom(const QuatFArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuatFArrayWithTimeCode::IsInitialized() const {
  return true;
}

void QuatFArrayWithTimeCode::InternalSwap(QuatFArrayWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(time_code_, other->time_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuatFArrayWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Float3WithTimeCode::_Internal {
 public:
  static const ::nvidia_ace::animation_data::v1::Float3& value(const Float3WithTimeCode* msg);
};

const ::nvidia_ace::animation_data::v1::Float3&
Float3WithTimeCode::_Internal::value(const Float3WithTimeCode* msg) {
  return *msg->value_;
}
Float3WithTimeCode::Float3WithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Float3WithTimeCode)
}
Float3WithTimeCode::Float3WithTimeCode(const Float3WithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::nvidia_ace::animation_data::v1::Float3(*from.value_);
  } else {
    value_ = nullptr;
  }
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Float3WithTimeCode)
}

void Float3WithTimeCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_code_) -
      reinterpret_cast<char*>(&value_)) + sizeof(time_code_));
}

Float3WithTimeCode::~Float3WithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Float3WithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Float3WithTimeCode::ArenaDtor(void* object) {
  Float3WithTimeCode* _this = reinterpret_cast< Float3WithTimeCode* >(object);
  (void)_this;
}
void Float3WithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float3WithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float3WithTimeCode& Float3WithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float3WithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void Float3WithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float3WithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.Float3 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float3WithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // .nvidia_ace.animation_data.v1.Float3 value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  return target;
}

size_t Float3WithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.animation_data.v1.Float3 value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float3WithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const Float3WithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Float3WithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.Float3WithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.Float3WithTimeCode)
    MergeFrom(*source);
  }
}

void Float3WithTimeCode::MergeFrom(const Float3WithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::nvidia_ace::animation_data::v1::Float3::MergeFrom(from._internal_value());
  }
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void Float3WithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float3WithTimeCode::CopyFrom(const Float3WithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float3WithTimeCode::IsInitialized() const {
  return true;
}

void Float3WithTimeCode::InternalSwap(Float3WithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, time_code_)
      + sizeof(Float3WithTimeCode::time_code_)
      - PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Float3WithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuatFWithTimeCode::_Internal {
 public:
  static const ::nvidia_ace::animation_data::v1::QuatF& value(const QuatFWithTimeCode* msg);
};

const ::nvidia_ace::animation_data::v1::QuatF&
QuatFWithTimeCode::_Internal::value(const QuatFWithTimeCode* msg) {
  return *msg->value_;
}
QuatFWithTimeCode::QuatFWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
}
QuatFWithTimeCode::QuatFWithTimeCode(const QuatFWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::nvidia_ace::animation_data::v1::QuatF(*from.value_);
  } else {
    value_ = nullptr;
  }
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
}

void QuatFWithTimeCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_code_) -
      reinterpret_cast<char*>(&value_)) + sizeof(time_code_));
}

QuatFWithTimeCode::~QuatFWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuatFWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void QuatFWithTimeCode::ArenaDtor(void* object) {
  QuatFWithTimeCode* _this = reinterpret_cast< QuatFWithTimeCode* >(object);
  (void)_this;
}
void QuatFWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuatFWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuatFWithTimeCode& QuatFWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuatFWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void QuatFWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuatFWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.QuatF value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuatFWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // .nvidia_ace.animation_data.v1.QuatF value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  return target;
}

size_t QuatFWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.animation_data.v1.QuatF value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuatFWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const QuatFWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuatFWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
    MergeFrom(*source);
  }
}

void QuatFWithTimeCode::MergeFrom(const QuatFWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::nvidia_ace::animation_data::v1::QuatF::MergeFrom(from._internal_value());
  }
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void QuatFWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuatFWithTimeCode::CopyFrom(const QuatFWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuatFWithTimeCode::IsInitialized() const {
  return true;
}

void QuatFWithTimeCode::InternalSwap(QuatFWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, time_code_)
      + sizeof(QuatFWithTimeCode::time_code_)
      - PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuatFWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FloatWithTimeCode::_Internal {
 public:
};

FloatWithTimeCode::FloatWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.FloatWithTimeCode)
}
FloatWithTimeCode::FloatWithTimeCode(const FloatWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_code_, &from.time_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_code_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.FloatWithTimeCode)
}

void FloatWithTimeCode::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_code_)) + sizeof(value_));
}

FloatWithTimeCode::~FloatWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatWithTimeCode::ArenaDtor(void* object) {
  FloatWithTimeCode* _this = reinterpret_cast< FloatWithTimeCode* >(object);
  (void)_this;
}
void FloatWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatWithTimeCode& FloatWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void FloatWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_code_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  return target;
}

size_t FloatWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.FloatWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.FloatWithTimeCode)
    MergeFrom(*source);
  }
}

void FloatWithTimeCode::MergeFrom(const FloatWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void FloatWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatWithTimeCode::CopyFrom(const FloatWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatWithTimeCode::IsInitialized() const {
  return true;
}

void FloatWithTimeCode::InternalSwap(FloatWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, value_)
      + sizeof(FloatWithTimeCode::value_)
      - PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, time_code_)>(
          reinterpret_cast<char*>(&time_code_),
          reinterpret_cast<char*>(&other->time_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuatF::_Internal {
 public:
};

QuatF::QuatF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.QuatF)
}
QuatF::QuatF(const QuatF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&real_, &from.real_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&real_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.QuatF)
}

void QuatF::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&real_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&real_)) + sizeof(k_));
}

QuatF::~QuatF() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.QuatF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuatF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QuatF::ArenaDtor(void* object) {
  QuatF* _this = reinterpret_cast< QuatF* >(object);
  (void)_this;
}
void QuatF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuatF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuatF& QuatF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuatF_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void QuatF::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.QuatF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&real_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&real_)) + sizeof(k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuatF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float real = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          real_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float j = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuatF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.QuatF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_real(), target);
  }

  // float i = 2;
  if (!(this->i() <= 0 && this->i() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_i(), target);
  }

  // float j = 3;
  if (!(this->j() <= 0 && this->j() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_j(), target);
  }

  // float k = 4;
  if (!(this->k() <= 0 && this->k() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.QuatF)
  return target;
}

size_t QuatF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.QuatF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    total_size += 1 + 4;
  }

  // float i = 2;
  if (!(this->i() <= 0 && this->i() >= 0)) {
    total_size += 1 + 4;
  }

  // float j = 3;
  if (!(this->j() <= 0 && this->j() >= 0)) {
    total_size += 1 + 4;
  }

  // float k = 4;
  if (!(this->k() <= 0 && this->k() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuatF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.QuatF)
  GOOGLE_DCHECK_NE(&from, this);
  const QuatF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuatF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.QuatF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.QuatF)
    MergeFrom(*source);
  }
}

void QuatF::MergeFrom(const QuatF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.QuatF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.real() <= 0 && from.real() >= 0)) {
    _internal_set_real(from._internal_real());
  }
  if (!(from.i() <= 0 && from.i() >= 0)) {
    _internal_set_i(from._internal_i());
  }
  if (!(from.j() <= 0 && from.j() >= 0)) {
    _internal_set_j(from._internal_j());
  }
  if (!(from.k() <= 0 && from.k() >= 0)) {
    _internal_set_k(from._internal_k());
  }
}

void QuatF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.QuatF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuatF::CopyFrom(const QuatF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.QuatF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuatF::IsInitialized() const {
  return true;
}

void QuatF::InternalSwap(QuatF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuatF, k_)
      + sizeof(QuatF::k_)
      - PROTOBUF_FIELD_OFFSET(QuatF, real_)>(
          reinterpret_cast<char*>(&real_),
          reinterpret_cast<char*>(&other->real_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuatF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Float3::_Internal {
 public:
};

Float3::Float3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Float3)
}
Float3::Float3(const Float3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Float3)
}

void Float3::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Float3::~Float3() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Float3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Float3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Float3::ArenaDtor(void* object) {
  Float3* _this = reinterpret_cast< Float3* >(object);
  (void)_this;
}
void Float3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float3& Float3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float3_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base);
  return *internal_default_instance();
}


void Float3::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Float3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Float3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Float3)
  return target;
}

size_t Float3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Float3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.animation_data.v1.Float3)
  GOOGLE_DCHECK_NE(&from, this);
  const Float3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Float3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.animation_data.v1.Float3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.animation_data.v1.Float3)
    MergeFrom(*source);
  }
}

void Float3::MergeFrom(const Float3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Float3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Float3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.animation_data.v1.Float3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float3::CopyFrom(const Float3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Float3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float3::IsInitialized() const {
  return true;
}

void Float3::InternalSwap(Float3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float3, z_)
      + sizeof(Float3::z_)
      - PROTOBUF_FIELD_OFFSET(Float3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Float3::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::AnimationDataStream* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationDataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::AnimationDataStream >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::AnimationData* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::AnimationData >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::AudioWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AudioWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::AudioWithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::SkelAnimationHeader* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::SkelAnimationHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::SkelAnimationHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::SkelAnimation* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::SkelAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::SkelAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::Camera* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::Float3WithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::Float3WithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::QuatF* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::QuatF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::QuatF >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::animation_data::v1::Float3* Arena::CreateMaybeMessage< ::nvidia_ace::animation_data::v1::Float3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::animation_data::v1::Float3 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
