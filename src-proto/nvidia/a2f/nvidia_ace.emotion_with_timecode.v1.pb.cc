#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.emotion_with_timecode.v1.proto

#include "nvidia/a2f/nvidia_ace.emotion_with_timecode.v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionWithTimeCode_EmotionEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto;
namespace nvidia_ace {
namespace emotion_with_timecode {
namespace v1 {
class EmotionWithTimeCode_EmotionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmotionWithTimeCode_EmotionEntry_DoNotUse> _instance;
} _EmotionWithTimeCode_EmotionEntry_DoNotUse_default_instance_;
class EmotionWithTimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmotionWithTimeCode> _instance;
} _EmotionWithTimeCode_default_instance_;
}  // namespace v1
}  // namespace emotion_with_timecode
}  // namespace nvidia_ace
static void InitDefaultsscc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::emotion_with_timecode::v1::_EmotionWithTimeCode_default_instance_;
    new (ptr) ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto}, {
      &scc_info_EmotionWithTimeCode_EmotionEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_EmotionWithTimeCode_EmotionEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::emotion_with_timecode::v1::_EmotionWithTimeCode_EmotionEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionWithTimeCode_EmotionEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmotionWithTimeCode_EmotionEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode, time_code_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode, emotion_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse)},
  { 9, -1, sizeof(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::emotion_with_timecode::v1::_EmotionWithTimeCode_EmotionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::emotion_with_timecode::v1::_EmotionWithTimeCode_default_instance_),
};

const char descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4nvidia/a2f/nvidia_ace.emotion_with_tim"
  "ecode.v1.proto\022#nvidia_ace.emotion_with_"
  "timecode.v1\"\260\001\n\023EmotionWithTimeCode\022\021\n\tt"
  "ime_code\030\001 \001(\001\022V\n\007emotion\030\002 \003(\0132E.nvidia"
  "_ace.emotion_with_timecode.v1.EmotionWit"
  "hTimeCode.EmotionEntry\032.\n\014EmotionEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_sccs[2] = {
  &scc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto.base,
  &scc_info_EmotionWithTimeCode_EmotionEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = {
  false, false, descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto, "nvidia/a2f/nvidia_ace.emotion_with_timecode.v1.proto", 278,
  &descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_once, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_sccs, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto::offsets,
  file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto, 2, file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto, file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto)), true);
namespace nvidia_ace {
namespace emotion_with_timecode {
namespace v1 {

// ===================================================================

EmotionWithTimeCode_EmotionEntry_DoNotUse::EmotionWithTimeCode_EmotionEntry_DoNotUse() {}
EmotionWithTimeCode_EmotionEntry_DoNotUse::EmotionWithTimeCode_EmotionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EmotionWithTimeCode_EmotionEntry_DoNotUse::MergeFrom(const EmotionWithTimeCode_EmotionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EmotionWithTimeCode_EmotionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EmotionWithTimeCode_EmotionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class EmotionWithTimeCode::_Internal {
 public:
};

EmotionWithTimeCode::EmotionWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emotion_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
}
EmotionWithTimeCode::EmotionWithTimeCode(const EmotionWithTimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  emotion_.MergeFrom(from.emotion_);
  time_code_ = from.time_code_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
}

void EmotionWithTimeCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto.base);
  time_code_ = 0;
}

EmotionWithTimeCode::~EmotionWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmotionWithTimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmotionWithTimeCode::ArenaDtor(void* object) {
  EmotionWithTimeCode* _this = reinterpret_cast< EmotionWithTimeCode* >(object);
  (void)_this;
}
void EmotionWithTimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmotionWithTimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmotionWithTimeCode& EmotionWithTimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto.base);
  return *internal_default_instance();
}


void EmotionWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emotion_.Clear();
  time_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmotionWithTimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, float> emotion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&emotion_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmotionWithTimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_code(), target);
  }

  // map<string, float> emotion = 2;
  if (!this->_internal_emotion().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode.EmotionEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_emotion().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_emotion().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_emotion().begin();
          it != this->_internal_emotion().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EmotionWithTimeCode_EmotionEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_emotion().begin();
          it != this->_internal_emotion().end(); ++it) {
        target = EmotionWithTimeCode_EmotionEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  return target;
}

size_t EmotionWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> emotion = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_emotion_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_emotion().begin();
      it != this->_internal_emotion().end(); ++it) {
    total_size += EmotionWithTimeCode_EmotionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double time_code = 1;
  if (!(this->time_code() <= 0 && this->time_code() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmotionWithTimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionWithTimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmotionWithTimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
    MergeFrom(*source);
  }
}

void EmotionWithTimeCode::MergeFrom(const EmotionWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotion_.MergeFrom(from.emotion_);
  if (!(from.time_code() <= 0 && from.time_code() >= 0)) {
    _internal_set_time_code(from._internal_time_code());
  }
}

void EmotionWithTimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionWithTimeCode::CopyFrom(const EmotionWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionWithTimeCode::IsInitialized() const {
  return true;
}

void EmotionWithTimeCode::InternalSwap(EmotionWithTimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emotion_.Swap(&other->emotion_);
  swap(time_code_, other->time_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmotionWithTimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace emotion_with_timecode
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* Arena::CreateMaybeMessage< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
