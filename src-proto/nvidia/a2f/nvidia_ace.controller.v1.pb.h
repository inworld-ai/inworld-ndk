// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.controller.v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nvidia/a2f/nvidia_ace.a2f.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.animation_data.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.audio.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.status.v1.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
namespace nvidia_ace {
namespace controller {
namespace v1 {
class AnimationDataStream;
class AnimationDataStreamDefaultTypeInternal;
extern AnimationDataStreamDefaultTypeInternal _AnimationDataStream_default_instance_;
class AnimationDataStreamHeader;
class AnimationDataStreamHeaderDefaultTypeInternal;
extern AnimationDataStreamHeaderDefaultTypeInternal _AnimationDataStreamHeader_default_instance_;
class AudioStream;
class AudioStreamDefaultTypeInternal;
extern AudioStreamDefaultTypeInternal _AudioStream_default_instance_;
class AudioStreamHeader;
class AudioStreamHeaderDefaultTypeInternal;
extern AudioStreamHeaderDefaultTypeInternal _AudioStreamHeader_default_instance_;
class AudioStream_EndOfAudio;
class AudioStream_EndOfAudioDefaultTypeInternal;
extern AudioStream_EndOfAudioDefaultTypeInternal _AudioStream_EndOfAudio_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> ::nvidia_ace::controller::v1::AnimationDataStream* Arena::CreateMaybeMessage<::nvidia_ace::controller::v1::AnimationDataStream>(Arena*);
template<> ::nvidia_ace::controller::v1::AnimationDataStreamHeader* Arena::CreateMaybeMessage<::nvidia_ace::controller::v1::AnimationDataStreamHeader>(Arena*);
template<> ::nvidia_ace::controller::v1::AudioStream* Arena::CreateMaybeMessage<::nvidia_ace::controller::v1::AudioStream>(Arena*);
template<> ::nvidia_ace::controller::v1::AudioStreamHeader* Arena::CreateMaybeMessage<::nvidia_ace::controller::v1::AudioStreamHeader>(Arena*);
template<> ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* Arena::CreateMaybeMessage<::nvidia_ace::controller::v1::AudioStream_EndOfAudio>(Arena*);
template<> ::nvidia_ace::controller::v1::Event* Arena::CreateMaybeMessage<::nvidia_ace::controller::v1::Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nvidia_ace {
namespace controller {
namespace v1 {

enum EventType : int {
  END_OF_A2F_AUDIO_PROCESSING = 0,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = END_OF_A2F_AUDIO_PROCESSING;
constexpr EventType EventType_MAX = END_OF_A2F_AUDIO_PROCESSING;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class AudioStream_EndOfAudio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AudioStream.EndOfAudio) */ {
 public:
  inline AudioStream_EndOfAudio() : AudioStream_EndOfAudio(nullptr) {}
  virtual ~AudioStream_EndOfAudio();

  AudioStream_EndOfAudio(const AudioStream_EndOfAudio& from);
  AudioStream_EndOfAudio(AudioStream_EndOfAudio&& from) noexcept
    : AudioStream_EndOfAudio() {
    *this = ::std::move(from);
  }

  inline AudioStream_EndOfAudio& operator=(const AudioStream_EndOfAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStream_EndOfAudio& operator=(AudioStream_EndOfAudio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStream_EndOfAudio& default_instance();

  static inline const AudioStream_EndOfAudio* internal_default_instance() {
    return reinterpret_cast<const AudioStream_EndOfAudio*>(
               &_AudioStream_EndOfAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioStream_EndOfAudio& a, AudioStream_EndOfAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStream_EndOfAudio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStream_EndOfAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStream_EndOfAudio* New() const final {
    return CreateMaybeMessage<AudioStream_EndOfAudio>(nullptr);
  }

  AudioStream_EndOfAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStream_EndOfAudio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStream_EndOfAudio& from);
  void MergeFrom(const AudioStream_EndOfAudio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStream_EndOfAudio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.controller.v1.AudioStream.EndOfAudio";
  }
  protected:
  explicit AudioStream_EndOfAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AudioStream) */ {
 public:
  inline AudioStream() : AudioStream(nullptr) {}
  virtual ~AudioStream();

  AudioStream(const AudioStream& from);
  AudioStream(AudioStream&& from) noexcept
    : AudioStream() {
    *this = ::std::move(from);
  }

  inline AudioStream& operator=(const AudioStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStream& operator=(AudioStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStream& default_instance();

  enum StreamPartCase {
    kAudioStreamHeader = 1,
    kAudioWithEmotion = 2,
    kEndOfAudio = 3,
    STREAM_PART_NOT_SET = 0,
  };

  static inline const AudioStream* internal_default_instance() {
    return reinterpret_cast<const AudioStream*>(
               &_AudioStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioStream& a, AudioStream& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStream* New() const final {
    return CreateMaybeMessage<AudioStream>(nullptr);
  }

  AudioStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStream& from);
  void MergeFrom(const AudioStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.controller.v1.AudioStream";
  }
  protected:
  explicit AudioStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AudioStream_EndOfAudio EndOfAudio;

  // accessors -------------------------------------------------------

  enum : int {
    kAudioStreamHeaderFieldNumber = 1,
    kAudioWithEmotionFieldNumber = 2,
    kEndOfAudioFieldNumber = 3,
  };
  // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
  bool has_audio_stream_header() const;
  private:
  bool _internal_has_audio_stream_header() const;
  public:
  void clear_audio_stream_header();
  const ::nvidia_ace::controller::v1::AudioStreamHeader& audio_stream_header() const;
  ::nvidia_ace::controller::v1::AudioStreamHeader* release_audio_stream_header();
  ::nvidia_ace::controller::v1::AudioStreamHeader* mutable_audio_stream_header();
  void set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header);
  private:
  const ::nvidia_ace::controller::v1::AudioStreamHeader& _internal_audio_stream_header() const;
  ::nvidia_ace::controller::v1::AudioStreamHeader* _internal_mutable_audio_stream_header();
  public:
  void unsafe_arena_set_allocated_audio_stream_header(
      ::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header);
  ::nvidia_ace::controller::v1::AudioStreamHeader* unsafe_arena_release_audio_stream_header();

  // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
  bool has_audio_with_emotion() const;
  private:
  bool _internal_has_audio_with_emotion() const;
  public:
  void clear_audio_with_emotion();
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& audio_with_emotion() const;
  ::nvidia_ace::a2f::v1::AudioWithEmotion* release_audio_with_emotion();
  ::nvidia_ace::a2f::v1::AudioWithEmotion* mutable_audio_with_emotion();
  void set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion);
  private:
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& _internal_audio_with_emotion() const;
  ::nvidia_ace::a2f::v1::AudioWithEmotion* _internal_mutable_audio_with_emotion();
  public:
  void unsafe_arena_set_allocated_audio_with_emotion(
      ::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion);
  ::nvidia_ace::a2f::v1::AudioWithEmotion* unsafe_arena_release_audio_with_emotion();

  // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
  bool has_end_of_audio() const;
  private:
  bool _internal_has_end_of_audio() const;
  public:
  void clear_end_of_audio();
  const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& end_of_audio() const;
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* release_end_of_audio();
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* mutable_end_of_audio();
  void set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio);
  private:
  const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& _internal_end_of_audio() const;
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* _internal_mutable_end_of_audio();
  public:
  void unsafe_arena_set_allocated_end_of_audio(
      ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio);
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* unsafe_arena_release_end_of_audio();

  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AudioStream)
 private:
  class _Internal;
  void set_has_audio_stream_header();
  void set_has_audio_with_emotion();
  void set_has_end_of_audio();

  inline bool has_stream_part() const;
  inline void clear_has_stream_part();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamPartUnion {
    StreamPartUnion() {}
    ::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header_;
    ::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion_;
    ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio_;
  } stream_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AudioStreamHeader) */ {
 public:
  inline AudioStreamHeader() : AudioStreamHeader(nullptr) {}
  virtual ~AudioStreamHeader();

  AudioStreamHeader(const AudioStreamHeader& from);
  AudioStreamHeader(AudioStreamHeader&& from) noexcept
    : AudioStreamHeader() {
    *this = ::std::move(from);
  }

  inline AudioStreamHeader& operator=(const AudioStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamHeader& operator=(AudioStreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStreamHeader& default_instance();

  static inline const AudioStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AudioStreamHeader*>(
               &_AudioStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioStreamHeader& a, AudioStreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStreamHeader* New() const final {
    return CreateMaybeMessage<AudioStreamHeader>(nullptr);
  }

  AudioStreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStreamHeader& from);
  void MergeFrom(const AudioStreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.controller.v1.AudioStreamHeader";
  }
  protected:
  explicit AudioStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioHeaderFieldNumber = 1,
    kFaceParamsFieldNumber = 2,
    kEmotionPostProcessingParamsFieldNumber = 3,
    kBlendshapeParamsFieldNumber = 4,
  };
  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  bool has_audio_header() const;
  private:
  bool _internal_has_audio_header() const;
  public:
  void clear_audio_header();
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header);
  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();
  public:
  void unsafe_arena_set_allocated_audio_header(
      ::nvidia_ace::audio::v1::AudioHeader* audio_header);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
  bool has_face_params() const;
  private:
  bool _internal_has_face_params() const;
  public:
  void clear_face_params();
  const ::nvidia_ace::a2f::v1::FaceParameters& face_params() const;
  ::nvidia_ace::a2f::v1::FaceParameters* release_face_params();
  ::nvidia_ace::a2f::v1::FaceParameters* mutable_face_params();
  void set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* face_params);
  private:
  const ::nvidia_ace::a2f::v1::FaceParameters& _internal_face_params() const;
  ::nvidia_ace::a2f::v1::FaceParameters* _internal_mutable_face_params();
  public:
  void unsafe_arena_set_allocated_face_params(
      ::nvidia_ace::a2f::v1::FaceParameters* face_params);
  ::nvidia_ace::a2f::v1::FaceParameters* unsafe_arena_release_face_params();

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
  bool has_emotion_post_processing_params() const;
  private:
  bool _internal_has_emotion_post_processing_params() const;
  public:
  void clear_emotion_post_processing_params();
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& emotion_post_processing_params() const;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* release_emotion_post_processing_params();
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* mutable_emotion_post_processing_params();
  void set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params);
  private:
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& _internal_emotion_post_processing_params() const;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* _internal_mutable_emotion_post_processing_params();
  public:
  void unsafe_arena_set_allocated_emotion_post_processing_params(
      ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params);
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* unsafe_arena_release_emotion_post_processing_params();

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
  bool has_blendshape_params() const;
  private:
  bool _internal_has_blendshape_params() const;
  public:
  void clear_blendshape_params();
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& blendshape_params() const;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* release_blendshape_params();
  ::nvidia_ace::a2f::v1::BlendShapeParameters* mutable_blendshape_params();
  void set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params);
  private:
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& _internal_blendshape_params() const;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* _internal_mutable_blendshape_params();
  public:
  void unsafe_arena_set_allocated_blendshape_params(
      ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params);
  ::nvidia_ace::a2f::v1::BlendShapeParameters* unsafe_arena_release_blendshape_params();

  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AudioStreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
  ::nvidia_ace::a2f::v1::FaceParameters* face_params_;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params_;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.controller.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // .google.protobuf.Any metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Any& metadata() const;
  PROTOBUF_NAMESPACE_ID::Any* release_metadata();
  PROTOBUF_NAMESPACE_ID::Any* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Any* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Any* metadata);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_metadata();

  // .nvidia_ace.controller.v1.EventType event_type = 1;
  void clear_event_type();
  ::nvidia_ace::controller::v1::EventType event_type() const;
  void set_event_type(::nvidia_ace::controller::v1::EventType value);
  private:
  ::nvidia_ace::controller::v1::EventType _internal_event_type() const;
  void _internal_set_event_type(::nvidia_ace::controller::v1::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  PROTOBUF_NAMESPACE_ID::Any* metadata_;
  int event_type_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AnimationDataStreamHeader) */ {
 public:
  inline AnimationDataStreamHeader() : AnimationDataStreamHeader(nullptr) {}
  virtual ~AnimationDataStreamHeader();

  AnimationDataStreamHeader(const AnimationDataStreamHeader& from);
  AnimationDataStreamHeader(AnimationDataStreamHeader&& from) noexcept
    : AnimationDataStreamHeader() {
    *this = ::std::move(from);
  }

  inline AnimationDataStreamHeader& operator=(const AnimationDataStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStreamHeader& operator=(AnimationDataStreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationDataStreamHeader& default_instance();

  static inline const AnimationDataStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStreamHeader*>(
               &_AnimationDataStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnimationDataStreamHeader& a, AnimationDataStreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationDataStreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationDataStreamHeader* New() const final {
    return CreateMaybeMessage<AnimationDataStreamHeader>(nullptr);
  }

  AnimationDataStreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationDataStreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationDataStreamHeader& from);
  void MergeFrom(const AnimationDataStreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationDataStreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.controller.v1.AnimationDataStreamHeader";
  }
  protected:
  explicit AnimationDataStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioHeaderFieldNumber = 1,
    kSkelAnimationHeaderFieldNumber = 2,
    kStartTimeCodeSinceEpochFieldNumber = 3,
  };
  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  bool has_audio_header() const;
  private:
  bool _internal_has_audio_header() const;
  public:
  void clear_audio_header();
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header);
  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();
  public:
  void unsafe_arena_set_allocated_audio_header(
      ::nvidia_ace::audio::v1::AudioHeader* audio_header);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
  bool has_skel_animation_header() const;
  private:
  bool _internal_has_skel_animation_header() const;
  public:
  void clear_skel_animation_header();
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& skel_animation_header() const;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* release_skel_animation_header();
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* mutable_skel_animation_header();
  void set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header);
  private:
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& _internal_skel_animation_header() const;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* _internal_mutable_skel_animation_header();
  public:
  void unsafe_arena_set_allocated_skel_animation_header(
      ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header);
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* unsafe_arena_release_skel_animation_header();

  // double start_time_code_since_epoch = 3;
  void clear_start_time_code_since_epoch();
  double start_time_code_since_epoch() const;
  void set_start_time_code_since_epoch(double value);
  private:
  double _internal_start_time_code_since_epoch() const;
  void _internal_set_start_time_code_since_epoch(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AnimationDataStreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header_;
  double start_time_code_since_epoch_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AnimationDataStream) */ {
 public:
  inline AnimationDataStream() : AnimationDataStream(nullptr) {}
  virtual ~AnimationDataStream();

  AnimationDataStream(const AnimationDataStream& from);
  AnimationDataStream(AnimationDataStream&& from) noexcept
    : AnimationDataStream() {
    *this = ::std::move(from);
  }

  inline AnimationDataStream& operator=(const AnimationDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStream& operator=(AnimationDataStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationDataStream& default_instance();

  enum StreamPartCase {
    kAnimationDataStreamHeader = 1,
    kAnimationData = 2,
    kEvent = 3,
    kStatus = 4,
    STREAM_PART_NOT_SET = 0,
  };

  static inline const AnimationDataStream* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStream*>(
               &_AnimationDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AnimationDataStream& a, AnimationDataStream& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationDataStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationDataStream* New() const final {
    return CreateMaybeMessage<AnimationDataStream>(nullptr);
  }

  AnimationDataStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationDataStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationDataStream& from);
  void MergeFrom(const AnimationDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationDataStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.controller.v1.AnimationDataStream";
  }
  protected:
  explicit AnimationDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationDataStreamHeaderFieldNumber = 1,
    kAnimationDataFieldNumber = 2,
    kEventFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
  bool has_animation_data_stream_header() const;
  private:
  bool _internal_has_animation_data_stream_header() const;
  public:
  void clear_animation_data_stream_header();
  const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& animation_data_stream_header() const;
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* release_animation_data_stream_header();
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* mutable_animation_data_stream_header();
  void set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header);
  private:
  const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& _internal_animation_data_stream_header() const;
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* _internal_mutable_animation_data_stream_header();
  public:
  void unsafe_arena_set_allocated_animation_data_stream_header(
      ::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header);
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* unsafe_arena_release_animation_data_stream_header();

  // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
  bool has_animation_data() const;
  private:
  bool _internal_has_animation_data() const;
  public:
  void clear_animation_data();
  const ::nvidia_ace::animation_data::v1::AnimationData& animation_data() const;
  ::nvidia_ace::animation_data::v1::AnimationData* release_animation_data();
  ::nvidia_ace::animation_data::v1::AnimationData* mutable_animation_data();
  void set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data);
  private:
  const ::nvidia_ace::animation_data::v1::AnimationData& _internal_animation_data() const;
  ::nvidia_ace::animation_data::v1::AnimationData* _internal_mutable_animation_data();
  public:
  void unsafe_arena_set_allocated_animation_data(
      ::nvidia_ace::animation_data::v1::AnimationData* animation_data);
  ::nvidia_ace::animation_data::v1::AnimationData* unsafe_arena_release_animation_data();

  // .nvidia_ace.controller.v1.Event event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::nvidia_ace::controller::v1::Event& event() const;
  ::nvidia_ace::controller::v1::Event* release_event();
  ::nvidia_ace::controller::v1::Event* mutable_event();
  void set_allocated_event(::nvidia_ace::controller::v1::Event* event);
  private:
  const ::nvidia_ace::controller::v1::Event& _internal_event() const;
  ::nvidia_ace::controller::v1::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::nvidia_ace::controller::v1::Event* event);
  ::nvidia_ace::controller::v1::Event* unsafe_arena_release_event();

  // .nvidia_ace.status.v1.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::nvidia_ace::status::v1::Status& status() const;
  ::nvidia_ace::status::v1::Status* release_status();
  ::nvidia_ace::status::v1::Status* mutable_status();
  void set_allocated_status(::nvidia_ace::status::v1::Status* status);
  private:
  const ::nvidia_ace::status::v1::Status& _internal_status() const;
  ::nvidia_ace::status::v1::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::nvidia_ace::status::v1::Status* status);
  ::nvidia_ace::status::v1::Status* unsafe_arena_release_status();

  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AnimationDataStream)
 private:
  class _Internal;
  void set_has_animation_data_stream_header();
  void set_has_animation_data();
  void set_has_event();
  void set_has_status();

  inline bool has_stream_part() const;
  inline void clear_has_stream_part();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamPartUnion {
    StreamPartUnion() {}
    ::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header_;
    ::nvidia_ace::animation_data::v1::AnimationData* animation_data_;
    ::nvidia_ace::controller::v1::Event* event_;
    ::nvidia_ace::status::v1::Status* status_;
  } stream_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioStream_EndOfAudio

// -------------------------------------------------------------------

// AudioStream

// .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
inline bool AudioStream::_internal_has_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader;
}
inline bool AudioStream::has_audio_stream_header() const {
  return _internal_has_audio_stream_header();
}
inline void AudioStream::set_has_audio_stream_header() {
  _oneof_case_[0] = kAudioStreamHeader;
}
inline void AudioStream::clear_audio_stream_header() {
  if (_internal_has_audio_stream_header()) {
    if (GetArena() == nullptr) {
      delete stream_part_.audio_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::release_audio_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  if (_internal_has_audio_stream_header()) {
    clear_has_stream_part();
      ::nvidia_ace::controller::v1::AudioStreamHeader* temp = stream_part_.audio_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::AudioStreamHeader& AudioStream::_internal_audio_stream_header() const {
  return _internal_has_audio_stream_header()
      ? *stream_part_.audio_stream_header_
      : reinterpret_cast< ::nvidia_ace::controller::v1::AudioStreamHeader&>(::nvidia_ace::controller::v1::_AudioStreamHeader_default_instance_);
}
inline const ::nvidia_ace::controller::v1::AudioStreamHeader& AudioStream::audio_stream_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  return _internal_audio_stream_header();
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::unsafe_arena_release_audio_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  if (_internal_has_audio_stream_header()) {
    clear_has_stream_part();
    ::nvidia_ace::controller::v1::AudioStreamHeader* temp = stream_part_.audio_stream_header_;
    stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header) {
  clear_stream_part();
  if (audio_stream_header) {
    set_has_audio_stream_header();
    stream_part_.audio_stream_header_ = audio_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::_internal_mutable_audio_stream_header() {
  if (!_internal_has_audio_stream_header()) {
    clear_stream_part();
    set_has_audio_stream_header();
    stream_part_.audio_stream_header_ = CreateMaybeMessage< ::nvidia_ace::controller::v1::AudioStreamHeader >(GetArena());
  }
  return stream_part_.audio_stream_header_;
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::mutable_audio_stream_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  return _internal_mutable_audio_stream_header();
}

// .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
inline bool AudioStream::_internal_has_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion;
}
inline bool AudioStream::has_audio_with_emotion() const {
  return _internal_has_audio_with_emotion();
}
inline void AudioStream::set_has_audio_with_emotion() {
  _oneof_case_[0] = kAudioWithEmotion;
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::release_audio_with_emotion() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  if (_internal_has_audio_with_emotion()) {
    clear_has_stream_part();
      ::nvidia_ace::a2f::v1::AudioWithEmotion* temp = stream_part_.audio_with_emotion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::_internal_audio_with_emotion() const {
  return _internal_has_audio_with_emotion()
      ? *stream_part_.audio_with_emotion_
      : reinterpret_cast< ::nvidia_ace::a2f::v1::AudioWithEmotion&>(::nvidia_ace::a2f::v1::_AudioWithEmotion_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::audio_with_emotion() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  return _internal_audio_with_emotion();
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::unsafe_arena_release_audio_with_emotion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  if (_internal_has_audio_with_emotion()) {
    clear_has_stream_part();
    ::nvidia_ace::a2f::v1::AudioWithEmotion* temp = stream_part_.audio_with_emotion_;
    stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion) {
  clear_stream_part();
  if (audio_with_emotion) {
    set_has_audio_with_emotion();
    stream_part_.audio_with_emotion_ = audio_with_emotion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::_internal_mutable_audio_with_emotion() {
  if (!_internal_has_audio_with_emotion()) {
    clear_stream_part();
    set_has_audio_with_emotion();
    stream_part_.audio_with_emotion_ = CreateMaybeMessage< ::nvidia_ace::a2f::v1::AudioWithEmotion >(GetArena());
  }
  return stream_part_.audio_with_emotion_;
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::mutable_audio_with_emotion() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  return _internal_mutable_audio_with_emotion();
}

// .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
inline bool AudioStream::_internal_has_end_of_audio() const {
  return stream_part_case() == kEndOfAudio;
}
inline bool AudioStream::has_end_of_audio() const {
  return _internal_has_end_of_audio();
}
inline void AudioStream::set_has_end_of_audio() {
  _oneof_case_[0] = kEndOfAudio;
}
inline void AudioStream::clear_end_of_audio() {
  if (_internal_has_end_of_audio()) {
    if (GetArena() == nullptr) {
      delete stream_part_.end_of_audio_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::release_end_of_audio() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  if (_internal_has_end_of_audio()) {
    clear_has_stream_part();
      ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* temp = stream_part_.end_of_audio_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.end_of_audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& AudioStream::_internal_end_of_audio() const {
  return _internal_has_end_of_audio()
      ? *stream_part_.end_of_audio_
      : reinterpret_cast< ::nvidia_ace::controller::v1::AudioStream_EndOfAudio&>(::nvidia_ace::controller::v1::_AudioStream_EndOfAudio_default_instance_);
}
inline const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& AudioStream::end_of_audio() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  return _internal_end_of_audio();
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::unsafe_arena_release_end_of_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  if (_internal_has_end_of_audio()) {
    clear_has_stream_part();
    ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* temp = stream_part_.end_of_audio_;
    stream_part_.end_of_audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio) {
  clear_stream_part();
  if (end_of_audio) {
    set_has_end_of_audio();
    stream_part_.end_of_audio_ = end_of_audio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStream.end_of_audio)
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::_internal_mutable_end_of_audio() {
  if (!_internal_has_end_of_audio()) {
    clear_stream_part();
    set_has_end_of_audio();
    stream_part_.end_of_audio_ = CreateMaybeMessage< ::nvidia_ace::controller::v1::AudioStream_EndOfAudio >(GetArena());
  }
  return stream_part_.end_of_audio_;
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::mutable_end_of_audio() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  return _internal_mutable_end_of_audio();
}

inline bool AudioStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AudioStream::clear_has_stream_part() {
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AudioStream::StreamPartCase AudioStream::stream_part_case() const {
  return AudioStream::StreamPartCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioStreamHeader

// .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
inline bool AudioStreamHeader::_internal_has_audio_header() const {
  return this != internal_default_instance() && audio_header_ != nullptr;
}
inline bool AudioStreamHeader::has_audio_header() const {
  return _internal_has_audio_header();
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::_internal_audio_header() const {
  const ::nvidia_ace::audio::v1::AudioHeader* p = audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(
      ::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::audio_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_audio_header(
    ::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  audio_header_ = audio_header;
  if (audio_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::release_audio_header() {
  
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::unsafe_arena_release_audio_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
  
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::_internal_mutable_audio_header() {
  
  if (audio_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    audio_header_ = p;
  }
  return audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::mutable_audio_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
  return _internal_mutable_audio_header();
}
inline void AudioStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  if (audio_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header)->GetArena();
    if (message_arena != submessage_arena) {
      audio_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_header, submessage_arena);
    }
    
  } else {
    
  }
  audio_header_ = audio_header;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
}

// .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
inline bool AudioStreamHeader::_internal_has_face_params() const {
  return this != internal_default_instance() && face_params_ != nullptr;
}
inline bool AudioStreamHeader::has_face_params() const {
  return _internal_has_face_params();
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::_internal_face_params() const {
  const ::nvidia_ace::a2f::v1::FaceParameters* p = face_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::FaceParameters&>(
      ::nvidia_ace::a2f::v1::_FaceParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::face_params() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
  return _internal_face_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_face_params(
    ::nvidia_ace::a2f::v1::FaceParameters* face_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_params_);
  }
  face_params_ = face_params;
  if (face_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::release_face_params() {
  
  ::nvidia_ace::a2f::v1::FaceParameters* temp = face_params_;
  face_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::unsafe_arena_release_face_params() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
  
  ::nvidia_ace::a2f::v1::FaceParameters* temp = face_params_;
  face_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::_internal_mutable_face_params() {
  
  if (face_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::a2f::v1::FaceParameters>(GetArena());
    face_params_ = p;
  }
  return face_params_;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::mutable_face_params() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
  return _internal_mutable_face_params();
}
inline void AudioStreamHeader::set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* face_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_params_);
  }
  if (face_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_params)->GetArena();
    if (message_arena != submessage_arena) {
      face_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_params, submessage_arena);
    }
    
  } else {
    
  }
  face_params_ = face_params;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
}

// .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
inline bool AudioStreamHeader::_internal_has_emotion_post_processing_params() const {
  return this != internal_default_instance() && emotion_post_processing_params_ != nullptr;
}
inline bool AudioStreamHeader::has_emotion_post_processing_params() const {
  return _internal_has_emotion_post_processing_params();
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::_internal_emotion_post_processing_params() const {
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* p = emotion_post_processing_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters&>(
      ::nvidia_ace::a2f::v1::_EmotionPostProcessingParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::emotion_post_processing_params() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
  return _internal_emotion_post_processing_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_emotion_post_processing_params(
    ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotion_post_processing_params_);
  }
  emotion_post_processing_params_ = emotion_post_processing_params;
  if (emotion_post_processing_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::release_emotion_post_processing_params() {
  
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* temp = emotion_post_processing_params_;
  emotion_post_processing_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::unsafe_arena_release_emotion_post_processing_params() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
  
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* temp = emotion_post_processing_params_;
  emotion_post_processing_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::_internal_mutable_emotion_post_processing_params() {
  
  if (emotion_post_processing_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(GetArena());
    emotion_post_processing_params_ = p;
  }
  return emotion_post_processing_params_;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::mutable_emotion_post_processing_params() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
  return _internal_mutable_emotion_post_processing_params();
}
inline void AudioStreamHeader::set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotion_post_processing_params_);
  }
  if (emotion_post_processing_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotion_post_processing_params)->GetArena();
    if (message_arena != submessage_arena) {
      emotion_post_processing_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotion_post_processing_params, submessage_arena);
    }
    
  } else {
    
  }
  emotion_post_processing_params_ = emotion_post_processing_params;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
}

// .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
inline bool AudioStreamHeader::_internal_has_blendshape_params() const {
  return this != internal_default_instance() && blendshape_params_ != nullptr;
}
inline bool AudioStreamHeader::has_blendshape_params() const {
  return _internal_has_blendshape_params();
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::_internal_blendshape_params() const {
  const ::nvidia_ace::a2f::v1::BlendShapeParameters* p = blendshape_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::BlendShapeParameters&>(
      ::nvidia_ace::a2f::v1::_BlendShapeParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::blendshape_params() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
  return _internal_blendshape_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_blendshape_params(
    ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blendshape_params_);
  }
  blendshape_params_ = blendshape_params;
  if (blendshape_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::release_blendshape_params() {
  
  ::nvidia_ace::a2f::v1::BlendShapeParameters* temp = blendshape_params_;
  blendshape_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::unsafe_arena_release_blendshape_params() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
  
  ::nvidia_ace::a2f::v1::BlendShapeParameters* temp = blendshape_params_;
  blendshape_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::_internal_mutable_blendshape_params() {
  
  if (blendshape_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::a2f::v1::BlendShapeParameters>(GetArena());
    blendshape_params_ = p;
  }
  return blendshape_params_;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::mutable_blendshape_params() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
  return _internal_mutable_blendshape_params();
}
inline void AudioStreamHeader::set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blendshape_params_);
  }
  if (blendshape_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blendshape_params)->GetArena();
    if (message_arena != submessage_arena) {
      blendshape_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blendshape_params, submessage_arena);
    }
    
  } else {
    
  }
  blendshape_params_ = blendshape_params;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
}

// -------------------------------------------------------------------

// Event

// .nvidia_ace.controller.v1.EventType event_type = 1;
inline void Event::clear_event_type() {
  event_type_ = 0;
}
inline ::nvidia_ace::controller::v1::EventType Event::_internal_event_type() const {
  return static_cast< ::nvidia_ace::controller::v1::EventType >(event_type_);
}
inline ::nvidia_ace::controller::v1::EventType Event::event_type() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.Event.event_type)
  return _internal_event_type();
}
inline void Event::_internal_set_event_type(::nvidia_ace::controller::v1::EventType value) {
  
  event_type_ = value;
}
inline void Event::set_event_type(::nvidia_ace::controller::v1::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.controller.v1.Event.event_type)
}

// .google.protobuf.Any metadata = 2;
inline bool Event::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool Event::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Event::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Event::metadata() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.Event.metadata)
  return _internal_metadata();
}
inline void Event::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Any* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.Event.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Any* Event::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Any* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Event::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.Event.metadata)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Any* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Event::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Event::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.Event.metadata)
  return _internal_mutable_metadata();
}
inline void Event::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Any* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.Event.metadata)
}

// -------------------------------------------------------------------

// AnimationDataStreamHeader

// .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
inline bool AnimationDataStreamHeader::_internal_has_audio_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || audio_header_ != nullptr);
  return value;
}
inline bool AnimationDataStreamHeader::has_audio_header() const {
  return _internal_has_audio_header();
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::_internal_audio_header() const {
  const ::nvidia_ace::audio::v1::AudioHeader* p = audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(
      ::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::audio_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_audio_header(
    ::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  audio_header_ = audio_header;
  if (audio_header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::release_audio_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::unsafe_arena_release_audio_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
  _has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::_internal_mutable_audio_header() {
  _has_bits_[0] |= 0x00000001u;
  if (audio_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    audio_header_ = p;
  }
  return audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::mutable_audio_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
  return _internal_mutable_audio_header();
}
inline void AnimationDataStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  if (audio_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header)->GetArena();
    if (message_arena != submessage_arena) {
      audio_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_header_ = audio_header;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
}

// .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
inline bool AnimationDataStreamHeader::_internal_has_skel_animation_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || skel_animation_header_ != nullptr);
  return value;
}
inline bool AnimationDataStreamHeader::has_skel_animation_header() const {
  return _internal_has_skel_animation_header();
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::_internal_skel_animation_header() const {
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader* p = skel_animation_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::SkelAnimationHeader&>(
      ::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::skel_animation_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
  return _internal_skel_animation_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_skel_animation_header(
    ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skel_animation_header_);
  }
  skel_animation_header_ = skel_animation_header;
  if (skel_animation_header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::release_skel_animation_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* temp = skel_animation_header_;
  skel_animation_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::unsafe_arena_release_skel_animation_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
  _has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* temp = skel_animation_header_;
  skel_animation_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::_internal_mutable_skel_animation_header() {
  _has_bits_[0] |= 0x00000002u;
  if (skel_animation_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(GetArena());
    skel_animation_header_ = p;
  }
  return skel_animation_header_;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::mutable_skel_animation_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
  return _internal_mutable_skel_animation_header();
}
inline void AnimationDataStreamHeader::set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skel_animation_header_);
  }
  if (skel_animation_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skel_animation_header)->GetArena();
    if (message_arena != submessage_arena) {
      skel_animation_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skel_animation_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  skel_animation_header_ = skel_animation_header;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
}

// double start_time_code_since_epoch = 3;
inline void AnimationDataStreamHeader::clear_start_time_code_since_epoch() {
  start_time_code_since_epoch_ = 0;
}
inline double AnimationDataStreamHeader::_internal_start_time_code_since_epoch() const {
  return start_time_code_since_epoch_;
}
inline double AnimationDataStreamHeader::start_time_code_since_epoch() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
  return _internal_start_time_code_since_epoch();
}
inline void AnimationDataStreamHeader::_internal_set_start_time_code_since_epoch(double value) {
  
  start_time_code_since_epoch_ = value;
}
inline void AnimationDataStreamHeader::set_start_time_code_since_epoch(double value) {
  _internal_set_start_time_code_since_epoch(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.controller.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
}

// -------------------------------------------------------------------

// AnimationDataStream

// .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
inline bool AnimationDataStream::_internal_has_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader;
}
inline bool AnimationDataStream::has_animation_data_stream_header() const {
  return _internal_has_animation_data_stream_header();
}
inline void AnimationDataStream::set_has_animation_data_stream_header() {
  _oneof_case_[0] = kAnimationDataStreamHeader;
}
inline void AnimationDataStream::clear_animation_data_stream_header() {
  if (_internal_has_animation_data_stream_header()) {
    if (GetArena() == nullptr) {
      delete stream_part_.animation_data_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  if (_internal_has_animation_data_stream_header()) {
    clear_has_stream_part();
      ::nvidia_ace::controller::v1::AnimationDataStreamHeader* temp = stream_part_.animation_data_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& AnimationDataStream::_internal_animation_data_stream_header() const {
  return _internal_has_animation_data_stream_header()
      ? *stream_part_.animation_data_stream_header_
      : reinterpret_cast< ::nvidia_ace::controller::v1::AnimationDataStreamHeader&>(::nvidia_ace::controller::v1::_AnimationDataStreamHeader_default_instance_);
}
inline const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& AnimationDataStream::animation_data_stream_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  return _internal_animation_data_stream_header();
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::unsafe_arena_release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  if (_internal_has_animation_data_stream_header()) {
    clear_has_stream_part();
    ::nvidia_ace::controller::v1::AnimationDataStreamHeader* temp = stream_part_.animation_data_stream_header_;
    stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header) {
  clear_stream_part();
  if (animation_data_stream_header) {
    set_has_animation_data_stream_header();
    stream_part_.animation_data_stream_header_ = animation_data_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::_internal_mutable_animation_data_stream_header() {
  if (!_internal_has_animation_data_stream_header()) {
    clear_stream_part();
    set_has_animation_data_stream_header();
    stream_part_.animation_data_stream_header_ = CreateMaybeMessage< ::nvidia_ace::controller::v1::AnimationDataStreamHeader >(GetArena());
  }
  return stream_part_.animation_data_stream_header_;
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::mutable_animation_data_stream_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  return _internal_mutable_animation_data_stream_header();
}

// .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
inline bool AnimationDataStream::_internal_has_animation_data() const {
  return stream_part_case() == kAnimationData;
}
inline bool AnimationDataStream::has_animation_data() const {
  return _internal_has_animation_data();
}
inline void AnimationDataStream::set_has_animation_data() {
  _oneof_case_[0] = kAnimationData;
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::release_animation_data() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  if (_internal_has_animation_data()) {
    clear_has_stream_part();
      ::nvidia_ace::animation_data::v1::AnimationData* temp = stream_part_.animation_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::_internal_animation_data() const {
  return _internal_has_animation_data()
      ? *stream_part_.animation_data_
      : reinterpret_cast< ::nvidia_ace::animation_data::v1::AnimationData&>(::nvidia_ace::animation_data::v1::_AnimationData_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::animation_data() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  return _internal_animation_data();
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::unsafe_arena_release_animation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  if (_internal_has_animation_data()) {
    clear_has_stream_part();
    ::nvidia_ace::animation_data::v1::AnimationData* temp = stream_part_.animation_data_;
    stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data) {
  clear_stream_part();
  if (animation_data) {
    set_has_animation_data();
    stream_part_.animation_data_ = animation_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::_internal_mutable_animation_data() {
  if (!_internal_has_animation_data()) {
    clear_stream_part();
    set_has_animation_data();
    stream_part_.animation_data_ = CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationData >(GetArena());
  }
  return stream_part_.animation_data_;
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::mutable_animation_data() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  return _internal_mutable_animation_data();
}

// .nvidia_ace.controller.v1.Event event = 3;
inline bool AnimationDataStream::_internal_has_event() const {
  return stream_part_case() == kEvent;
}
inline bool AnimationDataStream::has_event() const {
  return _internal_has_event();
}
inline void AnimationDataStream::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void AnimationDataStream::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete stream_part_.event_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::release_event() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.event)
  if (_internal_has_event()) {
    clear_has_stream_part();
      ::nvidia_ace::controller::v1::Event* temp = stream_part_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::Event& AnimationDataStream::_internal_event() const {
  return _internal_has_event()
      ? *stream_part_.event_
      : reinterpret_cast< ::nvidia_ace::controller::v1::Event&>(::nvidia_ace::controller::v1::_Event_default_instance_);
}
inline const ::nvidia_ace::controller::v1::Event& AnimationDataStream::event() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.event)
  return _internal_event();
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.event)
  if (_internal_has_event()) {
    clear_has_stream_part();
    ::nvidia_ace::controller::v1::Event* temp = stream_part_.event_;
    stream_part_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_event(::nvidia_ace::controller::v1::Event* event) {
  clear_stream_part();
  if (event) {
    set_has_event();
    stream_part_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.event)
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_stream_part();
    set_has_event();
    stream_part_.event_ = CreateMaybeMessage< ::nvidia_ace::controller::v1::Event >(GetArena());
  }
  return stream_part_.event_;
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::mutable_event() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.event)
  return _internal_mutable_event();
}

// .nvidia_ace.status.v1.Status status = 4;
inline bool AnimationDataStream::_internal_has_status() const {
  return stream_part_case() == kStatus;
}
inline bool AnimationDataStream::has_status() const {
  return _internal_has_status();
}
inline void AnimationDataStream::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::release_status() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.status)
  if (_internal_has_status()) {
    clear_has_stream_part();
      ::nvidia_ace::status::v1::Status* temp = stream_part_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::_internal_status() const {
  return _internal_has_status()
      ? *stream_part_.status_
      : reinterpret_cast< ::nvidia_ace::status::v1::Status&>(::nvidia_ace::status::v1::_Status_default_instance_);
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::status() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.status)
  return _internal_status();
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.status)
  if (_internal_has_status()) {
    clear_has_stream_part();
    ::nvidia_ace::status::v1::Status* temp = stream_part_.status_;
    stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* status) {
  clear_stream_part();
  if (status) {
    set_has_status();
    stream_part_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.status)
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_stream_part();
    set_has_status();
    stream_part_.status_ = CreateMaybeMessage< ::nvidia_ace::status::v1::Status >(GetArena());
  }
  return stream_part_.status_;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::mutable_status() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.status)
  return _internal_mutable_status();
}

inline bool AnimationDataStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AnimationDataStream::clear_has_stream_part() {
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AnimationDataStream::StreamPartCase AnimationDataStream::stream_part_case() const {
  return AnimationDataStream::StreamPartCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nvidia_ace::controller::v1::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nvidia_ace::controller::v1::EventType>() {
  return ::nvidia_ace::controller::v1::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto
