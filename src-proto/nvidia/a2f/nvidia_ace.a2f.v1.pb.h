// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.a2f.v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "nvidia/a2f/nvidia_ace.animation_id.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.status.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.audio.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.emotion_with_timecode.v1.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
namespace nvidia_ace {
namespace a2f {
namespace v1 {
class AudioStream;
class AudioStreamDefaultTypeInternal;
extern AudioStreamDefaultTypeInternal _AudioStream_default_instance_;
class AudioStreamHeader;
class AudioStreamHeaderDefaultTypeInternal;
extern AudioStreamHeaderDefaultTypeInternal _AudioStreamHeader_default_instance_;
class AudioWithEmotion;
class AudioWithEmotionDefaultTypeInternal;
extern AudioWithEmotionDefaultTypeInternal _AudioWithEmotion_default_instance_;
class BlendShapeParameters;
class BlendShapeParametersDefaultTypeInternal;
extern BlendShapeParametersDefaultTypeInternal _BlendShapeParameters_default_instance_;
class BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse;
class BlendShapeParameters_BsWeightMultipliersEntry_DoNotUseDefaultTypeInternal;
extern BlendShapeParameters_BsWeightMultipliersEntry_DoNotUseDefaultTypeInternal _BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_;
class BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse;
class BlendShapeParameters_BsWeightOffsetsEntry_DoNotUseDefaultTypeInternal;
extern BlendShapeParameters_BsWeightOffsetsEntry_DoNotUseDefaultTypeInternal _BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_;
class EmotionPostProcessingParameters;
class EmotionPostProcessingParametersDefaultTypeInternal;
extern EmotionPostProcessingParametersDefaultTypeInternal _EmotionPostProcessingParameters_default_instance_;
class FaceParameters;
class FaceParametersDefaultTypeInternal;
extern FaceParametersDefaultTypeInternal _FaceParameters_default_instance_;
class FaceParameters_FloatArrayParamsEntry_DoNotUse;
class FaceParameters_FloatArrayParamsEntry_DoNotUseDefaultTypeInternal;
extern FaceParameters_FloatArrayParamsEntry_DoNotUseDefaultTypeInternal _FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_;
class FaceParameters_FloatParamsEntry_DoNotUse;
class FaceParameters_FloatParamsEntry_DoNotUseDefaultTypeInternal;
extern FaceParameters_FloatParamsEntry_DoNotUseDefaultTypeInternal _FaceParameters_FloatParamsEntry_DoNotUse_default_instance_;
class FaceParameters_IntegerParamsEntry_DoNotUse;
class FaceParameters_IntegerParamsEntry_DoNotUseDefaultTypeInternal;
extern FaceParameters_IntegerParamsEntry_DoNotUseDefaultTypeInternal _FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
}  // namespace v1
}  // namespace a2f
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> ::nvidia_ace::a2f::v1::AudioStream* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::AudioStream>(Arena*);
template<> ::nvidia_ace::a2f::v1::AudioStreamHeader* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::AudioStreamHeader>(Arena*);
template<> ::nvidia_ace::a2f::v1::AudioWithEmotion* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::AudioWithEmotion>(Arena*);
template<> ::nvidia_ace::a2f::v1::BlendShapeParameters* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::BlendShapeParameters>(Arena*);
template<> ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse>(Arena*);
template<> ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse>(Arena*);
template<> ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(Arena*);
template<> ::nvidia_ace::a2f::v1::FaceParameters* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::FaceParameters>(Arena*);
template<> ::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse>(Arena*);
template<> ::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse>(Arena*);
template<> ::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse>(Arena*);
template<> ::nvidia_ace::a2f::v1::FloatArray* Arena::CreateMaybeMessage<::nvidia_ace::a2f::v1::FloatArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nvidia_ace {
namespace a2f {
namespace v1 {

// ===================================================================

class AudioStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.AudioStream) */ {
 public:
  inline AudioStream() : AudioStream(nullptr) {}
  virtual ~AudioStream();

  AudioStream(const AudioStream& from);
  AudioStream(AudioStream&& from) noexcept
    : AudioStream() {
    *this = ::std::move(from);
  }

  inline AudioStream& operator=(const AudioStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStream& operator=(AudioStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStream& default_instance();

  enum StreamPartCase {
    kAudioStreamHeader = 1,
    kAudioWithEmotion = 2,
    STREAM_PART_NOT_SET = 0,
  };

  static inline const AudioStream* internal_default_instance() {
    return reinterpret_cast<const AudioStream*>(
               &_AudioStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioStream& a, AudioStream& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStream* New() const final {
    return CreateMaybeMessage<AudioStream>(nullptr);
  }

  AudioStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStream& from);
  void MergeFrom(const AudioStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.AudioStream";
  }
  protected:
  explicit AudioStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioStreamHeaderFieldNumber = 1,
    kAudioWithEmotionFieldNumber = 2,
  };
  // .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
  bool has_audio_stream_header() const;
  private:
  bool _internal_has_audio_stream_header() const;
  public:
  void clear_audio_stream_header();
  const ::nvidia_ace::a2f::v1::AudioStreamHeader& audio_stream_header() const;
  ::nvidia_ace::a2f::v1::AudioStreamHeader* release_audio_stream_header();
  ::nvidia_ace::a2f::v1::AudioStreamHeader* mutable_audio_stream_header();
  void set_allocated_audio_stream_header(::nvidia_ace::a2f::v1::AudioStreamHeader* audio_stream_header);
  private:
  const ::nvidia_ace::a2f::v1::AudioStreamHeader& _internal_audio_stream_header() const;
  ::nvidia_ace::a2f::v1::AudioStreamHeader* _internal_mutable_audio_stream_header();
  public:
  void unsafe_arena_set_allocated_audio_stream_header(
      ::nvidia_ace::a2f::v1::AudioStreamHeader* audio_stream_header);
  ::nvidia_ace::a2f::v1::AudioStreamHeader* unsafe_arena_release_audio_stream_header();

  // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
  bool has_audio_with_emotion() const;
  private:
  bool _internal_has_audio_with_emotion() const;
  public:
  void clear_audio_with_emotion();
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& audio_with_emotion() const;
  ::nvidia_ace::a2f::v1::AudioWithEmotion* release_audio_with_emotion();
  ::nvidia_ace::a2f::v1::AudioWithEmotion* mutable_audio_with_emotion();
  void set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion);
  private:
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& _internal_audio_with_emotion() const;
  ::nvidia_ace::a2f::v1::AudioWithEmotion* _internal_mutable_audio_with_emotion();
  public:
  void unsafe_arena_set_allocated_audio_with_emotion(
      ::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion);
  ::nvidia_ace::a2f::v1::AudioWithEmotion* unsafe_arena_release_audio_with_emotion();

  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.AudioStream)
 private:
  class _Internal;
  void set_has_audio_stream_header();
  void set_has_audio_with_emotion();

  inline bool has_stream_part() const;
  inline void clear_has_stream_part();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamPartUnion {
    StreamPartUnion() {}
    ::nvidia_ace::a2f::v1::AudioStreamHeader* audio_stream_header_;
    ::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion_;
  } stream_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.AudioStreamHeader) */ {
 public:
  inline AudioStreamHeader() : AudioStreamHeader(nullptr) {}
  virtual ~AudioStreamHeader();

  AudioStreamHeader(const AudioStreamHeader& from);
  AudioStreamHeader(AudioStreamHeader&& from) noexcept
    : AudioStreamHeader() {
    *this = ::std::move(from);
  }

  inline AudioStreamHeader& operator=(const AudioStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamHeader& operator=(AudioStreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioStreamHeader& default_instance();

  static inline const AudioStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AudioStreamHeader*>(
               &_AudioStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioStreamHeader& a, AudioStreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioStreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioStreamHeader* New() const final {
    return CreateMaybeMessage<AudioStreamHeader>(nullptr);
  }

  AudioStreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioStreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioStreamHeader& from);
  void MergeFrom(const AudioStreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.AudioStreamHeader";
  }
  protected:
  explicit AudioStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationIdsFieldNumber = 1,
    kAudioHeaderFieldNumber = 2,
    kFaceParamsFieldNumber = 3,
    kEmotionPostProcessingParamsFieldNumber = 4,
    kBlendshapeParamsFieldNumber = 5,
  };
  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  bool has_animation_ids() const;
  private:
  bool _internal_has_animation_ids() const;
  public:
  void clear_animation_ids();
  const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* release_animation_ids();
  ::nvidia_ace::animation_id::v1::AnimationIds* mutable_animation_ids();
  void set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* animation_ids);
  private:
  const ::nvidia_ace::animation_id::v1::AnimationIds& _internal_animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* _internal_mutable_animation_ids();
  public:
  void unsafe_arena_set_allocated_animation_ids(
      ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids);
  ::nvidia_ace::animation_id::v1::AnimationIds* unsafe_arena_release_animation_ids();

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
  bool has_audio_header() const;
  private:
  bool _internal_has_audio_header() const;
  public:
  void clear_audio_header();
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header);
  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();
  public:
  void unsafe_arena_set_allocated_audio_header(
      ::nvidia_ace::audio::v1::AudioHeader* audio_header);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
  bool has_face_params() const;
  private:
  bool _internal_has_face_params() const;
  public:
  void clear_face_params();
  const ::nvidia_ace::a2f::v1::FaceParameters& face_params() const;
  ::nvidia_ace::a2f::v1::FaceParameters* release_face_params();
  ::nvidia_ace::a2f::v1::FaceParameters* mutable_face_params();
  void set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* face_params);
  private:
  const ::nvidia_ace::a2f::v1::FaceParameters& _internal_face_params() const;
  ::nvidia_ace::a2f::v1::FaceParameters* _internal_mutable_face_params();
  public:
  void unsafe_arena_set_allocated_face_params(
      ::nvidia_ace::a2f::v1::FaceParameters* face_params);
  ::nvidia_ace::a2f::v1::FaceParameters* unsafe_arena_release_face_params();

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
  bool has_emotion_post_processing_params() const;
  private:
  bool _internal_has_emotion_post_processing_params() const;
  public:
  void clear_emotion_post_processing_params();
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& emotion_post_processing_params() const;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* release_emotion_post_processing_params();
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* mutable_emotion_post_processing_params();
  void set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params);
  private:
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& _internal_emotion_post_processing_params() const;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* _internal_mutable_emotion_post_processing_params();
  public:
  void unsafe_arena_set_allocated_emotion_post_processing_params(
      ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params);
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* unsafe_arena_release_emotion_post_processing_params();

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
  bool has_blendshape_params() const;
  private:
  bool _internal_has_blendshape_params() const;
  public:
  void clear_blendshape_params();
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& blendshape_params() const;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* release_blendshape_params();
  ::nvidia_ace::a2f::v1::BlendShapeParameters* mutable_blendshape_params();
  void set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params);
  private:
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& _internal_blendshape_params() const;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* _internal_mutable_blendshape_params();
  public:
  void unsafe_arena_set_allocated_blendshape_params(
      ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params);
  ::nvidia_ace::a2f::v1::BlendShapeParameters* unsafe_arena_release_blendshape_params();

  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.AudioStreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids_;
  ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
  ::nvidia_ace::a2f::v1::FaceParameters* face_params_;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params_;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FloatArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.FloatArray) */ {
 public:
  inline FloatArray() : FloatArray(nullptr) {}
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);
  FloatArray(FloatArray&& from) noexcept
    : FloatArray() {
    *this = ::std::move(from);
  }

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatArray& default_instance();

  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
               &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FloatArray& a, FloatArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatArray* New() const final {
    return CreateMaybeMessage<FloatArray>(nullptr);
  }

  FloatArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.FloatArray";
  }
  protected:
  explicit FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.FloatArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FaceParameters_FloatParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceParameters_FloatParamsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceParameters_FloatParamsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  FaceParameters_FloatParamsEntry_DoNotUse();
  explicit FaceParameters_FloatParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaceParameters_FloatParamsEntry_DoNotUse& other);
  static const FaceParameters_FloatParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaceParameters_FloatParamsEntry_DoNotUse*>(&_FaceParameters_FloatParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.FaceParameters.FloatParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class FaceParameters_IntegerParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceParameters_IntegerParamsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceParameters_IntegerParamsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  FaceParameters_IntegerParamsEntry_DoNotUse();
  explicit FaceParameters_IntegerParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaceParameters_IntegerParamsEntry_DoNotUse& other);
  static const FaceParameters_IntegerParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaceParameters_IntegerParamsEntry_DoNotUse*>(&_FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.FaceParameters.IntegerParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class FaceParameters_FloatArrayParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceParameters_FloatArrayParamsEntry_DoNotUse, 
    std::string, ::nvidia_ace::a2f::v1::FloatArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceParameters_FloatArrayParamsEntry_DoNotUse, 
    std::string, ::nvidia_ace::a2f::v1::FloatArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FaceParameters_FloatArrayParamsEntry_DoNotUse();
  explicit FaceParameters_FloatArrayParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaceParameters_FloatArrayParamsEntry_DoNotUse& other);
  static const FaceParameters_FloatArrayParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaceParameters_FloatArrayParamsEntry_DoNotUse*>(&_FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.FaceParameters.FloatArrayParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class FaceParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.FaceParameters) */ {
 public:
  inline FaceParameters() : FaceParameters(nullptr) {}
  virtual ~FaceParameters();

  FaceParameters(const FaceParameters& from);
  FaceParameters(FaceParameters&& from) noexcept
    : FaceParameters() {
    *this = ::std::move(from);
  }

  inline FaceParameters& operator=(const FaceParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceParameters& operator=(FaceParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceParameters& default_instance();

  static inline const FaceParameters* internal_default_instance() {
    return reinterpret_cast<const FaceParameters*>(
               &_FaceParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FaceParameters& a, FaceParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceParameters* New() const final {
    return CreateMaybeMessage<FaceParameters>(nullptr);
  }

  FaceParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceParameters& from);
  void MergeFrom(const FaceParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.FaceParameters";
  }
  protected:
  explicit FaceParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFloatParamsFieldNumber = 1,
    kIntegerParamsFieldNumber = 2,
    kFloatArrayParamsFieldNumber = 3,
  };
  // map<string, float> float_params = 1;
  int float_params_size() const;
  private:
  int _internal_float_params_size() const;
  public:
  void clear_float_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_float_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_float_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      float_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_float_params();

  // map<string, int32> integer_params = 2;
  int integer_params_size() const;
  private:
  int _internal_integer_params_size() const;
  public:
  void clear_integer_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_integer_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_integer_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      integer_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_integer_params();

  // map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
  int float_array_params_size() const;
  private:
  int _internal_float_array_params_size() const;
  public:
  void clear_float_array_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >&
      _internal_float_array_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >*
      _internal_mutable_float_array_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >&
      float_array_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >*
      mutable_float_array_params();

  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.FaceParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaceParameters_FloatParamsEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> float_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaceParameters_IntegerParamsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> integer_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaceParameters_FloatArrayParamsEntry_DoNotUse,
      std::string, ::nvidia_ace::a2f::v1::FloatArray,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> float_array_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse();
  explicit BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse& other);
  static const BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse*>(&_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.BlendShapeParameters.BsWeightMultipliersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse();
  explicit BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse& other);
  static const BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse*>(&_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.BlendShapeParameters.BsWeightOffsetsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class BlendShapeParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.BlendShapeParameters) */ {
 public:
  inline BlendShapeParameters() : BlendShapeParameters(nullptr) {}
  virtual ~BlendShapeParameters();

  BlendShapeParameters(const BlendShapeParameters& from);
  BlendShapeParameters(BlendShapeParameters&& from) noexcept
    : BlendShapeParameters() {
    *this = ::std::move(from);
  }

  inline BlendShapeParameters& operator=(const BlendShapeParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendShapeParameters& operator=(BlendShapeParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlendShapeParameters& default_instance();

  static inline const BlendShapeParameters* internal_default_instance() {
    return reinterpret_cast<const BlendShapeParameters*>(
               &_BlendShapeParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BlendShapeParameters& a, BlendShapeParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendShapeParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlendShapeParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlendShapeParameters* New() const final {
    return CreateMaybeMessage<BlendShapeParameters>(nullptr);
  }

  BlendShapeParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlendShapeParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlendShapeParameters& from);
  void MergeFrom(const BlendShapeParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlendShapeParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.BlendShapeParameters";
  }
  protected:
  explicit BlendShapeParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBsWeightMultipliersFieldNumber = 1,
    kBsWeightOffsetsFieldNumber = 2,
  };
  // map<string, float> bs_weight_multipliers = 1;
  int bs_weight_multipliers_size() const;
  private:
  int _internal_bs_weight_multipliers_size() const;
  public:
  void clear_bs_weight_multipliers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_bs_weight_multipliers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_bs_weight_multipliers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      bs_weight_multipliers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_bs_weight_multipliers();

  // map<string, float> bs_weight_offsets = 2;
  int bs_weight_offsets_size() const;
  private:
  int _internal_bs_weight_offsets_size() const;
  public:
  void clear_bs_weight_offsets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_bs_weight_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_bs_weight_offsets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      bs_weight_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_bs_weight_offsets();

  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.BlendShapeParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> bs_weight_multipliers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> bs_weight_offsets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class EmotionPostProcessingParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.EmotionPostProcessingParameters) */ {
 public:
  inline EmotionPostProcessingParameters() : EmotionPostProcessingParameters(nullptr) {}
  virtual ~EmotionPostProcessingParameters();

  EmotionPostProcessingParameters(const EmotionPostProcessingParameters& from);
  EmotionPostProcessingParameters(EmotionPostProcessingParameters&& from) noexcept
    : EmotionPostProcessingParameters() {
    *this = ::std::move(from);
  }

  inline EmotionPostProcessingParameters& operator=(const EmotionPostProcessingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmotionPostProcessingParameters& operator=(EmotionPostProcessingParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmotionPostProcessingParameters& default_instance();

  static inline const EmotionPostProcessingParameters* internal_default_instance() {
    return reinterpret_cast<const EmotionPostProcessingParameters*>(
               &_EmotionPostProcessingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EmotionPostProcessingParameters& a, EmotionPostProcessingParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(EmotionPostProcessingParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmotionPostProcessingParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmotionPostProcessingParameters* New() const final {
    return CreateMaybeMessage<EmotionPostProcessingParameters>(nullptr);
  }

  EmotionPostProcessingParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmotionPostProcessingParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmotionPostProcessingParameters& from);
  void MergeFrom(const EmotionPostProcessingParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmotionPostProcessingParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.EmotionPostProcessingParameters";
  }
  protected:
  explicit EmotionPostProcessingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmotionContrastFieldNumber = 1,
    kLiveBlendCoefFieldNumber = 2,
    kEnablePreferredEmotionFieldNumber = 3,
    kPreferredEmotionStrengthFieldNumber = 4,
    kEmotionStrengthFieldNumber = 5,
    kMaxEmotionsFieldNumber = 6,
  };
  // float emotion_contrast = 1;
  bool has_emotion_contrast() const;
  private:
  bool _internal_has_emotion_contrast() const;
  public:
  void clear_emotion_contrast();
  float emotion_contrast() const;
  void set_emotion_contrast(float value);
  private:
  float _internal_emotion_contrast() const;
  void _internal_set_emotion_contrast(float value);
  public:

  // float live_blend_coef = 2;
  bool has_live_blend_coef() const;
  private:
  bool _internal_has_live_blend_coef() const;
  public:
  void clear_live_blend_coef();
  float live_blend_coef() const;
  void set_live_blend_coef(float value);
  private:
  float _internal_live_blend_coef() const;
  void _internal_set_live_blend_coef(float value);
  public:

  // bool enable_preferred_emotion = 3;
  bool has_enable_preferred_emotion() const;
  private:
  bool _internal_has_enable_preferred_emotion() const;
  public:
  void clear_enable_preferred_emotion();
  bool enable_preferred_emotion() const;
  void set_enable_preferred_emotion(bool value);
  private:
  bool _internal_enable_preferred_emotion() const;
  void _internal_set_enable_preferred_emotion(bool value);
  public:

  // float preferred_emotion_strength = 4;
  bool has_preferred_emotion_strength() const;
  private:
  bool _internal_has_preferred_emotion_strength() const;
  public:
  void clear_preferred_emotion_strength();
  float preferred_emotion_strength() const;
  void set_preferred_emotion_strength(float value);
  private:
  float _internal_preferred_emotion_strength() const;
  void _internal_set_preferred_emotion_strength(float value);
  public:

  // float emotion_strength = 5;
  bool has_emotion_strength() const;
  private:
  bool _internal_has_emotion_strength() const;
  public:
  void clear_emotion_strength();
  float emotion_strength() const;
  void set_emotion_strength(float value);
  private:
  float _internal_emotion_strength() const;
  void _internal_set_emotion_strength(float value);
  public:

  // int32 max_emotions = 6;
  bool has_max_emotions() const;
  private:
  bool _internal_has_max_emotions() const;
  public:
  void clear_max_emotions();
  ::PROTOBUF_NAMESPACE_ID::int32 max_emotions() const;
  void set_max_emotions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_emotions() const;
  void _internal_set_max_emotions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float emotion_contrast_;
  float live_blend_coef_;
  bool enable_preferred_emotion_;
  float preferred_emotion_strength_;
  float emotion_strength_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_emotions_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioWithEmotion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.AudioWithEmotion) */ {
 public:
  inline AudioWithEmotion() : AudioWithEmotion(nullptr) {}
  virtual ~AudioWithEmotion();

  AudioWithEmotion(const AudioWithEmotion& from);
  AudioWithEmotion(AudioWithEmotion&& from) noexcept
    : AudioWithEmotion() {
    *this = ::std::move(from);
  }

  inline AudioWithEmotion& operator=(const AudioWithEmotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioWithEmotion& operator=(AudioWithEmotion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioWithEmotion& default_instance();

  static inline const AudioWithEmotion* internal_default_instance() {
    return reinterpret_cast<const AudioWithEmotion*>(
               &_AudioWithEmotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AudioWithEmotion& a, AudioWithEmotion& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioWithEmotion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioWithEmotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioWithEmotion* New() const final {
    return CreateMaybeMessage<AudioWithEmotion>(nullptr);
  }

  AudioWithEmotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioWithEmotion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioWithEmotion& from);
  void MergeFrom(const AudioWithEmotion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioWithEmotion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.a2f.v1.AudioWithEmotion";
  }
  protected:
  explicit AudioWithEmotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmotionsFieldNumber = 2,
    kAudioBufferFieldNumber = 1,
  };
  // repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
  int emotions_size() const;
  private:
  int _internal_emotions_size() const;
  public:
  void clear_emotions();
  ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* mutable_emotions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode >*
      mutable_emotions();
  private:
  const ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode& _internal_emotions(int index) const;
  ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* _internal_add_emotions();
  public:
  const ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode& emotions(int index) const;
  ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* add_emotions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode >&
      emotions() const;

  // bytes audio_buffer = 1;
  void clear_audio_buffer();
  const std::string& audio_buffer() const;
  void set_audio_buffer(const std::string& value);
  void set_audio_buffer(std::string&& value);
  void set_audio_buffer(const char* value);
  void set_audio_buffer(const void* value, size_t size);
  std::string* mutable_audio_buffer();
  std::string* release_audio_buffer();
  void set_allocated_audio_buffer(std::string* audio_buffer);
  private:
  const std::string& _internal_audio_buffer() const;
  void _internal_set_audio_buffer(const std::string& value);
  std::string* _internal_mutable_audio_buffer();
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.AudioWithEmotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode > emotions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_buffer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioStream

// .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
inline bool AudioStream::_internal_has_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader;
}
inline bool AudioStream::has_audio_stream_header() const {
  return _internal_has_audio_stream_header();
}
inline void AudioStream::set_has_audio_stream_header() {
  _oneof_case_[0] = kAudioStreamHeader;
}
inline void AudioStream::clear_audio_stream_header() {
  if (_internal_has_audio_stream_header()) {
    if (GetArena() == nullptr) {
      delete stream_part_.audio_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::release_audio_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  if (_internal_has_audio_stream_header()) {
    clear_has_stream_part();
      ::nvidia_ace::a2f::v1::AudioStreamHeader* temp = stream_part_.audio_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::a2f::v1::AudioStreamHeader& AudioStream::_internal_audio_stream_header() const {
  return _internal_has_audio_stream_header()
      ? *stream_part_.audio_stream_header_
      : reinterpret_cast< ::nvidia_ace::a2f::v1::AudioStreamHeader&>(::nvidia_ace::a2f::v1::_AudioStreamHeader_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::AudioStreamHeader& AudioStream::audio_stream_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  return _internal_audio_stream_header();
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::unsafe_arena_release_audio_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  if (_internal_has_audio_stream_header()) {
    clear_has_stream_part();
    ::nvidia_ace::a2f::v1::AudioStreamHeader* temp = stream_part_.audio_stream_header_;
    stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_stream_header(::nvidia_ace::a2f::v1::AudioStreamHeader* audio_stream_header) {
  clear_stream_part();
  if (audio_stream_header) {
    set_has_audio_stream_header();
    stream_part_.audio_stream_header_ = audio_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::_internal_mutable_audio_stream_header() {
  if (!_internal_has_audio_stream_header()) {
    clear_stream_part();
    set_has_audio_stream_header();
    stream_part_.audio_stream_header_ = CreateMaybeMessage< ::nvidia_ace::a2f::v1::AudioStreamHeader >(GetArena());
  }
  return stream_part_.audio_stream_header_;
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::mutable_audio_stream_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  return _internal_mutable_audio_stream_header();
}

// .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
inline bool AudioStream::_internal_has_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion;
}
inline bool AudioStream::has_audio_with_emotion() const {
  return _internal_has_audio_with_emotion();
}
inline void AudioStream::set_has_audio_with_emotion() {
  _oneof_case_[0] = kAudioWithEmotion;
}
inline void AudioStream::clear_audio_with_emotion() {
  if (_internal_has_audio_with_emotion()) {
    if (GetArena() == nullptr) {
      delete stream_part_.audio_with_emotion_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::release_audio_with_emotion() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  if (_internal_has_audio_with_emotion()) {
    clear_has_stream_part();
      ::nvidia_ace::a2f::v1::AudioWithEmotion* temp = stream_part_.audio_with_emotion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::_internal_audio_with_emotion() const {
  return _internal_has_audio_with_emotion()
      ? *stream_part_.audio_with_emotion_
      : reinterpret_cast< ::nvidia_ace::a2f::v1::AudioWithEmotion&>(::nvidia_ace::a2f::v1::_AudioWithEmotion_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::audio_with_emotion() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  return _internal_audio_with_emotion();
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::unsafe_arena_release_audio_with_emotion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  if (_internal_has_audio_with_emotion()) {
    clear_has_stream_part();
    ::nvidia_ace::a2f::v1::AudioWithEmotion* temp = stream_part_.audio_with_emotion_;
    stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion) {
  clear_stream_part();
  if (audio_with_emotion) {
    set_has_audio_with_emotion();
    stream_part_.audio_with_emotion_ = audio_with_emotion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::_internal_mutable_audio_with_emotion() {
  if (!_internal_has_audio_with_emotion()) {
    clear_stream_part();
    set_has_audio_with_emotion();
    stream_part_.audio_with_emotion_ = CreateMaybeMessage< ::nvidia_ace::a2f::v1::AudioWithEmotion >(GetArena());
  }
  return stream_part_.audio_with_emotion_;
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::mutable_audio_with_emotion() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  return _internal_mutable_audio_with_emotion();
}

inline bool AudioStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AudioStream::clear_has_stream_part() {
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AudioStream::StreamPartCase AudioStream::stream_part_case() const {
  return AudioStream::StreamPartCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioStreamHeader

// .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
inline bool AudioStreamHeader::_internal_has_animation_ids() const {
  return this != internal_default_instance() && animation_ids_ != nullptr;
}
inline bool AudioStreamHeader::has_animation_ids() const {
  return _internal_has_animation_ids();
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AudioStreamHeader::_internal_animation_ids() const {
  const ::nvidia_ace::animation_id::v1::AnimationIds* p = animation_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_id::v1::AnimationIds&>(
      ::nvidia_ace::animation_id::v1::_AnimationIds_default_instance_);
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AudioStreamHeader::animation_ids() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
  return _internal_animation_ids();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_animation_ids(
    ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_ids_);
  }
  animation_ids_ = animation_ids;
  if (animation_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::release_animation_ids() {
  
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = animation_ids_;
  animation_ids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::unsafe_arena_release_animation_ids() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
  
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = animation_ids_;
  animation_ids_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::_internal_mutable_animation_ids() {
  
  if (animation_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_id::v1::AnimationIds>(GetArena());
    animation_ids_ = p;
  }
  return animation_ids_;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::mutable_animation_ids() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
  return _internal_mutable_animation_ids();
}
inline void AudioStreamHeader::set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* animation_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_ids_);
  }
  if (animation_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_ids)->GetArena();
    if (message_arena != submessage_arena) {
      animation_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_ids, submessage_arena);
    }
    
  } else {
    
  }
  animation_ids_ = animation_ids;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
}

// .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
inline bool AudioStreamHeader::_internal_has_audio_header() const {
  return this != internal_default_instance() && audio_header_ != nullptr;
}
inline bool AudioStreamHeader::has_audio_header() const {
  return _internal_has_audio_header();
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::_internal_audio_header() const {
  const ::nvidia_ace::audio::v1::AudioHeader* p = audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(
      ::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::audio_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_audio_header(
    ::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  audio_header_ = audio_header;
  if (audio_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::release_audio_header() {
  
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::unsafe_arena_release_audio_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
  
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::_internal_mutable_audio_header() {
  
  if (audio_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    audio_header_ = p;
  }
  return audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::mutable_audio_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
  return _internal_mutable_audio_header();
}
inline void AudioStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  if (audio_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header)->GetArena();
    if (message_arena != submessage_arena) {
      audio_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_header, submessage_arena);
    }
    
  } else {
    
  }
  audio_header_ = audio_header;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
}

// .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
inline bool AudioStreamHeader::_internal_has_face_params() const {
  return this != internal_default_instance() && face_params_ != nullptr;
}
inline bool AudioStreamHeader::has_face_params() const {
  return _internal_has_face_params();
}
inline void AudioStreamHeader::clear_face_params() {
  if (GetArena() == nullptr && face_params_ != nullptr) {
    delete face_params_;
  }
  face_params_ = nullptr;
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::_internal_face_params() const {
  const ::nvidia_ace::a2f::v1::FaceParameters* p = face_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::FaceParameters&>(
      ::nvidia_ace::a2f::v1::_FaceParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::face_params() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
  return _internal_face_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_face_params(
    ::nvidia_ace::a2f::v1::FaceParameters* face_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_params_);
  }
  face_params_ = face_params;
  if (face_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::release_face_params() {
  
  ::nvidia_ace::a2f::v1::FaceParameters* temp = face_params_;
  face_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::unsafe_arena_release_face_params() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
  
  ::nvidia_ace::a2f::v1::FaceParameters* temp = face_params_;
  face_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::_internal_mutable_face_params() {
  
  if (face_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::a2f::v1::FaceParameters>(GetArena());
    face_params_ = p;
  }
  return face_params_;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::mutable_face_params() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
  return _internal_mutable_face_params();
}
inline void AudioStreamHeader::set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* face_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete face_params_;
  }
  if (face_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(face_params);
    if (message_arena != submessage_arena) {
      face_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_params, submessage_arena);
    }
    
  } else {
    
  }
  face_params_ = face_params;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
}

// .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
inline bool AudioStreamHeader::_internal_has_emotion_post_processing_params() const {
  return this != internal_default_instance() && emotion_post_processing_params_ != nullptr;
}
inline bool AudioStreamHeader::has_emotion_post_processing_params() const {
  return _internal_has_emotion_post_processing_params();
}
inline void AudioStreamHeader::clear_emotion_post_processing_params() {
  if (GetArena() == nullptr && emotion_post_processing_params_ != nullptr) {
    delete emotion_post_processing_params_;
  }
  emotion_post_processing_params_ = nullptr;
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::_internal_emotion_post_processing_params() const {
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* p = emotion_post_processing_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters&>(
      ::nvidia_ace::a2f::v1::_EmotionPostProcessingParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::emotion_post_processing_params() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
  return _internal_emotion_post_processing_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_emotion_post_processing_params(
    ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotion_post_processing_params_);
  }
  emotion_post_processing_params_ = emotion_post_processing_params;
  if (emotion_post_processing_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::release_emotion_post_processing_params() {
  
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* temp = emotion_post_processing_params_;
  emotion_post_processing_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::unsafe_arena_release_emotion_post_processing_params() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
  
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* temp = emotion_post_processing_params_;
  emotion_post_processing_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::_internal_mutable_emotion_post_processing_params() {
  
  if (emotion_post_processing_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(GetArena());
    emotion_post_processing_params_ = p;
  }
  return emotion_post_processing_params_;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::mutable_emotion_post_processing_params() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
  return _internal_mutable_emotion_post_processing_params();
}
inline void AudioStreamHeader::set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete emotion_post_processing_params_;
  }
  if (emotion_post_processing_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emotion_post_processing_params);
    if (message_arena != submessage_arena) {
      emotion_post_processing_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotion_post_processing_params, submessage_arena);
    }
    
  } else {
    
  }
  emotion_post_processing_params_ = emotion_post_processing_params;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
}

// .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
inline bool AudioStreamHeader::_internal_has_blendshape_params() const {
  return this != internal_default_instance() && blendshape_params_ != nullptr;
}
inline bool AudioStreamHeader::has_blendshape_params() const {
  return _internal_has_blendshape_params();
}
inline void AudioStreamHeader::clear_blendshape_params() {
  if (GetArena() == nullptr && blendshape_params_ != nullptr) {
    delete blendshape_params_;
  }
  blendshape_params_ = nullptr;
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::_internal_blendshape_params() const {
  const ::nvidia_ace::a2f::v1::BlendShapeParameters* p = blendshape_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::BlendShapeParameters&>(
      ::nvidia_ace::a2f::v1::_BlendShapeParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::blendshape_params() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
  return _internal_blendshape_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_blendshape_params(
    ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blendshape_params_);
  }
  blendshape_params_ = blendshape_params;
  if (blendshape_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::release_blendshape_params() {
  
  ::nvidia_ace::a2f::v1::BlendShapeParameters* temp = blendshape_params_;
  blendshape_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::unsafe_arena_release_blendshape_params() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
  
  ::nvidia_ace::a2f::v1::BlendShapeParameters* temp = blendshape_params_;
  blendshape_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::_internal_mutable_blendshape_params() {
  
  if (blendshape_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::a2f::v1::BlendShapeParameters>(GetArena());
    blendshape_params_ = p;
  }
  return blendshape_params_;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::mutable_blendshape_params() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
  return _internal_mutable_blendshape_params();
}
inline void AudioStreamHeader::set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete blendshape_params_;
  }
  if (blendshape_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(blendshape_params);
    if (message_arena != submessage_arena) {
      blendshape_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blendshape_params, submessage_arena);
    }
    
  } else {
    
  }
  blendshape_params_ = blendshape_params;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
}

// -------------------------------------------------------------------

// FloatArray

// repeated float values = 1;
inline int FloatArray::_internal_values_size() const {
  return values_.size();
}
inline int FloatArray::values_size() const {
  return _internal_values_size();
}
inline void FloatArray::clear_values() {
  values_.Clear();
}
inline float FloatArray::_internal_values(int index) const {
  return values_.Get(index);
}
inline float FloatArray::values(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.FloatArray.values)
  return _internal_values(index);
}
inline void FloatArray::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.FloatArray.values)
}
inline void FloatArray::_internal_add_values(float value) {
  values_.Add(value);
}
inline void FloatArray::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.a2f.v1.FloatArray.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::values() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.a2f.v1.FloatArray.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.a2f.v1.FloatArray.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FaceParameters

// map<string, float> float_params = 1;
inline int FaceParameters::_internal_float_params_size() const {
  return float_params_.size();
}
inline int FaceParameters::float_params_size() const {
  return _internal_float_params_size();
}
inline void FaceParameters::clear_float_params() {
  float_params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
FaceParameters::_internal_float_params() const {
  return float_params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
FaceParameters::float_params() const {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.FaceParameters.float_params)
  return _internal_float_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
FaceParameters::_internal_mutable_float_params() {
  return float_params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
FaceParameters::mutable_float_params() {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.FaceParameters.float_params)
  return _internal_mutable_float_params();
}

// map<string, int32> integer_params = 2;
inline int FaceParameters::_internal_integer_params_size() const {
  return integer_params_.size();
}
inline int FaceParameters::integer_params_size() const {
  return _internal_integer_params_size();
}
inline void FaceParameters::clear_integer_params() {
  integer_params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
FaceParameters::_internal_integer_params() const {
  return integer_params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
FaceParameters::integer_params() const {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.FaceParameters.integer_params)
  return _internal_integer_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
FaceParameters::_internal_mutable_integer_params() {
  return integer_params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
FaceParameters::mutable_integer_params() {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.FaceParameters.integer_params)
  return _internal_mutable_integer_params();
}

// map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
inline int FaceParameters::_internal_float_array_params_size() const {
  return float_array_params_.size();
}
inline int FaceParameters::float_array_params_size() const {
  return _internal_float_array_params_size();
}
inline void FaceParameters::clear_float_array_params() {
  float_array_params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >&
FaceParameters::_internal_float_array_params() const {
  return float_array_params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >&
FaceParameters::float_array_params() const {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.FaceParameters.float_array_params)
  return _internal_float_array_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >*
FaceParameters::_internal_mutable_float_array_params() {
  return float_array_params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >*
FaceParameters::mutable_float_array_params() {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.FaceParameters.float_array_params)
  return _internal_mutable_float_array_params();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BlendShapeParameters

// map<string, float> bs_weight_multipliers = 1;
inline int BlendShapeParameters::_internal_bs_weight_multipliers_size() const {
  return bs_weight_multipliers_.size();
}
inline int BlendShapeParameters::bs_weight_multipliers_size() const {
  return _internal_bs_weight_multipliers_size();
}
inline void BlendShapeParameters::clear_bs_weight_multipliers() {
  bs_weight_multipliers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
BlendShapeParameters::_internal_bs_weight_multipliers() const {
  return bs_weight_multipliers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
BlendShapeParameters::bs_weight_multipliers() const {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_multipliers)
  return _internal_bs_weight_multipliers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
BlendShapeParameters::_internal_mutable_bs_weight_multipliers() {
  return bs_weight_multipliers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
BlendShapeParameters::mutable_bs_weight_multipliers() {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_multipliers)
  return _internal_mutable_bs_weight_multipliers();
}

// map<string, float> bs_weight_offsets = 2;
inline int BlendShapeParameters::_internal_bs_weight_offsets_size() const {
  return bs_weight_offsets_.size();
}
inline int BlendShapeParameters::bs_weight_offsets_size() const {
  return _internal_bs_weight_offsets_size();
}
inline void BlendShapeParameters::clear_bs_weight_offsets() {
  bs_weight_offsets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
BlendShapeParameters::_internal_bs_weight_offsets() const {
  return bs_weight_offsets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
BlendShapeParameters::bs_weight_offsets() const {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_offsets)
  return _internal_bs_weight_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
BlendShapeParameters::_internal_mutable_bs_weight_offsets() {
  return bs_weight_offsets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
BlendShapeParameters::mutable_bs_weight_offsets() {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_offsets)
  return _internal_mutable_bs_weight_offsets();
}

// -------------------------------------------------------------------

// EmotionPostProcessingParameters

// float emotion_contrast = 1;
inline bool EmotionPostProcessingParameters::_internal_has_emotion_contrast() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmotionPostProcessingParameters::has_emotion_contrast() const {
  return _internal_has_emotion_contrast();
}
inline void EmotionPostProcessingParameters::clear_emotion_contrast() {
  emotion_contrast_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float EmotionPostProcessingParameters::_internal_emotion_contrast() const {
  return emotion_contrast_;
}
inline float EmotionPostProcessingParameters::emotion_contrast() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_contrast)
  return _internal_emotion_contrast();
}
inline void EmotionPostProcessingParameters::_internal_set_emotion_contrast(float value) {
  _has_bits_[0] |= 0x00000001u;
  emotion_contrast_ = value;
}
inline void EmotionPostProcessingParameters::set_emotion_contrast(float value) {
  _internal_set_emotion_contrast(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_contrast)
}

// float live_blend_coef = 2;
inline bool EmotionPostProcessingParameters::_internal_has_live_blend_coef() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EmotionPostProcessingParameters::has_live_blend_coef() const {
  return _internal_has_live_blend_coef();
}
inline void EmotionPostProcessingParameters::clear_live_blend_coef() {
  live_blend_coef_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float EmotionPostProcessingParameters::_internal_live_blend_coef() const {
  return live_blend_coef_;
}
inline float EmotionPostProcessingParameters::live_blend_coef() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.live_blend_coef)
  return _internal_live_blend_coef();
}
inline void EmotionPostProcessingParameters::_internal_set_live_blend_coef(float value) {
  _has_bits_[0] |= 0x00000002u;
  live_blend_coef_ = value;
}
inline void EmotionPostProcessingParameters::set_live_blend_coef(float value) {
  _internal_set_live_blend_coef(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.live_blend_coef)
}

// bool enable_preferred_emotion = 3;
inline bool EmotionPostProcessingParameters::_internal_has_enable_preferred_emotion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EmotionPostProcessingParameters::has_enable_preferred_emotion() const {
  return _internal_has_enable_preferred_emotion();
}
inline void EmotionPostProcessingParameters::clear_enable_preferred_emotion() {
  enable_preferred_emotion_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool EmotionPostProcessingParameters::_internal_enable_preferred_emotion() const {
  return enable_preferred_emotion_;
}
inline bool EmotionPostProcessingParameters::enable_preferred_emotion() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.enable_preferred_emotion)
  return _internal_enable_preferred_emotion();
}
inline void EmotionPostProcessingParameters::_internal_set_enable_preferred_emotion(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_preferred_emotion_ = value;
}
inline void EmotionPostProcessingParameters::set_enable_preferred_emotion(bool value) {
  _internal_set_enable_preferred_emotion(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.enable_preferred_emotion)
}

// float preferred_emotion_strength = 4;
inline bool EmotionPostProcessingParameters::_internal_has_preferred_emotion_strength() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EmotionPostProcessingParameters::has_preferred_emotion_strength() const {
  return _internal_has_preferred_emotion_strength();
}
inline void EmotionPostProcessingParameters::clear_preferred_emotion_strength() {
  preferred_emotion_strength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float EmotionPostProcessingParameters::_internal_preferred_emotion_strength() const {
  return preferred_emotion_strength_;
}
inline float EmotionPostProcessingParameters::preferred_emotion_strength() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.preferred_emotion_strength)
  return _internal_preferred_emotion_strength();
}
inline void EmotionPostProcessingParameters::_internal_set_preferred_emotion_strength(float value) {
  _has_bits_[0] |= 0x00000008u;
  preferred_emotion_strength_ = value;
}
inline void EmotionPostProcessingParameters::set_preferred_emotion_strength(float value) {
  _internal_set_preferred_emotion_strength(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.preferred_emotion_strength)
}

// float emotion_strength = 5;
inline bool EmotionPostProcessingParameters::_internal_has_emotion_strength() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EmotionPostProcessingParameters::has_emotion_strength() const {
  return _internal_has_emotion_strength();
}
inline void EmotionPostProcessingParameters::clear_emotion_strength() {
  emotion_strength_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float EmotionPostProcessingParameters::_internal_emotion_strength() const {
  return emotion_strength_;
}
inline float EmotionPostProcessingParameters::emotion_strength() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_strength)
  return _internal_emotion_strength();
}
inline void EmotionPostProcessingParameters::_internal_set_emotion_strength(float value) {
  _has_bits_[0] |= 0x00000010u;
  emotion_strength_ = value;
}
inline void EmotionPostProcessingParameters::set_emotion_strength(float value) {
  _internal_set_emotion_strength(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_strength)
}

// int32 max_emotions = 6;
inline bool EmotionPostProcessingParameters::_internal_has_max_emotions() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EmotionPostProcessingParameters::has_max_emotions() const {
  return _internal_has_max_emotions();
}
inline void EmotionPostProcessingParameters::clear_max_emotions() {
  max_emotions_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EmotionPostProcessingParameters::_internal_max_emotions() const {
  return max_emotions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EmotionPostProcessingParameters::max_emotions() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.max_emotions)
  return _internal_max_emotions();
}
inline void EmotionPostProcessingParameters::_internal_set_max_emotions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_emotions_ = value;
}
inline void EmotionPostProcessingParameters::set_max_emotions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_emotions(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.max_emotions)
}

// -------------------------------------------------------------------

// AudioWithEmotion

// bytes audio_buffer = 1;
inline void AudioWithEmotion::clear_audio_buffer() {
  audio_buffer_.ClearToEmpty();
}
inline const std::string& AudioWithEmotion::audio_buffer() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
  return _internal_audio_buffer();
}
inline void AudioWithEmotion::set_audio_buffer(const std::string& value) {
  _internal_set_audio_buffer(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}
inline std::string* AudioWithEmotion::mutable_audio_buffer() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
  return _internal_mutable_audio_buffer();
}
inline const std::string& AudioWithEmotion::_internal_audio_buffer() const {
  return audio_buffer_.Get();
}
inline void AudioWithEmotion::_internal_set_audio_buffer(const std::string& value) {
  
  audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioWithEmotion::set_audio_buffer(std::string&& value) {
  
  audio_buffer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}
inline void AudioWithEmotion::set_audio_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}
inline void AudioWithEmotion::set_audio_buffer(const void* value,
    size_t size) {
  
  audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}
inline std::string* AudioWithEmotion::_internal_mutable_audio_buffer() {
  
  return audio_buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioWithEmotion::release_audio_buffer() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
  return audio_buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioWithEmotion::set_allocated_audio_buffer(std::string* audio_buffer) {
  if (audio_buffer != nullptr) {
    
  } else {
    
  }
  audio_buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}

// repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
inline int AudioWithEmotion::_internal_emotions_size() const {
  return emotions_.size();
}
inline int AudioWithEmotion::emotions_size() const {
  return _internal_emotions_size();
}
inline ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* AudioWithEmotion::mutable_emotions(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return emotions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode >*
AudioWithEmotion::mutable_emotions() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return &emotions_;
}
inline const ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode& AudioWithEmotion::_internal_emotions(int index) const {
  return emotions_.Get(index);
}
inline const ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode& AudioWithEmotion::emotions(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return _internal_emotions(index);
}
inline ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* AudioWithEmotion::_internal_add_emotions() {
  return emotions_.Add();
}
inline ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* AudioWithEmotion::add_emotions() {
  // @@protoc_insertion_point(field_add:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return _internal_add_emotions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode >&
AudioWithEmotion::emotions() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return emotions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace a2f
}  // namespace nvidia_ace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto
