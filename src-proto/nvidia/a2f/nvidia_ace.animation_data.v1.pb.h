// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.animation_data.v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "nvidia/a2f/nvidia_ace.animation_id.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.audio.v1.pb.h"
#include "nvidia/a2f/nvidia_ace.status.v1.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
namespace nvidia_ace {
namespace animation_data {
namespace v1 {
class AnimationData;
class AnimationDataDefaultTypeInternal;
extern AnimationDataDefaultTypeInternal _AnimationData_default_instance_;
class AnimationDataStream;
class AnimationDataStreamDefaultTypeInternal;
extern AnimationDataStreamDefaultTypeInternal _AnimationDataStream_default_instance_;
class AnimationDataStreamHeader;
class AnimationDataStreamHeaderDefaultTypeInternal;
extern AnimationDataStreamHeaderDefaultTypeInternal _AnimationDataStreamHeader_default_instance_;
class AnimationData_MetadataEntry_DoNotUse;
class AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal _AnimationData_MetadataEntry_DoNotUse_default_instance_;
class AudioWithTimeCode;
class AudioWithTimeCodeDefaultTypeInternal;
extern AudioWithTimeCodeDefaultTypeInternal _AudioWithTimeCode_default_instance_;
class Camera;
class CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Float3;
class Float3DefaultTypeInternal;
extern Float3DefaultTypeInternal _Float3_default_instance_;
class Float3ArrayWithTimeCode;
class Float3ArrayWithTimeCodeDefaultTypeInternal;
extern Float3ArrayWithTimeCodeDefaultTypeInternal _Float3ArrayWithTimeCode_default_instance_;
class Float3WithTimeCode;
class Float3WithTimeCodeDefaultTypeInternal;
extern Float3WithTimeCodeDefaultTypeInternal _Float3WithTimeCode_default_instance_;
class FloatArrayWithTimeCode;
class FloatArrayWithTimeCodeDefaultTypeInternal;
extern FloatArrayWithTimeCodeDefaultTypeInternal _FloatArrayWithTimeCode_default_instance_;
class FloatWithTimeCode;
class FloatWithTimeCodeDefaultTypeInternal;
extern FloatWithTimeCodeDefaultTypeInternal _FloatWithTimeCode_default_instance_;
class QuatF;
class QuatFDefaultTypeInternal;
extern QuatFDefaultTypeInternal _QuatF_default_instance_;
class QuatFArrayWithTimeCode;
class QuatFArrayWithTimeCodeDefaultTypeInternal;
extern QuatFArrayWithTimeCodeDefaultTypeInternal _QuatFArrayWithTimeCode_default_instance_;
class QuatFWithTimeCode;
class QuatFWithTimeCodeDefaultTypeInternal;
extern QuatFWithTimeCodeDefaultTypeInternal _QuatFWithTimeCode_default_instance_;
class SkelAnimation;
class SkelAnimationDefaultTypeInternal;
extern SkelAnimationDefaultTypeInternal _SkelAnimation_default_instance_;
class SkelAnimationHeader;
class SkelAnimationHeaderDefaultTypeInternal;
extern SkelAnimationHeaderDefaultTypeInternal _SkelAnimationHeader_default_instance_;
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> ::nvidia_ace::animation_data::v1::AnimationData* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::AnimationData>(Arena*);
template<> ::nvidia_ace::animation_data::v1::AnimationDataStream* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::AnimationDataStream>(Arena*);
template<> ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader>(Arena*);
template<> ::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse>(Arena*);
template<> ::nvidia_ace::animation_data::v1::AudioWithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::AudioWithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::Camera* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::Camera>(Arena*);
template<> ::nvidia_ace::animation_data::v1::Float3* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::Float3>(Arena*);
template<> ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::Float3WithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::FloatWithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::QuatF* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::QuatF>(Arena*);
template<> ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>(Arena*);
template<> ::nvidia_ace::animation_data::v1::SkelAnimation* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::SkelAnimation>(Arena*);
template<> ::nvidia_ace::animation_data::v1::SkelAnimationHeader* Arena::CreateMaybeMessage<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nvidia_ace {
namespace animation_data {
namespace v1 {

// ===================================================================

class AnimationDataStreamHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AnimationDataStreamHeader) */ {
 public:
  inline AnimationDataStreamHeader() : AnimationDataStreamHeader(nullptr) {}
  virtual ~AnimationDataStreamHeader();

  AnimationDataStreamHeader(const AnimationDataStreamHeader& from);
  AnimationDataStreamHeader(AnimationDataStreamHeader&& from) noexcept
    : AnimationDataStreamHeader() {
    *this = ::std::move(from);
  }

  inline AnimationDataStreamHeader& operator=(const AnimationDataStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStreamHeader& operator=(AnimationDataStreamHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationDataStreamHeader& default_instance();

  static inline const AnimationDataStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStreamHeader*>(
               &_AnimationDataStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnimationDataStreamHeader& a, AnimationDataStreamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationDataStreamHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStreamHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationDataStreamHeader* New() const final {
    return CreateMaybeMessage<AnimationDataStreamHeader>(nullptr);
  }

  AnimationDataStreamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationDataStreamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationDataStreamHeader& from);
  void MergeFrom(const AnimationDataStreamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationDataStreamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.AnimationDataStreamHeader";
  }
  protected:
  explicit AnimationDataStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceServiceIdFieldNumber = 2,
    kAnimationIdsFieldNumber = 1,
    kAudioHeaderFieldNumber = 3,
    kSkelAnimationHeaderFieldNumber = 4,
    kStartTimeCodeSinceEpochFieldNumber = 5,
  };
  // string source_service_id = 2;
  bool has_source_service_id() const;
  private:
  bool _internal_has_source_service_id() const;
  public:
  void clear_source_service_id();
  const std::string& source_service_id() const;
  void set_source_service_id(const std::string& value);
  void set_source_service_id(std::string&& value);
  void set_source_service_id(const char* value);
  void set_source_service_id(const char* value, size_t size);
  std::string* mutable_source_service_id();
  std::string* release_source_service_id();
  void set_allocated_source_service_id(std::string* source_service_id);
  private:
  const std::string& _internal_source_service_id() const;
  void _internal_set_source_service_id(const std::string& value);
  std::string* _internal_mutable_source_service_id();
  public:

  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  bool has_animation_ids() const;
  private:
  bool _internal_has_animation_ids() const;
  public:
  void clear_animation_ids();
  const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* release_animation_ids();
  ::nvidia_ace::animation_id::v1::AnimationIds* mutable_animation_ids();
  void set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* animation_ids);
  private:
  const ::nvidia_ace::animation_id::v1::AnimationIds& _internal_animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* _internal_mutable_animation_ids();
  public:
  void unsafe_arena_set_allocated_animation_ids(
      ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids);
  ::nvidia_ace::animation_id::v1::AnimationIds* unsafe_arena_release_animation_ids();

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
  bool has_audio_header() const;
  private:
  bool _internal_has_audio_header() const;
  public:
  void clear_audio_header();
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header);
  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();
  public:
  void unsafe_arena_set_allocated_audio_header(
      ::nvidia_ace::audio::v1::AudioHeader* audio_header);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
  bool has_skel_animation_header() const;
  private:
  bool _internal_has_skel_animation_header() const;
  public:
  void clear_skel_animation_header();
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& skel_animation_header() const;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* release_skel_animation_header();
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* mutable_skel_animation_header();
  void set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header);
  private:
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& _internal_skel_animation_header() const;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* _internal_mutable_skel_animation_header();
  public:
  void unsafe_arena_set_allocated_skel_animation_header(
      ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header);
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* unsafe_arena_release_skel_animation_header();

  // double start_time_code_since_epoch = 5;
  void clear_start_time_code_since_epoch();
  double start_time_code_since_epoch() const;
  void set_start_time_code_since_epoch(double value);
  private:
  double _internal_start_time_code_since_epoch() const;
  void _internal_set_start_time_code_since_epoch(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_service_id_;
  ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids_;
  ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header_;
  double start_time_code_since_epoch_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AnimationDataStream) */ {
 public:
  inline AnimationDataStream() : AnimationDataStream(nullptr) {}
  virtual ~AnimationDataStream();

  AnimationDataStream(const AnimationDataStream& from);
  AnimationDataStream(AnimationDataStream&& from) noexcept
    : AnimationDataStream() {
    *this = ::std::move(from);
  }

  inline AnimationDataStream& operator=(const AnimationDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStream& operator=(AnimationDataStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationDataStream& default_instance();

  enum StreamPartCase {
    kAnimationDataStreamHeader = 1,
    kAnimationData = 2,
    kStatus = 3,
    STREAM_PART_NOT_SET = 0,
  };

  static inline const AnimationDataStream* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStream*>(
               &_AnimationDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnimationDataStream& a, AnimationDataStream& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationDataStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationDataStream* New() const final {
    return CreateMaybeMessage<AnimationDataStream>(nullptr);
  }

  AnimationDataStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationDataStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationDataStream& from);
  void MergeFrom(const AnimationDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationDataStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.AnimationDataStream";
  }
  protected:
  explicit AnimationDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationDataStreamHeaderFieldNumber = 1,
    kAnimationDataFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
  bool has_animation_data_stream_header() const;
  private:
  bool _internal_has_animation_data_stream_header() const;
  public:
  void clear_animation_data_stream_header();
  const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& animation_data_stream_header() const;
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* release_animation_data_stream_header();
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* mutable_animation_data_stream_header();
  void set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header);
  private:
  const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& _internal_animation_data_stream_header() const;
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* _internal_mutable_animation_data_stream_header();
  public:
  void unsafe_arena_set_allocated_animation_data_stream_header(
      ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header);
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* unsafe_arena_release_animation_data_stream_header();

  // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
  bool has_animation_data() const;
  private:
  bool _internal_has_animation_data() const;
  public:
  void clear_animation_data();
  const ::nvidia_ace::animation_data::v1::AnimationData& animation_data() const;
  ::nvidia_ace::animation_data::v1::AnimationData* release_animation_data();
  ::nvidia_ace::animation_data::v1::AnimationData* mutable_animation_data();
  void set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data);
  private:
  const ::nvidia_ace::animation_data::v1::AnimationData& _internal_animation_data() const;
  ::nvidia_ace::animation_data::v1::AnimationData* _internal_mutable_animation_data();
  public:
  void unsafe_arena_set_allocated_animation_data(
      ::nvidia_ace::animation_data::v1::AnimationData* animation_data);
  ::nvidia_ace::animation_data::v1::AnimationData* unsafe_arena_release_animation_data();

  // .nvidia_ace.status.v1.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::nvidia_ace::status::v1::Status& status() const;
  ::nvidia_ace::status::v1::Status* release_status();
  ::nvidia_ace::status::v1::Status* mutable_status();
  void set_allocated_status(::nvidia_ace::status::v1::Status* status);
  private:
  const ::nvidia_ace::status::v1::Status& _internal_status() const;
  ::nvidia_ace::status::v1::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::nvidia_ace::status::v1::Status* status);
  ::nvidia_ace::status::v1::Status* unsafe_arena_release_status();

  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AnimationDataStream)
 private:
  class _Internal;
  void set_has_animation_data_stream_header();
  void set_has_animation_data();
  void set_has_status();

  inline bool has_stream_part() const;
  inline void clear_has_stream_part();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamPartUnion {
    StreamPartUnion() {}
    ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header_;
    ::nvidia_ace::animation_data::v1::AnimationData* animation_data_;
    ::nvidia_ace::status::v1::Status* status_;
  } stream_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationData_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnimationData_MetadataEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnimationData_MetadataEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AnimationData_MetadataEntry_DoNotUse();
  explicit AnimationData_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AnimationData_MetadataEntry_DoNotUse& other);
  static const AnimationData_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AnimationData_MetadataEntry_DoNotUse*>(&_AnimationData_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nvidia_ace.animation_data.v1.AnimationData.MetadataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class AnimationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AnimationData) */ {
 public:
  inline AnimationData() : AnimationData(nullptr) {}
  virtual ~AnimationData();

  AnimationData(const AnimationData& from);
  AnimationData(AnimationData&& from) noexcept
    : AnimationData() {
    *this = ::std::move(from);
  }

  inline AnimationData& operator=(const AnimationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationData& operator=(AnimationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationData& default_instance();

  static inline const AnimationData* internal_default_instance() {
    return reinterpret_cast<const AnimationData*>(
               &_AnimationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnimationData& a, AnimationData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationData* New() const final {
    return CreateMaybeMessage<AnimationData>(nullptr);
  }

  AnimationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationData& from);
  void MergeFrom(const AnimationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.AnimationData";
  }
  protected:
  explicit AnimationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kSkelAnimationFieldNumber = 1,
    kAudioFieldNumber = 2,
    kCameraFieldNumber = 3,
  };
  // map<string, .google.protobuf.Any> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      mutable_metadata();

  // .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
  bool has_skel_animation() const;
  private:
  bool _internal_has_skel_animation() const;
  public:
  void clear_skel_animation();
  const ::nvidia_ace::animation_data::v1::SkelAnimation& skel_animation() const;
  ::nvidia_ace::animation_data::v1::SkelAnimation* release_skel_animation();
  ::nvidia_ace::animation_data::v1::SkelAnimation* mutable_skel_animation();
  void set_allocated_skel_animation(::nvidia_ace::animation_data::v1::SkelAnimation* skel_animation);
  private:
  const ::nvidia_ace::animation_data::v1::SkelAnimation& _internal_skel_animation() const;
  ::nvidia_ace::animation_data::v1::SkelAnimation* _internal_mutable_skel_animation();
  public:
  void unsafe_arena_set_allocated_skel_animation(
      ::nvidia_ace::animation_data::v1::SkelAnimation* skel_animation);
  ::nvidia_ace::animation_data::v1::SkelAnimation* unsafe_arena_release_skel_animation();

  // .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& audio() const;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* release_audio();
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* mutable_audio();
  void set_allocated_audio(::nvidia_ace::animation_data::v1::AudioWithTimeCode* audio);
  private:
  const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& _internal_audio() const;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::nvidia_ace::animation_data::v1::AudioWithTimeCode* audio);
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* unsafe_arena_release_audio();

  // .nvidia_ace.animation_data.v1.Camera camera = 3;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::nvidia_ace::animation_data::v1::Camera& camera() const;
  ::nvidia_ace::animation_data::v1::Camera* release_camera();
  ::nvidia_ace::animation_data::v1::Camera* mutable_camera();
  void set_allocated_camera(::nvidia_ace::animation_data::v1::Camera* camera);
  private:
  const ::nvidia_ace::animation_data::v1::Camera& _internal_camera() const;
  ::nvidia_ace::animation_data::v1::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::nvidia_ace::animation_data::v1::Camera* camera);
  ::nvidia_ace::animation_data::v1::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AnimationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AnimationData_MetadataEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> metadata_;
  ::nvidia_ace::animation_data::v1::SkelAnimation* skel_animation_;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* audio_;
  ::nvidia_ace::animation_data::v1::Camera* camera_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioWithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AudioWithTimeCode) */ {
 public:
  inline AudioWithTimeCode() : AudioWithTimeCode(nullptr) {}
  virtual ~AudioWithTimeCode();

  AudioWithTimeCode(const AudioWithTimeCode& from);
  AudioWithTimeCode(AudioWithTimeCode&& from) noexcept
    : AudioWithTimeCode() {
    *this = ::std::move(from);
  }

  inline AudioWithTimeCode& operator=(const AudioWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioWithTimeCode& operator=(AudioWithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioWithTimeCode& default_instance();

  static inline const AudioWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const AudioWithTimeCode*>(
               &_AudioWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioWithTimeCode& a, AudioWithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioWithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioWithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioWithTimeCode* New() const final {
    return CreateMaybeMessage<AudioWithTimeCode>(nullptr);
  }

  AudioWithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioWithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioWithTimeCode& from);
  void MergeFrom(const AudioWithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioWithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.AudioWithTimeCode";
  }
  protected:
  explicit AudioWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioBufferFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // bytes audio_buffer = 2;
  void clear_audio_buffer();
  const std::string& audio_buffer() const;
  void set_audio_buffer(const std::string& value);
  void set_audio_buffer(std::string&& value);
  void set_audio_buffer(const char* value);
  void set_audio_buffer(const void* value, size_t size);
  std::string* mutable_audio_buffer();
  std::string* release_audio_buffer();
  void set_allocated_audio_buffer(std::string* audio_buffer);
  private:
  const std::string& _internal_audio_buffer() const;
  void _internal_set_audio_buffer(const std::string& value);
  std::string* _internal_mutable_audio_buffer();
  public:

  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AudioWithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_buffer_;
  double time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SkelAnimationHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.SkelAnimationHeader) */ {
 public:
  inline SkelAnimationHeader() : SkelAnimationHeader(nullptr) {}
  virtual ~SkelAnimationHeader();

  SkelAnimationHeader(const SkelAnimationHeader& from);
  SkelAnimationHeader(SkelAnimationHeader&& from) noexcept
    : SkelAnimationHeader() {
    *this = ::std::move(from);
  }

  inline SkelAnimationHeader& operator=(const SkelAnimationHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkelAnimationHeader& operator=(SkelAnimationHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkelAnimationHeader& default_instance();

  static inline const SkelAnimationHeader* internal_default_instance() {
    return reinterpret_cast<const SkelAnimationHeader*>(
               &_SkelAnimationHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SkelAnimationHeader& a, SkelAnimationHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SkelAnimationHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkelAnimationHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkelAnimationHeader* New() const final {
    return CreateMaybeMessage<SkelAnimationHeader>(nullptr);
  }

  SkelAnimationHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkelAnimationHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkelAnimationHeader& from);
  void MergeFrom(const SkelAnimationHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkelAnimationHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.SkelAnimationHeader";
  }
  protected:
  explicit SkelAnimationHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlendShapesFieldNumber = 1,
    kJointsFieldNumber = 2,
  };
  // repeated string blend_shapes = 1;
  int blend_shapes_size() const;
  private:
  int _internal_blend_shapes_size() const;
  public:
  void clear_blend_shapes();
  const std::string& blend_shapes(int index) const;
  std::string* mutable_blend_shapes(int index);
  void set_blend_shapes(int index, const std::string& value);
  void set_blend_shapes(int index, std::string&& value);
  void set_blend_shapes(int index, const char* value);
  void set_blend_shapes(int index, const char* value, size_t size);
  std::string* add_blend_shapes();
  void add_blend_shapes(const std::string& value);
  void add_blend_shapes(std::string&& value);
  void add_blend_shapes(const char* value);
  void add_blend_shapes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blend_shapes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blend_shapes();
  private:
  const std::string& _internal_blend_shapes(int index) const;
  std::string* _internal_add_blend_shapes();
  public:

  // repeated string joints = 2;
  int joints_size() const;
  private:
  int _internal_joints_size() const;
  public:
  void clear_joints();
  const std::string& joints(int index) const;
  std::string* mutable_joints(int index);
  void set_joints(int index, const std::string& value);
  void set_joints(int index, std::string&& value);
  void set_joints(int index, const char* value);
  void set_joints(int index, const char* value, size_t size);
  std::string* add_joints();
  void add_joints(const std::string& value);
  void add_joints(std::string&& value);
  void add_joints(const char* value);
  void add_joints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& joints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_joints();
  private:
  const std::string& _internal_joints(int index) const;
  std::string* _internal_add_joints();
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.SkelAnimationHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blend_shapes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> joints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SkelAnimation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.SkelAnimation) */ {
 public:
  inline SkelAnimation() : SkelAnimation(nullptr) {}
  virtual ~SkelAnimation();

  SkelAnimation(const SkelAnimation& from);
  SkelAnimation(SkelAnimation&& from) noexcept
    : SkelAnimation() {
    *this = ::std::move(from);
  }

  inline SkelAnimation& operator=(const SkelAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkelAnimation& operator=(SkelAnimation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkelAnimation& default_instance();

  static inline const SkelAnimation* internal_default_instance() {
    return reinterpret_cast<const SkelAnimation*>(
               &_SkelAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SkelAnimation& a, SkelAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(SkelAnimation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkelAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkelAnimation* New() const final {
    return CreateMaybeMessage<SkelAnimation>(nullptr);
  }

  SkelAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkelAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkelAnimation& from);
  void MergeFrom(const SkelAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkelAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.SkelAnimation";
  }
  protected:
  explicit SkelAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlendShapeWeightsFieldNumber = 1,
    kTranslationsFieldNumber = 2,
    kRotationsFieldNumber = 3,
    kScalesFieldNumber = 4,
  };
  // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
  int blend_shape_weights_size() const;
  private:
  int _internal_blend_shape_weights_size() const;
  public:
  void clear_blend_shape_weights();
  ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* mutable_blend_shape_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode >*
      mutable_blend_shape_weights();
  private:
  const ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode& _internal_blend_shape_weights(int index) const;
  ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* _internal_add_blend_shape_weights();
  public:
  const ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode& blend_shape_weights(int index) const;
  ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* add_blend_shape_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode >&
      blend_shape_weights() const;

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
  int translations_size() const;
  private:
  int _internal_translations_size() const;
  public:
  void clear_translations();
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* mutable_translations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >*
      mutable_translations();
  private:
  const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& _internal_translations(int index) const;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* _internal_add_translations();
  public:
  const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& translations(int index) const;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* add_translations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >&
      translations() const;

  // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
  int rotations_size() const;
  private:
  int _internal_rotations_size() const;
  public:
  void clear_rotations();
  ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* mutable_rotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode >*
      mutable_rotations();
  private:
  const ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode& _internal_rotations(int index) const;
  ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* _internal_add_rotations();
  public:
  const ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode& rotations(int index) const;
  ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* add_rotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode >&
      rotations() const;

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
  int scales_size() const;
  private:
  int _internal_scales_size() const;
  public:
  void clear_scales();
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* mutable_scales(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >*
      mutable_scales();
  private:
  const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& _internal_scales(int index) const;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* _internal_add_scales();
  public:
  const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& scales(int index) const;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* add_scales();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >&
      scales() const;

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.SkelAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode > blend_shape_weights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode > translations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode > rotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode > scales_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Camera PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  virtual ~Camera();

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Camera& default_instance();

  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return CreateMaybeMessage<Camera>(nullptr);
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kFocalLengthFieldNumber = 3,
    kFocusDistanceFieldNumber = 4,
  };
  // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  ::nvidia_ace::animation_data::v1::Float3WithTimeCode* mutable_position(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3WithTimeCode >*
      mutable_position();
  private:
  const ::nvidia_ace::animation_data::v1::Float3WithTimeCode& _internal_position(int index) const;
  ::nvidia_ace::animation_data::v1::Float3WithTimeCode* _internal_add_position();
  public:
  const ::nvidia_ace::animation_data::v1::Float3WithTimeCode& position(int index) const;
  ::nvidia_ace::animation_data::v1::Float3WithTimeCode* add_position();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3WithTimeCode >&
      position() const;

  // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* mutable_rotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode >*
      mutable_rotation();
  private:
  const ::nvidia_ace::animation_data::v1::QuatFWithTimeCode& _internal_rotation(int index) const;
  ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* _internal_add_rotation();
  public:
  const ::nvidia_ace::animation_data::v1::QuatFWithTimeCode& rotation(int index) const;
  ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* add_rotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode >&
      rotation() const;

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
  int focal_length_size() const;
  private:
  int _internal_focal_length_size() const;
  public:
  void clear_focal_length();
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* mutable_focal_length(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >*
      mutable_focal_length();
  private:
  const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& _internal_focal_length(int index) const;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* _internal_add_focal_length();
  public:
  const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& focal_length(int index) const;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* add_focal_length();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >&
      focal_length() const;

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
  int focus_distance_size() const;
  private:
  int _internal_focus_distance_size() const;
  public:
  void clear_focus_distance();
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* mutable_focus_distance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >*
      mutable_focus_distance();
  private:
  const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& _internal_focus_distance(int index) const;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* _internal_add_focus_distance();
  public:
  const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& focus_distance(int index) const;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* add_focus_distance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >&
      focus_distance() const;

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3WithTimeCode > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode > focal_length_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode > focus_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FloatArrayWithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode) */ {
 public:
  inline FloatArrayWithTimeCode() : FloatArrayWithTimeCode(nullptr) {}
  virtual ~FloatArrayWithTimeCode();

  FloatArrayWithTimeCode(const FloatArrayWithTimeCode& from);
  FloatArrayWithTimeCode(FloatArrayWithTimeCode&& from) noexcept
    : FloatArrayWithTimeCode() {
    *this = ::std::move(from);
  }

  inline FloatArrayWithTimeCode& operator=(const FloatArrayWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArrayWithTimeCode& operator=(FloatArrayWithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatArrayWithTimeCode& default_instance();

  static inline const FloatArrayWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const FloatArrayWithTimeCode*>(
               &_FloatArrayWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FloatArrayWithTimeCode& a, FloatArrayWithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArrayWithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArrayWithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatArrayWithTimeCode* New() const final {
    return CreateMaybeMessage<FloatArrayWithTimeCode>(nullptr);
  }

  FloatArrayWithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatArrayWithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatArrayWithTimeCode& from);
  void MergeFrom(const FloatArrayWithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatArrayWithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.FloatArrayWithTimeCode";
  }
  protected:
  explicit FloatArrayWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  double time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Float3ArrayWithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode) */ {
 public:
  inline Float3ArrayWithTimeCode() : Float3ArrayWithTimeCode(nullptr) {}
  virtual ~Float3ArrayWithTimeCode();

  Float3ArrayWithTimeCode(const Float3ArrayWithTimeCode& from);
  Float3ArrayWithTimeCode(Float3ArrayWithTimeCode&& from) noexcept
    : Float3ArrayWithTimeCode() {
    *this = ::std::move(from);
  }

  inline Float3ArrayWithTimeCode& operator=(const Float3ArrayWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3ArrayWithTimeCode& operator=(Float3ArrayWithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float3ArrayWithTimeCode& default_instance();

  static inline const Float3ArrayWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const Float3ArrayWithTimeCode*>(
               &_Float3ArrayWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Float3ArrayWithTimeCode& a, Float3ArrayWithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(Float3ArrayWithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3ArrayWithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float3ArrayWithTimeCode* New() const final {
    return CreateMaybeMessage<Float3ArrayWithTimeCode>(nullptr);
  }

  Float3ArrayWithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float3ArrayWithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float3ArrayWithTimeCode& from);
  void MergeFrom(const Float3ArrayWithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float3ArrayWithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode";
  }
  protected:
  explicit Float3ArrayWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::nvidia_ace::animation_data::v1::Float3* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3 >*
      mutable_values();
  private:
  const ::nvidia_ace::animation_data::v1::Float3& _internal_values(int index) const;
  ::nvidia_ace::animation_data::v1::Float3* _internal_add_values();
  public:
  const ::nvidia_ace::animation_data::v1::Float3& values(int index) const;
  ::nvidia_ace::animation_data::v1::Float3* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3 >&
      values() const;

  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3 > values_;
  double time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class QuatFArrayWithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode) */ {
 public:
  inline QuatFArrayWithTimeCode() : QuatFArrayWithTimeCode(nullptr) {}
  virtual ~QuatFArrayWithTimeCode();

  QuatFArrayWithTimeCode(const QuatFArrayWithTimeCode& from);
  QuatFArrayWithTimeCode(QuatFArrayWithTimeCode&& from) noexcept
    : QuatFArrayWithTimeCode() {
    *this = ::std::move(from);
  }

  inline QuatFArrayWithTimeCode& operator=(const QuatFArrayWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuatFArrayWithTimeCode& operator=(QuatFArrayWithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuatFArrayWithTimeCode& default_instance();

  static inline const QuatFArrayWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const QuatFArrayWithTimeCode*>(
               &_QuatFArrayWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QuatFArrayWithTimeCode& a, QuatFArrayWithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(QuatFArrayWithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuatFArrayWithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuatFArrayWithTimeCode* New() const final {
    return CreateMaybeMessage<QuatFArrayWithTimeCode>(nullptr);
  }

  QuatFArrayWithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuatFArrayWithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuatFArrayWithTimeCode& from);
  void MergeFrom(const QuatFArrayWithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuatFArrayWithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode";
  }
  protected:
  explicit QuatFArrayWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::nvidia_ace::animation_data::v1::QuatF* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatF >*
      mutable_values();
  private:
  const ::nvidia_ace::animation_data::v1::QuatF& _internal_values(int index) const;
  ::nvidia_ace::animation_data::v1::QuatF* _internal_add_values();
  public:
  const ::nvidia_ace::animation_data::v1::QuatF& values(int index) const;
  ::nvidia_ace::animation_data::v1::QuatF* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatF >&
      values() const;

  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatF > values_;
  double time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Float3WithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Float3WithTimeCode) */ {
 public:
  inline Float3WithTimeCode() : Float3WithTimeCode(nullptr) {}
  virtual ~Float3WithTimeCode();

  Float3WithTimeCode(const Float3WithTimeCode& from);
  Float3WithTimeCode(Float3WithTimeCode&& from) noexcept
    : Float3WithTimeCode() {
    *this = ::std::move(from);
  }

  inline Float3WithTimeCode& operator=(const Float3WithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3WithTimeCode& operator=(Float3WithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float3WithTimeCode& default_instance();

  static inline const Float3WithTimeCode* internal_default_instance() {
    return reinterpret_cast<const Float3WithTimeCode*>(
               &_Float3WithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Float3WithTimeCode& a, Float3WithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(Float3WithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3WithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float3WithTimeCode* New() const final {
    return CreateMaybeMessage<Float3WithTimeCode>(nullptr);
  }

  Float3WithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float3WithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float3WithTimeCode& from);
  void MergeFrom(const Float3WithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float3WithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.Float3WithTimeCode";
  }
  protected:
  explicit Float3WithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // .nvidia_ace.animation_data.v1.Float3 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::nvidia_ace::animation_data::v1::Float3& value() const;
  ::nvidia_ace::animation_data::v1::Float3* release_value();
  ::nvidia_ace::animation_data::v1::Float3* mutable_value();
  void set_allocated_value(::nvidia_ace::animation_data::v1::Float3* value);
  private:
  const ::nvidia_ace::animation_data::v1::Float3& _internal_value() const;
  ::nvidia_ace::animation_data::v1::Float3* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::nvidia_ace::animation_data::v1::Float3* value);
  ::nvidia_ace::animation_data::v1::Float3* unsafe_arena_release_value();

  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Float3WithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nvidia_ace::animation_data::v1::Float3* value_;
  double time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class QuatFWithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.QuatFWithTimeCode) */ {
 public:
  inline QuatFWithTimeCode() : QuatFWithTimeCode(nullptr) {}
  virtual ~QuatFWithTimeCode();

  QuatFWithTimeCode(const QuatFWithTimeCode& from);
  QuatFWithTimeCode(QuatFWithTimeCode&& from) noexcept
    : QuatFWithTimeCode() {
    *this = ::std::move(from);
  }

  inline QuatFWithTimeCode& operator=(const QuatFWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuatFWithTimeCode& operator=(QuatFWithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuatFWithTimeCode& default_instance();

  static inline const QuatFWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const QuatFWithTimeCode*>(
               &_QuatFWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QuatFWithTimeCode& a, QuatFWithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(QuatFWithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuatFWithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuatFWithTimeCode* New() const final {
    return CreateMaybeMessage<QuatFWithTimeCode>(nullptr);
  }

  QuatFWithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuatFWithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuatFWithTimeCode& from);
  void MergeFrom(const QuatFWithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuatFWithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.QuatFWithTimeCode";
  }
  protected:
  explicit QuatFWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // .nvidia_ace.animation_data.v1.QuatF value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::nvidia_ace::animation_data::v1::QuatF& value() const;
  ::nvidia_ace::animation_data::v1::QuatF* release_value();
  ::nvidia_ace::animation_data::v1::QuatF* mutable_value();
  void set_allocated_value(::nvidia_ace::animation_data::v1::QuatF* value);
  private:
  const ::nvidia_ace::animation_data::v1::QuatF& _internal_value() const;
  ::nvidia_ace::animation_data::v1::QuatF* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::nvidia_ace::animation_data::v1::QuatF* value);
  ::nvidia_ace::animation_data::v1::QuatF* unsafe_arena_release_value();

  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nvidia_ace::animation_data::v1::QuatF* value_;
  double time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FloatWithTimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.FloatWithTimeCode) */ {
 public:
  inline FloatWithTimeCode() : FloatWithTimeCode(nullptr) {}
  virtual ~FloatWithTimeCode();

  FloatWithTimeCode(const FloatWithTimeCode& from);
  FloatWithTimeCode(FloatWithTimeCode&& from) noexcept
    : FloatWithTimeCode() {
    *this = ::std::move(from);
  }

  inline FloatWithTimeCode& operator=(const FloatWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatWithTimeCode& operator=(FloatWithTimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatWithTimeCode& default_instance();

  static inline const FloatWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const FloatWithTimeCode*>(
               &_FloatWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FloatWithTimeCode& a, FloatWithTimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatWithTimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatWithTimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatWithTimeCode* New() const final {
    return CreateMaybeMessage<FloatWithTimeCode>(nullptr);
  }

  FloatWithTimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatWithTimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatWithTimeCode& from);
  void MergeFrom(const FloatWithTimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatWithTimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.FloatWithTimeCode";
  }
  protected:
  explicit FloatWithTimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeCodeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // double time_code = 1;
  void clear_time_code();
  double time_code() const;
  void set_time_code(double value);
  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.FloatWithTimeCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_code_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class QuatF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.QuatF) */ {
 public:
  inline QuatF() : QuatF(nullptr) {}
  virtual ~QuatF();

  QuatF(const QuatF& from);
  QuatF(QuatF&& from) noexcept
    : QuatF() {
    *this = ::std::move(from);
  }

  inline QuatF& operator=(const QuatF& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuatF& operator=(QuatF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuatF& default_instance();

  static inline const QuatF* internal_default_instance() {
    return reinterpret_cast<const QuatF*>(
               &_QuatF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QuatF& a, QuatF& b) {
    a.Swap(&b);
  }
  inline void Swap(QuatF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuatF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuatF* New() const final {
    return CreateMaybeMessage<QuatF>(nullptr);
  }

  QuatF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuatF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuatF& from);
  void MergeFrom(const QuatF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuatF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.QuatF";
  }
  protected:
  explicit QuatF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealFieldNumber = 1,
    kIFieldNumber = 2,
    kJFieldNumber = 3,
    kKFieldNumber = 4,
  };
  // float real = 1;
  void clear_real();
  float real() const;
  void set_real(float value);
  private:
  float _internal_real() const;
  void _internal_set_real(float value);
  public:

  // float i = 2;
  void clear_i();
  float i() const;
  void set_i(float value);
  private:
  float _internal_i() const;
  void _internal_set_i(float value);
  public:

  // float j = 3;
  void clear_j();
  float j() const;
  void set_j(float value);
  private:
  float _internal_j() const;
  void _internal_set_j(float value);
  public:

  // float k = 4;
  void clear_k();
  float k() const;
  void set_k(float value);
  private:
  float _internal_k() const;
  void _internal_set_k(float value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.QuatF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float real_;
  float i_;
  float j_;
  float k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Float3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Float3) */ {
 public:
  inline Float3() : Float3(nullptr) {}
  virtual ~Float3();

  Float3(const Float3& from);
  Float3(Float3&& from) noexcept
    : Float3() {
    *this = ::std::move(from);
  }

  inline Float3& operator=(const Float3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3& operator=(Float3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float3& default_instance();

  static inline const Float3* internal_default_instance() {
    return reinterpret_cast<const Float3*>(
               &_Float3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Float3& a, Float3& b) {
    a.Swap(&b);
  }
  inline void Swap(Float3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float3* New() const final {
    return CreateMaybeMessage<Float3>(nullptr);
  }

  Float3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float3& from);
  void MergeFrom(const Float3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nvidia_ace.animation_data.v1.Float3";
  }
  protected:
  explicit Float3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto);
    return ::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Float3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnimationDataStreamHeader

// .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
inline bool AnimationDataStreamHeader::_internal_has_animation_ids() const {
  return this != internal_default_instance() && animation_ids_ != nullptr;
}
inline bool AnimationDataStreamHeader::has_animation_ids() const {
  return _internal_has_animation_ids();
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationDataStreamHeader::_internal_animation_ids() const {
  const ::nvidia_ace::animation_id::v1::AnimationIds* p = animation_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_id::v1::AnimationIds&>(
      ::nvidia_ace::animation_id::v1::_AnimationIds_default_instance_);
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationDataStreamHeader::animation_ids() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
  return _internal_animation_ids();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_animation_ids(
    ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_ids_);
  }
  animation_ids_ = animation_ids;
  if (animation_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::release_animation_ids() {
  
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = animation_ids_;
  animation_ids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::unsafe_arena_release_animation_ids() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
  
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = animation_ids_;
  animation_ids_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::_internal_mutable_animation_ids() {
  
  if (animation_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_id::v1::AnimationIds>(GetArena());
    animation_ids_ = p;
  }
  return animation_ids_;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::mutable_animation_ids() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
  return _internal_mutable_animation_ids();
}
inline void AnimationDataStreamHeader::set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* animation_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_ids_);
  }
  if (animation_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_ids)->GetArena();
    if (message_arena != submessage_arena) {
      animation_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_ids, submessage_arena);
    }
    
  } else {
    
  }
  animation_ids_ = animation_ids;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
}

// string source_service_id = 2;
inline bool AnimationDataStreamHeader::_internal_has_source_service_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnimationDataStreamHeader::has_source_service_id() const {
  return _internal_has_source_service_id();
}
inline void AnimationDataStreamHeader::clear_source_service_id() {
  source_service_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnimationDataStreamHeader::source_service_id() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
  return _internal_source_service_id();
}
inline void AnimationDataStreamHeader::set_source_service_id(const std::string& value) {
  _internal_set_source_service_id(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}
inline std::string* AnimationDataStreamHeader::mutable_source_service_id() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
  return _internal_mutable_source_service_id();
}
inline const std::string& AnimationDataStreamHeader::_internal_source_service_id() const {
  return source_service_id_.Get();
}
inline void AnimationDataStreamHeader::_internal_set_source_service_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnimationDataStreamHeader::set_source_service_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_service_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}
inline void AnimationDataStreamHeader::set_source_service_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}
inline void AnimationDataStreamHeader::set_source_service_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}
inline std::string* AnimationDataStreamHeader::_internal_mutable_source_service_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_service_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnimationDataStreamHeader::release_source_service_id() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
  if (!_internal_has_source_service_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_service_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimationDataStreamHeader::set_allocated_source_service_id(std::string* source_service_id) {
  if (source_service_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_service_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_service_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}

// .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
inline bool AnimationDataStreamHeader::_internal_has_audio_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || audio_header_ != nullptr);
  return value;
}
inline bool AnimationDataStreamHeader::has_audio_header() const {
  return _internal_has_audio_header();
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::_internal_audio_header() const {
  const ::nvidia_ace::audio::v1::AudioHeader* p = audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(
      ::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::audio_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_audio_header(
    ::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  audio_header_ = audio_header;
  if (audio_header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::release_audio_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::unsafe_arena_release_audio_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
  _has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = audio_header_;
  audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::_internal_mutable_audio_header() {
  _has_bits_[0] |= 0x00000002u;
  if (audio_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    audio_header_ = p;
  }
  return audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::mutable_audio_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
  return _internal_mutable_audio_header();
}
inline void AnimationDataStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* audio_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header_);
  }
  if (audio_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_header)->GetArena();
    if (message_arena != submessage_arena) {
      audio_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  audio_header_ = audio_header;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
}

// .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
inline bool AnimationDataStreamHeader::_internal_has_skel_animation_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || skel_animation_header_ != nullptr);
  return value;
}
inline bool AnimationDataStreamHeader::has_skel_animation_header() const {
  return _internal_has_skel_animation_header();
}
inline void AnimationDataStreamHeader::clear_skel_animation_header() {
  if (GetArena() == nullptr && skel_animation_header_ != nullptr) {
    delete skel_animation_header_;
  }
  skel_animation_header_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::_internal_skel_animation_header() const {
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader* p = skel_animation_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::SkelAnimationHeader&>(
      ::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::skel_animation_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
  return _internal_skel_animation_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_skel_animation_header(
    ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skel_animation_header_);
  }
  skel_animation_header_ = skel_animation_header;
  if (skel_animation_header) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::release_skel_animation_header() {
  _has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* temp = skel_animation_header_;
  skel_animation_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::unsafe_arena_release_skel_animation_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
  _has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* temp = skel_animation_header_;
  skel_animation_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::_internal_mutable_skel_animation_header() {
  _has_bits_[0] |= 0x00000004u;
  if (skel_animation_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(GetArena());
    skel_animation_header_ = p;
  }
  return skel_animation_header_;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::mutable_skel_animation_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
  return _internal_mutable_skel_animation_header();
}
inline void AnimationDataStreamHeader::set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete skel_animation_header_;
  }
  if (skel_animation_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(skel_animation_header);
    if (message_arena != submessage_arena) {
      skel_animation_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skel_animation_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  skel_animation_header_ = skel_animation_header;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
}

// double start_time_code_since_epoch = 5;
inline void AnimationDataStreamHeader::clear_start_time_code_since_epoch() {
  start_time_code_since_epoch_ = 0;
}
inline double AnimationDataStreamHeader::_internal_start_time_code_since_epoch() const {
  return start_time_code_since_epoch_;
}
inline double AnimationDataStreamHeader::start_time_code_since_epoch() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
  return _internal_start_time_code_since_epoch();
}
inline void AnimationDataStreamHeader::_internal_set_start_time_code_since_epoch(double value) {
  
  start_time_code_since_epoch_ = value;
}
inline void AnimationDataStreamHeader::set_start_time_code_since_epoch(double value) {
  _internal_set_start_time_code_since_epoch(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
}

// -------------------------------------------------------------------

// AnimationDataStream

// .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
inline bool AnimationDataStream::_internal_has_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader;
}
inline bool AnimationDataStream::has_animation_data_stream_header() const {
  return _internal_has_animation_data_stream_header();
}
inline void AnimationDataStream::set_has_animation_data_stream_header() {
  _oneof_case_[0] = kAnimationDataStreamHeader;
}
inline void AnimationDataStream::clear_animation_data_stream_header() {
  if (_internal_has_animation_data_stream_header()) {
    if (GetArena() == nullptr) {
      delete stream_part_.animation_data_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  if (_internal_has_animation_data_stream_header()) {
    clear_has_stream_part();
      ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* temp = stream_part_.animation_data_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& AnimationDataStream::_internal_animation_data_stream_header() const {
  return _internal_has_animation_data_stream_header()
      ? *stream_part_.animation_data_stream_header_
      : reinterpret_cast< ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader&>(::nvidia_ace::animation_data::v1::_AnimationDataStreamHeader_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& AnimationDataStream::animation_data_stream_header() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  return _internal_animation_data_stream_header();
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::unsafe_arena_release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  if (_internal_has_animation_data_stream_header()) {
    clear_has_stream_part();
    ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* temp = stream_part_.animation_data_stream_header_;
    stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header) {
  clear_stream_part();
  if (animation_data_stream_header) {
    set_has_animation_data_stream_header();
    stream_part_.animation_data_stream_header_ = animation_data_stream_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::_internal_mutable_animation_data_stream_header() {
  if (!_internal_has_animation_data_stream_header()) {
    clear_stream_part();
    set_has_animation_data_stream_header();
    stream_part_.animation_data_stream_header_ = CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader >(GetArena());
  }
  return stream_part_.animation_data_stream_header_;
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::mutable_animation_data_stream_header() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  return _internal_mutable_animation_data_stream_header();
}

// .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
inline bool AnimationDataStream::_internal_has_animation_data() const {
  return stream_part_case() == kAnimationData;
}
inline bool AnimationDataStream::has_animation_data() const {
  return _internal_has_animation_data();
}
inline void AnimationDataStream::set_has_animation_data() {
  _oneof_case_[0] = kAnimationData;
}
inline void AnimationDataStream::clear_animation_data() {
  if (_internal_has_animation_data()) {
    if (GetArena() == nullptr) {
      delete stream_part_.animation_data_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::release_animation_data() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  if (_internal_has_animation_data()) {
    clear_has_stream_part();
      ::nvidia_ace::animation_data::v1::AnimationData* temp = stream_part_.animation_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::_internal_animation_data() const {
  return _internal_has_animation_data()
      ? *stream_part_.animation_data_
      : reinterpret_cast< ::nvidia_ace::animation_data::v1::AnimationData&>(::nvidia_ace::animation_data::v1::_AnimationData_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::animation_data() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  return _internal_animation_data();
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::unsafe_arena_release_animation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  if (_internal_has_animation_data()) {
    clear_has_stream_part();
    ::nvidia_ace::animation_data::v1::AnimationData* temp = stream_part_.animation_data_;
    stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data) {
  clear_stream_part();
  if (animation_data) {
    set_has_animation_data();
    stream_part_.animation_data_ = animation_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::_internal_mutable_animation_data() {
  if (!_internal_has_animation_data()) {
    clear_stream_part();
    set_has_animation_data();
    stream_part_.animation_data_ = CreateMaybeMessage< ::nvidia_ace::animation_data::v1::AnimationData >(GetArena());
  }
  return stream_part_.animation_data_;
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::mutable_animation_data() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  return _internal_mutable_animation_data();
}

// .nvidia_ace.status.v1.Status status = 3;
inline bool AnimationDataStream::_internal_has_status() const {
  return stream_part_case() == kStatus;
}
inline bool AnimationDataStream::has_status() const {
  return _internal_has_status();
}
inline void AnimationDataStream::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::release_status() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  if (_internal_has_status()) {
    clear_has_stream_part();
      ::nvidia_ace::status::v1::Status* temp = stream_part_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::_internal_status() const {
  return _internal_has_status()
      ? *stream_part_.status_
      : reinterpret_cast< ::nvidia_ace::status::v1::Status&>(::nvidia_ace::status::v1::_Status_default_instance_);
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::status() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  return _internal_status();
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  if (_internal_has_status()) {
    clear_has_stream_part();
    ::nvidia_ace::status::v1::Status* temp = stream_part_.status_;
    stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* status) {
  clear_stream_part();
  if (status) {
    set_has_status();
    stream_part_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.status)
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_stream_part();
    set_has_status();
    stream_part_.status_ = CreateMaybeMessage< ::nvidia_ace::status::v1::Status >(GetArena());
  }
  return stream_part_.status_;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::mutable_status() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  return _internal_mutable_status();
}

inline bool AnimationDataStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AnimationDataStream::clear_has_stream_part() {
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AnimationDataStream::StreamPartCase AnimationDataStream::stream_part_case() const {
  return AnimationDataStream::StreamPartCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnimationData

// .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
inline bool AnimationData::_internal_has_skel_animation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || skel_animation_ != nullptr);
  return value;
}
inline bool AnimationData::has_skel_animation() const {
  return _internal_has_skel_animation();
}
inline void AnimationData::clear_skel_animation() {
  if (GetArena() == nullptr && skel_animation_ != nullptr) {
    delete skel_animation_;
  }
  skel_animation_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimation& AnimationData::_internal_skel_animation() const {
  const ::nvidia_ace::animation_data::v1::SkelAnimation* p = skel_animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::SkelAnimation&>(
      ::nvidia_ace::animation_data::v1::_SkelAnimation_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimation& AnimationData::skel_animation() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
  return _internal_skel_animation();
}
inline void AnimationData::unsafe_arena_set_allocated_skel_animation(
    ::nvidia_ace::animation_data::v1::SkelAnimation* skel_animation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skel_animation_);
  }
  skel_animation_ = skel_animation;
  if (skel_animation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::release_skel_animation() {
  _has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::SkelAnimation* temp = skel_animation_;
  skel_animation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::unsafe_arena_release_skel_animation() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
  _has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::SkelAnimation* temp = skel_animation_;
  skel_animation_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::_internal_mutable_skel_animation() {
  _has_bits_[0] |= 0x00000001u;
  if (skel_animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::SkelAnimation>(GetArena());
    skel_animation_ = p;
  }
  return skel_animation_;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::mutable_skel_animation() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
  return _internal_mutable_skel_animation();
}
inline void AnimationData::set_allocated_skel_animation(::nvidia_ace::animation_data::v1::SkelAnimation* skel_animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete skel_animation_;
  }
  if (skel_animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(skel_animation);
    if (message_arena != submessage_arena) {
      skel_animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skel_animation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  skel_animation_ = skel_animation;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
}

// .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
inline bool AnimationData::_internal_has_audio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || audio_ != nullptr);
  return value;
}
inline bool AnimationData::has_audio() const {
  return _internal_has_audio();
}
inline void AnimationData::clear_audio() {
  if (GetArena() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& AnimationData::_internal_audio() const {
  const ::nvidia_ace::animation_data::v1::AudioWithTimeCode* p = audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::AudioWithTimeCode&>(
      ::nvidia_ace::animation_data::v1::_AudioWithTimeCode_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& AnimationData::audio() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationData.audio)
  return _internal_audio();
}
inline void AnimationData::unsafe_arena_set_allocated_audio(
    ::nvidia_ace::animation_data::v1::AudioWithTimeCode* audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationData.audio)
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::release_audio() {
  _has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* temp = audio_;
  audio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationData.audio)
  _has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::_internal_mutable_audio() {
  _has_bits_[0] |= 0x00000002u;
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::AudioWithTimeCode>(GetArena());
    audio_ = p;
  }
  return audio_;
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationData.audio)
  return _internal_mutable_audio();
}
inline void AnimationData::set_allocated_audio(::nvidia_ace::animation_data::v1::AudioWithTimeCode* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationData.audio)
}

// .nvidia_ace.animation_data.v1.Camera camera = 3;
inline bool AnimationData::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || camera_ != nullptr);
  return value;
}
inline bool AnimationData::has_camera() const {
  return _internal_has_camera();
}
inline void AnimationData::clear_camera() {
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::nvidia_ace::animation_data::v1::Camera& AnimationData::_internal_camera() const {
  const ::nvidia_ace::animation_data::v1::Camera* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::Camera&>(
      ::nvidia_ace::animation_data::v1::_Camera_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::Camera& AnimationData::camera() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationData.camera)
  return _internal_camera();
}
inline void AnimationData::unsafe_arena_set_allocated_camera(
    ::nvidia_ace::animation_data::v1::Camera* camera) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationData.camera)
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::release_camera() {
  _has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::animation_data::v1::Camera* temp = camera_;
  camera_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationData.camera)
  _has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::animation_data::v1::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000004u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::Camera>(GetArena());
    camera_ = p;
  }
  return camera_;
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationData.camera)
  return _internal_mutable_camera();
}
inline void AnimationData::set_allocated_camera(::nvidia_ace::animation_data::v1::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationData.camera)
}

// map<string, .google.protobuf.Any> metadata = 4;
inline int AnimationData::_internal_metadata_size() const {
  return metadata_.size();
}
inline int AnimationData::metadata_size() const {
  return _internal_metadata_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
AnimationData::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
AnimationData::metadata() const {
  // @@protoc_insertion_point(field_map:nvidia_ace.animation_data.v1.AnimationData.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
AnimationData::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
AnimationData::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.animation_data.v1.AnimationData.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// AudioWithTimeCode

// double time_code = 1;
inline void AudioWithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double AudioWithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double AudioWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AudioWithTimeCode.time_code)
  return _internal_time_code();
}
inline void AudioWithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void AudioWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AudioWithTimeCode.time_code)
}

// bytes audio_buffer = 2;
inline void AudioWithTimeCode::clear_audio_buffer() {
  audio_buffer_.ClearToEmpty();
}
inline const std::string& AudioWithTimeCode::audio_buffer() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
  return _internal_audio_buffer();
}
inline void AudioWithTimeCode::set_audio_buffer(const std::string& value) {
  _internal_set_audio_buffer(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}
inline std::string* AudioWithTimeCode::mutable_audio_buffer() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
  return _internal_mutable_audio_buffer();
}
inline const std::string& AudioWithTimeCode::_internal_audio_buffer() const {
  return audio_buffer_.Get();
}
inline void AudioWithTimeCode::_internal_set_audio_buffer(const std::string& value) {
  
  audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioWithTimeCode::set_audio_buffer(std::string&& value) {
  
  audio_buffer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}
inline void AudioWithTimeCode::set_audio_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}
inline void AudioWithTimeCode::set_audio_buffer(const void* value,
    size_t size) {
  
  audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}
inline std::string* AudioWithTimeCode::_internal_mutable_audio_buffer() {
  
  return audio_buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioWithTimeCode::release_audio_buffer() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
  return audio_buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioWithTimeCode::set_allocated_audio_buffer(std::string* audio_buffer) {
  if (audio_buffer != nullptr) {
    
  } else {
    
  }
  audio_buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}

// -------------------------------------------------------------------

// SkelAnimationHeader

// repeated string blend_shapes = 1;
inline int SkelAnimationHeader::_internal_blend_shapes_size() const {
  return blend_shapes_.size();
}
inline int SkelAnimationHeader::blend_shapes_size() const {
  return _internal_blend_shapes_size();
}
inline void SkelAnimationHeader::clear_blend_shapes() {
  blend_shapes_.Clear();
}
inline std::string* SkelAnimationHeader::add_blend_shapes() {
  // @@protoc_insertion_point(field_add_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return _internal_add_blend_shapes();
}
inline const std::string& SkelAnimationHeader::_internal_blend_shapes(int index) const {
  return blend_shapes_.Get(index);
}
inline const std::string& SkelAnimationHeader::blend_shapes(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return _internal_blend_shapes(index);
}
inline std::string* SkelAnimationHeader::mutable_blend_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return blend_shapes_.Mutable(index);
}
inline void SkelAnimationHeader::set_blend_shapes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  blend_shapes_.Mutable(index)->assign(value);
}
inline void SkelAnimationHeader::set_blend_shapes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  blend_shapes_.Mutable(index)->assign(std::move(value));
}
inline void SkelAnimationHeader::set_blend_shapes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blend_shapes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::set_blend_shapes(int index, const char* value, size_t size) {
  blend_shapes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline std::string* SkelAnimationHeader::_internal_add_blend_shapes() {
  return blend_shapes_.Add();
}
inline void SkelAnimationHeader::add_blend_shapes(const std::string& value) {
  blend_shapes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(std::string&& value) {
  blend_shapes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blend_shapes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(const char* value, size_t size) {
  blend_shapes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SkelAnimationHeader::blend_shapes() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return blend_shapes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SkelAnimationHeader::mutable_blend_shapes() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return &blend_shapes_;
}

// repeated string joints = 2;
inline int SkelAnimationHeader::_internal_joints_size() const {
  return joints_.size();
}
inline int SkelAnimationHeader::joints_size() const {
  return _internal_joints_size();
}
inline void SkelAnimationHeader::clear_joints() {
  joints_.Clear();
}
inline std::string* SkelAnimationHeader::add_joints() {
  // @@protoc_insertion_point(field_add_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return _internal_add_joints();
}
inline const std::string& SkelAnimationHeader::_internal_joints(int index) const {
  return joints_.Get(index);
}
inline const std::string& SkelAnimationHeader::joints(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return _internal_joints(index);
}
inline std::string* SkelAnimationHeader::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return joints_.Mutable(index);
}
inline void SkelAnimationHeader::set_joints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  joints_.Mutable(index)->assign(value);
}
inline void SkelAnimationHeader::set_joints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  joints_.Mutable(index)->assign(std::move(value));
}
inline void SkelAnimationHeader::set_joints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::set_joints(int index, const char* value, size_t size) {
  joints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline std::string* SkelAnimationHeader::_internal_add_joints() {
  return joints_.Add();
}
inline void SkelAnimationHeader::add_joints(const std::string& value) {
  joints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(std::string&& value) {
  joints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(const char* value, size_t size) {
  joints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SkelAnimationHeader::joints() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return joints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SkelAnimationHeader::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return &joints_;
}

// -------------------------------------------------------------------

// SkelAnimation

// repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
inline int SkelAnimation::_internal_blend_shape_weights_size() const {
  return blend_shape_weights_.size();
}
inline int SkelAnimation::blend_shape_weights_size() const {
  return _internal_blend_shape_weights_size();
}
inline void SkelAnimation::clear_blend_shape_weights() {
  blend_shape_weights_.Clear();
}
inline ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* SkelAnimation::mutable_blend_shape_weights(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return blend_shape_weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode >*
SkelAnimation::mutable_blend_shape_weights() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return &blend_shape_weights_;
}
inline const ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode& SkelAnimation::_internal_blend_shape_weights(int index) const {
  return blend_shape_weights_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode& SkelAnimation::blend_shape_weights(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return _internal_blend_shape_weights(index);
}
inline ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* SkelAnimation::_internal_add_blend_shape_weights() {
  return blend_shape_weights_.Add();
}
inline ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* SkelAnimation::add_blend_shape_weights() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return _internal_add_blend_shape_weights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode >&
SkelAnimation::blend_shape_weights() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return blend_shape_weights_;
}

// repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
inline int SkelAnimation::_internal_translations_size() const {
  return translations_.size();
}
inline int SkelAnimation::translations_size() const {
  return _internal_translations_size();
}
inline void SkelAnimation::clear_translations() {
  translations_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::mutable_translations(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return translations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >*
SkelAnimation::mutable_translations() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return &translations_;
}
inline const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& SkelAnimation::_internal_translations(int index) const {
  return translations_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& SkelAnimation::translations(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return _internal_translations(index);
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::_internal_add_translations() {
  return translations_.Add();
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::add_translations() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return _internal_add_translations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >&
SkelAnimation::translations() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return translations_;
}

// repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
inline int SkelAnimation::_internal_rotations_size() const {
  return rotations_.size();
}
inline int SkelAnimation::rotations_size() const {
  return _internal_rotations_size();
}
inline void SkelAnimation::clear_rotations() {
  rotations_.Clear();
}
inline ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* SkelAnimation::mutable_rotations(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return rotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode >*
SkelAnimation::mutable_rotations() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return &rotations_;
}
inline const ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode& SkelAnimation::_internal_rotations(int index) const {
  return rotations_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode& SkelAnimation::rotations(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return _internal_rotations(index);
}
inline ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* SkelAnimation::_internal_add_rotations() {
  return rotations_.Add();
}
inline ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* SkelAnimation::add_rotations() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return _internal_add_rotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode >&
SkelAnimation::rotations() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return rotations_;
}

// repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
inline int SkelAnimation::_internal_scales_size() const {
  return scales_.size();
}
inline int SkelAnimation::scales_size() const {
  return _internal_scales_size();
}
inline void SkelAnimation::clear_scales() {
  scales_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::mutable_scales(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return scales_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >*
SkelAnimation::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return &scales_;
}
inline const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& SkelAnimation::_internal_scales(int index) const {
  return scales_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& SkelAnimation::scales(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return _internal_scales(index);
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::_internal_add_scales() {
  return scales_.Add();
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::add_scales() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return _internal_add_scales();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode >&
SkelAnimation::scales() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return scales_;
}

// -------------------------------------------------------------------

// Camera

// repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
inline int Camera::_internal_position_size() const {
  return position_.size();
}
inline int Camera::position_size() const {
  return _internal_position_size();
}
inline void Camera::clear_position() {
  position_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Camera::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.position)
  return position_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3WithTimeCode >*
Camera::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.position)
  return &position_;
}
inline const ::nvidia_ace::animation_data::v1::Float3WithTimeCode& Camera::_internal_position(int index) const {
  return position_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::Float3WithTimeCode& Camera::position(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.position)
  return _internal_position(index);
}
inline ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Camera::_internal_add_position() {
  return position_.Add();
}
inline ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Camera::add_position() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.position)
  return _internal_add_position();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3WithTimeCode >&
Camera::position() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.position)
  return position_;
}

// repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
inline int Camera::_internal_rotation_size() const {
  return rotation_.size();
}
inline int Camera::rotation_size() const {
  return _internal_rotation_size();
}
inline void Camera::clear_rotation() {
  rotation_.Clear();
}
inline ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Camera::mutable_rotation(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.rotation)
  return rotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode >*
Camera::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.rotation)
  return &rotation_;
}
inline const ::nvidia_ace::animation_data::v1::QuatFWithTimeCode& Camera::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::QuatFWithTimeCode& Camera::rotation(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.rotation)
  return _internal_rotation(index);
}
inline ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Camera::_internal_add_rotation() {
  return rotation_.Add();
}
inline ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Camera::add_rotation() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.rotation)
  return _internal_add_rotation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode >&
Camera::rotation() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.rotation)
  return rotation_;
}

// repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
inline int Camera::_internal_focal_length_size() const {
  return focal_length_.size();
}
inline int Camera::focal_length_size() const {
  return _internal_focal_length_size();
}
inline void Camera::clear_focal_length() {
  focal_length_.Clear();
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::mutable_focal_length(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.focal_length)
  return focal_length_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >*
Camera::mutable_focal_length() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.focal_length)
  return &focal_length_;
}
inline const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& Camera::_internal_focal_length(int index) const {
  return focal_length_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& Camera::focal_length(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.focal_length)
  return _internal_focal_length(index);
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::_internal_add_focal_length() {
  return focal_length_.Add();
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::add_focal_length() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.focal_length)
  return _internal_add_focal_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >&
Camera::focal_length() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.focal_length)
  return focal_length_;
}

// repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
inline int Camera::_internal_focus_distance_size() const {
  return focus_distance_.size();
}
inline int Camera::focus_distance_size() const {
  return _internal_focus_distance_size();
}
inline void Camera::clear_focus_distance() {
  focus_distance_.Clear();
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::mutable_focus_distance(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return focus_distance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >*
Camera::mutable_focus_distance() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return &focus_distance_;
}
inline const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& Camera::_internal_focus_distance(int index) const {
  return focus_distance_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& Camera::focus_distance(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return _internal_focus_distance(index);
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::_internal_add_focus_distance() {
  return focus_distance_.Add();
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::add_focus_distance() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return _internal_add_focus_distance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode >&
Camera::focus_distance() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return focus_distance_;
}

// -------------------------------------------------------------------

// FloatArrayWithTimeCode

// double time_code = 1;
inline void FloatArrayWithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double FloatArrayWithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double FloatArrayWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.time_code)
  return _internal_time_code();
}
inline void FloatArrayWithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void FloatArrayWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.time_code)
}

// repeated float values = 2;
inline int FloatArrayWithTimeCode::_internal_values_size() const {
  return values_.size();
}
inline int FloatArrayWithTimeCode::values_size() const {
  return _internal_values_size();
}
inline void FloatArrayWithTimeCode::clear_values() {
  values_.Clear();
}
inline float FloatArrayWithTimeCode::_internal_values(int index) const {
  return values_.Get(index);
}
inline float FloatArrayWithTimeCode::values(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
  return _internal_values(index);
}
inline void FloatArrayWithTimeCode::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
}
inline void FloatArrayWithTimeCode::_internal_add_values(float value) {
  values_.Add(value);
}
inline void FloatArrayWithTimeCode::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArrayWithTimeCode::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArrayWithTimeCode::values() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArrayWithTimeCode::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArrayWithTimeCode::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Float3ArrayWithTimeCode

// double time_code = 1;
inline void Float3ArrayWithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double Float3ArrayWithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double Float3ArrayWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.time_code)
  return _internal_time_code();
}
inline void Float3ArrayWithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void Float3ArrayWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.time_code)
}

// repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
inline int Float3ArrayWithTimeCode::_internal_values_size() const {
  return values_.size();
}
inline int Float3ArrayWithTimeCode::values_size() const {
  return _internal_values_size();
}
inline void Float3ArrayWithTimeCode::clear_values() {
  values_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3ArrayWithTimeCode::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3 >*
Float3ArrayWithTimeCode::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return &values_;
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3ArrayWithTimeCode::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3ArrayWithTimeCode::values(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return _internal_values(index);
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3ArrayWithTimeCode::_internal_add_values() {
  return values_.Add();
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3ArrayWithTimeCode::add_values() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3 >&
Float3ArrayWithTimeCode::values() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return values_;
}

// -------------------------------------------------------------------

// QuatFArrayWithTimeCode

// double time_code = 1;
inline void QuatFArrayWithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double QuatFArrayWithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double QuatFArrayWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.time_code)
  return _internal_time_code();
}
inline void QuatFArrayWithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void QuatFArrayWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.time_code)
}

// repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
inline int QuatFArrayWithTimeCode::_internal_values_size() const {
  return values_.size();
}
inline int QuatFArrayWithTimeCode::values_size() const {
  return _internal_values_size();
}
inline void QuatFArrayWithTimeCode::clear_values() {
  values_.Clear();
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFArrayWithTimeCode::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatF >*
QuatFArrayWithTimeCode::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return &values_;
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFArrayWithTimeCode::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFArrayWithTimeCode::values(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return _internal_values(index);
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFArrayWithTimeCode::_internal_add_values() {
  return values_.Add();
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFArrayWithTimeCode::add_values() {
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatF >&
QuatFArrayWithTimeCode::values() const {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return values_;
}

// -------------------------------------------------------------------

// Float3WithTimeCode

// double time_code = 1;
inline void Float3WithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double Float3WithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double Float3WithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3WithTimeCode.time_code)
  return _internal_time_code();
}
inline void Float3WithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void Float3WithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3WithTimeCode.time_code)
}

// .nvidia_ace.animation_data.v1.Float3 value = 2;
inline bool Float3WithTimeCode::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Float3WithTimeCode::has_value() const {
  return _internal_has_value();
}
inline void Float3WithTimeCode::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3WithTimeCode::_internal_value() const {
  const ::nvidia_ace::animation_data::v1::Float3* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::Float3&>(
      ::nvidia_ace::animation_data::v1::_Float3_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3WithTimeCode::value() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
  return _internal_value();
}
inline void Float3WithTimeCode::unsafe_arena_set_allocated_value(
    ::nvidia_ace::animation_data::v1::Float3* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::release_value() {
  
  ::nvidia_ace::animation_data::v1::Float3* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
  
  ::nvidia_ace::animation_data::v1::Float3* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::Float3>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
  return _internal_mutable_value();
}
inline void Float3WithTimeCode::set_allocated_value(::nvidia_ace::animation_data::v1::Float3* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
}

// -------------------------------------------------------------------

// QuatFWithTimeCode

// double time_code = 1;
inline void QuatFWithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double QuatFWithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double QuatFWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFWithTimeCode.time_code)
  return _internal_time_code();
}
inline void QuatFWithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void QuatFWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatFWithTimeCode.time_code)
}

// .nvidia_ace.animation_data.v1.QuatF value = 2;
inline bool QuatFWithTimeCode::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool QuatFWithTimeCode::has_value() const {
  return _internal_has_value();
}
inline void QuatFWithTimeCode::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFWithTimeCode::_internal_value() const {
  const ::nvidia_ace::animation_data::v1::QuatF* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::QuatF&>(
      ::nvidia_ace::animation_data::v1::_QuatF_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFWithTimeCode::value() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
  return _internal_value();
}
inline void QuatFWithTimeCode::unsafe_arena_set_allocated_value(
    ::nvidia_ace::animation_data::v1::QuatF* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::release_value() {
  
  ::nvidia_ace::animation_data::v1::QuatF* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
  
  ::nvidia_ace::animation_data::v1::QuatF* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::nvidia_ace::animation_data::v1::QuatF>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
  return _internal_mutable_value();
}
inline void QuatFWithTimeCode::set_allocated_value(::nvidia_ace::animation_data::v1::QuatF* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
}

// -------------------------------------------------------------------

// FloatWithTimeCode

// double time_code = 1;
inline void FloatWithTimeCode::clear_time_code() {
  time_code_ = 0;
}
inline double FloatWithTimeCode::_internal_time_code() const {
  return time_code_;
}
inline double FloatWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatWithTimeCode.time_code)
  return _internal_time_code();
}
inline void FloatWithTimeCode::_internal_set_time_code(double value) {
  
  time_code_ = value;
}
inline void FloatWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatWithTimeCode.time_code)
}

// float value = 2;
inline void FloatWithTimeCode::clear_value() {
  value_ = 0;
}
inline float FloatWithTimeCode::_internal_value() const {
  return value_;
}
inline float FloatWithTimeCode::value() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatWithTimeCode.value)
  return _internal_value();
}
inline void FloatWithTimeCode::_internal_set_value(float value) {
  
  value_ = value;
}
inline void FloatWithTimeCode::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatWithTimeCode.value)
}

// -------------------------------------------------------------------

// QuatF

// float real = 1;
inline void QuatF::clear_real() {
  real_ = 0;
}
inline float QuatF::_internal_real() const {
  return real_;
}
inline float QuatF::real() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.real)
  return _internal_real();
}
inline void QuatF::_internal_set_real(float value) {
  
  real_ = value;
}
inline void QuatF::set_real(float value) {
  _internal_set_real(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.real)
}

// float i = 2;
inline void QuatF::clear_i() {
  i_ = 0;
}
inline float QuatF::_internal_i() const {
  return i_;
}
inline float QuatF::i() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.i)
  return _internal_i();
}
inline void QuatF::_internal_set_i(float value) {
  
  i_ = value;
}
inline void QuatF::set_i(float value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.i)
}

// float j = 3;
inline void QuatF::clear_j() {
  j_ = 0;
}
inline float QuatF::_internal_j() const {
  return j_;
}
inline float QuatF::j() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.j)
  return _internal_j();
}
inline void QuatF::_internal_set_j(float value) {
  
  j_ = value;
}
inline void QuatF::set_j(float value) {
  _internal_set_j(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.j)
}

// float k = 4;
inline void QuatF::clear_k() {
  k_ = 0;
}
inline float QuatF::_internal_k() const {
  return k_;
}
inline float QuatF::k() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.k)
  return _internal_k();
}
inline void QuatF::_internal_set_k(float value) {
  
  k_ = value;
}
inline void QuatF::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.k)
}

// -------------------------------------------------------------------

// Float3

// float x = 1;
inline void Float3::clear_x() {
  x_ = 0;
}
inline float Float3::_internal_x() const {
  return x_;
}
inline float Float3::x() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3.x)
  return _internal_x();
}
inline void Float3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Float3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3.x)
}

// float y = 2;
inline void Float3::clear_y() {
  y_ = 0;
}
inline float Float3::_internal_y() const {
  return y_;
}
inline float Float3::y() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3.y)
  return _internal_y();
}
inline void Float3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Float3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3.y)
}

// float z = 3;
inline void Float3::clear_z() {
  z_ = 0;
}
inline float Float3::_internal_z() const {
  return z_;
}
inline float Float3::z() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3.z)
  return _internal_z();
}
inline void Float3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Float3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto
