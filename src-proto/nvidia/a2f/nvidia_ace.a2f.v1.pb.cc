#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.a2f.v1.proto

#include "nvidia/a2f/nvidia_ace.a2f.v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceParameters_FloatArrayParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceParameters_FloatParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceParameters_IntegerParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnimationIds_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto;
namespace nvidia_ace {
namespace a2f {
namespace v1 {
class AudioStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStream> _instance;
} _AudioStream_default_instance_;
class AudioStreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamHeader> _instance;
} _AudioStreamHeader_default_instance_;
class FloatArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatArray> _instance;
} _FloatArray_default_instance_;
class FaceParameters_FloatParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceParameters_FloatParamsEntry_DoNotUse> _instance;
} _FaceParameters_FloatParamsEntry_DoNotUse_default_instance_;
class FaceParameters_IntegerParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceParameters_IntegerParamsEntry_DoNotUse> _instance;
} _FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_;
class FaceParameters_FloatArrayParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceParameters_FloatArrayParamsEntry_DoNotUse> _instance;
} _FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_;
class FaceParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceParameters> _instance;
} _FaceParameters_default_instance_;
class BlendShapeParameters_BsWeightMultipliersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse> _instance;
} _BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_;
class BlendShapeParameters_BsWeightOffsetsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse> _instance;
} _BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_;
class BlendShapeParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendShapeParameters> _instance;
} _BlendShapeParameters_default_instance_;
class EmotionPostProcessingParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmotionPostProcessingParameters> _instance;
} _EmotionPostProcessingParameters_default_instance_;
class AudioWithEmotionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioWithEmotion> _instance;
} _AudioWithEmotion_default_instance_;
}  // namespace v1
}  // namespace a2f
}  // namespace nvidia_ace
static void InitDefaultsscc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_AudioStream_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::AudioStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {
      &scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_AudioStreamHeader_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::AudioStreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {
      &scc_info_AnimationIds_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto.base,
      &scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto.base,
      &scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_AudioWithEmotion_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::AudioWithEmotion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {
      &scc_info_EmotionWithTimeCode_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_BlendShapeParameters_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::BlendShapeParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {
      &scc_info_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_EmotionPostProcessingParameters_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_FaceParameters_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::FaceParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {
      &scc_info_FaceParameters_FloatParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_FaceParameters_IntegerParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_FaceParameters_FloatArrayParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_FaceParameters_FloatArrayParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceParameters_FloatArrayParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FaceParameters_FloatArrayParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {
      &scc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_FaceParameters_FloatParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_FaceParameters_FloatParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceParameters_FloatParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FaceParameters_FloatParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_FaceParameters_IntegerParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceParameters_IntegerParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FaceParameters_IntegerParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::a2f::v1::_FloatArray_default_instance_;
    new (ptr) ::nvidia_ace::a2f::v1::FloatArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStream, stream_part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStreamHeader, animation_ids_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStreamHeader, audio_header_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStreamHeader, face_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStreamHeader, emotion_post_processing_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioStreamHeader, blendshape_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FloatArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FloatArray, values_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters, float_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters, integer_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::FaceParameters, float_array_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters, bs_weight_multipliers_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::BlendShapeParameters, bs_weight_offsets_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, emotion_contrast_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, live_blend_coef_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, enable_preferred_emotion_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, preferred_emotion_strength_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, emotion_strength_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters, max_emotions_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioWithEmotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioWithEmotion, audio_buffer_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::a2f::v1::AudioWithEmotion, emotions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nvidia_ace::a2f::v1::AudioStream)},
  { 8, -1, sizeof(::nvidia_ace::a2f::v1::AudioStreamHeader)},
  { 18, -1, sizeof(::nvidia_ace::a2f::v1::FloatArray)},
  { 24, 31, sizeof(::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse)},
  { 33, 40, sizeof(::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse)},
  { 42, 49, sizeof(::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse)},
  { 51, -1, sizeof(::nvidia_ace::a2f::v1::FaceParameters)},
  { 59, 66, sizeof(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse)},
  { 68, 75, sizeof(::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse)},
  { 77, -1, sizeof(::nvidia_ace::a2f::v1::BlendShapeParameters)},
  { 84, 95, sizeof(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters)},
  { 101, -1, sizeof(::nvidia_ace::a2f::v1::AudioWithEmotion)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_AudioStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_AudioStreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_FloatArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_FaceParameters_FloatParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_FaceParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_BlendShapeParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_EmotionPostProcessingParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::a2f::v1::_AudioWithEmotion_default_instance_),
};

const char descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"nvidia/a2f/nvidia_ace.a2f.v1.proto\022\021nv"
  "idia_ace.a2f.v1\032+nvidia/a2f/nvidia_ace.a"
  "nimation_id.v1.proto\032%nvidia/a2f/nvidia_"
  "ace.status.v1.proto\032$nvidia/a2f/nvidia_a"
  "ce.audio.v1.proto\0324nvidia/a2f/nvidia_ace"
  ".emotion_with_timecode.v1.proto\"\244\001\n\013Audi"
  "oStream\022C\n\023audio_stream_header\030\001 \001(\0132$.n"
  "vidia_ace.a2f.v1.AudioStreamHeaderH\000\022A\n\022"
  "audio_with_emotion\030\002 \001(\0132#.nvidia_ace.a2"
  "f.v1.AudioWithEmotionH\000B\r\n\013stream_part\"\344"
  "\002\n\021AudioStreamHeader\022\?\n\ranimation_ids\030\001 "
  "\001(\0132(.nvidia_ace.animation_id.v1.Animati"
  "onIds\0226\n\014audio_header\030\002 \001(\0132 .nvidia_ace"
  ".audio.v1.AudioHeader\0226\n\013face_params\030\003 \001"
  "(\0132!.nvidia_ace.a2f.v1.FaceParameters\022Z\n"
  "\036emotion_post_processing_params\030\004 \001(\01322."
  "nvidia_ace.a2f.v1.EmotionPostProcessingP"
  "arameters\022B\n\021blendshape_params\030\005 \001(\0132\'.n"
  "vidia_ace.a2f.v1.BlendShapeParameters\"\034\n"
  "\nFloatArray\022\016\n\006values\030\001 \003(\002\"\277\003\n\016FacePara"
  "meters\022H\n\014float_params\030\001 \003(\01322.nvidia_ac"
  "e.a2f.v1.FaceParameters.FloatParamsEntry"
  "\022L\n\016integer_params\030\002 \003(\01324.nvidia_ace.a2"
  "f.v1.FaceParameters.IntegerParamsEntry\022S"
  "\n\022float_array_params\030\003 \003(\01327.nvidia_ace."
  "a2f.v1.FaceParameters.FloatArrayParamsEn"
  "try\0322\n\020FloatParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\002:\0028\001\0324\n\022IntegerParamsEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\032V\n\025FloatAr"
  "rayParamsEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001"
  "(\0132\035.nvidia_ace.a2f.v1.FloatArray:\0028\001\"\304\002"
  "\n\024BlendShapeParameters\022_\n\025bs_weight_mult"
  "ipliers\030\001 \003(\0132@.nvidia_ace.a2f.v1.BlendS"
  "hapeParameters.BsWeightMultipliersEntry\022"
  "W\n\021bs_weight_offsets\030\002 \003(\0132<.nvidia_ace."
  "a2f.v1.BlendShapeParameters.BsWeightOffs"
  "etsEntry\032:\n\030BsWeightMultipliersEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\0326\n\024BsWeight"
  "OffsetsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002"
  ":\0028\001\"\363\002\n\037EmotionPostProcessingParameters"
  "\022\035\n\020emotion_contrast\030\001 \001(\002H\000\210\001\001\022\034\n\017live_"
  "blend_coef\030\002 \001(\002H\001\210\001\001\022%\n\030enable_preferre"
  "d_emotion\030\003 \001(\010H\002\210\001\001\022\'\n\032preferred_emotio"
  "n_strength\030\004 \001(\002H\003\210\001\001\022\035\n\020emotion_strengt"
  "h\030\005 \001(\002H\004\210\001\001\022\031\n\014max_emotions\030\006 \001(\005H\005\210\001\001B"
  "\023\n\021_emotion_contrastB\022\n\020_live_blend_coef"
  "B\033\n\031_enable_preferred_emotionB\035\n\033_prefer"
  "red_emotion_strengthB\023\n\021_emotion_strengt"
  "hB\017\n\r_max_emotions\"t\n\020AudioWithEmotion\022\024"
  "\n\014audio_buffer\030\001 \001(\014\022J\n\010emotions\030\002 \003(\01328"
  ".nvidia_ace.emotion_with_timecode.v1.Emo"
  "tionWithTimeCodeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto_deps[4] = {
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fid_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto_sccs[12] = {
  &scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_FaceParameters_FloatArrayParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_FaceParameters_FloatParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_FaceParameters_IntegerParamsEntry_DoNotUse_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
  &scc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto = {
  false, false, descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto, "nvidia/a2f/nvidia_ace.a2f.v1.proto", 2064,
  &descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto_once, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto_sccs, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto_deps, 12, 4,
  schemas, file_default_instances, TableStruct_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto::offsets,
  file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto, 12, file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto, file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto)), true);
namespace nvidia_ace {
namespace a2f {
namespace v1 {

// ===================================================================

class AudioStream::_Internal {
 public:
  static const ::nvidia_ace::a2f::v1::AudioStreamHeader& audio_stream_header(const AudioStream* msg);
  static const ::nvidia_ace::a2f::v1::AudioWithEmotion& audio_with_emotion(const AudioStream* msg);
};

const ::nvidia_ace::a2f::v1::AudioStreamHeader&
AudioStream::_Internal::audio_stream_header(const AudioStream* msg) {
  return *msg->stream_part_.audio_stream_header_;
}
const ::nvidia_ace::a2f::v1::AudioWithEmotion&
AudioStream::_Internal::audio_with_emotion(const AudioStream* msg) {
  return *msg->stream_part_.audio_with_emotion_;
}
void AudioStream::set_allocated_audio_stream_header(::nvidia_ace::a2f::v1::AudioStreamHeader* audio_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (audio_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_stream_header);
    if (message_arena != submessage_arena) {
      audio_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_stream_header, submessage_arena);
    }
    set_has_audio_stream_header();
    stream_part_.audio_stream_header_ = audio_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
}
void AudioStream::set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (audio_with_emotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_with_emotion);
    if (message_arena != submessage_arena) {
      audio_with_emotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_with_emotion, submessage_arena);
    }
    set_has_audio_with_emotion();
    stream_part_.audio_with_emotion_ = audio_with_emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
}
AudioStream::AudioStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.AudioStream)
}
AudioStream::AudioStream(const AudioStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream_part();
  switch (from.stream_part_case()) {
    case kAudioStreamHeader: {
      _internal_mutable_audio_stream_header()->::nvidia_ace::a2f::v1::AudioStreamHeader::MergeFrom(from._internal_audio_stream_header());
      break;
    }
    case kAudioWithEmotion: {
      _internal_mutable_audio_with_emotion()->::nvidia_ace::a2f::v1::AudioWithEmotion::MergeFrom(from._internal_audio_with_emotion());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.AudioStream)
}

void AudioStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  clear_has_stream_part();
}

AudioStream::~AudioStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.AudioStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
}

void AudioStream::ArenaDtor(void* object) {
  AudioStream* _this = reinterpret_cast< AudioStream* >(object);
  (void)_this;
}
void AudioStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStream& AudioStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.a2f.v1.AudioStream)
  switch (stream_part_case()) {
    case kAudioStreamHeader: {
      if (GetArena() == nullptr) {
        delete stream_part_.audio_stream_header_;
      }
      break;
    }
    case kAudioWithEmotion: {
      if (GetArena() == nullptr) {
        delete stream_part_.audio_with_emotion_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}


void AudioStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.AudioStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_stream_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_with_emotion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.AudioStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
  if (_internal_has_audio_stream_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio_stream_header(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
  if (_internal_has_audio_with_emotion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_with_emotion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.AudioStream)
  return target;
}

size_t AudioStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.AudioStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
    case kAudioStreamHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.audio_stream_header_);
      break;
    }
    // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
    case kAudioWithEmotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.audio_with_emotion_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.AudioStream)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.AudioStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.AudioStream)
    MergeFrom(*source);
  }
}

void AudioStream::MergeFrom(const AudioStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.AudioStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_part_case()) {
    case kAudioStreamHeader: {
      _internal_mutable_audio_stream_header()->::nvidia_ace::a2f::v1::AudioStreamHeader::MergeFrom(from._internal_audio_stream_header());
      break;
    }
    case kAudioWithEmotion: {
      _internal_mutable_audio_with_emotion()->::nvidia_ace::a2f::v1::AudioWithEmotion::MergeFrom(from._internal_audio_with_emotion());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
}

void AudioStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.AudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStream::CopyFrom(const AudioStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.AudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStream::IsInitialized() const {
  return true;
}

void AudioStream::InternalSwap(AudioStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_part_, other->stream_part_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioStreamHeader::_Internal {
 public:
  static const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids(const AudioStreamHeader* msg);
  static const ::nvidia_ace::audio::v1::AudioHeader& audio_header(const AudioStreamHeader* msg);
  static const ::nvidia_ace::a2f::v1::FaceParameters& face_params(const AudioStreamHeader* msg);
  static const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& emotion_post_processing_params(const AudioStreamHeader* msg);
  static const ::nvidia_ace::a2f::v1::BlendShapeParameters& blendshape_params(const AudioStreamHeader* msg);
};

const ::nvidia_ace::animation_id::v1::AnimationIds&
AudioStreamHeader::_Internal::animation_ids(const AudioStreamHeader* msg) {
  return *msg->animation_ids_;
}
const ::nvidia_ace::audio::v1::AudioHeader&
AudioStreamHeader::_Internal::audio_header(const AudioStreamHeader* msg) {
  return *msg->audio_header_;
}
const ::nvidia_ace::a2f::v1::FaceParameters&
AudioStreamHeader::_Internal::face_params(const AudioStreamHeader* msg) {
  return *msg->face_params_;
}
const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters&
AudioStreamHeader::_Internal::emotion_post_processing_params(const AudioStreamHeader* msg) {
  return *msg->emotion_post_processing_params_;
}
const ::nvidia_ace::a2f::v1::BlendShapeParameters&
AudioStreamHeader::_Internal::blendshape_params(const AudioStreamHeader* msg) {
  return *msg->blendshape_params_;
}
void AudioStreamHeader::clear_animation_ids() {
  if (GetArena() == nullptr && animation_ids_ != nullptr) {
    delete animation_ids_;
  }
  animation_ids_ = nullptr;
}
void AudioStreamHeader::clear_audio_header() {
  if (GetArena() == nullptr && audio_header_ != nullptr) {
    delete audio_header_;
  }
  audio_header_ = nullptr;
}
AudioStreamHeader::AudioStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.AudioStreamHeader)
}
AudioStreamHeader::AudioStreamHeader(const AudioStreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_animation_ids()) {
    animation_ids_ = new ::nvidia_ace::animation_id::v1::AnimationIds(*from.animation_ids_);
  } else {
    animation_ids_ = nullptr;
  }
  if (from._internal_has_audio_header()) {
    audio_header_ = new ::nvidia_ace::audio::v1::AudioHeader(*from.audio_header_);
  } else {
    audio_header_ = nullptr;
  }
  if (from._internal_has_face_params()) {
    face_params_ = new ::nvidia_ace::a2f::v1::FaceParameters(*from.face_params_);
  } else {
    face_params_ = nullptr;
  }
  if (from._internal_has_emotion_post_processing_params()) {
    emotion_post_processing_params_ = new ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters(*from.emotion_post_processing_params_);
  } else {
    emotion_post_processing_params_ = nullptr;
  }
  if (from._internal_has_blendshape_params()) {
    blendshape_params_ = new ::nvidia_ace::a2f::v1::BlendShapeParameters(*from.blendshape_params_);
  } else {
    blendshape_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.AudioStreamHeader)
}

void AudioStreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&animation_ids_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blendshape_params_) -
      reinterpret_cast<char*>(&animation_ids_)) + sizeof(blendshape_params_));
}

AudioStreamHeader::~AudioStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.AudioStreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete animation_ids_;
  if (this != internal_default_instance()) delete audio_header_;
  if (this != internal_default_instance()) delete face_params_;
  if (this != internal_default_instance()) delete emotion_post_processing_params_;
  if (this != internal_default_instance()) delete blendshape_params_;
}

void AudioStreamHeader::ArenaDtor(void* object) {
  AudioStreamHeader* _this = reinterpret_cast< AudioStreamHeader* >(object);
  (void)_this;
}
void AudioStreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStreamHeader& AudioStreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && animation_ids_ != nullptr) {
    delete animation_ids_;
  }
  animation_ids_ = nullptr;
  if (GetArena() == nullptr && audio_header_ != nullptr) {
    delete audio_header_;
  }
  audio_header_ = nullptr;
  if (GetArena() == nullptr && face_params_ != nullptr) {
    delete face_params_;
  }
  face_params_ = nullptr;
  if (GetArena() == nullptr && emotion_post_processing_params_ != nullptr) {
    delete emotion_post_processing_params_;
  }
  emotion_post_processing_params_ = nullptr;
  if (GetArena() == nullptr && blendshape_params_ != nullptr) {
    delete blendshape_params_;
  }
  blendshape_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_face_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotion_post_processing_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_blendshape_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  if (this->has_animation_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::animation_ids(this), target, stream);
  }

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
  if (this->has_audio_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_header(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
  if (this->has_face_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::face_params(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
  if (this->has_emotion_post_processing_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::emotion_post_processing_params(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
  if (this->has_blendshape_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::blendshape_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.AudioStreamHeader)
  return target;
}

size_t AudioStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  if (this->has_animation_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animation_ids_);
  }

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
  if (this->has_audio_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_header_);
  }

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
  if (this->has_face_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_params_);
  }

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
  if (this->has_emotion_post_processing_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emotion_post_processing_params_);
  }

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
  if (this->has_blendshape_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blendshape_params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.AudioStreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.AudioStreamHeader)
    MergeFrom(*source);
  }
}

void AudioStreamHeader::MergeFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_animation_ids()) {
    _internal_mutable_animation_ids()->::nvidia_ace::animation_id::v1::AnimationIds::MergeFrom(from._internal_animation_ids());
  }
  if (from.has_audio_header()) {
    _internal_mutable_audio_header()->::nvidia_ace::audio::v1::AudioHeader::MergeFrom(from._internal_audio_header());
  }
  if (from.has_face_params()) {
    _internal_mutable_face_params()->::nvidia_ace::a2f::v1::FaceParameters::MergeFrom(from._internal_face_params());
  }
  if (from.has_emotion_post_processing_params()) {
    _internal_mutable_emotion_post_processing_params()->::nvidia_ace::a2f::v1::EmotionPostProcessingParameters::MergeFrom(from._internal_emotion_post_processing_params());
  }
  if (from.has_blendshape_params()) {
    _internal_mutable_blendshape_params()->::nvidia_ace::a2f::v1::BlendShapeParameters::MergeFrom(from._internal_blendshape_params());
  }
}

void AudioStreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStreamHeader::CopyFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStreamHeader::IsInitialized() const {
  return true;
}

void AudioStreamHeader::InternalSwap(AudioStreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioStreamHeader, blendshape_params_)
      + sizeof(AudioStreamHeader::blendshape_params_)
      - PROTOBUF_FIELD_OFFSET(AudioStreamHeader, animation_ids_)>(
          reinterpret_cast<char*>(&animation_ids_),
          reinterpret_cast<char*>(&other->animation_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FloatArray::_Internal {
 public:
};

FloatArray::FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.FloatArray)
}
FloatArray::FloatArray(const FloatArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.FloatArray)
}

void FloatArray::SharedCtor() {
}

FloatArray::~FloatArray() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.FloatArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatArray::ArenaDtor(void* object) {
  FloatArray* _this = reinterpret_cast< FloatArray* >(object);
  (void)_this;
}
void FloatArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatArray& FloatArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatArray_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void FloatArray::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.FloatArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.FloatArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.FloatArray)
  return target;
}

size_t FloatArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.FloatArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.FloatArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.FloatArray)
    MergeFrom(*source);
  }
}

void FloatArray::MergeFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void FloatArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArray::CopyFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {
  return true;
}

void FloatArray::InternalSwap(FloatArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FaceParameters_FloatParamsEntry_DoNotUse::FaceParameters_FloatParamsEntry_DoNotUse() {}
FaceParameters_FloatParamsEntry_DoNotUse::FaceParameters_FloatParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaceParameters_FloatParamsEntry_DoNotUse::MergeFrom(const FaceParameters_FloatParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaceParameters_FloatParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FaceParameters_FloatParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FaceParameters_IntegerParamsEntry_DoNotUse::FaceParameters_IntegerParamsEntry_DoNotUse() {}
FaceParameters_IntegerParamsEntry_DoNotUse::FaceParameters_IntegerParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaceParameters_IntegerParamsEntry_DoNotUse::MergeFrom(const FaceParameters_IntegerParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaceParameters_IntegerParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FaceParameters_IntegerParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FaceParameters_FloatArrayParamsEntry_DoNotUse::FaceParameters_FloatArrayParamsEntry_DoNotUse() {}
FaceParameters_FloatArrayParamsEntry_DoNotUse::FaceParameters_FloatArrayParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaceParameters_FloatArrayParamsEntry_DoNotUse::MergeFrom(const FaceParameters_FloatArrayParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaceParameters_FloatArrayParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FaceParameters_FloatArrayParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class FaceParameters::_Internal {
 public:
};

FaceParameters::FaceParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  float_params_(arena),
  integer_params_(arena),
  float_array_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.FaceParameters)
}
FaceParameters::FaceParameters(const FaceParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  float_params_.MergeFrom(from.float_params_);
  integer_params_.MergeFrom(from.integer_params_);
  float_array_params_.MergeFrom(from.float_array_params_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.FaceParameters)
}

void FaceParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
}

FaceParameters::~FaceParameters() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.FaceParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FaceParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FaceParameters::ArenaDtor(void* object) {
  FaceParameters* _this = reinterpret_cast< FaceParameters* >(object);
  (void)_this;
}
void FaceParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceParameters& FaceParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void FaceParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.FaceParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_params_.Clear();
  integer_params_.Clear();
  float_array_params_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, float> float_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&float_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> integer_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&integer_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&float_array_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.FaceParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> float_params = 1;
  if (!this->_internal_float_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.a2f.v1.FaceParameters.FloatParamsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_float_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_float_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_float_params().begin();
          it != this->_internal_float_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FaceParameters_FloatParamsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_float_params().begin();
          it != this->_internal_float_params().end(); ++it) {
        target = FaceParameters_FloatParamsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> integer_params = 2;
  if (!this->_internal_integer_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.a2f.v1.FaceParameters.IntegerParamsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_integer_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_integer_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_integer_params().begin();
          it != this->_internal_integer_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FaceParameters_IntegerParamsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_integer_params().begin();
          it != this->_internal_integer_params().end(); ++it) {
        target = FaceParameters_IntegerParamsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
  if (!this->_internal_float_array_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.a2f.v1.FaceParameters.FloatArrayParamsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_float_array_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_float_array_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >::const_iterator
          it = this->_internal_float_array_params().begin();
          it != this->_internal_float_array_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FaceParameters_FloatArrayParamsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >::const_iterator
          it = this->_internal_float_array_params().begin();
          it != this->_internal_float_array_params().end(); ++it) {
        target = FaceParameters_FloatArrayParamsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.FaceParameters)
  return target;
}

size_t FaceParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.FaceParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> float_params = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_float_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_float_params().begin();
      it != this->_internal_float_params().end(); ++it) {
    total_size += FaceParameters_FloatParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> integer_params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_integer_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_integer_params().begin();
      it != this->_internal_integer_params().end(); ++it) {
    total_size += FaceParameters_IntegerParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_float_array_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nvidia_ace::a2f::v1::FloatArray >::const_iterator
      it = this->_internal_float_array_params().begin();
      it != this->_internal_float_array_params().end(); ++it) {
    total_size += FaceParameters_FloatArrayParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.FaceParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.FaceParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.FaceParameters)
    MergeFrom(*source);
  }
}

void FaceParameters::MergeFrom(const FaceParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.FaceParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_params_.MergeFrom(from.float_params_);
  integer_params_.MergeFrom(from.integer_params_);
  float_array_params_.MergeFrom(from.float_array_params_);
}

void FaceParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.FaceParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceParameters::CopyFrom(const FaceParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.FaceParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceParameters::IsInitialized() const {
  return true;
}

void FaceParameters::InternalSwap(FaceParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  float_params_.Swap(&other->float_params_);
  integer_params_.Swap(&other->integer_params_);
  float_array_params_.Swap(&other->float_array_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse() {}
BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::MergeFrom(const BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse() {}
BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::MergeFrom(const BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class BlendShapeParameters::_Internal {
 public:
};

BlendShapeParameters::BlendShapeParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bs_weight_multipliers_(arena),
  bs_weight_offsets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.BlendShapeParameters)
}
BlendShapeParameters::BlendShapeParameters(const BlendShapeParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bs_weight_multipliers_.MergeFrom(from.bs_weight_multipliers_);
  bs_weight_offsets_.MergeFrom(from.bs_weight_offsets_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.BlendShapeParameters)
}

void BlendShapeParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
}

BlendShapeParameters::~BlendShapeParameters() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.BlendShapeParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlendShapeParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlendShapeParameters::ArenaDtor(void* object) {
  BlendShapeParameters* _this = reinterpret_cast< BlendShapeParameters* >(object);
  (void)_this;
}
void BlendShapeParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlendShapeParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendShapeParameters& BlendShapeParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void BlendShapeParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bs_weight_multipliers_.Clear();
  bs_weight_offsets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlendShapeParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, float> bs_weight_multipliers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&bs_weight_multipliers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, float> bs_weight_offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&bs_weight_offsets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendShapeParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> bs_weight_multipliers = 1;
  if (!this->_internal_bs_weight_multipliers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.a2f.v1.BlendShapeParameters.BsWeightMultipliersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_bs_weight_multipliers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_bs_weight_multipliers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_bs_weight_multipliers().begin();
          it != this->_internal_bs_weight_multipliers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_bs_weight_multipliers().begin();
          it != this->_internal_bs_weight_multipliers().end(); ++it) {
        target = BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> bs_weight_offsets = 2;
  if (!this->_internal_bs_weight_offsets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nvidia_ace.a2f.v1.BlendShapeParameters.BsWeightOffsetsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_bs_weight_offsets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_bs_weight_offsets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_bs_weight_offsets().begin();
          it != this->_internal_bs_weight_offsets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_bs_weight_offsets().begin();
          it != this->_internal_bs_weight_offsets().end(); ++it) {
        target = BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.BlendShapeParameters)
  return target;
}

size_t BlendShapeParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> bs_weight_multipliers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bs_weight_multipliers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_bs_weight_multipliers().begin();
      it != this->_internal_bs_weight_multipliers().end(); ++it) {
    total_size += BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> bs_weight_offsets = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bs_weight_offsets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_bs_weight_offsets().begin();
      it != this->_internal_bs_weight_offsets().end(); ++it) {
    total_size += BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendShapeParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const BlendShapeParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlendShapeParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.BlendShapeParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.BlendShapeParameters)
    MergeFrom(*source);
  }
}

void BlendShapeParameters::MergeFrom(const BlendShapeParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bs_weight_multipliers_.MergeFrom(from.bs_weight_multipliers_);
  bs_weight_offsets_.MergeFrom(from.bs_weight_offsets_);
}

void BlendShapeParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendShapeParameters::CopyFrom(const BlendShapeParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.BlendShapeParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendShapeParameters::IsInitialized() const {
  return true;
}

void BlendShapeParameters::InternalSwap(BlendShapeParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bs_weight_multipliers_.Swap(&other->bs_weight_multipliers_);
  bs_weight_offsets_.Swap(&other->bs_weight_offsets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlendShapeParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EmotionPostProcessingParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<EmotionPostProcessingParameters>()._has_bits_);
  static void set_has_emotion_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_live_blend_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_preferred_emotion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preferred_emotion_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_emotion_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_emotions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

EmotionPostProcessingParameters::EmotionPostProcessingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
}
EmotionPostProcessingParameters::EmotionPostProcessingParameters(const EmotionPostProcessingParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&emotion_contrast_, &from.emotion_contrast_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_emotions_) -
    reinterpret_cast<char*>(&emotion_contrast_)) + sizeof(max_emotions_));
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
}

void EmotionPostProcessingParameters::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&emotion_contrast_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_emotions_) -
      reinterpret_cast<char*>(&emotion_contrast_)) + sizeof(max_emotions_));
}

EmotionPostProcessingParameters::~EmotionPostProcessingParameters() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmotionPostProcessingParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmotionPostProcessingParameters::ArenaDtor(void* object) {
  EmotionPostProcessingParameters* _this = reinterpret_cast< EmotionPostProcessingParameters* >(object);
  (void)_this;
}
void EmotionPostProcessingParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmotionPostProcessingParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmotionPostProcessingParameters& EmotionPostProcessingParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void EmotionPostProcessingParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&emotion_contrast_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_emotions_) -
        reinterpret_cast<char*>(&emotion_contrast_)) + sizeof(max_emotions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmotionPostProcessingParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float emotion_contrast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_emotion_contrast(&has_bits);
          emotion_contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float live_blend_coef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_live_blend_coef(&has_bits);
          live_blend_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool enable_preferred_emotion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_preferred_emotion(&has_bits);
          enable_preferred_emotion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float preferred_emotion_strength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_preferred_emotion_strength(&has_bits);
          preferred_emotion_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float emotion_strength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_emotion_strength(&has_bits);
          emotion_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 max_emotions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_emotions(&has_bits);
          max_emotions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmotionPostProcessingParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float emotion_contrast = 1;
  if (_internal_has_emotion_contrast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_emotion_contrast(), target);
  }

  // float live_blend_coef = 2;
  if (_internal_has_live_blend_coef()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_live_blend_coef(), target);
  }

  // bool enable_preferred_emotion = 3;
  if (_internal_has_enable_preferred_emotion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_preferred_emotion(), target);
  }

  // float preferred_emotion_strength = 4;
  if (_internal_has_preferred_emotion_strength()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_preferred_emotion_strength(), target);
  }

  // float emotion_strength = 5;
  if (_internal_has_emotion_strength()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_emotion_strength(), target);
  }

  // int32 max_emotions = 6;
  if (_internal_has_max_emotions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_emotions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  return target;
}

size_t EmotionPostProcessingParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // float emotion_contrast = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // float live_blend_coef = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // bool enable_preferred_emotion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // float preferred_emotion_strength = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // float emotion_strength = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // int32 max_emotions = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_emotions());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmotionPostProcessingParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionPostProcessingParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmotionPostProcessingParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
    MergeFrom(*source);
  }
}

void EmotionPostProcessingParameters::MergeFrom(const EmotionPostProcessingParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      emotion_contrast_ = from.emotion_contrast_;
    }
    if (cached_has_bits & 0x00000002u) {
      live_blend_coef_ = from.live_blend_coef_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_preferred_emotion_ = from.enable_preferred_emotion_;
    }
    if (cached_has_bits & 0x00000008u) {
      preferred_emotion_strength_ = from.preferred_emotion_strength_;
    }
    if (cached_has_bits & 0x00000010u) {
      emotion_strength_ = from.emotion_strength_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_emotions_ = from.max_emotions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmotionPostProcessingParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionPostProcessingParameters::CopyFrom(const EmotionPostProcessingParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionPostProcessingParameters::IsInitialized() const {
  return true;
}

void EmotionPostProcessingParameters::InternalSwap(EmotionPostProcessingParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmotionPostProcessingParameters, max_emotions_)
      + sizeof(EmotionPostProcessingParameters::max_emotions_)
      - PROTOBUF_FIELD_OFFSET(EmotionPostProcessingParameters, emotion_contrast_)>(
          reinterpret_cast<char*>(&emotion_contrast_),
          reinterpret_cast<char*>(&other->emotion_contrast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmotionPostProcessingParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioWithEmotion::_Internal {
 public:
};

void AudioWithEmotion::clear_emotions() {
  emotions_.Clear();
}
AudioWithEmotion::AudioWithEmotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emotions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.a2f.v1.AudioWithEmotion)
}
AudioWithEmotion::AudioWithEmotion(const AudioWithEmotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emotions_(from.emotions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_buffer().empty()) {
    audio_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_buffer(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.a2f.v1.AudioWithEmotion)
}

void AudioWithEmotion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  audio_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioWithEmotion::~AudioWithEmotion() {
  // @@protoc_insertion_point(destructor:nvidia_ace.a2f.v1.AudioWithEmotion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioWithEmotion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audio_buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioWithEmotion::ArenaDtor(void* object) {
  AudioWithEmotion* _this = reinterpret_cast< AudioWithEmotion* >(object);
  (void)_this;
}
void AudioWithEmotion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioWithEmotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioWithEmotion& AudioWithEmotion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioWithEmotion::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emotions_.Clear();
  audio_buffer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioWithEmotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audio_buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emotions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioWithEmotion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_buffer = 1;
  if (this->audio_buffer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio_buffer(), target);
  }

  // repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emotions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_emotions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.a2f.v1.AudioWithEmotion)
  return target;
}

size_t AudioWithEmotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
  total_size += 1UL * this->_internal_emotions_size();
  for (const auto& msg : this->emotions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes audio_buffer = 1;
  if (this->audio_buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio_buffer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioWithEmotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioWithEmotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioWithEmotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.a2f.v1.AudioWithEmotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.a2f.v1.AudioWithEmotion)
    MergeFrom(*source);
  }
}

void AudioWithEmotion::MergeFrom(const AudioWithEmotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotions_.MergeFrom(from.emotions_);
  if (from.audio_buffer().size() > 0) {
    _internal_set_audio_buffer(from._internal_audio_buffer());
  }
}

void AudioWithEmotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioWithEmotion::CopyFrom(const AudioWithEmotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.a2f.v1.AudioWithEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioWithEmotion::IsInitialized() const {
  return true;
}

void AudioWithEmotion::InternalSwap(AudioWithEmotion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emotions_.InternalSwap(&other->emotions_);
  audio_buffer_.Swap(&other->audio_buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioWithEmotion::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace a2f
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::AudioStream* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::AudioStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::AudioStream >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::AudioStreamHeader* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::AudioStreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::AudioStreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::FloatArray* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::FloatArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::FloatArray >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::FaceParameters_FloatParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::FaceParameters_IntegerParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::FaceParameters_FloatArrayParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::FaceParameters* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::FaceParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::FaceParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::BlendShapeParameters* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::BlendShapeParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::BlendShapeParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::a2f::v1::AudioWithEmotion* Arena::CreateMaybeMessage< ::nvidia_ace::a2f::v1::AudioWithEmotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::a2f::v1::AudioWithEmotion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
