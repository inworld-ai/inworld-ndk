#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia/a2f/nvidia_ace.controller.v1.proto

#include "nvidia/a2f/nvidia_ace.controller.v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto;
namespace nvidia_ace {
namespace controller {
namespace v1 {
class AudioStream_EndOfAudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStream_EndOfAudio> _instance;
} _AudioStream_EndOfAudio_default_instance_;
class AudioStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStream> _instance;
} _AudioStream_default_instance_;
class AudioStreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioStreamHeader> _instance;
} _AudioStreamHeader_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class AnimationDataStreamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationDataStreamHeader> _instance;
} _AnimationDataStreamHeader_default_instance_;
class AnimationDataStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationDataStream> _instance;
} _AnimationDataStream_default_instance_;
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace
static void InitDefaultsscc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::controller::v1::_AnimationDataStream_default_instance_;
    new (ptr) ::nvidia_ace::controller::v1::AnimationDataStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto}, {
      &scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
      &scc_info_AnimationData_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,
      &scc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
      &scc_info_Status_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::controller::v1::_AnimationDataStreamHeader_default_instance_;
    new (ptr) ::nvidia_ace::controller::v1::AnimationDataStreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto}, {
      &scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto.base,
      &scc_info_SkelAnimationHeader_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::controller::v1::_AudioStream_default_instance_;
    new (ptr) ::nvidia_ace::controller::v1::AudioStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto}, {
      &scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
      &scc_info_AudioWithEmotion_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::controller::v1::_AudioStream_EndOfAudio_default_instance_;
    new (ptr) ::nvidia_ace::controller::v1::AudioStream_EndOfAudio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto}, {}};

static void InitDefaultsscc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::controller::v1::_AudioStreamHeader_default_instance_;
    new (ptr) ::nvidia_ace::controller::v1::AudioStreamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto}, {
      &scc_info_AudioHeader_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto.base,
      &scc_info_FaceParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_EmotionPostProcessingParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,
      &scc_info_BlendShapeParameters_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto.base,}};

static void InitDefaultsscc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nvidia_ace::controller::v1::_Event_default_instance_;
    new (ptr) ::nvidia_ace::controller::v1::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream_EndOfAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, stream_part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, audio_header_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, face_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, emotion_post_processing_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, blendshape_params_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, event_type_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, metadata_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, audio_header_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, skel_animation_header_),
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, start_time_code_since_epoch_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, stream_part_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nvidia_ace::controller::v1::AudioStream_EndOfAudio)},
  { 5, -1, sizeof(::nvidia_ace::controller::v1::AudioStream)},
  { 14, -1, sizeof(::nvidia_ace::controller::v1::AudioStreamHeader)},
  { 23, 30, sizeof(::nvidia_ace::controller::v1::Event)},
  { 32, 40, sizeof(::nvidia_ace::controller::v1::AnimationDataStreamHeader)},
  { 43, -1, sizeof(::nvidia_ace::controller::v1::AnimationDataStream)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::controller::v1::_AudioStream_EndOfAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::controller::v1::_AudioStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::controller::v1::_AudioStreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::controller::v1::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::controller::v1::_AnimationDataStreamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nvidia_ace::controller::v1::_AnimationDataStream_default_instance_),
};

const char descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)nvidia/a2f/nvidia_ace.controller.v1.pr"
  "oto\022\030nvidia_ace.controller.v1\032\"nvidia/a2"
  "f/nvidia_ace.a2f.v1.proto\032-nvidia/a2f/nv"
  "idia_ace.animation_data.v1.proto\032$nvidia"
  "/a2f/nvidia_ace.audio.v1.proto\032%nvidia/a"
  "2f/nvidia_ace.status.v1.proto\032\031google/pr"
  "otobuf/any.proto\"\203\002\n\013AudioStream\022J\n\023audi"
  "o_stream_header\030\001 \001(\0132+.nvidia_ace.contr"
  "oller.v1.AudioStreamHeaderH\000\022A\n\022audio_wi"
  "th_emotion\030\002 \001(\0132#.nvidia_ace.a2f.v1.Aud"
  "ioWithEmotionH\000\022H\n\014end_of_audio\030\003 \001(\01320."
  "nvidia_ace.controller.v1.AudioStream.End"
  "OfAudioH\000\032\014\n\nEndOfAudioB\r\n\013stream_part\"\243"
  "\002\n\021AudioStreamHeader\0226\n\014audio_header\030\001 \001"
  "(\0132 .nvidia_ace.audio.v1.AudioHeader\0226\n\013"
  "face_params\030\002 \001(\0132!.nvidia_ace.a2f.v1.Fa"
  "ceParameters\022Z\n\036emotion_post_processing_"
  "params\030\003 \001(\01322.nvidia_ace.a2f.v1.Emotion"
  "PostProcessingParameters\022B\n\021blendshape_p"
  "arams\030\004 \001(\0132\'.nvidia_ace.a2f.v1.BlendSha"
  "peParameters\"z\n\005Event\0227\n\nevent_type\030\001 \001("
  "\0162#.nvidia_ace.controller.v1.EventType\022+"
  "\n\010metadata\030\002 \001(\0132\024.google.protobuf.AnyH\000"
  "\210\001\001B\013\n\t_metadata\"\377\001\n\031AnimationDataStream"
  "Header\022;\n\014audio_header\030\001 \001(\0132 .nvidia_ac"
  "e.audio.v1.AudioHeaderH\000\210\001\001\022U\n\025skel_anim"
  "ation_header\030\002 \001(\01321.nvidia_ace.animatio"
  "n_data.v1.SkelAnimationHeaderH\001\210\001\001\022#\n\033st"
  "art_time_code_since_epoch\030\003 \001(\001B\017\n\r_audi"
  "o_headerB\030\n\026_skel_animation_header\"\252\002\n\023A"
  "nimationDataStream\022[\n\034animation_data_str"
  "eam_header\030\001 \001(\01323.nvidia_ace.controller"
  ".v1.AnimationDataStreamHeaderH\000\022E\n\016anima"
  "tion_data\030\002 \001(\0132+.nvidia_ace.animation_d"
  "ata.v1.AnimationDataH\000\0220\n\005event\030\003 \001(\0132\037."
  "nvidia_ace.controller.v1.EventH\000\022.\n\006stat"
  "us\030\004 \001(\0132\034.nvidia_ace.status.v1.StatusH\000"
  "B\r\n\013stream_part*,\n\tEventType\022\037\n\033END_OF_A"
  "2F_AUDIO_PROCESSING\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2ea2f_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eanimation_5fdata_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2eaudio_2ev1_2eproto,
  &::descriptor_table_nvidia_2fa2f_2fnvidia_5face_2estatus_2ev1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto_sccs[6] = {
  &scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
  &scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
  &scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
  &scc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
  &scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
  &scc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto = {
  false, false, descriptor_table_protodef_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto, "nvidia/a2f/nvidia_ace.controller.v1.proto", 1549,
  &descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto_once, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto_sccs, descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto_deps, 6, 5,
  schemas, file_default_instances, TableStruct_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto::offsets,
  file_level_metadata_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto, 6, file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto, file_level_service_descriptors_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto)), true);
namespace nvidia_ace {
namespace controller {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto);
  return file_level_enum_descriptors_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AudioStream_EndOfAudio::_Internal {
 public:
};

AudioStream_EndOfAudio::AudioStream_EndOfAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
}
AudioStream_EndOfAudio::AudioStream_EndOfAudio(const AudioStream_EndOfAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
}

void AudioStream_EndOfAudio::SharedCtor() {
}

AudioStream_EndOfAudio::~AudioStream_EndOfAudio() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStream_EndOfAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioStream_EndOfAudio::ArenaDtor(void* object) {
  AudioStream_EndOfAudio* _this = reinterpret_cast< AudioStream_EndOfAudio* >(object);
  (void)_this;
}
void AudioStream_EndOfAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStream_EndOfAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStream_EndOfAudio& AudioStream_EndOfAudio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStream_EndOfAudio_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioStream_EndOfAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStream_EndOfAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStream_EndOfAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  return target;
}

size_t AudioStream_EndOfAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStream_EndOfAudio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStream_EndOfAudio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStream_EndOfAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
    MergeFrom(*source);
  }
}

void AudioStream_EndOfAudio::MergeFrom(const AudioStream_EndOfAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AudioStream_EndOfAudio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStream_EndOfAudio::CopyFrom(const AudioStream_EndOfAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStream_EndOfAudio::IsInitialized() const {
  return true;
}

void AudioStream_EndOfAudio::InternalSwap(AudioStream_EndOfAudio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStream_EndOfAudio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioStream::_Internal {
 public:
  static const ::nvidia_ace::controller::v1::AudioStreamHeader& audio_stream_header(const AudioStream* msg);
  static const ::nvidia_ace::a2f::v1::AudioWithEmotion& audio_with_emotion(const AudioStream* msg);
  static const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& end_of_audio(const AudioStream* msg);
};

const ::nvidia_ace::controller::v1::AudioStreamHeader&
AudioStream::_Internal::audio_stream_header(const AudioStream* msg) {
  return *msg->stream_part_.audio_stream_header_;
}
const ::nvidia_ace::a2f::v1::AudioWithEmotion&
AudioStream::_Internal::audio_with_emotion(const AudioStream* msg) {
  return *msg->stream_part_.audio_with_emotion_;
}
const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio&
AudioStream::_Internal::end_of_audio(const AudioStream* msg) {
  return *msg->stream_part_.end_of_audio_;
}
void AudioStream::set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (audio_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_stream_header);
    if (message_arena != submessage_arena) {
      audio_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_stream_header, submessage_arena);
    }
    set_has_audio_stream_header();
    stream_part_.audio_stream_header_ = audio_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
}
void AudioStream::set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (audio_with_emotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_with_emotion)->GetArena();
    if (message_arena != submessage_arena) {
      audio_with_emotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_with_emotion, submessage_arena);
    }
    set_has_audio_with_emotion();
    stream_part_.audio_with_emotion_ = audio_with_emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
}
void AudioStream::clear_audio_with_emotion() {
  if (_internal_has_audio_with_emotion()) {
    if (GetArena() == nullptr) {
      delete stream_part_.audio_with_emotion_;
    }
    clear_has_stream_part();
  }
}
void AudioStream::set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (end_of_audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_of_audio);
    if (message_arena != submessage_arena) {
      end_of_audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_of_audio, submessage_arena);
    }
    set_has_end_of_audio();
    stream_part_.end_of_audio_ = end_of_audio;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStream.end_of_audio)
}
AudioStream::AudioStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AudioStream)
}
AudioStream::AudioStream(const AudioStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream_part();
  switch (from.stream_part_case()) {
    case kAudioStreamHeader: {
      _internal_mutable_audio_stream_header()->::nvidia_ace::controller::v1::AudioStreamHeader::MergeFrom(from._internal_audio_stream_header());
      break;
    }
    case kAudioWithEmotion: {
      _internal_mutable_audio_with_emotion()->::nvidia_ace::a2f::v1::AudioWithEmotion::MergeFrom(from._internal_audio_with_emotion());
      break;
    }
    case kEndOfAudio: {
      _internal_mutable_end_of_audio()->::nvidia_ace::controller::v1::AudioStream_EndOfAudio::MergeFrom(from._internal_end_of_audio());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AudioStream)
}

void AudioStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  clear_has_stream_part();
}

AudioStream::~AudioStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AudioStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
}

void AudioStream::ArenaDtor(void* object) {
  AudioStream* _this = reinterpret_cast< AudioStream* >(object);
  (void)_this;
}
void AudioStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStream& AudioStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.controller.v1.AudioStream)
  switch (stream_part_case()) {
    case kAudioStreamHeader: {
      if (GetArena() == nullptr) {
        delete stream_part_.audio_stream_header_;
      }
      break;
    }
    case kAudioWithEmotion: {
      if (GetArena() == nullptr) {
        delete stream_part_.audio_with_emotion_;
      }
      break;
    }
    case kEndOfAudio: {
      if (GetArena() == nullptr) {
        delete stream_part_.end_of_audio_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}


void AudioStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AudioStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_stream_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_with_emotion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_of_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AudioStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
  if (_internal_has_audio_stream_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio_stream_header(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
  if (_internal_has_audio_with_emotion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_with_emotion(this), target, stream);
  }

  // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
  if (_internal_has_end_of_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_of_audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AudioStream)
  return target;
}

size_t AudioStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AudioStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
    case kAudioStreamHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.audio_stream_header_);
      break;
    }
    // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
    case kAudioWithEmotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.audio_with_emotion_);
      break;
    }
    // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
    case kEndOfAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.end_of_audio_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.controller.v1.AudioStream)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.controller.v1.AudioStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.controller.v1.AudioStream)
    MergeFrom(*source);
  }
}

void AudioStream::MergeFrom(const AudioStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AudioStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_part_case()) {
    case kAudioStreamHeader: {
      _internal_mutable_audio_stream_header()->::nvidia_ace::controller::v1::AudioStreamHeader::MergeFrom(from._internal_audio_stream_header());
      break;
    }
    case kAudioWithEmotion: {
      _internal_mutable_audio_with_emotion()->::nvidia_ace::a2f::v1::AudioWithEmotion::MergeFrom(from._internal_audio_with_emotion());
      break;
    }
    case kEndOfAudio: {
      _internal_mutable_end_of_audio()->::nvidia_ace::controller::v1::AudioStream_EndOfAudio::MergeFrom(from._internal_end_of_audio());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
}

void AudioStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.controller.v1.AudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStream::CopyFrom(const AudioStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStream::IsInitialized() const {
  return true;
}

void AudioStream::InternalSwap(AudioStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_part_, other->stream_part_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioStreamHeader::_Internal {
 public:
  static const ::nvidia_ace::audio::v1::AudioHeader& audio_header(const AudioStreamHeader* msg);
  static const ::nvidia_ace::a2f::v1::FaceParameters& face_params(const AudioStreamHeader* msg);
  static const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& emotion_post_processing_params(const AudioStreamHeader* msg);
  static const ::nvidia_ace::a2f::v1::BlendShapeParameters& blendshape_params(const AudioStreamHeader* msg);
};

const ::nvidia_ace::audio::v1::AudioHeader&
AudioStreamHeader::_Internal::audio_header(const AudioStreamHeader* msg) {
  return *msg->audio_header_;
}
const ::nvidia_ace::a2f::v1::FaceParameters&
AudioStreamHeader::_Internal::face_params(const AudioStreamHeader* msg) {
  return *msg->face_params_;
}
const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters&
AudioStreamHeader::_Internal::emotion_post_processing_params(const AudioStreamHeader* msg) {
  return *msg->emotion_post_processing_params_;
}
const ::nvidia_ace::a2f::v1::BlendShapeParameters&
AudioStreamHeader::_Internal::blendshape_params(const AudioStreamHeader* msg) {
  return *msg->blendshape_params_;
}
void AudioStreamHeader::clear_audio_header() {
  if (GetArena() == nullptr && audio_header_ != nullptr) {
    delete audio_header_;
  }
  audio_header_ = nullptr;
}
void AudioStreamHeader::clear_face_params() {
  if (GetArena() == nullptr && face_params_ != nullptr) {
    delete face_params_;
  }
  face_params_ = nullptr;
}
void AudioStreamHeader::clear_emotion_post_processing_params() {
  if (GetArena() == nullptr && emotion_post_processing_params_ != nullptr) {
    delete emotion_post_processing_params_;
  }
  emotion_post_processing_params_ = nullptr;
}
void AudioStreamHeader::clear_blendshape_params() {
  if (GetArena() == nullptr && blendshape_params_ != nullptr) {
    delete blendshape_params_;
  }
  blendshape_params_ = nullptr;
}
AudioStreamHeader::AudioStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AudioStreamHeader)
}
AudioStreamHeader::AudioStreamHeader(const AudioStreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio_header()) {
    audio_header_ = new ::nvidia_ace::audio::v1::AudioHeader(*from.audio_header_);
  } else {
    audio_header_ = nullptr;
  }
  if (from._internal_has_face_params()) {
    face_params_ = new ::nvidia_ace::a2f::v1::FaceParameters(*from.face_params_);
  } else {
    face_params_ = nullptr;
  }
  if (from._internal_has_emotion_post_processing_params()) {
    emotion_post_processing_params_ = new ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters(*from.emotion_post_processing_params_);
  } else {
    emotion_post_processing_params_ = nullptr;
  }
  if (from._internal_has_blendshape_params()) {
    blendshape_params_ = new ::nvidia_ace::a2f::v1::BlendShapeParameters(*from.blendshape_params_);
  } else {
    blendshape_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AudioStreamHeader)
}

void AudioStreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&audio_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blendshape_params_) -
      reinterpret_cast<char*>(&audio_header_)) + sizeof(blendshape_params_));
}

AudioStreamHeader::~AudioStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AudioStreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioStreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete audio_header_;
  if (this != internal_default_instance()) delete face_params_;
  if (this != internal_default_instance()) delete emotion_post_processing_params_;
  if (this != internal_default_instance()) delete blendshape_params_;
}

void AudioStreamHeader::ArenaDtor(void* object) {
  AudioStreamHeader* _this = reinterpret_cast< AudioStreamHeader* >(object);
  (void)_this;
}
void AudioStreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioStreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioStreamHeader& AudioStreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AudioStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AudioStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && audio_header_ != nullptr) {
    delete audio_header_;
  }
  audio_header_ = nullptr;
  if (GetArena() == nullptr && face_params_ != nullptr) {
    delete face_params_;
  }
  face_params_ = nullptr;
  if (GetArena() == nullptr && emotion_post_processing_params_ != nullptr) {
    delete emotion_post_processing_params_;
  }
  emotion_post_processing_params_ = nullptr;
  if (GetArena() == nullptr && blendshape_params_ != nullptr) {
    delete blendshape_params_;
  }
  blendshape_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioStreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_face_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotion_post_processing_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_blendshape_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioStreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AudioStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  if (this->has_audio_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio_header(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
  if (this->has_face_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::face_params(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
  if (this->has_emotion_post_processing_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::emotion_post_processing_params(this), target, stream);
  }

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
  if (this->has_blendshape_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::blendshape_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AudioStreamHeader)
  return target;
}

size_t AudioStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AudioStreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  if (this->has_audio_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_header_);
  }

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
  if (this->has_face_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_params_);
  }

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
  if (this->has_emotion_post_processing_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emotion_post_processing_params_);
  }

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
  if (this->has_blendshape_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blendshape_params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioStreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.controller.v1.AudioStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioStreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioStreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.controller.v1.AudioStreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.controller.v1.AudioStreamHeader)
    MergeFrom(*source);
  }
}

void AudioStreamHeader::MergeFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AudioStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio_header()) {
    _internal_mutable_audio_header()->::nvidia_ace::audio::v1::AudioHeader::MergeFrom(from._internal_audio_header());
  }
  if (from.has_face_params()) {
    _internal_mutable_face_params()->::nvidia_ace::a2f::v1::FaceParameters::MergeFrom(from._internal_face_params());
  }
  if (from.has_emotion_post_processing_params()) {
    _internal_mutable_emotion_post_processing_params()->::nvidia_ace::a2f::v1::EmotionPostProcessingParameters::MergeFrom(from._internal_emotion_post_processing_params());
  }
  if (from.has_blendshape_params()) {
    _internal_mutable_blendshape_params()->::nvidia_ace::a2f::v1::BlendShapeParameters::MergeFrom(from._internal_blendshape_params());
  }
}

void AudioStreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.controller.v1.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioStreamHeader::CopyFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioStreamHeader::IsInitialized() const {
  return true;
}

void AudioStreamHeader::InternalSwap(AudioStreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioStreamHeader, blendshape_params_)
      + sizeof(AudioStreamHeader::blendshape_params_)
      - PROTOBUF_FIELD_OFFSET(AudioStreamHeader, audio_header_)>(
          reinterpret_cast<char*>(&audio_header_),
          reinterpret_cast<char*>(&other->audio_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioStreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Any& metadata(const Event* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const PROTOBUF_NAMESPACE_ID::Any&
Event::_Internal::metadata(const Event* msg) {
  return *msg->metadata_;
}
void Event::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Any(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(event_type_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && metadata_ != nullptr) {
      delete metadata_;
    }
    metadata_ = nullptr;
  }
  event_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.controller.v1.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::nvidia_ace::controller::v1::EventType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.controller.v1.EventType event_type = 1;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // .google.protobuf.Any metadata = 2;
  if (_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any metadata = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .nvidia_ace.controller.v1.EventType event_type = 1;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.controller.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.controller.v1.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.controller.v1.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_metadata());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.controller.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, event_type_)
      + sizeof(Event::event_type_)
      - PROTOBUF_FIELD_OFFSET(Event, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnimationDataStreamHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationDataStreamHeader>()._has_bits_);
  static const ::nvidia_ace::audio::v1::AudioHeader& audio_header(const AnimationDataStreamHeader* msg);
  static void set_has_audio_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& skel_animation_header(const AnimationDataStreamHeader* msg);
  static void set_has_skel_animation_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nvidia_ace::audio::v1::AudioHeader&
AnimationDataStreamHeader::_Internal::audio_header(const AnimationDataStreamHeader* msg) {
  return *msg->audio_header_;
}
const ::nvidia_ace::animation_data::v1::SkelAnimationHeader&
AnimationDataStreamHeader::_Internal::skel_animation_header(const AnimationDataStreamHeader* msg) {
  return *msg->skel_animation_header_;
}
void AnimationDataStreamHeader::clear_audio_header() {
  if (GetArena() == nullptr && audio_header_ != nullptr) {
    delete audio_header_;
  }
  audio_header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void AnimationDataStreamHeader::clear_skel_animation_header() {
  if (GetArena() == nullptr && skel_animation_header_ != nullptr) {
    delete skel_animation_header_;
  }
  skel_animation_header_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
AnimationDataStreamHeader::AnimationDataStreamHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AnimationDataStreamHeader)
}
AnimationDataStreamHeader::AnimationDataStreamHeader(const AnimationDataStreamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio_header()) {
    audio_header_ = new ::nvidia_ace::audio::v1::AudioHeader(*from.audio_header_);
  } else {
    audio_header_ = nullptr;
  }
  if (from._internal_has_skel_animation_header()) {
    skel_animation_header_ = new ::nvidia_ace::animation_data::v1::SkelAnimationHeader(*from.skel_animation_header_);
  } else {
    skel_animation_header_ = nullptr;
  }
  start_time_code_since_epoch_ = from.start_time_code_since_epoch_;
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AnimationDataStreamHeader)
}

void AnimationDataStreamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&audio_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_code_since_epoch_) -
      reinterpret_cast<char*>(&audio_header_)) + sizeof(start_time_code_since_epoch_));
}

AnimationDataStreamHeader::~AnimationDataStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimationDataStreamHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete audio_header_;
  if (this != internal_default_instance()) delete skel_animation_header_;
}

void AnimationDataStreamHeader::ArenaDtor(void* object) {
  AnimationDataStreamHeader* _this = reinterpret_cast< AnimationDataStreamHeader* >(object);
  (void)_this;
}
void AnimationDataStreamHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationDataStreamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationDataStreamHeader& AnimationDataStreamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationDataStreamHeader_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AnimationDataStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && audio_header_ != nullptr) {
        delete audio_header_;
      }
      audio_header_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && skel_animation_header_ != nullptr) {
        delete skel_animation_header_;
      }
      skel_animation_header_ = nullptr;
    }
  }
  start_time_code_since_epoch_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationDataStreamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_skel_animation_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_time_code_since_epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          start_time_code_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationDataStreamHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  if (_internal_has_audio_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio_header(this), target, stream);
  }

  // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
  if (_internal_has_skel_animation_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::skel_animation_header(this), target, stream);
  }

  // double start_time_code_since_epoch = 3;
  if (!(this->start_time_code_since_epoch() <= 0 && this->start_time_code_since_epoch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_start_time_code_since_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  return target;
}

size_t AnimationDataStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_header_);
    }

    // .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skel_animation_header_);
    }

  }
  // double start_time_code_since_epoch = 3;
  if (!(this->start_time_code_since_epoch() <= 0 && this->start_time_code_since_epoch() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationDataStreamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationDataStreamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationDataStreamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.controller.v1.AnimationDataStreamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.controller.v1.AnimationDataStreamHeader)
    MergeFrom(*source);
  }
}

void AnimationDataStreamHeader::MergeFrom(const AnimationDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_audio_header()->::nvidia_ace::audio::v1::AudioHeader::MergeFrom(from._internal_audio_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_skel_animation_header()->::nvidia_ace::animation_data::v1::SkelAnimationHeader::MergeFrom(from._internal_skel_animation_header());
    }
  }
  if (!(from.start_time_code_since_epoch() <= 0 && from.start_time_code_since_epoch() >= 0)) {
    _internal_set_start_time_code_since_epoch(from._internal_start_time_code_since_epoch());
  }
}

void AnimationDataStreamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationDataStreamHeader::CopyFrom(const AnimationDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationDataStreamHeader::IsInitialized() const {
  return true;
}

void AnimationDataStreamHeader::InternalSwap(AnimationDataStreamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, start_time_code_since_epoch_)
      + sizeof(AnimationDataStreamHeader::start_time_code_since_epoch_)
      - PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, audio_header_)>(
          reinterpret_cast<char*>(&audio_header_),
          reinterpret_cast<char*>(&other->audio_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationDataStreamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnimationDataStream::_Internal {
 public:
  static const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& animation_data_stream_header(const AnimationDataStream* msg);
  static const ::nvidia_ace::animation_data::v1::AnimationData& animation_data(const AnimationDataStream* msg);
  static const ::nvidia_ace::controller::v1::Event& event(const AnimationDataStream* msg);
  static const ::nvidia_ace::status::v1::Status& status(const AnimationDataStream* msg);
};

const ::nvidia_ace::controller::v1::AnimationDataStreamHeader&
AnimationDataStream::_Internal::animation_data_stream_header(const AnimationDataStream* msg) {
  return *msg->stream_part_.animation_data_stream_header_;
}
const ::nvidia_ace::animation_data::v1::AnimationData&
AnimationDataStream::_Internal::animation_data(const AnimationDataStream* msg) {
  return *msg->stream_part_.animation_data_;
}
const ::nvidia_ace::controller::v1::Event&
AnimationDataStream::_Internal::event(const AnimationDataStream* msg) {
  return *msg->stream_part_.event_;
}
const ::nvidia_ace::status::v1::Status&
AnimationDataStream::_Internal::status(const AnimationDataStream* msg) {
  return *msg->stream_part_.status_;
}
void AnimationDataStream::set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data_stream_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(animation_data_stream_header);
    if (message_arena != submessage_arena) {
      animation_data_stream_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_data_stream_header, submessage_arena);
    }
    set_has_animation_data_stream_header();
    stream_part_.animation_data_stream_header_ = animation_data_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
}
void AnimationDataStream::set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_data)->GetArena();
    if (message_arena != submessage_arena) {
      animation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_data, submessage_arena);
    }
    set_has_animation_data();
    stream_part_.animation_data_ = animation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
}
void AnimationDataStream::clear_animation_data() {
  if (_internal_has_animation_data()) {
    if (GetArena() == nullptr) {
      delete stream_part_.animation_data_;
    }
    clear_has_stream_part();
  }
}
void AnimationDataStream::set_allocated_event(::nvidia_ace::controller::v1::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    stream_part_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.event)
}
void AnimationDataStream::set_allocated_status(::nvidia_ace::status::v1::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_part();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    stream_part_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.status)
}
void AnimationDataStream::clear_status() {
  if (_internal_has_status()) {
    if (GetArena() == nullptr) {
      delete stream_part_.status_;
    }
    clear_has_stream_part();
  }
}
AnimationDataStream::AnimationDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AnimationDataStream)
}
AnimationDataStream::AnimationDataStream(const AnimationDataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream_part();
  switch (from.stream_part_case()) {
    case kAnimationDataStreamHeader: {
      _internal_mutable_animation_data_stream_header()->::nvidia_ace::controller::v1::AnimationDataStreamHeader::MergeFrom(from._internal_animation_data_stream_header());
      break;
    }
    case kAnimationData: {
      _internal_mutable_animation_data()->::nvidia_ace::animation_data::v1::AnimationData::MergeFrom(from._internal_animation_data());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::nvidia_ace::controller::v1::Event::MergeFrom(from._internal_event());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::nvidia_ace::status::v1::Status::MergeFrom(from._internal_status());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AnimationDataStream)
}

void AnimationDataStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  clear_has_stream_part();
}

AnimationDataStream::~AnimationDataStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AnimationDataStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnimationDataStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
}

void AnimationDataStream::ArenaDtor(void* object) {
  AnimationDataStream* _this = reinterpret_cast< AnimationDataStream* >(object);
  (void)_this;
}
void AnimationDataStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationDataStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationDataStream& AnimationDataStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationDataStream_nvidia_2fa2f_2fnvidia_5face_2econtroller_2ev1_2eproto.base);
  return *internal_default_instance();
}


void AnimationDataStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.controller.v1.AnimationDataStream)
  switch (stream_part_case()) {
    case kAnimationDataStreamHeader: {
      if (GetArena() == nullptr) {
        delete stream_part_.animation_data_stream_header_;
      }
      break;
    }
    case kAnimationData: {
      if (GetArena() == nullptr) {
        delete stream_part_.animation_data_;
      }
      break;
    }
    case kEvent: {
      if (GetArena() == nullptr) {
        delete stream_part_.event_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete stream_part_.status_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_PART_NOT_SET;
}


void AnimationDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AnimationDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationDataStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation_data_stream_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.controller.v1.Event event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nvidia_ace.status.v1.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationDataStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AnimationDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
  if (_internal_has_animation_data_stream_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::animation_data_stream_header(this), target, stream);
  }

  // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
  if (_internal_has_animation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::animation_data(this), target, stream);
  }

  // .nvidia_ace.controller.v1.Event event = 3;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::event(this), target, stream);
  }

  // .nvidia_ace.status.v1.Status status = 4;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AnimationDataStream)
  return target;
}

size_t AnimationDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AnimationDataStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
    case kAnimationDataStreamHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.animation_data_stream_header_);
      break;
    }
    // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
    case kAnimationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.animation_data_);
      break;
    }
    // .nvidia_ace.controller.v1.Event event = 3;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.event_);
      break;
    }
    // .nvidia_ace.status.v1.Status status = 4;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_part_.status_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationDataStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nvidia_ace.controller.v1.AnimationDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationDataStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationDataStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nvidia_ace.controller.v1.AnimationDataStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nvidia_ace.controller.v1.AnimationDataStream)
    MergeFrom(*source);
  }
}

void AnimationDataStream::MergeFrom(const AnimationDataStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AnimationDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_part_case()) {
    case kAnimationDataStreamHeader: {
      _internal_mutable_animation_data_stream_header()->::nvidia_ace::controller::v1::AnimationDataStreamHeader::MergeFrom(from._internal_animation_data_stream_header());
      break;
    }
    case kAnimationData: {
      _internal_mutable_animation_data()->::nvidia_ace::animation_data::v1::AnimationData::MergeFrom(from._internal_animation_data());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::nvidia_ace::controller::v1::Event::MergeFrom(from._internal_event());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::nvidia_ace::status::v1::Status::MergeFrom(from._internal_status());
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
}

void AnimationDataStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nvidia_ace.controller.v1.AnimationDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationDataStream::CopyFrom(const AnimationDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AnimationDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationDataStream::IsInitialized() const {
  return true;
}

void AnimationDataStream::InternalSwap(AnimationDataStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_part_, other->stream_part_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationDataStream::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* Arena::CreateMaybeMessage< ::nvidia_ace::controller::v1::AudioStream_EndOfAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::controller::v1::AudioStream_EndOfAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::controller::v1::AudioStream* Arena::CreateMaybeMessage< ::nvidia_ace::controller::v1::AudioStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::controller::v1::AudioStream >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::controller::v1::AudioStreamHeader* Arena::CreateMaybeMessage< ::nvidia_ace::controller::v1::AudioStreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::controller::v1::AudioStreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::controller::v1::Event* Arena::CreateMaybeMessage< ::nvidia_ace::controller::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::controller::v1::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::controller::v1::AnimationDataStreamHeader* Arena::CreateMaybeMessage< ::nvidia_ace::controller::v1::AnimationDataStreamHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::controller::v1::AnimationDataStreamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia_ace::controller::v1::AnimationDataStream* Arena::CreateMaybeMessage< ::nvidia_ace::controller::v1::AnimationDataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia_ace::controller::v1::AnimationDataStream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
