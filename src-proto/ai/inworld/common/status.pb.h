// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/common/status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fcommon_2fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fcommon_2fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fcommon_2fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fcommon_2fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fcommon_2fstatus_2eproto;
namespace ai {
namespace inworld {
namespace common {
class InworldStatus;
class InworldStatusDefaultTypeInternal;
extern InworldStatusDefaultTypeInternal _InworldStatus_default_instance_;
class ResourceNotFoundDetails;
class ResourceNotFoundDetailsDefaultTypeInternal;
extern ResourceNotFoundDetailsDefaultTypeInternal _ResourceNotFoundDetails_default_instance_;
}  // namespace common
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::common::InworldStatus* Arena::CreateMaybeMessage<::ai::inworld::common::InworldStatus>(Arena*);
template<> ::ai::inworld::common::ResourceNotFoundDetails* Arena::CreateMaybeMessage<::ai::inworld::common::ResourceNotFoundDetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace common {

enum ErrorType : int {
  SESSION_TOKEN_EXPIRED = 0,
  SESSION_TOKEN_INVALID = 1,
  SESSION_RESOURCES_EXHAUSTED = 2,
  BILLING_TOKENS_EXHAUSTED = 3,
  ACCOUNT_DISABLED = 4,
  SESSION_INVALID = 5,
  RESOURCE_NOT_FOUND = 6,
  SAFETY_VIOLATION = 7,
  SESSION_EXPIRED = 8,
  ErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorType_IsValid(int value);
constexpr ErrorType ErrorType_MIN = SESSION_TOKEN_EXPIRED;
constexpr ErrorType ErrorType_MAX = SESSION_EXPIRED;
constexpr int ErrorType_ARRAYSIZE = ErrorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor();
template<typename T>
inline const std::string& ErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorType_descriptor(), enum_t_value);
}
inline bool ErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorType>(
    ErrorType_descriptor(), name, value);
}
enum ReconnectionType : int {
  UNDEFINED = 0,
  NO_RETRY = 1,
  IMMEDIATE = 2,
  TIMEOUT = 3,
  ReconnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReconnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReconnectionType_IsValid(int value);
constexpr ReconnectionType ReconnectionType_MIN = UNDEFINED;
constexpr ReconnectionType ReconnectionType_MAX = TIMEOUT;
constexpr int ReconnectionType_ARRAYSIZE = ReconnectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReconnectionType_descriptor();
template<typename T>
inline const std::string& ReconnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReconnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReconnectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReconnectionType_descriptor(), enum_t_value);
}
inline bool ReconnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReconnectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReconnectionType>(
    ReconnectionType_descriptor(), name, value);
}
enum ResourceType : int {
  RESOURCE_TYPE_UNDEFINED = 0,
  RESOURCE_TYPE_CONVERSATION = 1,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = RESOURCE_TYPE_UNDEFINED;
constexpr ResourceType ResourceType_MAX = RESOURCE_TYPE_CONVERSATION;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor();
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceType_descriptor(), enum_t_value);
}
inline bool ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
// ===================================================================

class InworldStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.common.InworldStatus) */ {
 public:
  inline InworldStatus() : InworldStatus(nullptr) {}
  virtual ~InworldStatus();

  InworldStatus(const InworldStatus& from);
  InworldStatus(InworldStatus&& from) noexcept
    : InworldStatus() {
    *this = ::std::move(from);
  }

  inline InworldStatus& operator=(const InworldStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline InworldStatus& operator=(InworldStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InworldStatus& default_instance();

  enum ErrorDetailsCase {
    kResourceNotFound = 5,
    ERROR_DETAILS_NOT_SET = 0,
  };

  static inline const InworldStatus* internal_default_instance() {
    return reinterpret_cast<const InworldStatus*>(
               &_InworldStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InworldStatus& a, InworldStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(InworldStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InworldStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InworldStatus* New() const final {
    return CreateMaybeMessage<InworldStatus>(nullptr);
  }

  InworldStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InworldStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InworldStatus& from);
  void MergeFrom(const InworldStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InworldStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.common.InworldStatus";
  }
  protected:
  explicit InworldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fcommon_2fstatus_2eproto);
    return ::descriptor_table_ai_2finworld_2fcommon_2fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconnectTimeFieldNumber = 3,
    kErrorTypeFieldNumber = 1,
    kReconnectTypeFieldNumber = 2,
    kMaxRetriesFieldNumber = 4,
    kResourceNotFoundFieldNumber = 5,
  };
  // .google.protobuf.Timestamp reconnect_time = 3;
  bool has_reconnect_time() const;
  private:
  bool _internal_has_reconnect_time() const;
  public:
  void clear_reconnect_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& reconnect_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_reconnect_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reconnect_time();
  void set_allocated_reconnect_time(PROTOBUF_NAMESPACE_ID::Timestamp* reconnect_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reconnect_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reconnect_time();
  public:
  void unsafe_arena_set_allocated_reconnect_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* reconnect_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reconnect_time();

  // .ai.inworld.common.ErrorType error_type = 1;
  void clear_error_type();
  ::ai::inworld::common::ErrorType error_type() const;
  void set_error_type(::ai::inworld::common::ErrorType value);
  private:
  ::ai::inworld::common::ErrorType _internal_error_type() const;
  void _internal_set_error_type(::ai::inworld::common::ErrorType value);
  public:

  // .ai.inworld.common.ReconnectionType reconnect_type = 2;
  void clear_reconnect_type();
  ::ai::inworld::common::ReconnectionType reconnect_type() const;
  void set_reconnect_type(::ai::inworld::common::ReconnectionType value);
  private:
  ::ai::inworld::common::ReconnectionType _internal_reconnect_type() const;
  void _internal_set_reconnect_type(::ai::inworld::common::ReconnectionType value);
  public:

  // int32 max_retries = 4;
  void clear_max_retries();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retries() const;
  void set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_retries() const;
  void _internal_set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ai.inworld.common.ResourceNotFoundDetails resource_not_found = 5;
  bool has_resource_not_found() const;
  private:
  bool _internal_has_resource_not_found() const;
  public:
  void clear_resource_not_found();
  const ::ai::inworld::common::ResourceNotFoundDetails& resource_not_found() const;
  ::ai::inworld::common::ResourceNotFoundDetails* release_resource_not_found();
  ::ai::inworld::common::ResourceNotFoundDetails* mutable_resource_not_found();
  void set_allocated_resource_not_found(::ai::inworld::common::ResourceNotFoundDetails* resource_not_found);
  private:
  const ::ai::inworld::common::ResourceNotFoundDetails& _internal_resource_not_found() const;
  ::ai::inworld::common::ResourceNotFoundDetails* _internal_mutable_resource_not_found();
  public:
  void unsafe_arena_set_allocated_resource_not_found(
      ::ai::inworld::common::ResourceNotFoundDetails* resource_not_found);
  ::ai::inworld::common::ResourceNotFoundDetails* unsafe_arena_release_resource_not_found();

  void clear_error_details();
  ErrorDetailsCase error_details_case() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.common.InworldStatus)
 private:
  class _Internal;
  void set_has_resource_not_found();

  inline bool has_error_details() const;
  inline void clear_has_error_details();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* reconnect_time_;
  int error_type_;
  int reconnect_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retries_;
  union ErrorDetailsUnion {
    ErrorDetailsUnion() {}
    ::ai::inworld::common::ResourceNotFoundDetails* resource_not_found_;
  } error_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ai_2finworld_2fcommon_2fstatus_2eproto;
};
// -------------------------------------------------------------------

class ResourceNotFoundDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.common.ResourceNotFoundDetails) */ {
 public:
  inline ResourceNotFoundDetails() : ResourceNotFoundDetails(nullptr) {}
  virtual ~ResourceNotFoundDetails();

  ResourceNotFoundDetails(const ResourceNotFoundDetails& from);
  ResourceNotFoundDetails(ResourceNotFoundDetails&& from) noexcept
    : ResourceNotFoundDetails() {
    *this = ::std::move(from);
  }

  inline ResourceNotFoundDetails& operator=(const ResourceNotFoundDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceNotFoundDetails& operator=(ResourceNotFoundDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceNotFoundDetails& default_instance();

  static inline const ResourceNotFoundDetails* internal_default_instance() {
    return reinterpret_cast<const ResourceNotFoundDetails*>(
               &_ResourceNotFoundDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceNotFoundDetails& a, ResourceNotFoundDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceNotFoundDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceNotFoundDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceNotFoundDetails* New() const final {
    return CreateMaybeMessage<ResourceNotFoundDetails>(nullptr);
  }

  ResourceNotFoundDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceNotFoundDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceNotFoundDetails& from);
  void MergeFrom(const ResourceNotFoundDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceNotFoundDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.common.ResourceNotFoundDetails";
  }
  protected:
  explicit ResourceNotFoundDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fcommon_2fstatus_2eproto);
    return ::descriptor_table_ai_2finworld_2fcommon_2fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIdFieldNumber = 1,
    kResourceTypeFieldNumber = 2,
  };
  // string resource_id = 1;
  void clear_resource_id();
  const std::string& resource_id() const;
  void set_resource_id(const std::string& value);
  void set_resource_id(std::string&& value);
  void set_resource_id(const char* value);
  void set_resource_id(const char* value, size_t size);
  std::string* mutable_resource_id();
  std::string* release_resource_id();
  void set_allocated_resource_id(std::string* resource_id);
  private:
  const std::string& _internal_resource_id() const;
  void _internal_set_resource_id(const std::string& value);
  std::string* _internal_mutable_resource_id();
  public:

  // .ai.inworld.common.ResourceType resource_type = 2;
  void clear_resource_type();
  ::ai::inworld::common::ResourceType resource_type() const;
  void set_resource_type(::ai::inworld::common::ResourceType value);
  private:
  ::ai::inworld::common::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::ai::inworld::common::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.common.ResourceNotFoundDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_id_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fcommon_2fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InworldStatus

// .ai.inworld.common.ErrorType error_type = 1;
inline void InworldStatus::clear_error_type() {
  error_type_ = 0;
}
inline ::ai::inworld::common::ErrorType InworldStatus::_internal_error_type() const {
  return static_cast< ::ai::inworld::common::ErrorType >(error_type_);
}
inline ::ai::inworld::common::ErrorType InworldStatus::error_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.InworldStatus.error_type)
  return _internal_error_type();
}
inline void InworldStatus::_internal_set_error_type(::ai::inworld::common::ErrorType value) {
  
  error_type_ = value;
}
inline void InworldStatus::set_error_type(::ai::inworld::common::ErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.common.InworldStatus.error_type)
}

// .ai.inworld.common.ReconnectionType reconnect_type = 2;
inline void InworldStatus::clear_reconnect_type() {
  reconnect_type_ = 0;
}
inline ::ai::inworld::common::ReconnectionType InworldStatus::_internal_reconnect_type() const {
  return static_cast< ::ai::inworld::common::ReconnectionType >(reconnect_type_);
}
inline ::ai::inworld::common::ReconnectionType InworldStatus::reconnect_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.InworldStatus.reconnect_type)
  return _internal_reconnect_type();
}
inline void InworldStatus::_internal_set_reconnect_type(::ai::inworld::common::ReconnectionType value) {
  
  reconnect_type_ = value;
}
inline void InworldStatus::set_reconnect_type(::ai::inworld::common::ReconnectionType value) {
  _internal_set_reconnect_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.common.InworldStatus.reconnect_type)
}

// .google.protobuf.Timestamp reconnect_time = 3;
inline bool InworldStatus::_internal_has_reconnect_time() const {
  return this != internal_default_instance() && reconnect_time_ != nullptr;
}
inline bool InworldStatus::has_reconnect_time() const {
  return _internal_has_reconnect_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InworldStatus::_internal_reconnect_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = reconnect_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InworldStatus::reconnect_time() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.InworldStatus.reconnect_time)
  return _internal_reconnect_time();
}
inline void InworldStatus::unsafe_arena_set_allocated_reconnect_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* reconnect_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_time_);
  }
  reconnect_time_ = reconnect_time;
  if (reconnect_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.common.InworldStatus.reconnect_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InworldStatus::release_reconnect_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reconnect_time_;
  reconnect_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InworldStatus::unsafe_arena_release_reconnect_time() {
  // @@protoc_insertion_point(field_release:ai.inworld.common.InworldStatus.reconnect_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reconnect_time_;
  reconnect_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InworldStatus::_internal_mutable_reconnect_time() {
  
  if (reconnect_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    reconnect_time_ = p;
  }
  return reconnect_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InworldStatus::mutable_reconnect_time() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.common.InworldStatus.reconnect_time)
  return _internal_mutable_reconnect_time();
}
inline void InworldStatus::set_allocated_reconnect_time(PROTOBUF_NAMESPACE_ID::Timestamp* reconnect_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_time_);
  }
  if (reconnect_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_time)->GetArena();
    if (message_arena != submessage_arena) {
      reconnect_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect_time, submessage_arena);
    }
    
  } else {
    
  }
  reconnect_time_ = reconnect_time;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.common.InworldStatus.reconnect_time)
}

// int32 max_retries = 4;
inline void InworldStatus::clear_max_retries() {
  max_retries_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InworldStatus::_internal_max_retries() const {
  return max_retries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InworldStatus::max_retries() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.InworldStatus.max_retries)
  return _internal_max_retries();
}
inline void InworldStatus::_internal_set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_retries_ = value;
}
inline void InworldStatus::set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_retries(value);
  // @@protoc_insertion_point(field_set:ai.inworld.common.InworldStatus.max_retries)
}

// .ai.inworld.common.ResourceNotFoundDetails resource_not_found = 5;
inline bool InworldStatus::_internal_has_resource_not_found() const {
  return error_details_case() == kResourceNotFound;
}
inline bool InworldStatus::has_resource_not_found() const {
  return _internal_has_resource_not_found();
}
inline void InworldStatus::set_has_resource_not_found() {
  _oneof_case_[0] = kResourceNotFound;
}
inline void InworldStatus::clear_resource_not_found() {
  if (_internal_has_resource_not_found()) {
    if (GetArena() == nullptr) {
      delete error_details_.resource_not_found_;
    }
    clear_has_error_details();
  }
}
inline ::ai::inworld::common::ResourceNotFoundDetails* InworldStatus::release_resource_not_found() {
  // @@protoc_insertion_point(field_release:ai.inworld.common.InworldStatus.resource_not_found)
  if (_internal_has_resource_not_found()) {
    clear_has_error_details();
      ::ai::inworld::common::ResourceNotFoundDetails* temp = error_details_.resource_not_found_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_details_.resource_not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::common::ResourceNotFoundDetails& InworldStatus::_internal_resource_not_found() const {
  return _internal_has_resource_not_found()
      ? *error_details_.resource_not_found_
      : reinterpret_cast< ::ai::inworld::common::ResourceNotFoundDetails&>(::ai::inworld::common::_ResourceNotFoundDetails_default_instance_);
}
inline const ::ai::inworld::common::ResourceNotFoundDetails& InworldStatus::resource_not_found() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.InworldStatus.resource_not_found)
  return _internal_resource_not_found();
}
inline ::ai::inworld::common::ResourceNotFoundDetails* InworldStatus::unsafe_arena_release_resource_not_found() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.common.InworldStatus.resource_not_found)
  if (_internal_has_resource_not_found()) {
    clear_has_error_details();
    ::ai::inworld::common::ResourceNotFoundDetails* temp = error_details_.resource_not_found_;
    error_details_.resource_not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InworldStatus::unsafe_arena_set_allocated_resource_not_found(::ai::inworld::common::ResourceNotFoundDetails* resource_not_found) {
  clear_error_details();
  if (resource_not_found) {
    set_has_resource_not_found();
    error_details_.resource_not_found_ = resource_not_found;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.common.InworldStatus.resource_not_found)
}
inline ::ai::inworld::common::ResourceNotFoundDetails* InworldStatus::_internal_mutable_resource_not_found() {
  if (!_internal_has_resource_not_found()) {
    clear_error_details();
    set_has_resource_not_found();
    error_details_.resource_not_found_ = CreateMaybeMessage< ::ai::inworld::common::ResourceNotFoundDetails >(GetArena());
  }
  return error_details_.resource_not_found_;
}
inline ::ai::inworld::common::ResourceNotFoundDetails* InworldStatus::mutable_resource_not_found() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.common.InworldStatus.resource_not_found)
  return _internal_mutable_resource_not_found();
}

inline bool InworldStatus::has_error_details() const {
  return error_details_case() != ERROR_DETAILS_NOT_SET;
}
inline void InworldStatus::clear_has_error_details() {
  _oneof_case_[0] = ERROR_DETAILS_NOT_SET;
}
inline InworldStatus::ErrorDetailsCase InworldStatus::error_details_case() const {
  return InworldStatus::ErrorDetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResourceNotFoundDetails

// string resource_id = 1;
inline void ResourceNotFoundDetails::clear_resource_id() {
  resource_id_.ClearToEmpty();
}
inline const std::string& ResourceNotFoundDetails::resource_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.ResourceNotFoundDetails.resource_id)
  return _internal_resource_id();
}
inline void ResourceNotFoundDetails::set_resource_id(const std::string& value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.common.ResourceNotFoundDetails.resource_id)
}
inline std::string* ResourceNotFoundDetails::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.common.ResourceNotFoundDetails.resource_id)
  return _internal_mutable_resource_id();
}
inline const std::string& ResourceNotFoundDetails::_internal_resource_id() const {
  return resource_id_.Get();
}
inline void ResourceNotFoundDetails::_internal_set_resource_id(const std::string& value) {
  
  resource_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceNotFoundDetails::set_resource_id(std::string&& value) {
  
  resource_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.common.ResourceNotFoundDetails.resource_id)
}
inline void ResourceNotFoundDetails::set_resource_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.common.ResourceNotFoundDetails.resource_id)
}
inline void ResourceNotFoundDetails::set_resource_id(const char* value,
    size_t size) {
  
  resource_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.common.ResourceNotFoundDetails.resource_id)
}
inline std::string* ResourceNotFoundDetails::_internal_mutable_resource_id() {
  
  return resource_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceNotFoundDetails::release_resource_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.common.ResourceNotFoundDetails.resource_id)
  return resource_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceNotFoundDetails::set_allocated_resource_id(std::string* resource_id) {
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.common.ResourceNotFoundDetails.resource_id)
}

// .ai.inworld.common.ResourceType resource_type = 2;
inline void ResourceNotFoundDetails::clear_resource_type() {
  resource_type_ = 0;
}
inline ::ai::inworld::common::ResourceType ResourceNotFoundDetails::_internal_resource_type() const {
  return static_cast< ::ai::inworld::common::ResourceType >(resource_type_);
}
inline ::ai::inworld::common::ResourceType ResourceNotFoundDetails::resource_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.common.ResourceNotFoundDetails.resource_type)
  return _internal_resource_type();
}
inline void ResourceNotFoundDetails::_internal_set_resource_type(::ai::inworld::common::ResourceType value) {
  
  resource_type_ = value;
}
inline void ResourceNotFoundDetails::set_resource_type(::ai::inworld::common::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.common.ResourceNotFoundDetails.resource_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::common::ErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::common::ErrorType>() {
  return ::ai::inworld::common::ErrorType_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::common::ReconnectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::common::ReconnectionType>() {
  return ::ai::inworld::common::ReconnectionType_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::common::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::common::ResourceType>() {
  return ::ai::inworld::common::ResourceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fcommon_2fstatus_2eproto
