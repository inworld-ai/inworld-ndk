// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/packets/entities/entities_packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
namespace ai {
namespace inworld {
namespace packets {
namespace entities {
class CreateOrUpdateItemsOperation;
class CreateOrUpdateItemsOperationDefaultTypeInternal;
extern CreateOrUpdateItemsOperationDefaultTypeInternal _CreateOrUpdateItemsOperation_default_instance_;
class EntityItem;
class EntityItemDefaultTypeInternal;
extern EntityItemDefaultTypeInternal _EntityItem_default_instance_;
class EntityItem_PropertiesEntry_DoNotUse;
class EntityItem_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern EntityItem_PropertiesEntry_DoNotUseDefaultTypeInternal _EntityItem_PropertiesEntry_DoNotUse_default_instance_;
class ItemsInEntitiesOperation;
class ItemsInEntitiesOperationDefaultTypeInternal;
extern ItemsInEntitiesOperationDefaultTypeInternal _ItemsInEntitiesOperation_default_instance_;
class ItemsOperationEvent;
class ItemsOperationEventDefaultTypeInternal;
extern ItemsOperationEventDefaultTypeInternal _ItemsOperationEvent_default_instance_;
class RemoveItemsOperation;
class RemoveItemsOperationDefaultTypeInternal;
extern RemoveItemsOperationDefaultTypeInternal _RemoveItemsOperation_default_instance_;
}  // namespace entities
}  // namespace packets
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* Arena::CreateMaybeMessage<::ai::inworld::packets::entities::CreateOrUpdateItemsOperation>(Arena*);
template<> ::ai::inworld::packets::entities::EntityItem* Arena::CreateMaybeMessage<::ai::inworld::packets::entities::EntityItem>(Arena*);
template<> ::ai::inworld::packets::entities::EntityItem_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::ai::inworld::packets::entities::EntityItem_PropertiesEntry_DoNotUse>(Arena*);
template<> ::ai::inworld::packets::entities::ItemsInEntitiesOperation* Arena::CreateMaybeMessage<::ai::inworld::packets::entities::ItemsInEntitiesOperation>(Arena*);
template<> ::ai::inworld::packets::entities::ItemsOperationEvent* Arena::CreateMaybeMessage<::ai::inworld::packets::entities::ItemsOperationEvent>(Arena*);
template<> ::ai::inworld::packets::entities::RemoveItemsOperation* Arena::CreateMaybeMessage<::ai::inworld::packets::entities::RemoveItemsOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace packets {
namespace entities {

enum ItemsInEntitiesOperation_Type : int {
  ItemsInEntitiesOperation_Type_UNSPECIFIED = 0,
  ItemsInEntitiesOperation_Type_ADD = 1,
  ItemsInEntitiesOperation_Type_REMOVE = 2,
  ItemsInEntitiesOperation_Type_REPLACE = 3,
  ItemsInEntitiesOperation_Type_ItemsInEntitiesOperation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemsInEntitiesOperation_Type_ItemsInEntitiesOperation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemsInEntitiesOperation_Type_IsValid(int value);
constexpr ItemsInEntitiesOperation_Type ItemsInEntitiesOperation_Type_Type_MIN = ItemsInEntitiesOperation_Type_UNSPECIFIED;
constexpr ItemsInEntitiesOperation_Type ItemsInEntitiesOperation_Type_Type_MAX = ItemsInEntitiesOperation_Type_REPLACE;
constexpr int ItemsInEntitiesOperation_Type_Type_ARRAYSIZE = ItemsInEntitiesOperation_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemsInEntitiesOperation_Type_descriptor();
template<typename T>
inline const std::string& ItemsInEntitiesOperation_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemsInEntitiesOperation_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemsInEntitiesOperation_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemsInEntitiesOperation_Type_descriptor(), enum_t_value);
}
inline bool ItemsInEntitiesOperation_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemsInEntitiesOperation_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemsInEntitiesOperation_Type>(
    ItemsInEntitiesOperation_Type_descriptor(), name, value);
}
// ===================================================================

class EntityItem_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EntityItem_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EntityItem_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  EntityItem_PropertiesEntry_DoNotUse();
  explicit EntityItem_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EntityItem_PropertiesEntry_DoNotUse& other);
  static const EntityItem_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EntityItem_PropertiesEntry_DoNotUse*>(&_EntityItem_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ai.inworld.packets.entities.EntityItem.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ai.inworld.packets.entities.EntityItem.PropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto);
    return ::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class EntityItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.packets.entities.EntityItem) */ {
 public:
  inline EntityItem() : EntityItem(nullptr) {}
  virtual ~EntityItem();

  EntityItem(const EntityItem& from);
  EntityItem(EntityItem&& from) noexcept
    : EntityItem() {
    *this = ::std::move(from);
  }

  inline EntityItem& operator=(const EntityItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityItem& operator=(EntityItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityItem& default_instance();

  static inline const EntityItem* internal_default_instance() {
    return reinterpret_cast<const EntityItem*>(
               &_EntityItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityItem& a, EntityItem& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityItem* New() const final {
    return CreateMaybeMessage<EntityItem>(nullptr);
  }

  EntityItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityItem& from);
  void MergeFrom(const EntityItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.packets.entities.EntityItem";
  }
  protected:
  explicit EntityItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto);
    return ::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 4,
    kIdFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // map<string, string> properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.packets.entities.EntityItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EntityItem_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class ItemsOperationEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.packets.entities.ItemsOperationEvent) */ {
 public:
  inline ItemsOperationEvent() : ItemsOperationEvent(nullptr) {}
  virtual ~ItemsOperationEvent();

  ItemsOperationEvent(const ItemsOperationEvent& from);
  ItemsOperationEvent(ItemsOperationEvent&& from) noexcept
    : ItemsOperationEvent() {
    *this = ::std::move(from);
  }

  inline ItemsOperationEvent& operator=(const ItemsOperationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemsOperationEvent& operator=(ItemsOperationEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemsOperationEvent& default_instance();

  enum OperationCase {
    kCreateOrUpdateItems = 1,
    kRemoveItems = 3,
    kItemsInEntities = 4,
    OPERATION_NOT_SET = 0,
  };

  static inline const ItemsOperationEvent* internal_default_instance() {
    return reinterpret_cast<const ItemsOperationEvent*>(
               &_ItemsOperationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ItemsOperationEvent& a, ItemsOperationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemsOperationEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemsOperationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemsOperationEvent* New() const final {
    return CreateMaybeMessage<ItemsOperationEvent>(nullptr);
  }

  ItemsOperationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemsOperationEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemsOperationEvent& from);
  void MergeFrom(const ItemsOperationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemsOperationEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.packets.entities.ItemsOperationEvent";
  }
  protected:
  explicit ItemsOperationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto);
    return ::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateOrUpdateItemsFieldNumber = 1,
    kRemoveItemsFieldNumber = 3,
    kItemsInEntitiesFieldNumber = 4,
  };
  // .ai.inworld.packets.entities.CreateOrUpdateItemsOperation create_or_update_items = 1;
  bool has_create_or_update_items() const;
  private:
  bool _internal_has_create_or_update_items() const;
  public:
  void clear_create_or_update_items();
  const ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation& create_or_update_items() const;
  ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* release_create_or_update_items();
  ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* mutable_create_or_update_items();
  void set_allocated_create_or_update_items(::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* create_or_update_items);
  private:
  const ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation& _internal_create_or_update_items() const;
  ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* _internal_mutable_create_or_update_items();
  public:
  void unsafe_arena_set_allocated_create_or_update_items(
      ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* create_or_update_items);
  ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* unsafe_arena_release_create_or_update_items();

  // .ai.inworld.packets.entities.RemoveItemsOperation remove_items = 3;
  bool has_remove_items() const;
  private:
  bool _internal_has_remove_items() const;
  public:
  void clear_remove_items();
  const ::ai::inworld::packets::entities::RemoveItemsOperation& remove_items() const;
  ::ai::inworld::packets::entities::RemoveItemsOperation* release_remove_items();
  ::ai::inworld::packets::entities::RemoveItemsOperation* mutable_remove_items();
  void set_allocated_remove_items(::ai::inworld::packets::entities::RemoveItemsOperation* remove_items);
  private:
  const ::ai::inworld::packets::entities::RemoveItemsOperation& _internal_remove_items() const;
  ::ai::inworld::packets::entities::RemoveItemsOperation* _internal_mutable_remove_items();
  public:
  void unsafe_arena_set_allocated_remove_items(
      ::ai::inworld::packets::entities::RemoveItemsOperation* remove_items);
  ::ai::inworld::packets::entities::RemoveItemsOperation* unsafe_arena_release_remove_items();

  // .ai.inworld.packets.entities.ItemsInEntitiesOperation items_in_entities = 4;
  bool has_items_in_entities() const;
  private:
  bool _internal_has_items_in_entities() const;
  public:
  void clear_items_in_entities();
  const ::ai::inworld::packets::entities::ItemsInEntitiesOperation& items_in_entities() const;
  ::ai::inworld::packets::entities::ItemsInEntitiesOperation* release_items_in_entities();
  ::ai::inworld::packets::entities::ItemsInEntitiesOperation* mutable_items_in_entities();
  void set_allocated_items_in_entities(::ai::inworld::packets::entities::ItemsInEntitiesOperation* items_in_entities);
  private:
  const ::ai::inworld::packets::entities::ItemsInEntitiesOperation& _internal_items_in_entities() const;
  ::ai::inworld::packets::entities::ItemsInEntitiesOperation* _internal_mutable_items_in_entities();
  public:
  void unsafe_arena_set_allocated_items_in_entities(
      ::ai::inworld::packets::entities::ItemsInEntitiesOperation* items_in_entities);
  ::ai::inworld::packets::entities::ItemsInEntitiesOperation* unsafe_arena_release_items_in_entities();

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.packets.entities.ItemsOperationEvent)
 private:
  class _Internal;
  void set_has_create_or_update_items();
  void set_has_remove_items();
  void set_has_items_in_entities();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperationUnion {
    OperationUnion() {}
    ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* create_or_update_items_;
    ::ai::inworld::packets::entities::RemoveItemsOperation* remove_items_;
    ::ai::inworld::packets::entities::ItemsInEntitiesOperation* items_in_entities_;
  } operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class CreateOrUpdateItemsOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.packets.entities.CreateOrUpdateItemsOperation) */ {
 public:
  inline CreateOrUpdateItemsOperation() : CreateOrUpdateItemsOperation(nullptr) {}
  virtual ~CreateOrUpdateItemsOperation();

  CreateOrUpdateItemsOperation(const CreateOrUpdateItemsOperation& from);
  CreateOrUpdateItemsOperation(CreateOrUpdateItemsOperation&& from) noexcept
    : CreateOrUpdateItemsOperation() {
    *this = ::std::move(from);
  }

  inline CreateOrUpdateItemsOperation& operator=(const CreateOrUpdateItemsOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrUpdateItemsOperation& operator=(CreateOrUpdateItemsOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOrUpdateItemsOperation& default_instance();

  static inline const CreateOrUpdateItemsOperation* internal_default_instance() {
    return reinterpret_cast<const CreateOrUpdateItemsOperation*>(
               &_CreateOrUpdateItemsOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateOrUpdateItemsOperation& a, CreateOrUpdateItemsOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrUpdateItemsOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrUpdateItemsOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrUpdateItemsOperation* New() const final {
    return CreateMaybeMessage<CreateOrUpdateItemsOperation>(nullptr);
  }

  CreateOrUpdateItemsOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrUpdateItemsOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOrUpdateItemsOperation& from);
  void MergeFrom(const CreateOrUpdateItemsOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrUpdateItemsOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.packets.entities.CreateOrUpdateItemsOperation";
  }
  protected:
  explicit CreateOrUpdateItemsOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto);
    return ::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kAddToEntitiesFieldNumber = 2,
  };
  // repeated .ai.inworld.packets.entities.EntityItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ai::inworld::packets::entities::EntityItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::entities::EntityItem >*
      mutable_items();
  private:
  const ::ai::inworld::packets::entities::EntityItem& _internal_items(int index) const;
  ::ai::inworld::packets::entities::EntityItem* _internal_add_items();
  public:
  const ::ai::inworld::packets::entities::EntityItem& items(int index) const;
  ::ai::inworld::packets::entities::EntityItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::entities::EntityItem >&
      items() const;

  // repeated string add_to_entities = 2;
  int add_to_entities_size() const;
  private:
  int _internal_add_to_entities_size() const;
  public:
  void clear_add_to_entities();
  const std::string& add_to_entities(int index) const;
  std::string* mutable_add_to_entities(int index);
  void set_add_to_entities(int index, const std::string& value);
  void set_add_to_entities(int index, std::string&& value);
  void set_add_to_entities(int index, const char* value);
  void set_add_to_entities(int index, const char* value, size_t size);
  std::string* add_add_to_entities();
  void add_add_to_entities(const std::string& value);
  void add_add_to_entities(std::string&& value);
  void add_add_to_entities(const char* value);
  void add_add_to_entities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& add_to_entities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_add_to_entities();
  private:
  const std::string& _internal_add_to_entities(int index) const;
  std::string* _internal_add_add_to_entities();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.packets.entities.CreateOrUpdateItemsOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::entities::EntityItem > items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> add_to_entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class RemoveItemsOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.packets.entities.RemoveItemsOperation) */ {
 public:
  inline RemoveItemsOperation() : RemoveItemsOperation(nullptr) {}
  virtual ~RemoveItemsOperation();

  RemoveItemsOperation(const RemoveItemsOperation& from);
  RemoveItemsOperation(RemoveItemsOperation&& from) noexcept
    : RemoveItemsOperation() {
    *this = ::std::move(from);
  }

  inline RemoveItemsOperation& operator=(const RemoveItemsOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveItemsOperation& operator=(RemoveItemsOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveItemsOperation& default_instance();

  static inline const RemoveItemsOperation* internal_default_instance() {
    return reinterpret_cast<const RemoveItemsOperation*>(
               &_RemoveItemsOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveItemsOperation& a, RemoveItemsOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveItemsOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveItemsOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveItemsOperation* New() const final {
    return CreateMaybeMessage<RemoveItemsOperation>(nullptr);
  }

  RemoveItemsOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveItemsOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveItemsOperation& from);
  void MergeFrom(const RemoveItemsOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveItemsOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.packets.entities.RemoveItemsOperation";
  }
  protected:
  explicit RemoveItemsOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto);
    return ::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdsFieldNumber = 1,
  };
  // repeated string item_ids = 1;
  int item_ids_size() const;
  private:
  int _internal_item_ids_size() const;
  public:
  void clear_item_ids();
  const std::string& item_ids(int index) const;
  std::string* mutable_item_ids(int index);
  void set_item_ids(int index, const std::string& value);
  void set_item_ids(int index, std::string&& value);
  void set_item_ids(int index, const char* value);
  void set_item_ids(int index, const char* value, size_t size);
  std::string* add_item_ids();
  void add_item_ids(const std::string& value);
  void add_item_ids(std::string&& value);
  void add_item_ids(const char* value);
  void add_item_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& item_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_item_ids();
  private:
  const std::string& _internal_item_ids(int index) const;
  std::string* _internal_add_item_ids();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.packets.entities.RemoveItemsOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> item_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class ItemsInEntitiesOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.packets.entities.ItemsInEntitiesOperation) */ {
 public:
  inline ItemsInEntitiesOperation() : ItemsInEntitiesOperation(nullptr) {}
  virtual ~ItemsInEntitiesOperation();

  ItemsInEntitiesOperation(const ItemsInEntitiesOperation& from);
  ItemsInEntitiesOperation(ItemsInEntitiesOperation&& from) noexcept
    : ItemsInEntitiesOperation() {
    *this = ::std::move(from);
  }

  inline ItemsInEntitiesOperation& operator=(const ItemsInEntitiesOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemsInEntitiesOperation& operator=(ItemsInEntitiesOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemsInEntitiesOperation& default_instance();

  static inline const ItemsInEntitiesOperation* internal_default_instance() {
    return reinterpret_cast<const ItemsInEntitiesOperation*>(
               &_ItemsInEntitiesOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ItemsInEntitiesOperation& a, ItemsInEntitiesOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemsInEntitiesOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemsInEntitiesOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemsInEntitiesOperation* New() const final {
    return CreateMaybeMessage<ItemsInEntitiesOperation>(nullptr);
  }

  ItemsInEntitiesOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemsInEntitiesOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemsInEntitiesOperation& from);
  void MergeFrom(const ItemsInEntitiesOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemsInEntitiesOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.packets.entities.ItemsInEntitiesOperation";
  }
  protected:
  explicit ItemsInEntitiesOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto);
    return ::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ItemsInEntitiesOperation_Type Type;
  static constexpr Type UNSPECIFIED =
    ItemsInEntitiesOperation_Type_UNSPECIFIED;
  static constexpr Type ADD =
    ItemsInEntitiesOperation_Type_ADD;
  static constexpr Type REMOVE =
    ItemsInEntitiesOperation_Type_REMOVE;
  static constexpr Type REPLACE =
    ItemsInEntitiesOperation_Type_REPLACE;
  static inline bool Type_IsValid(int value) {
    return ItemsInEntitiesOperation_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ItemsInEntitiesOperation_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ItemsInEntitiesOperation_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ItemsInEntitiesOperation_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ItemsInEntitiesOperation_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ItemsInEntitiesOperation_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ItemsInEntitiesOperation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdsFieldNumber = 2,
    kEntityNamesFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated string item_ids = 2;
  int item_ids_size() const;
  private:
  int _internal_item_ids_size() const;
  public:
  void clear_item_ids();
  const std::string& item_ids(int index) const;
  std::string* mutable_item_ids(int index);
  void set_item_ids(int index, const std::string& value);
  void set_item_ids(int index, std::string&& value);
  void set_item_ids(int index, const char* value);
  void set_item_ids(int index, const char* value, size_t size);
  std::string* add_item_ids();
  void add_item_ids(const std::string& value);
  void add_item_ids(std::string&& value);
  void add_item_ids(const char* value);
  void add_item_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& item_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_item_ids();
  private:
  const std::string& _internal_item_ids(int index) const;
  std::string* _internal_add_item_ids();
  public:

  // repeated string entity_names = 3;
  int entity_names_size() const;
  private:
  int _internal_entity_names_size() const;
  public:
  void clear_entity_names();
  const std::string& entity_names(int index) const;
  std::string* mutable_entity_names(int index);
  void set_entity_names(int index, const std::string& value);
  void set_entity_names(int index, std::string&& value);
  void set_entity_names(int index, const char* value);
  void set_entity_names(int index, const char* value, size_t size);
  std::string* add_entity_names();
  void add_entity_names(const std::string& value);
  void add_entity_names(std::string&& value);
  void add_entity_names(const char* value);
  void add_entity_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entity_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entity_names();
  private:
  const std::string& _internal_entity_names(int index) const;
  std::string* _internal_add_entity_names();
  public:

  // .ai.inworld.packets.entities.ItemsInEntitiesOperation.Type type = 1;
  void clear_type();
  ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type type() const;
  void set_type(::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type value);
  private:
  ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type _internal_type() const;
  void _internal_set_type(::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.packets.entities.ItemsInEntitiesOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> item_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entity_names_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EntityItem

// string id = 1;
inline void EntityItem::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& EntityItem::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.EntityItem.id)
  return _internal_id();
}
inline void EntityItem::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.EntityItem.id)
}
inline std::string* EntityItem::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.EntityItem.id)
  return _internal_mutable_id();
}
inline const std::string& EntityItem::_internal_id() const {
  return id_.Get();
}
inline void EntityItem::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EntityItem::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.packets.entities.EntityItem.id)
}
inline void EntityItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.EntityItem.id)
}
inline void EntityItem::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.EntityItem.id)
}
inline std::string* EntityItem::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EntityItem::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.packets.entities.EntityItem.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.entities.EntityItem.id)
}

// string display_name = 2;
inline void EntityItem::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& EntityItem::display_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.EntityItem.display_name)
  return _internal_display_name();
}
inline void EntityItem::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.EntityItem.display_name)
}
inline std::string* EntityItem::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.EntityItem.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& EntityItem::_internal_display_name() const {
  return display_name_.Get();
}
inline void EntityItem::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EntityItem::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.packets.entities.EntityItem.display_name)
}
inline void EntityItem::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.EntityItem.display_name)
}
inline void EntityItem::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.EntityItem.display_name)
}
inline std::string* EntityItem::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EntityItem::release_display_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.packets.entities.EntityItem.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityItem::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.entities.EntityItem.display_name)
}

// string description = 3;
inline void EntityItem::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& EntityItem::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.EntityItem.description)
  return _internal_description();
}
inline void EntityItem::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.EntityItem.description)
}
inline std::string* EntityItem::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.EntityItem.description)
  return _internal_mutable_description();
}
inline const std::string& EntityItem::_internal_description() const {
  return description_.Get();
}
inline void EntityItem::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EntityItem::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.packets.entities.EntityItem.description)
}
inline void EntityItem::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.EntityItem.description)
}
inline void EntityItem::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.EntityItem.description)
}
inline std::string* EntityItem::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EntityItem::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.packets.entities.EntityItem.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.entities.EntityItem.description)
}

// map<string, string> properties = 4;
inline int EntityItem::_internal_properties_size() const {
  return properties_.size();
}
inline int EntityItem::properties_size() const {
  return _internal_properties_size();
}
inline void EntityItem::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EntityItem::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EntityItem::properties() const {
  // @@protoc_insertion_point(field_map:ai.inworld.packets.entities.EntityItem.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EntityItem::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EntityItem::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:ai.inworld.packets.entities.EntityItem.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// ItemsOperationEvent

// .ai.inworld.packets.entities.CreateOrUpdateItemsOperation create_or_update_items = 1;
inline bool ItemsOperationEvent::_internal_has_create_or_update_items() const {
  return operation_case() == kCreateOrUpdateItems;
}
inline bool ItemsOperationEvent::has_create_or_update_items() const {
  return _internal_has_create_or_update_items();
}
inline void ItemsOperationEvent::set_has_create_or_update_items() {
  _oneof_case_[0] = kCreateOrUpdateItems;
}
inline void ItemsOperationEvent::clear_create_or_update_items() {
  if (_internal_has_create_or_update_items()) {
    if (GetArena() == nullptr) {
      delete operation_.create_or_update_items_;
    }
    clear_has_operation();
  }
}
inline ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* ItemsOperationEvent::release_create_or_update_items() {
  // @@protoc_insertion_point(field_release:ai.inworld.packets.entities.ItemsOperationEvent.create_or_update_items)
  if (_internal_has_create_or_update_items()) {
    clear_has_operation();
      ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* temp = operation_.create_or_update_items_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.create_or_update_items_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation& ItemsOperationEvent::_internal_create_or_update_items() const {
  return _internal_has_create_or_update_items()
      ? *operation_.create_or_update_items_
      : reinterpret_cast< ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation&>(::ai::inworld::packets::entities::_CreateOrUpdateItemsOperation_default_instance_);
}
inline const ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation& ItemsOperationEvent::create_or_update_items() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.ItemsOperationEvent.create_or_update_items)
  return _internal_create_or_update_items();
}
inline ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* ItemsOperationEvent::unsafe_arena_release_create_or_update_items() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.packets.entities.ItemsOperationEvent.create_or_update_items)
  if (_internal_has_create_or_update_items()) {
    clear_has_operation();
    ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* temp = operation_.create_or_update_items_;
    operation_.create_or_update_items_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ItemsOperationEvent::unsafe_arena_set_allocated_create_or_update_items(::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* create_or_update_items) {
  clear_operation();
  if (create_or_update_items) {
    set_has_create_or_update_items();
    operation_.create_or_update_items_ = create_or_update_items;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.packets.entities.ItemsOperationEvent.create_or_update_items)
}
inline ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* ItemsOperationEvent::_internal_mutable_create_or_update_items() {
  if (!_internal_has_create_or_update_items()) {
    clear_operation();
    set_has_create_or_update_items();
    operation_.create_or_update_items_ = CreateMaybeMessage< ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation >(GetArena());
  }
  return operation_.create_or_update_items_;
}
inline ::ai::inworld::packets::entities::CreateOrUpdateItemsOperation* ItemsOperationEvent::mutable_create_or_update_items() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.ItemsOperationEvent.create_or_update_items)
  return _internal_mutable_create_or_update_items();
}

// .ai.inworld.packets.entities.RemoveItemsOperation remove_items = 3;
inline bool ItemsOperationEvent::_internal_has_remove_items() const {
  return operation_case() == kRemoveItems;
}
inline bool ItemsOperationEvent::has_remove_items() const {
  return _internal_has_remove_items();
}
inline void ItemsOperationEvent::set_has_remove_items() {
  _oneof_case_[0] = kRemoveItems;
}
inline void ItemsOperationEvent::clear_remove_items() {
  if (_internal_has_remove_items()) {
    if (GetArena() == nullptr) {
      delete operation_.remove_items_;
    }
    clear_has_operation();
  }
}
inline ::ai::inworld::packets::entities::RemoveItemsOperation* ItemsOperationEvent::release_remove_items() {
  // @@protoc_insertion_point(field_release:ai.inworld.packets.entities.ItemsOperationEvent.remove_items)
  if (_internal_has_remove_items()) {
    clear_has_operation();
      ::ai::inworld::packets::entities::RemoveItemsOperation* temp = operation_.remove_items_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.remove_items_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::packets::entities::RemoveItemsOperation& ItemsOperationEvent::_internal_remove_items() const {
  return _internal_has_remove_items()
      ? *operation_.remove_items_
      : reinterpret_cast< ::ai::inworld::packets::entities::RemoveItemsOperation&>(::ai::inworld::packets::entities::_RemoveItemsOperation_default_instance_);
}
inline const ::ai::inworld::packets::entities::RemoveItemsOperation& ItemsOperationEvent::remove_items() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.ItemsOperationEvent.remove_items)
  return _internal_remove_items();
}
inline ::ai::inworld::packets::entities::RemoveItemsOperation* ItemsOperationEvent::unsafe_arena_release_remove_items() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.packets.entities.ItemsOperationEvent.remove_items)
  if (_internal_has_remove_items()) {
    clear_has_operation();
    ::ai::inworld::packets::entities::RemoveItemsOperation* temp = operation_.remove_items_;
    operation_.remove_items_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ItemsOperationEvent::unsafe_arena_set_allocated_remove_items(::ai::inworld::packets::entities::RemoveItemsOperation* remove_items) {
  clear_operation();
  if (remove_items) {
    set_has_remove_items();
    operation_.remove_items_ = remove_items;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.packets.entities.ItemsOperationEvent.remove_items)
}
inline ::ai::inworld::packets::entities::RemoveItemsOperation* ItemsOperationEvent::_internal_mutable_remove_items() {
  if (!_internal_has_remove_items()) {
    clear_operation();
    set_has_remove_items();
    operation_.remove_items_ = CreateMaybeMessage< ::ai::inworld::packets::entities::RemoveItemsOperation >(GetArena());
  }
  return operation_.remove_items_;
}
inline ::ai::inworld::packets::entities::RemoveItemsOperation* ItemsOperationEvent::mutable_remove_items() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.ItemsOperationEvent.remove_items)
  return _internal_mutable_remove_items();
}

// .ai.inworld.packets.entities.ItemsInEntitiesOperation items_in_entities = 4;
inline bool ItemsOperationEvent::_internal_has_items_in_entities() const {
  return operation_case() == kItemsInEntities;
}
inline bool ItemsOperationEvent::has_items_in_entities() const {
  return _internal_has_items_in_entities();
}
inline void ItemsOperationEvent::set_has_items_in_entities() {
  _oneof_case_[0] = kItemsInEntities;
}
inline void ItemsOperationEvent::clear_items_in_entities() {
  if (_internal_has_items_in_entities()) {
    if (GetArena() == nullptr) {
      delete operation_.items_in_entities_;
    }
    clear_has_operation();
  }
}
inline ::ai::inworld::packets::entities::ItemsInEntitiesOperation* ItemsOperationEvent::release_items_in_entities() {
  // @@protoc_insertion_point(field_release:ai.inworld.packets.entities.ItemsOperationEvent.items_in_entities)
  if (_internal_has_items_in_entities()) {
    clear_has_operation();
      ::ai::inworld::packets::entities::ItemsInEntitiesOperation* temp = operation_.items_in_entities_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.items_in_entities_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::packets::entities::ItemsInEntitiesOperation& ItemsOperationEvent::_internal_items_in_entities() const {
  return _internal_has_items_in_entities()
      ? *operation_.items_in_entities_
      : reinterpret_cast< ::ai::inworld::packets::entities::ItemsInEntitiesOperation&>(::ai::inworld::packets::entities::_ItemsInEntitiesOperation_default_instance_);
}
inline const ::ai::inworld::packets::entities::ItemsInEntitiesOperation& ItemsOperationEvent::items_in_entities() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.ItemsOperationEvent.items_in_entities)
  return _internal_items_in_entities();
}
inline ::ai::inworld::packets::entities::ItemsInEntitiesOperation* ItemsOperationEvent::unsafe_arena_release_items_in_entities() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.packets.entities.ItemsOperationEvent.items_in_entities)
  if (_internal_has_items_in_entities()) {
    clear_has_operation();
    ::ai::inworld::packets::entities::ItemsInEntitiesOperation* temp = operation_.items_in_entities_;
    operation_.items_in_entities_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ItemsOperationEvent::unsafe_arena_set_allocated_items_in_entities(::ai::inworld::packets::entities::ItemsInEntitiesOperation* items_in_entities) {
  clear_operation();
  if (items_in_entities) {
    set_has_items_in_entities();
    operation_.items_in_entities_ = items_in_entities;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.packets.entities.ItemsOperationEvent.items_in_entities)
}
inline ::ai::inworld::packets::entities::ItemsInEntitiesOperation* ItemsOperationEvent::_internal_mutable_items_in_entities() {
  if (!_internal_has_items_in_entities()) {
    clear_operation();
    set_has_items_in_entities();
    operation_.items_in_entities_ = CreateMaybeMessage< ::ai::inworld::packets::entities::ItemsInEntitiesOperation >(GetArena());
  }
  return operation_.items_in_entities_;
}
inline ::ai::inworld::packets::entities::ItemsInEntitiesOperation* ItemsOperationEvent::mutable_items_in_entities() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.ItemsOperationEvent.items_in_entities)
  return _internal_mutable_items_in_entities();
}

inline bool ItemsOperationEvent::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void ItemsOperationEvent::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline ItemsOperationEvent::OperationCase ItemsOperationEvent::operation_case() const {
  return ItemsOperationEvent::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateOrUpdateItemsOperation

// repeated .ai.inworld.packets.entities.EntityItem items = 1;
inline int CreateOrUpdateItemsOperation::_internal_items_size() const {
  return items_.size();
}
inline int CreateOrUpdateItemsOperation::items_size() const {
  return _internal_items_size();
}
inline void CreateOrUpdateItemsOperation::clear_items() {
  items_.Clear();
}
inline ::ai::inworld::packets::entities::EntityItem* CreateOrUpdateItemsOperation::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::entities::EntityItem >*
CreateOrUpdateItemsOperation::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.items)
  return &items_;
}
inline const ::ai::inworld::packets::entities::EntityItem& CreateOrUpdateItemsOperation::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::ai::inworld::packets::entities::EntityItem& CreateOrUpdateItemsOperation::items(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.items)
  return _internal_items(index);
}
inline ::ai::inworld::packets::entities::EntityItem* CreateOrUpdateItemsOperation::_internal_add_items() {
  return items_.Add();
}
inline ::ai::inworld::packets::entities::EntityItem* CreateOrUpdateItemsOperation::add_items() {
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::entities::EntityItem >&
CreateOrUpdateItemsOperation::items() const {
  // @@protoc_insertion_point(field_list:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.items)
  return items_;
}

// repeated string add_to_entities = 2;
inline int CreateOrUpdateItemsOperation::_internal_add_to_entities_size() const {
  return add_to_entities_.size();
}
inline int CreateOrUpdateItemsOperation::add_to_entities_size() const {
  return _internal_add_to_entities_size();
}
inline void CreateOrUpdateItemsOperation::clear_add_to_entities() {
  add_to_entities_.Clear();
}
inline std::string* CreateOrUpdateItemsOperation::add_add_to_entities() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  return _internal_add_add_to_entities();
}
inline const std::string& CreateOrUpdateItemsOperation::_internal_add_to_entities(int index) const {
  return add_to_entities_.Get(index);
}
inline const std::string& CreateOrUpdateItemsOperation::add_to_entities(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  return _internal_add_to_entities(index);
}
inline std::string* CreateOrUpdateItemsOperation::mutable_add_to_entities(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  return add_to_entities_.Mutable(index);
}
inline void CreateOrUpdateItemsOperation::set_add_to_entities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  add_to_entities_.Mutable(index)->assign(value);
}
inline void CreateOrUpdateItemsOperation::set_add_to_entities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  add_to_entities_.Mutable(index)->assign(std::move(value));
}
inline void CreateOrUpdateItemsOperation::set_add_to_entities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  add_to_entities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
}
inline void CreateOrUpdateItemsOperation::set_add_to_entities(int index, const char* value, size_t size) {
  add_to_entities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
}
inline std::string* CreateOrUpdateItemsOperation::_internal_add_add_to_entities() {
  return add_to_entities_.Add();
}
inline void CreateOrUpdateItemsOperation::add_add_to_entities(const std::string& value) {
  add_to_entities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
}
inline void CreateOrUpdateItemsOperation::add_add_to_entities(std::string&& value) {
  add_to_entities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
}
inline void CreateOrUpdateItemsOperation::add_add_to_entities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  add_to_entities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
}
inline void CreateOrUpdateItemsOperation::add_add_to_entities(const char* value, size_t size) {
  add_to_entities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOrUpdateItemsOperation::add_to_entities() const {
  // @@protoc_insertion_point(field_list:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  return add_to_entities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOrUpdateItemsOperation::mutable_add_to_entities() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.packets.entities.CreateOrUpdateItemsOperation.add_to_entities)
  return &add_to_entities_;
}

// -------------------------------------------------------------------

// RemoveItemsOperation

// repeated string item_ids = 1;
inline int RemoveItemsOperation::_internal_item_ids_size() const {
  return item_ids_.size();
}
inline int RemoveItemsOperation::item_ids_size() const {
  return _internal_item_ids_size();
}
inline void RemoveItemsOperation::clear_item_ids() {
  item_ids_.Clear();
}
inline std::string* RemoveItemsOperation::add_item_ids() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  return _internal_add_item_ids();
}
inline const std::string& RemoveItemsOperation::_internal_item_ids(int index) const {
  return item_ids_.Get(index);
}
inline const std::string& RemoveItemsOperation::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  return _internal_item_ids(index);
}
inline std::string* RemoveItemsOperation::mutable_item_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  return item_ids_.Mutable(index);
}
inline void RemoveItemsOperation::set_item_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  item_ids_.Mutable(index)->assign(value);
}
inline void RemoveItemsOperation::set_item_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  item_ids_.Mutable(index)->assign(std::move(value));
}
inline void RemoveItemsOperation::set_item_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  item_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
}
inline void RemoveItemsOperation::set_item_ids(int index, const char* value, size_t size) {
  item_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
}
inline std::string* RemoveItemsOperation::_internal_add_item_ids() {
  return item_ids_.Add();
}
inline void RemoveItemsOperation::add_item_ids(const std::string& value) {
  item_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
}
inline void RemoveItemsOperation::add_item_ids(std::string&& value) {
  item_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
}
inline void RemoveItemsOperation::add_item_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  item_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
}
inline void RemoveItemsOperation::add_item_ids(const char* value, size_t size) {
  item_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveItemsOperation::item_ids() const {
  // @@protoc_insertion_point(field_list:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  return item_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveItemsOperation::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.packets.entities.RemoveItemsOperation.item_ids)
  return &item_ids_;
}

// -------------------------------------------------------------------

// ItemsInEntitiesOperation

// .ai.inworld.packets.entities.ItemsInEntitiesOperation.Type type = 1;
inline void ItemsInEntitiesOperation::clear_type() {
  type_ = 0;
}
inline ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type ItemsInEntitiesOperation::_internal_type() const {
  return static_cast< ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type >(type_);
}
inline ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type ItemsInEntitiesOperation::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.ItemsInEntitiesOperation.type)
  return _internal_type();
}
inline void ItemsInEntitiesOperation::_internal_set_type(::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type value) {
  
  type_ = value;
}
inline void ItemsInEntitiesOperation::set_type(::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.ItemsInEntitiesOperation.type)
}

// repeated string item_ids = 2;
inline int ItemsInEntitiesOperation::_internal_item_ids_size() const {
  return item_ids_.size();
}
inline int ItemsInEntitiesOperation::item_ids_size() const {
  return _internal_item_ids_size();
}
inline void ItemsInEntitiesOperation::clear_item_ids() {
  item_ids_.Clear();
}
inline std::string* ItemsInEntitiesOperation::add_item_ids() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  return _internal_add_item_ids();
}
inline const std::string& ItemsInEntitiesOperation::_internal_item_ids(int index) const {
  return item_ids_.Get(index);
}
inline const std::string& ItemsInEntitiesOperation::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  return _internal_item_ids(index);
}
inline std::string* ItemsInEntitiesOperation::mutable_item_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  return item_ids_.Mutable(index);
}
inline void ItemsInEntitiesOperation::set_item_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  item_ids_.Mutable(index)->assign(value);
}
inline void ItemsInEntitiesOperation::set_item_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  item_ids_.Mutable(index)->assign(std::move(value));
}
inline void ItemsInEntitiesOperation::set_item_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  item_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
}
inline void ItemsInEntitiesOperation::set_item_ids(int index, const char* value, size_t size) {
  item_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
}
inline std::string* ItemsInEntitiesOperation::_internal_add_item_ids() {
  return item_ids_.Add();
}
inline void ItemsInEntitiesOperation::add_item_ids(const std::string& value) {
  item_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
}
inline void ItemsInEntitiesOperation::add_item_ids(std::string&& value) {
  item_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
}
inline void ItemsInEntitiesOperation::add_item_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  item_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
}
inline void ItemsInEntitiesOperation::add_item_ids(const char* value, size_t size) {
  item_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ItemsInEntitiesOperation::item_ids() const {
  // @@protoc_insertion_point(field_list:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  return item_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ItemsInEntitiesOperation::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.packets.entities.ItemsInEntitiesOperation.item_ids)
  return &item_ids_;
}

// repeated string entity_names = 3;
inline int ItemsInEntitiesOperation::_internal_entity_names_size() const {
  return entity_names_.size();
}
inline int ItemsInEntitiesOperation::entity_names_size() const {
  return _internal_entity_names_size();
}
inline void ItemsInEntitiesOperation::clear_entity_names() {
  entity_names_.Clear();
}
inline std::string* ItemsInEntitiesOperation::add_entity_names() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  return _internal_add_entity_names();
}
inline const std::string& ItemsInEntitiesOperation::_internal_entity_names(int index) const {
  return entity_names_.Get(index);
}
inline const std::string& ItemsInEntitiesOperation::entity_names(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  return _internal_entity_names(index);
}
inline std::string* ItemsInEntitiesOperation::mutable_entity_names(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  return entity_names_.Mutable(index);
}
inline void ItemsInEntitiesOperation::set_entity_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  entity_names_.Mutable(index)->assign(value);
}
inline void ItemsInEntitiesOperation::set_entity_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  entity_names_.Mutable(index)->assign(std::move(value));
}
inline void ItemsInEntitiesOperation::set_entity_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entity_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
}
inline void ItemsInEntitiesOperation::set_entity_names(int index, const char* value, size_t size) {
  entity_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
}
inline std::string* ItemsInEntitiesOperation::_internal_add_entity_names() {
  return entity_names_.Add();
}
inline void ItemsInEntitiesOperation::add_entity_names(const std::string& value) {
  entity_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
}
inline void ItemsInEntitiesOperation::add_entity_names(std::string&& value) {
  entity_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
}
inline void ItemsInEntitiesOperation::add_entity_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entity_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
}
inline void ItemsInEntitiesOperation::add_entity_names(const char* value, size_t size) {
  entity_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ItemsInEntitiesOperation::entity_names() const {
  // @@protoc_insertion_point(field_list:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  return entity_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ItemsInEntitiesOperation::mutable_entity_names() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.packets.entities.ItemsInEntitiesOperation.entity_names)
  return &entity_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace packets
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type>() {
  return ::ai::inworld::packets::entities::ItemsInEntitiesOperation_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto
