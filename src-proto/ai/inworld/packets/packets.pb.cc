#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/packets/packets.proto

#include "ai/inworld/packets/packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilitiesConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogsEvent_MetadataEntry_DoNotUse_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ItemsOperationEvent_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
namespace ai {
namespace inworld {
namespace packets {
class ActorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Actor> _instance;
} _Actor_default_instance_;
class RoutingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Routing> _instance;
} _Routing_default_instance_;
class PacketIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PacketId> _instance;
} _PacketId_default_instance_;
class InworldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InworldPacket> _instance;
} _InworldPacket_default_instance_;
class TextEvent_ModelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextEvent_ModelInfo> _instance;
} _TextEvent_ModelInfo_default_instance_;
class TextEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextEvent> _instance;
} _TextEvent_default_instance_;
class ControlEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlEvent> _instance;
} _ControlEvent_default_instance_;
class AudioSessionStartPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioSessionStartPayload> _instance;
} _AudioSessionStartPayload_default_instance_;
class AudioChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioChunk> _instance;
} _AudioChunk_default_instance_;
class CustomEvent_ParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomEvent_Parameter> _instance;
} _CustomEvent_Parameter_default_instance_;
class CustomEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomEvent> _instance;
} _CustomEvent_default_instance_;
class CancelResponsesEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelResponsesEvent> _instance;
} _CancelResponsesEvent_default_instance_;
class EmotionEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmotionEvent> _instance;
} _EmotionEvent_default_instance_;
class DataChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataChunk> _instance;
} _DataChunk_default_instance_;
class AdditionalPhonemeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalPhonemeInfo> _instance;
} _AdditionalPhonemeInfo_default_instance_;
class ActionEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionEvent> _instance;
} _ActionEvent_default_instance_;
class NarratedActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NarratedAction> _instance;
} _NarratedAction_default_instance_;
class RelationInfo_RelationAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationInfo_RelationAttributes> _instance;
} _RelationInfo_RelationAttributes_default_instance_;
class RelationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationInfo> _instance;
} _RelationInfo_default_instance_;
class LatencyReportEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyReportEvent> _instance;
} _LatencyReportEvent_default_instance_;
class PingPongReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingPongReport> _instance;
} _PingPongReport_default_instance_;
class PerceivedLatencyReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceivedLatencyReport> _instance;
} _PerceivedLatencyReport_default_instance_;
class LogsEvent_LogDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogsEvent_LogDetail> _instance;
} _LogsEvent_LogDetail_default_instance_;
class LogsEvent_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogsEvent_MetadataEntry_DoNotUse> _instance;
} _LogsEvent_MetadataEntry_DoNotUse_default_instance_;
class LogsEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogsEvent> _instance;
} _LogsEvent_default_instance_;
class MutationEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationEvent> _instance;
} _MutationEvent_default_instance_;
class SessionControlResponseEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionControlResponseEvent> _instance;
} _SessionControlResponseEvent_default_instance_;
class CancelResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelResponses> _instance;
} _CancelResponses_default_instance_;
class RegenerateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegenerateResponse> _instance;
} _RegenerateResponse_default_instance_;
class ApplyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyResponse> _instance;
} _ApplyResponse_default_instance_;
class LoadSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadScene> _instance;
} _LoadScene_default_instance_;
class LoadedSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadedScene> _instance;
} _LoadedScene_default_instance_;
class LoadCharacters_CharacterNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCharacters_CharacterName> _instance;
} _LoadCharacters_CharacterName_default_instance_;
class LoadCharactersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCharacters> _instance;
} _LoadCharacters_default_instance_;
class LoadedCharactersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadedCharacters> _instance;
} _LoadedCharacters_default_instance_;
class UnloadCharactersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnloadCharacters> _instance;
} _UnloadCharacters_default_instance_;
class CurrentSceneStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentSceneStatus> _instance;
} _CurrentSceneStatus_default_instance_;
class ModifyExactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyExactResponse> _instance;
} _ModifyExactResponse_default_instance_;
class LoadSceneOutputEvent_AgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneOutputEvent_Agent> _instance;
} _LoadSceneOutputEvent_Agent_default_instance_;
class LoadSceneOutputEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneOutputEvent> _instance;
} _LoadSceneOutputEvent_default_instance_;
class Agent_CharacterAssetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Agent_CharacterAssets> _instance;
} _Agent_CharacterAssets_default_instance_;
class AgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Agent> _instance;
} _Agent_default_instance_;
class DebugInfoEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugInfoEvent> _instance;
} _DebugInfoEvent_default_instance_;
class SessionControlEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionControlEvent> _instance;
} _SessionControlEvent_default_instance_;
class SessionConfigurationPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionConfigurationPayload> _instance;
} _SessionConfigurationPayload_default_instance_;
class Continuation_ContinuationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Continuation_ContinuationInfo> _instance;
} _Continuation_ContinuationInfo_default_instance_;
class ContinuationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Continuation> _instance;
} _Continuation_default_instance_;
class DialogHistory_HistoryItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DialogHistory_HistoryItem> _instance;
} _DialogHistory_HistoryItem_default_instance_;
class DialogHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DialogHistory> _instance;
} _DialogHistory_default_instance_;
class Relations_RelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Relations_Relation> _instance;
} _Relations_Relation_default_instance_;
class RelationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Relations> _instance;
} _Relations_default_instance_;
class SessionHistoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionHistoryRequest> _instance;
} _SessionHistoryRequest_default_instance_;
class SessionHistoryResponse_SessionHistoryItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionHistoryResponse_SessionHistoryItem> _instance;
} _SessionHistoryResponse_SessionHistoryItem_default_instance_;
class SessionHistoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionHistoryResponse> _instance;
} _SessionHistoryResponse_default_instance_;
class ConversationUpdatePayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConversationUpdatePayload> _instance;
} _ConversationUpdatePayload_default_instance_;
class ConversationEventPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConversationEventPayload> _instance;
} _ConversationEventPayload_default_instance_;
class OperationStatusEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationStatusEvent> _instance;
} _OperationStatusEvent_default_instance_;
}  // namespace packets
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ActionEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::ActionEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Actor_default_instance_;
    new (ptr) ::ai::inworld::packets::Actor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_AdditionalPhonemeInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::AdditionalPhonemeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Agent_default_instance_;
    new (ptr) ::ai::inworld::packets::Agent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Agent_CharacterAssets_default_instance_;
    new (ptr) ::ai::inworld::packets::Agent_CharacterAssets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ApplyResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::ApplyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_AudioChunk_default_instance_;
    new (ptr) ::ai::inworld::packets::AudioChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_AudioSessionStartPayload_default_instance_;
    new (ptr) ::ai::inworld::packets::AudioSessionStartPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CancelResponses_default_instance_;
    new (ptr) ::ai::inworld::packets::CancelResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CancelResponsesEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::CancelResponsesEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Continuation_default_instance_;
    new (ptr) ::ai::inworld::packets::Continuation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Continuation_ContinuationInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::Continuation_ContinuationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ControlEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::ControlEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ConversationEventPayload_default_instance_;
    new (ptr) ::ai::inworld::packets::ConversationEventPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ConversationUpdatePayload_default_instance_;
    new (ptr) ::ai::inworld::packets::ConversationUpdatePayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CurrentSceneStatus_default_instance_;
    new (ptr) ::ai::inworld::packets::CurrentSceneStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CustomEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::CustomEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CustomEvent_Parameter_default_instance_;
    new (ptr) ::ai::inworld::packets::CustomEvent_Parameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_DataChunk_default_instance_;
    new (ptr) ::ai::inworld::packets::DataChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_DebugInfoEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::DebugInfoEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_DialogHistory_default_instance_;
    new (ptr) ::ai::inworld::packets::DialogHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_DialogHistory_HistoryItem_default_instance_;
    new (ptr) ::ai::inworld::packets::DialogHistory_HistoryItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_EmotionEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::EmotionEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_InworldPacket_default_instance_;
    new (ptr) ::ai::inworld::packets::InworldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ai::inworld::packets::_SessionControlResponseEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::SessionControlResponseEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ai::inworld::packets::_SessionHistoryResponse_SessionHistoryItem_default_instance_;
    new (ptr) ::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ai::inworld::packets::_SessionHistoryResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::SessionHistoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ItemsOperationEvent_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto.base,
      &scc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LatencyReportEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::LatencyReportEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadCharacters_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadCharacters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadCharacters_CharacterName_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadCharacters_CharacterName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadScene_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadSceneOutputEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadSceneOutputEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadSceneOutputEvent_Agent_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadSceneOutputEvent_Agent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadedCharacters_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadedCharacters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadedScene_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadedScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LogsEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::LogsEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_LogsEvent_MetadataEntry_DoNotUse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LogsEvent_LogDetail_default_instance_;
    new (ptr) ::ai::inworld::packets::LogsEvent_LogDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_LogsEvent_MetadataEntry_DoNotUse_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LogsEvent_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogsEvent_MetadataEntry_DoNotUse_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogsEvent_MetadataEntry_DoNotUse_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ModifyExactResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::ModifyExactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_MutationEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::MutationEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_NarratedAction_default_instance_;
    new (ptr) ::ai::inworld::packets::NarratedAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_OperationStatusEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::OperationStatusEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_PacketId_default_instance_;
    new (ptr) ::ai::inworld::packets::PacketId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_PerceivedLatencyReport_default_instance_;
    new (ptr) ::ai::inworld::packets::PerceivedLatencyReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_PingPongReport_default_instance_;
    new (ptr) ::ai::inworld::packets::PingPongReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_RegenerateResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::RegenerateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_RelationInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::RelationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_RelationInfo_RelationAttributes_default_instance_;
    new (ptr) ::ai::inworld::packets::RelationInfo_RelationAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_Relations_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Relations_default_instance_;
    new (ptr) ::ai::inworld::packets::Relations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Relations_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Relations_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Relations_Relation_default_instance_;
    new (ptr) ::ai::inworld::packets::Relations_Relation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Routing_default_instance_;
    new (ptr) ::ai::inworld::packets::Routing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_SessionConfigurationPayload_default_instance_;
    new (ptr) ::ai::inworld::packets::SessionConfigurationPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_SessionConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_UserConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_ClientConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_CapabilitiesConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_SessionControlEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::SessionControlEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_SessionConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_UserConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_ClientConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_CapabilitiesConfiguration_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto.base,
      &scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_SessionHistoryRequest_default_instance_;
    new (ptr) ::ai::inworld::packets::SessionHistoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_TextEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::TextEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static void InitDefaultsscc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_TextEvent_ModelInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::TextEvent_ModelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto}, {}};

static void InitDefaultsscc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_UnloadCharacters_default_instance_;
    new (ptr) ::ai::inworld::packets::UnloadCharacters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto}, {
      &scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ai_2finworld_2fpackets_2fpackets_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ai_2finworld_2fpackets_2fpackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, source_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, target_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, utterance_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, conversation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, routing_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, packet_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent_ModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent_ModelInfo, service_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent_ModelInfo, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, source_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, final_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, model_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, action_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, payload_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, payload_structured_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioSessionStartPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioSessionStartPayload, mode_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioSessionStartPayload, understanding_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, playback_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, parameters_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, joy_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, fear_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, surprise_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, behavior_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, additional_phoneme_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, audioformat_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, phoneme_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, start_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, playback_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::NarratedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::NarratedAction, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, respect_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, familiar_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, flirtatious_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, attraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, relation_state_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, relation_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LatencyReportEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LatencyReportEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LatencyReportEvent, report_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PingPongReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PingPongReport, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PingPongReport, ping_packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PingPongReport, ping_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PerceivedLatencyReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PerceivedLatencyReport, precision_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PerceivedLatencyReport, latency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_LogDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_LogDetail, text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_LogDetail, detail_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent, text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent, level_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent, metadata_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LogsEvent, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionControlResponseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionControlResponseEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionControlResponseEvent, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RegenerateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RegenerateResponse, interaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, apply_response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, is_reset_scene_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedScene, agents_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedScene, scene_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedScene, scene_description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedScene, scene_display_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadCharacters_CharacterName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadCharacters_CharacterName, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadCharacters_CharacterName, language_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadCharacters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadCharacters, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedCharacters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedCharacters, agents_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedCharacters, scene_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedCharacters, scene_description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadedCharacters, scene_display_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::UnloadCharacters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::UnloadCharacters, agents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CurrentSceneStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CurrentSceneStatus, agents_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CurrentSceneStatus, scene_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CurrentSceneStatus, scene_description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CurrentSceneStatus, scene_display_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, exact_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, agent_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, brain_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, given_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent, agents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent_CharacterAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent_CharacterAssets, rpm_model_uri_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent_CharacterAssets, rpm_image_uri_portrait_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent_CharacterAssets, rpm_image_uri_posture_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent_CharacterAssets, avatar_img_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent_CharacterAssets, avatar_img_original_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent, agent_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent, brain_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent, given_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Agent, character_assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionControlEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionControlEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionControlEvent, session_control_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionConfigurationPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionConfigurationPayload, session_configuration_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionConfigurationPayload, user_configuration_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionConfigurationPayload, client_configuration_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionConfigurationPayload, capabilities_configuration_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionConfigurationPayload, continuation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation_ContinuationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation_ContinuationInfo, passed_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation, continuation_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation, continuation_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation, dialog_history_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Continuation, externally_saved_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DialogHistory_HistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DialogHistory_HistoryItem, actor_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DialogHistory_HistoryItem, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DialogHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DialogHistory, history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Relations_Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Relations_Relation, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Relations_Relation, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Relations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Relations, actor_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Relations, relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem, agent_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem, packets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::SessionHistoryResponse, session_history_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ConversationUpdatePayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ConversationUpdatePayload, participants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ConversationEventPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ConversationEventPayload, participants_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ConversationEventPayload, event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::OperationStatusEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::OperationStatusEvent, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ai::inworld::packets::Actor)},
  { 7, -1, sizeof(::ai::inworld::packets::Routing)},
  { 15, -1, sizeof(::ai::inworld::packets::PacketId)},
  { 25, -1, sizeof(::ai::inworld::packets::InworldPacket)},
  { 51, -1, sizeof(::ai::inworld::packets::TextEvent_ModelInfo)},
  { 58, -1, sizeof(::ai::inworld::packets::TextEvent)},
  { 67, -1, sizeof(::ai::inworld::packets::ControlEvent)},
  { 81, -1, sizeof(::ai::inworld::packets::AudioSessionStartPayload)},
  { 88, -1, sizeof(::ai::inworld::packets::AudioChunk)},
  { 94, -1, sizeof(::ai::inworld::packets::CustomEvent_Parameter)},
  { 101, -1, sizeof(::ai::inworld::packets::CustomEvent)},
  { 110, -1, sizeof(::ai::inworld::packets::CancelResponsesEvent)},
  { 117, -1, sizeof(::ai::inworld::packets::EmotionEvent)},
  { 128, -1, sizeof(::ai::inworld::packets::DataChunk)},
  { 139, -1, sizeof(::ai::inworld::packets::AdditionalPhonemeInfo)},
  { 146, -1, sizeof(::ai::inworld::packets::ActionEvent)},
  { 154, -1, sizeof(::ai::inworld::packets::NarratedAction)},
  { 160, -1, sizeof(::ai::inworld::packets::RelationInfo_RelationAttributes)},
  { 170, -1, sizeof(::ai::inworld::packets::RelationInfo)},
  { 177, -1, sizeof(::ai::inworld::packets::LatencyReportEvent)},
  { 185, -1, sizeof(::ai::inworld::packets::PingPongReport)},
  { 193, -1, sizeof(::ai::inworld::packets::PerceivedLatencyReport)},
  { 200, -1, sizeof(::ai::inworld::packets::LogsEvent_LogDetail)},
  { 207, 214, sizeof(::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse)},
  { 216, -1, sizeof(::ai::inworld::packets::LogsEvent)},
  { 225, -1, sizeof(::ai::inworld::packets::MutationEvent)},
  { 238, -1, sizeof(::ai::inworld::packets::SessionControlResponseEvent)},
  { 247, -1, sizeof(::ai::inworld::packets::CancelResponses)},
  { 254, -1, sizeof(::ai::inworld::packets::RegenerateResponse)},
  { 260, -1, sizeof(::ai::inworld::packets::ApplyResponse)},
  { 267, -1, sizeof(::ai::inworld::packets::LoadScene)},
  { 274, -1, sizeof(::ai::inworld::packets::LoadedScene)},
  { 283, -1, sizeof(::ai::inworld::packets::LoadCharacters_CharacterName)},
  { 290, -1, sizeof(::ai::inworld::packets::LoadCharacters)},
  { 296, -1, sizeof(::ai::inworld::packets::LoadedCharacters)},
  { 305, -1, sizeof(::ai::inworld::packets::UnloadCharacters)},
  { 311, -1, sizeof(::ai::inworld::packets::CurrentSceneStatus)},
  { 320, -1, sizeof(::ai::inworld::packets::ModifyExactResponse)},
  { 327, -1, sizeof(::ai::inworld::packets::LoadSceneOutputEvent_Agent)},
  { 335, -1, sizeof(::ai::inworld::packets::LoadSceneOutputEvent)},
  { 341, -1, sizeof(::ai::inworld::packets::Agent_CharacterAssets)},
  { 351, -1, sizeof(::ai::inworld::packets::Agent)},
  { 360, -1, sizeof(::ai::inworld::packets::DebugInfoEvent)},
  { 367, -1, sizeof(::ai::inworld::packets::SessionControlEvent)},
  { 380, -1, sizeof(::ai::inworld::packets::SessionConfigurationPayload)},
  { 390, -1, sizeof(::ai::inworld::packets::Continuation_ContinuationInfo)},
  { 396, -1, sizeof(::ai::inworld::packets::Continuation)},
  { 405, -1, sizeof(::ai::inworld::packets::DialogHistory_HistoryItem)},
  { 412, -1, sizeof(::ai::inworld::packets::DialogHistory)},
  { 418, -1, sizeof(::ai::inworld::packets::Relations_Relation)},
  { 425, -1, sizeof(::ai::inworld::packets::Relations)},
  { 432, -1, sizeof(::ai::inworld::packets::SessionHistoryRequest)},
  { 437, -1, sizeof(::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem)},
  { 444, -1, sizeof(::ai::inworld::packets::SessionHistoryResponse)},
  { 450, -1, sizeof(::ai::inworld::packets::ConversationUpdatePayload)},
  { 456, -1, sizeof(::ai::inworld::packets::ConversationEventPayload)},
  { 463, -1, sizeof(::ai::inworld::packets::OperationStatusEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Actor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Routing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_PacketId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_InworldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_TextEvent_ModelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_TextEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ControlEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_AudioSessionStartPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_AudioChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CustomEvent_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CustomEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CancelResponsesEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_EmotionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_DataChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_AdditionalPhonemeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ActionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_NarratedAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_RelationInfo_RelationAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_RelationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LatencyReportEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_PingPongReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_PerceivedLatencyReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LogsEvent_LogDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LogsEvent_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LogsEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_MutationEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_SessionControlResponseEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CancelResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_RegenerateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ApplyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadedScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadCharacters_CharacterName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadCharacters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadedCharacters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_UnloadCharacters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CurrentSceneStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ModifyExactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadSceneOutputEvent_Agent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadSceneOutputEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Agent_CharacterAssets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Agent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_DebugInfoEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_SessionControlEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_SessionConfigurationPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Continuation_ContinuationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Continuation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_DialogHistory_HistoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_DialogHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Relations_Relation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Relations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_SessionHistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_SessionHistoryResponse_SessionHistoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_SessionHistoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ConversationUpdatePayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ConversationEventPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_OperationStatusEvent_default_instance_),
};

const char descriptor_table_protodef_ai_2finworld_2fpackets_2fpackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ai/inworld/packets/packets.proto\022\022ai.i"
  "nworld.packets\032\036google/protobuf/duration"
  ".proto\032\034google/protobuf/struct.proto\032\037go"
  "ogle/protobuf/timestamp.proto\032\027google/rp"
  "c/status.proto\032 ai/inworld/options/optio"
  "ns.proto\0323ai/inworld/engine/configuratio"
  "n/configuration.proto\032.ai/inworld/langua"
  "ge_codes/language_codes.proto\0322ai/inworl"
  "d/packets/entities/entities_packets.prot"
  "o\"z\n\005Actor\022,\n\004type\030\001 \001(\0162\036.ai.inworld.pa"
  "ckets.Actor.Type\022\014\n\004name\030\002 \001(\t\"5\n\004Type\022\013"
  "\n\007UNKNOWN\020\000\022\n\n\006PLAYER\020\001\022\t\n\005AGENT\020\002\022\t\n\005WO"
  "RLD\020\003\"\213\001\n\007Routing\022)\n\006source\030\001 \001(\0132\031.ai.i"
  "nworld.packets.Actor\022)\n\006target\030\002 \001(\0132\031.a"
  "i.inworld.packets.Actor\022*\n\007targets\030\003 \003(\013"
  "2\031.ai.inworld.packets.Actor\"|\n\010PacketId\022"
  "\021\n\tpacket_id\030\001 \001(\t\022\024\n\014utterance_id\030\002 \001(\t"
  "\022\026\n\016interaction_id\030\003 \001(\t\022\026\n\016correlation_"
  "id\030\004 \001(\t\022\027\n\017conversation_id\030\005 \001(\t\"\330\t\n\rIn"
  "worldPacket\022-\n\ttimestamp\030\001 \001(\0132\032.google."
  "protobuf.Timestamp\022,\n\007routing\030\006 \001(\0132\033.ai"
  ".inworld.packets.Routing\022/\n\tpacket_id\030\t "
  "\001(\0132\034.ai.inworld.packets.PacketId\022-\n\004tex"
  "t\030\002 \001(\0132\035.ai.inworld.packets.TextEventH\000"
  "\0223\n\007control\030\003 \001(\0132 .ai.inworld.packets.C"
  "ontrolEventH\000\0229\n\013audio_chunk\030\004 \001(\0132\036.ai."
  "inworld.packets.AudioChunkB\002\030\001H\000\0221\n\006cust"
  "om\030\010 \001(\0132\037.ai.inworld.packets.CustomEven"
  "tH\000\022G\n\017cancelResponses\030\n \001(\0132(.ai.inworl"
  "d.packets.CancelResponsesEventB\002\030\001H\000\0223\n\007"
  "emotion\030\013 \001(\0132 .ai.inworld.packets.Emoti"
  "onEventH\000\0223\n\ndata_chunk\030\014 \001(\0132\035.ai.inwor"
  "ld.packets.DataChunkH\000\0221\n\006action\030\r \001(\0132\037"
  ".ai.inworld.packets.ActionEventH\000\0225\n\010mut"
  "ation\030\017 \001(\0132!.ai.inworld.packets.Mutatio"
  "nEventH\000\022I\n\021load_scene_output\030\020 \001(\0132(.ai"
  ".inworld.packets.LoadSceneOutputEventB\002\030"
  "\001H\000\0228\n\ndebug_info\030\022 \001(\0132\".ai.inworld.pac"
  "kets.DebugInfoEventH\000\022B\n\017session_control"
  "\030\023 \001(\0132\'.ai.inworld.packets.SessionContr"
  "olEventH\000\022S\n\030session_control_response\030\024 "
  "\001(\0132/.ai.inworld.packets.SessionControlR"
  "esponseEventH\000\022@\n\016latency_report\030\026 \001(\0132&"
  ".ai.inworld.packets.LatencyReportEventH\000"
  "\022D\n\020operation_status\030\027 \001(\0132(.ai.inworld."
  "packets.OperationStatusEventH\000\022T\n\030entiti"
  "es_items_operation\030\030 \001(\01320.ai.inworld.pa"
  "ckets.entities.ItemsOperationEventH\000\022,\n\003"
  "log\030\031 \001(\0132\035.ai.inworld.packets.LogsEvent"
  "H\000B\010\n\006packetJ\004\010\005\020\006J\004\010\007\020\010J\004\010\016\020\017J\004\010\021\020\022\"\257\002\n"
  "\tTextEvent\022\014\n\004text\030\001 \001(\t\022=\n\013source_type\030"
  "\002 \001(\0162(.ai.inworld.packets.TextEvent.Sou"
  "rceType\022\r\n\005final\030\003 \001(\010\022A\n\nmodel_info\030\004 \001"
  "(\0132\'.ai.inworld.packets.TextEvent.ModelI"
  "nfoB\004\210\210\'\001\032+\n\tModelInfo\022\017\n\007service\030\001 \001(\t\022"
  "\r\n\005model\030\002 \001(\t\"V\n\nSourceType\022\013\n\007UNKNOWN\020"
  "\000\022\022\n\016SPEECH_TO_TEXT\020\001\022\014\n\010TYPED_IN\020\002\022\r\n\tG"
  "ENERATED\020\003\022\n\n\006FILLER\020\004\"\232\007\n\014ControlEvent\022"
  "7\n\006action\030\001 \001(\0162\'.ai.inworld.packets.Con"
  "trolEvent.Action\022\023\n\013description\030\002 \001(\t\022(\n"
  "\007payload\030\003 \001(\0132\027.google.protobuf.Struct\022"
  "L\n\023conversation_update\030\004 \001(\0132-.ai.inworl"
  "d.packets.ConversationUpdatePayloadH\000\022J\n"
  "\022conversation_event\030\005 \001(\0132,.ai.inworld.p"
  "ackets.ConversationEventPayloadH\000\022K\n\023aud"
  "io_session_start\030\006 \001(\0132,.ai.inworld.pack"
  "ets.AudioSessionStartPayloadH\000\022F\n\024curren"
  "t_scene_status\030\007 \001(\0132&.ai.inworld.packet"
  "s.CurrentSceneStatusH\000\022P\n\025session_config"
  "uration\030\010 \001(\0132/.ai.inworld.packets.Sessi"
  "onConfigurationPayloadH\000\"\372\002\n\006Action\022\013\n\007U"
  "NKNOWN\020\000\022\027\n\023AUDIO_SESSION_START\020\001\022\025\n\021AUD"
  "IO_SESSION_END\020\002\022\023\n\017INTERACTION_END\020\003\022\026\n"
  "\022TTS_PLAYBACK_START\020\004\022\024\n\020TTS_PLAYBACK_EN"
  "D\020\005\022\025\n\021TTS_PLAYBACK_MUTE\020\006\022\027\n\023TTS_PLAYBA"
  "CK_UNMUTE\020\007\022\017\n\007WARNING\020\010\032\002\010\001\022\017\n\013SESSION_"
  "END\020\t\022\032\n\022CONVERSATION_START\020\n\032\002\010\001\022\027\n\023CON"
  "VERSATION_UPDATE\020\014\022\034\n\024CONVERSATION_START"
  "ED\020\r\032\002\010\001\022\026\n\022CONVERSATION_EVENT\020\016\022\030\n\024CURR"
  "ENT_SCENE_STATUS\020\017\022\031\n\025SESSION_CONFIGURAT"
  "ION\020\020B\024\n\022payload_structured\"\350\002\n\030AudioSes"
  "sionStartPayload\022I\n\004mode\030\001 \001(\0162;.ai.inwo"
  "rld.packets.AudioSessionStartPayload.Mic"
  "rophoneMode\022Z\n\022understanding_mode\030\002 \001(\0162"
  ">.ai.inworld.packets.AudioSessionStartPa"
  "yload.UnderstandingMode\"E\n\016MicrophoneMod"
  "e\022\017\n\013UNSPECIFIED\020\000\022\014\n\010OPEN_MIC\020\001\022\024\n\020EXPE"
  "CT_AUDIO_END\020\002\"^\n\021UnderstandingMode\022\"\n\036U"
  "NSPECIFIED_UNDERSTANDING_MODE\020\000\022\010\n\004FULL\020"
  "\001\022\033\n\027SPEECH_RECOGNITION_ONLY\020\002\"\037\n\nAudioC"
  "hunk\022\r\n\005chunk\030\001 \001(\014:\002\030\001\"\230\002\n\013CustomEvent\022"
  "\014\n\004name\030\001 \001(\t\022.\n\010playback\030\002 \001(\0162\034.ai.inw"
  "orld.packets.Playback\022=\n\nparameters\030\003 \003("
  "\0132).ai.inworld.packets.CustomEvent.Param"
  "eter\0222\n\004type\030\004 \001(\0162$.ai.inworld.packets."
  "CustomEvent.Type\032(\n\tParameter\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t\".\n\004Type\022\017\n\013UNSPECIFIE"
  "D\020\000\022\013\n\007TRIGGER\020\001\022\010\n\004TASK\020\002\"H\n\024CancelResp"
  "onsesEvent\022\026\n\016interaction_id\030\001 \001(\t\022\024\n\014ut"
  "terance_id\030\002 \003(\t:\002\030\001\"\243\004\n\014EmotionEvent\022\013\n"
  "\003joy\030\001 \001(\002\022\014\n\004fear\030\002 \001(\002\022\r\n\005trust\030\003 \001(\002\022"
  "\020\n\010surprise\030\004 \001(\002\022<\n\010behavior\030\005 \001(\0162*.ai"
  ".inworld.packets.EmotionEvent.SpaffCode\022"
  ";\n\010strength\030\006 \001(\0162).ai.inworld.packets.E"
  "motionEvent.Strength\"\234\002\n\tSpaffCode\022\013\n\007NE"
  "UTRAL\020\000\022\013\n\007DISGUST\020\001\022\014\n\010CONTEMPT\020\002\022\020\n\014BE"
  "LLIGERENCE\020\003\022\017\n\013DOMINEERING\020\004\022\r\n\tCRITICI"
  "SM\020\005\022\t\n\005ANGER\020\006\022\013\n\007TENSION\020\007\022\017\n\013TENSE_HU"
  "MOR\020\010\022\021\n\rDEFENSIVENESS\020\t\022\013\n\007WHINING\020\n\022\013\n"
  "\007SADNESS\020\013\022\020\n\014STONEWALLING\020\014\022\014\n\010INTEREST"
  "\020\r\022\016\n\nVALIDATION\020\016\022\r\n\tAFFECTION\020\017\022\t\n\005HUM"
  "OR\020\020\022\014\n\010SURPRISE\020\021\022\007\n\003JOY\020\022\"=\n\010Strength\022"
  "\017\n\013UNSPECIFIED\020\000\022\010\n\004WEAK\020\001\022\n\n\006STRONG\020\002\022\n"
  "\n\006NORMAL\020\003\"\372\003\n\tDataChunk\022\017\n\005chunk\030\001 \001(\014H"
  "\000\022\031\n\013duration_ms\030\003 \001(\003B\002\030\001H\000\0224\n\004type\030\002 \001"
  "(\0162&.ai.inworld.packets.DataChunk.DataTy"
  "pe\022J\n\027additional_phoneme_info\030\004 \003(\0132).ai"
  ".inworld.packets.AdditionalPhonemeInfo\022>"
  "\n\013audioFormat\030\005 \001(\0162).ai.inworld.packets"
  ".DataChunk.AudioFormat\"\220\001\n\010DataType\022\017\n\013U"
  "NSPECIFIED\020\000\022\t\n\005AUDIO\020\001\022\017\n\007SILENCE\020\003\032\002\010\001"
  "\022\t\n\005STATE\020\004\022\030\n\024NVIDIA_A2F_ANIMATION\020\005\022\037\n"
  "\033NVIDIA_A2F_ANIMATION_HEADER\020\006\022\013\n\007INSPEC"
  "T\020\007\"\004\010\002\020\002\"d\n\013AudioFormat\022\034\n\030UNSPECIFIED_"
  "AUDIO_FORMAT\020\000\022\r\n\tAUDIO_MP3\020\001\022\023\n\017AUDIO_P"
  "CM_16000\020\002\022\023\n\017AUDIO_PCM_22050\020\003B\006\n\004data\""
  "Y\n\025AdditionalPhonemeInfo\022\017\n\007phoneme\030\001 \001("
  "\t\022/\n\014start_offset\030\002 \001(\0132\031.google.protobu"
  "f.Duration\"\206\001\n\013ActionEvent\022=\n\017narrated_a"
  "ction\030\001 \001(\0132\".ai.inworld.packets.Narrate"
  "dActionH\000\022.\n\010playback\030\002 \001(\0162\034.ai.inworld"
  ".packets.PlaybackB\010\n\006action\"!\n\016NarratedA"
  "ction\022\017\n\007content\030\001 \001(\t\"\232\002\n\014RelationInfo\022"
  "K\n\016relation_state\030\001 \001(\01323.ai.inworld.pac"
  "kets.RelationInfo.RelationAttributes\022L\n\017"
  "relation_update\030\002 \001(\01323.ai.inworld.packe"
  "ts.RelationInfo.RelationAttributes\032o\n\022Re"
  "lationAttributes\022\r\n\005trust\030\001 \001(\005\022\017\n\007respe"
  "ct\030\002 \001(\005\022\020\n\010familiar\030\003 \001(\005\022\023\n\013flirtatiou"
  "s\030\004 \001(\005\022\022\n\nattraction\030\005 \001(\005\"\240\001\n\022LatencyR"
  "eportEvent\0227\n\tping_pong\030\001 \001(\0132\".ai.inwor"
  "ld.packets.PingPongReportH\000\022G\n\021perceived"
  "_latency\030\002 \001(\0132*.ai.inworld.packets.Perc"
  "eivedLatencyReportH\000B\010\n\006report\"\336\001\n\016PingP"
  "ongReport\0225\n\004type\030\001 \001(\0162\'.ai.inworld.pac"
  "kets.PingPongReport.Type\0224\n\016ping_packet_"
  "id\030\002 \001(\0132\034.ai.inworld.packets.PacketId\0222"
  "\n\016ping_timestamp\030\003 \001(\0132\032.google.protobuf"
  ".Timestamp\"+\n\004Type\022\017\n\013UNSPECIFIED\020\000\022\010\n\004P"
  "ING\020\001\022\010\n\004PONG\020\002\"\346\001\n\026PerceivedLatencyRepo"
  "rt\022G\n\tprecision\030\001 \001(\01624.ai.inworld.packe"
  "ts.PerceivedLatencyReport.Precision\022*\n\007l"
  "atency\030\002 \001(\0132\031.google.protobuf.Duration\""
  "W\n\tPrecision\022\017\n\013UNSPECIFIED\020\000\022\010\n\004FINE\020\001\022"
  "\r\n\tESTIMATED\020\002\022\020\n\014PUSH_TO_TALK\020\003\022\016\n\nNON_"
  "SPEECH\020\004\"\216\003\n\tLogsEvent\022\014\n\004text\030\001 \001(\t\0225\n\005"
  "level\030\002 \001(\0162&.ai.inworld.packets.LogsEve"
  "nt.LogLevel\022A\n\010metadata\030\003 \003(\0132+.ai.inwor"
  "ld.packets.LogsEvent.MetadataEntryB\002\030\001\0228"
  "\n\007details\030\004 \003(\0132\'.ai.inworld.packets.Log"
  "sEvent.LogDetail\032A\n\tLogDetail\022\014\n\004text\030\001 "
  "\001(\t\022&\n\006detail\030\002 \001(\0132\026.google.protobuf.Va"
  "lue\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"K\n\010LogLevel\022\017\n\013UNSPECIFIED\020"
  "\000\022\013\n\007WARNING\020\001\022\010\n\004INFO\020\002\022\t\n\005DEBUG\020\003\022\014\n\010I"
  "NTERNAL\020\004\"\341\003\n\rMutationEvent\022\?\n\020cancel_re"
  "sponses\030\001 \001(\0132#.ai.inworld.packets.Cance"
  "lResponsesH\000\022E\n\023regenerate_response\030\002 \001("
  "\0132&.ai.inworld.packets.RegenerateRespons"
  "eH\000\022;\n\016apply_response\030\003 \001(\0132!.ai.inworld"
  ".packets.ApplyResponseH\000\0223\n\nload_scene\030\004"
  " \001(\0132\035.ai.inworld.packets.LoadSceneH\000\022H\n"
  "\025modify_exact_response\030\005 \001(\0132\'.ai.inworl"
  "d.packets.ModifyExactResponseH\000\022=\n\017load_"
  "characters\030\006 \001(\0132\".ai.inworld.packets.Lo"
  "adCharactersH\000\022A\n\021unload_characters\030\007 \001("
  "\0132$.ai.inworld.packets.UnloadCharactersH"
  "\000B\n\n\010mutation\"\364\001\n\033SessionControlResponse"
  "Event\022;\n\014loaded_scene\030\001 \001(\0132\037.ai.inworld"
  ".packets.LoadedSceneB\002\030\001H\000\022E\n\021loaded_cha"
  "racters\030\002 \001(\0132$.ai.inworld.packets.Loade"
  "dCharactersB\002\030\001H\000\022E\n\017session_history\030\003 \001"
  "(\0132*.ai.inworld.packets.SessionHistoryRe"
  "sponseH\000B\n\n\010response\"\?\n\017CancelResponses\022"
  "\026\n\016interaction_id\030\001 \001(\t\022\024\n\014utterance_id\030"
  "\002 \003(\t\",\n\022RegenerateResponse\022\026\n\016interacti"
  "on_id\030\001 \001(\t\"\350\001\n\rApplyResponse\022/\n\tpacket_"
  "id\030\001 \001(\0132\034.ai.inworld.packets.PacketId\022P"
  "\n\023apply_response_type\030\002 \001(\01623.ai.inworld"
  ".packets.ApplyResponse.ApplyResponseType"
  "\"T\n\021ApplyResponseType\022\037\n\033APPLY_RESPONSE_"
  "TYPE_DEFAULT\020\000\022\036\n\032APPLY_RESPONSE_TYPE_CO"
  "MMIT\020\001\"1\n\tLoadScene\022\014\n\004name\030\001 \001(\t\022\026\n\016is_"
  "reset_scene\030\002 \001(\010\"\207\001\n\013LoadedScene\022)\n\006age"
  "nts\030\001 \003(\0132\031.ai.inworld.packets.Agent\022\022\n\n"
  "scene_name\030\002 \001(\t\022\031\n\021scene_description\030\003 "
  "\001(\t\022\032\n\022scene_display_name\030\004 \001(\t:\002\030\001\"\257\001\n\016"
  "LoadCharacters\022>\n\004name\030\001 \003(\01320.ai.inworl"
  "d.packets.LoadCharacters.CharacterName\032]"
  "\n\rCharacterName\022\014\n\004name\030\001 \001(\t\022>\n\rlanguag"
  "e_code\030\002 \001(\0162\'.ai.inworld.language_codes"
  ".LanguageCode\"\214\001\n\020LoadedCharacters\022)\n\006ag"
  "ents\030\001 \003(\0132\031.ai.inworld.packets.Agent\022\022\n"
  "\nscene_name\030\002 \001(\t\022\031\n\021scene_description\030\003"
  " \001(\t\022\032\n\022scene_display_name\030\004 \001(\t:\002\030\001\"=\n\020"
  "UnloadCharacters\022)\n\006agents\030\001 \003(\0132\031.ai.in"
  "world.packets.Agent\"\212\001\n\022CurrentSceneStat"
  "us\022)\n\006agents\030\001 \003(\0132\031.ai.inworld.packets."
  "Agent\022\022\n\nscene_name\030\002 \001(\t\022\031\n\021scene_descr"
  "iption\030\003 \001(\t\022\032\n\022scene_display_name\030\004 \001(\t"
  "\"A\n\023ModifyExactResponse\022\026\n\016interaction_i"
  "d\030\001 \001(\t\022\022\n\nexact_text\030\002 \001(\t\"\235\001\n\024LoadScen"
  "eOutputEvent\022>\n\006agents\030\001 \003(\0132..ai.inworl"
  "d.packets.LoadSceneOutputEvent.Agent\032A\n\005"
  "Agent\022\020\n\010agent_id\030\001 \001(\t\022\022\n\nbrain_name\030\002 "
  "\001(\t\022\022\n\ngiven_name\030\003 \001(\t:\002\030\001\"\241\002\n\005Agent\022\020\n"
  "\010agent_id\030\001 \001(\t\022\022\n\nbrain_name\030\002 \001(\t\022\022\n\ng"
  "iven_name\030\003 \001(\t\022C\n\020character_assets\030\004 \001("
  "\0132).ai.inworld.packets.Agent.CharacterAs"
  "sets\032\230\001\n\017CharacterAssets\022\025\n\rrpm_model_ur"
  "i\030\001 \001(\t\022\036\n\026rpm_image_uri_portrait\030\002 \001(\t\022"
  "\035\n\025rpm_image_uri_posture\030\003 \001(\t\022\022\n\navatar"
  "_img\030\004 \001(\t\022\033\n\023avatar_img_original\030\005 \001(\t\""
  "N\n\016DebugInfoEvent\0224\n\010relation\030\001 \001(\0132 .ai"
  ".inworld.packets.RelationInfoH\000B\006\n\004info\""
  "\354\004\n\023SessionControlEvent\022V\n\025session_confi"
  "guration\030\001 \001(\01325.ai.inworld.engine.confi"
  "guration.SessionConfigurationH\000\022P\n\022user_"
  "configuration\030\002 \001(\01322.ai.inworld.engine."
  "configuration.UserConfigurationH\000\022T\n\024cli"
  "ent_configuration\030\003 \001(\01324.ai.inworld.eng"
  "ine.configuration.ClientConfigurationH\000\022"
  "`\n\032capabilities_configuration\030\004 \001(\0132:.ai"
  ".inworld.engine.configuration.Capabiliti"
  "esConfigurationH\000\0228\n\014continuation\030\005 \001(\0132"
  " .ai.inworld.packets.ContinuationH\000\022L\n\027s"
  "ession_history_request\030\006 \001(\0132).ai.inworl"
  "d.packets.SessionHistoryRequestH\000\022X\n\035ses"
  "sion_configuration_payload\030\007 \001(\0132/.ai.in"
  "world.packets.SessionConfigurationPayloa"
  "dH\000B\021\n\017session_control\"\257\003\n\033SessionConfig"
  "urationPayload\022T\n\025session_configuration\030"
  "\001 \001(\01325.ai.inworld.engine.configuration."
  "SessionConfiguration\022N\n\022user_configurati"
  "on\030\002 \001(\01322.ai.inworld.engine.configurati"
  "on.UserConfiguration\022R\n\024client_configura"
  "tion\030\003 \001(\01324.ai.inworld.engine.configura"
  "tion.ClientConfiguration\022^\n\032capabilities"
  "_configuration\030\004 \001(\0132:.ai.inworld.engine"
  ".configuration.CapabilitiesConfiguration"
  "\0226\n\014continuation\030\005 \001(\0132 .ai.inworld.pack"
  "ets.Continuation\"\322\003\n\014Continuation\022L\n\021con"
  "tinuation_info\030\001 \001(\01321.ai.inworld.packet"
  "s.Continuation.ContinuationInfo\022L\n\021conti"
  "nuation_type\030\002 \001(\01621.ai.inworld.packets."
  "Continuation.ContinuationType\0229\n\016dialog_"
  "history\030\003 \001(\0132!.ai.inworld.packets.Dialo"
  "gHistory\022\036\n\026externally_saved_state\030\004 \001(\014"
  "\032C\n\020ContinuationInfo\022/\n\013passed_time\030\001 \001("
  "\0132\032.google.protobuf.Timestamp\"\205\001\n\020Contin"
  "uationType\022\035\n\031CONTINUATION_TYPE_UNKNOWN\020"
  "\000\022,\n(CONTINUATION_TYPE_EXTERNALLY_SAVED_"
  "STATE\020\001\022$\n CONTINUATION_TYPE_DIALOG_HIST"
  "ORY\020\002\"\226\001\n\rDialogHistory\022>\n\007history\030\001 \003(\013"
  "2-.ai.inworld.packets.DialogHistory.Hist"
  "oryItem\032E\n\013HistoryItem\022(\n\005actor\030\001 \001(\0132\031."
  "ai.inworld.packets.Actor\022\014\n\004text\030\002 \001(\t\"\231"
  "\001\n\tRelations\022(\n\005actor\030\001 \001(\0132\031.ai.inworld"
  ".packets.Actor\0229\n\trelations\030\002 \003(\0132&.ai.i"
  "nworld.packets.Relations.Relation\032\'\n\010Rel"
  "ation\022\014\n\004type\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\"\027\n\025Se"
  "ssionHistoryRequest\"\352\001\n\026SessionHistoryRe"
  "sponse\022\\\n\025session_history_items\030\001 \003(\0132=."
  "ai.inworld.packets.SessionHistoryRespons"
  "e.SessionHistoryItem\032r\n\022SessionHistoryIt"
  "em\022(\n\005agent\030\001 \001(\0132\031.ai.inworld.packets.A"
  "gent\0222\n\007packets\030\002 \003(\0132!.ai.inworld.packe"
  "ts.InworldPacket\"L\n\031ConversationUpdatePa"
  "yload\022/\n\014participants\030\001 \003(\0132\031.ai.inworld"
  ".packets.Actor\"\360\001\n\030ConversationEventPayl"
  "oad\022/\n\014participants\030\001 \003(\0132\031.ai.inworld.p"
  "ackets.Actor\022V\n\nevent_type\030\002 \001(\0162B.ai.in"
  "world.packets.ConversationEventPayload.C"
  "onversationEventType\"K\n\025ConversationEven"
  "tType\022\013\n\007UNKNOWN\020\000\022\013\n\007STARTED\020\001\022\013\n\007UPDAT"
  "ED\020\002\022\013\n\007EVICTED\020\003\":\n\024OperationStatusEven"
  "t\022\"\n\006status\030\001 \001(\0132\022.google.rpc.Status*P\n"
  "\010Playback\022\017\n\013UNSPECIFIED\020\000\022\017\n\013INTERACTIO"
  "N\020\001\022\023\n\017INTERACTION_END\020\002\022\r\n\tUTTERANCE\020\003B"
  "\210\001\n\022ai.inworld.packetsB\026InworldPacketsPr"
  "otocolZKgithub.com/inworld-ai/inworld-pr"
  "oto-golang/src/go/ai/inworld/engine/v1al"
  "pha\252\002\014Inworld.Grpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto_deps[8] = {
  &::descriptor_table_ai_2finworld_2fengine_2fconfiguration_2fconfiguration_2eproto,
  &::descriptor_table_ai_2finworld_2flanguage_5fcodes_2flanguage_5fcodes_2eproto,
  &::descriptor_table_ai_2finworld_2foptions_2foptions_2eproto,
  &::descriptor_table_ai_2finworld_2fpackets_2fentities_2fentities_5fpackets_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto_sccs[54] = {
  &scc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_LogsEvent_MetadataEntry_DoNotUse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Relations_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base,
  &scc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto = {
  false, false, descriptor_table_protodef_ai_2finworld_2fpackets_2fpackets_2eproto, "ai/inworld/packets/packets.proto", 11706,
  &descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto_once, descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto_sccs, descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto_deps, 54, 8,
  schemas, file_default_instances, TableStruct_ai_2finworld_2fpackets_2fpackets_2eproto::offsets,
  file_level_metadata_ai_2finworld_2fpackets_2fpackets_2eproto, 57, file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto, file_level_service_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ai_2finworld_2fpackets_2fpackets_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto)), true);
namespace ai {
namespace inworld {
namespace packets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Actor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[0];
}
bool Actor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Actor_Type Actor::UNKNOWN;
constexpr Actor_Type Actor::PLAYER;
constexpr Actor_Type Actor::AGENT;
constexpr Actor_Type Actor::WORLD;
constexpr Actor_Type Actor::Type_MIN;
constexpr Actor_Type Actor::Type_MAX;
constexpr int Actor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextEvent_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[1];
}
bool TextEvent_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextEvent_SourceType TextEvent::UNKNOWN;
constexpr TextEvent_SourceType TextEvent::SPEECH_TO_TEXT;
constexpr TextEvent_SourceType TextEvent::TYPED_IN;
constexpr TextEvent_SourceType TextEvent::GENERATED;
constexpr TextEvent_SourceType TextEvent::FILLER;
constexpr TextEvent_SourceType TextEvent::SourceType_MIN;
constexpr TextEvent_SourceType TextEvent::SourceType_MAX;
constexpr int TextEvent::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlEvent_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[2];
}
bool ControlEvent_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlEvent_Action ControlEvent::UNKNOWN;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_START;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_END;
constexpr ControlEvent_Action ControlEvent::INTERACTION_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_START;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_MUTE;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_UNMUTE;
constexpr ControlEvent_Action ControlEvent::WARNING;
constexpr ControlEvent_Action ControlEvent::SESSION_END;
constexpr ControlEvent_Action ControlEvent::CONVERSATION_START;
constexpr ControlEvent_Action ControlEvent::CONVERSATION_UPDATE;
constexpr ControlEvent_Action ControlEvent::CONVERSATION_STARTED;
constexpr ControlEvent_Action ControlEvent::CONVERSATION_EVENT;
constexpr ControlEvent_Action ControlEvent::CURRENT_SCENE_STATUS;
constexpr ControlEvent_Action ControlEvent::SESSION_CONFIGURATION;
constexpr ControlEvent_Action ControlEvent::Action_MIN;
constexpr ControlEvent_Action ControlEvent::Action_MAX;
constexpr int ControlEvent::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioSessionStartPayload_MicrophoneMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[3];
}
bool AudioSessionStartPayload_MicrophoneMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioSessionStartPayload_MicrophoneMode AudioSessionStartPayload::UNSPECIFIED;
constexpr AudioSessionStartPayload_MicrophoneMode AudioSessionStartPayload::OPEN_MIC;
constexpr AudioSessionStartPayload_MicrophoneMode AudioSessionStartPayload::EXPECT_AUDIO_END;
constexpr AudioSessionStartPayload_MicrophoneMode AudioSessionStartPayload::MicrophoneMode_MIN;
constexpr AudioSessionStartPayload_MicrophoneMode AudioSessionStartPayload::MicrophoneMode_MAX;
constexpr int AudioSessionStartPayload::MicrophoneMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioSessionStartPayload_UnderstandingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[4];
}
bool AudioSessionStartPayload_UnderstandingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioSessionStartPayload_UnderstandingMode AudioSessionStartPayload::UNSPECIFIED_UNDERSTANDING_MODE;
constexpr AudioSessionStartPayload_UnderstandingMode AudioSessionStartPayload::FULL;
constexpr AudioSessionStartPayload_UnderstandingMode AudioSessionStartPayload::SPEECH_RECOGNITION_ONLY;
constexpr AudioSessionStartPayload_UnderstandingMode AudioSessionStartPayload::UnderstandingMode_MIN;
constexpr AudioSessionStartPayload_UnderstandingMode AudioSessionStartPayload::UnderstandingMode_MAX;
constexpr int AudioSessionStartPayload::UnderstandingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[5];
}
bool CustomEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CustomEvent_Type CustomEvent::UNSPECIFIED;
constexpr CustomEvent_Type CustomEvent::TRIGGER;
constexpr CustomEvent_Type CustomEvent::TASK;
constexpr CustomEvent_Type CustomEvent::Type_MIN;
constexpr CustomEvent_Type CustomEvent::Type_MAX;
constexpr int CustomEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_SpaffCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[6];
}
bool EmotionEvent_SpaffCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmotionEvent_SpaffCode EmotionEvent::NEUTRAL;
constexpr EmotionEvent_SpaffCode EmotionEvent::DISGUST;
constexpr EmotionEvent_SpaffCode EmotionEvent::CONTEMPT;
constexpr EmotionEvent_SpaffCode EmotionEvent::BELLIGERENCE;
constexpr EmotionEvent_SpaffCode EmotionEvent::DOMINEERING;
constexpr EmotionEvent_SpaffCode EmotionEvent::CRITICISM;
constexpr EmotionEvent_SpaffCode EmotionEvent::ANGER;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSION;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSE_HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::DEFENSIVENESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::WHINING;
constexpr EmotionEvent_SpaffCode EmotionEvent::SADNESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::STONEWALLING;
constexpr EmotionEvent_SpaffCode EmotionEvent::INTEREST;
constexpr EmotionEvent_SpaffCode EmotionEvent::VALIDATION;
constexpr EmotionEvent_SpaffCode EmotionEvent::AFFECTION;
constexpr EmotionEvent_SpaffCode EmotionEvent::HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::SURPRISE;
constexpr EmotionEvent_SpaffCode EmotionEvent::JOY;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MIN;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MAX;
constexpr int EmotionEvent::SpaffCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_Strength_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[7];
}
bool EmotionEvent_Strength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmotionEvent_Strength EmotionEvent::UNSPECIFIED;
constexpr EmotionEvent_Strength EmotionEvent::WEAK;
constexpr EmotionEvent_Strength EmotionEvent::STRONG;
constexpr EmotionEvent_Strength EmotionEvent::NORMAL;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MIN;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MAX;
constexpr int EmotionEvent::Strength_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChunk_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[8];
}
bool DataChunk_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataChunk_DataType DataChunk::UNSPECIFIED;
constexpr DataChunk_DataType DataChunk::AUDIO;
constexpr DataChunk_DataType DataChunk::SILENCE;
constexpr DataChunk_DataType DataChunk::STATE;
constexpr DataChunk_DataType DataChunk::NVIDIA_A2F_ANIMATION;
constexpr DataChunk_DataType DataChunk::NVIDIA_A2F_ANIMATION_HEADER;
constexpr DataChunk_DataType DataChunk::INSPECT;
constexpr DataChunk_DataType DataChunk::DataType_MIN;
constexpr DataChunk_DataType DataChunk::DataType_MAX;
constexpr int DataChunk::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChunk_AudioFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[9];
}
bool DataChunk_AudioFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataChunk_AudioFormat DataChunk::UNSPECIFIED_AUDIO_FORMAT;
constexpr DataChunk_AudioFormat DataChunk::AUDIO_MP3;
constexpr DataChunk_AudioFormat DataChunk::AUDIO_PCM_16000;
constexpr DataChunk_AudioFormat DataChunk::AUDIO_PCM_22050;
constexpr DataChunk_AudioFormat DataChunk::AudioFormat_MIN;
constexpr DataChunk_AudioFormat DataChunk::AudioFormat_MAX;
constexpr int DataChunk::AudioFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PingPongReport_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[10];
}
bool PingPongReport_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PingPongReport_Type PingPongReport::UNSPECIFIED;
constexpr PingPongReport_Type PingPongReport::PING;
constexpr PingPongReport_Type PingPongReport::PONG;
constexpr PingPongReport_Type PingPongReport::Type_MIN;
constexpr PingPongReport_Type PingPongReport::Type_MAX;
constexpr int PingPongReport::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceivedLatencyReport_Precision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[11];
}
bool PerceivedLatencyReport_Precision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::UNSPECIFIED;
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::FINE;
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::ESTIMATED;
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::PUSH_TO_TALK;
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::NON_SPEECH;
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::Precision_MIN;
constexpr PerceivedLatencyReport_Precision PerceivedLatencyReport::Precision_MAX;
constexpr int PerceivedLatencyReport::Precision_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogsEvent_LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[12];
}
bool LogsEvent_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogsEvent_LogLevel LogsEvent::UNSPECIFIED;
constexpr LogsEvent_LogLevel LogsEvent::WARNING;
constexpr LogsEvent_LogLevel LogsEvent::INFO;
constexpr LogsEvent_LogLevel LogsEvent::DEBUG;
constexpr LogsEvent_LogLevel LogsEvent::INTERNAL;
constexpr LogsEvent_LogLevel LogsEvent::LogLevel_MIN;
constexpr LogsEvent_LogLevel LogsEvent::LogLevel_MAX;
constexpr int LogsEvent::LogLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplyResponse_ApplyResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[13];
}
bool ApplyResponse_ApplyResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApplyResponse_ApplyResponseType ApplyResponse::APPLY_RESPONSE_TYPE_DEFAULT;
constexpr ApplyResponse_ApplyResponseType ApplyResponse::APPLY_RESPONSE_TYPE_COMMIT;
constexpr ApplyResponse_ApplyResponseType ApplyResponse::ApplyResponseType_MIN;
constexpr ApplyResponse_ApplyResponseType ApplyResponse::ApplyResponseType_MAX;
constexpr int ApplyResponse::ApplyResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Continuation_ContinuationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[14];
}
bool Continuation_ContinuationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Continuation_ContinuationType Continuation::CONTINUATION_TYPE_UNKNOWN;
constexpr Continuation_ContinuationType Continuation::CONTINUATION_TYPE_EXTERNALLY_SAVED_STATE;
constexpr Continuation_ContinuationType Continuation::CONTINUATION_TYPE_DIALOG_HISTORY;
constexpr Continuation_ContinuationType Continuation::ContinuationType_MIN;
constexpr Continuation_ContinuationType Continuation::ContinuationType_MAX;
constexpr int Continuation::ContinuationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConversationEventPayload_ConversationEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[15];
}
bool ConversationEventPayload_ConversationEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConversationEventPayload_ConversationEventType ConversationEventPayload::UNKNOWN;
constexpr ConversationEventPayload_ConversationEventType ConversationEventPayload::STARTED;
constexpr ConversationEventPayload_ConversationEventType ConversationEventPayload::UPDATED;
constexpr ConversationEventPayload_ConversationEventType ConversationEventPayload::EVICTED;
constexpr ConversationEventPayload_ConversationEventType ConversationEventPayload::ConversationEventType_MIN;
constexpr ConversationEventPayload_ConversationEventType ConversationEventPayload::ConversationEventType_MAX;
constexpr int ConversationEventPayload::ConversationEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Playback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fpackets_2fpackets_2eproto[16];
}
bool Playback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Actor::_Internal {
 public:
};

Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Actor)
}

void Actor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Actor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Actor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Actor::ArenaDtor(void* object) {
  Actor* _this = reinterpret_cast< Actor* >(object);
  (void)_this;
}
void Actor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Actor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Actor& Actor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Actor_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Actor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::Actor_Type>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Actor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Actor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Actor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Actor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Actor)
  return target;
}

size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Actor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Actor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Actor)
  GOOGLE_DCHECK_NE(&from, this);
  const Actor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Actor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Actor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Actor)
    MergeFrom(*source);
  }
}

void Actor::MergeFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Actor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Actor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Routing::_Internal {
 public:
  static const ::ai::inworld::packets::Actor& source(const Routing* msg);
  static const ::ai::inworld::packets::Actor& target(const Routing* msg);
};

const ::ai::inworld::packets::Actor&
Routing::_Internal::source(const Routing* msg) {
  return *msg->source_;
}
const ::ai::inworld::packets::Actor&
Routing::_Internal::target(const Routing* msg) {
  return *msg->target_;
}
Routing::Routing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Routing)
}
Routing::Routing(const Routing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::ai::inworld::packets::Actor(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::ai::inworld::packets::Actor(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Routing)
}

void Routing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&source_)) + sizeof(target_));
}

Routing::~Routing() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Routing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Routing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete target_;
}

void Routing::ArenaDtor(void* object) {
  Routing* _this = reinterpret_cast< Routing* >(object);
  (void)_this;
}
void Routing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Routing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Routing& Routing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Routing_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Routing::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Routing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Actor target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.Actor targets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Routing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Routing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  // repeated .ai.inworld.packets.Actor targets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_targets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Routing)
  return target;
}

size_t Routing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Routing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Actor targets = 3;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.Actor source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Routing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Routing)
  GOOGLE_DCHECK_NE(&from, this);
  const Routing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Routing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Routing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Routing)
    MergeFrom(*source);
  }
}

void Routing::MergeFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Routing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.has_source()) {
    _internal_mutable_source()->::ai::inworld::packets::Actor::MergeFrom(from._internal_source());
  }
  if (from.has_target()) {
    _internal_mutable_target()->::ai::inworld::packets::Actor::MergeFrom(from._internal_target());
  }
}

void Routing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Routing::CopyFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routing::IsInitialized() const {
  return true;
}

void Routing::InternalSwap(Routing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Routing, target_)
      + sizeof(Routing::target_)
      - PROTOBUF_FIELD_OFFSET(Routing, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Routing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PacketId::_Internal {
 public:
};

PacketId::PacketId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.PacketId)
}
PacketId::PacketId(const PacketId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packet_id().empty()) {
    packet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packet_id(), 
      GetArena());
  }
  utterance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_utterance_id().empty()) {
    utterance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_utterance_id(), 
      GetArena());
  }
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_correlation_id().empty()) {
    correlation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_correlation_id(), 
      GetArena());
  }
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conversation_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.PacketId)
}

void PacketId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  packet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utterance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PacketId::~PacketId() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.PacketId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packet_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utterance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketId::ArenaDtor(void* object) {
  PacketId* _this = reinterpret_cast< PacketId* >(object);
  (void)_this;
}
void PacketId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PacketId& PacketId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PacketId_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void PacketId::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.PacketId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packet_id_.ClearToEmpty();
  utterance_id_.ClearToEmpty();
  interaction_id_.ClearToEmpty();
  correlation_id_.ClearToEmpty();
  conversation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_packet_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.packet_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_utterance_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.utterance_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string correlation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.correlation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string conversation_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.conversation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.PacketId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_id = 1;
  if (this->packet_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packet_id().data(), static_cast<int>(this->_internal_packet_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.packet_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packet_id(), target);
  }

  // string utterance_id = 2;
  if (this->utterance_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utterance_id().data(), static_cast<int>(this->_internal_utterance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.utterance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utterance_id(), target);
  }

  // string interaction_id = 3;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.interaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interaction_id(), target);
  }

  // string correlation_id = 4;
  if (this->correlation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.correlation_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_correlation_id(), target);
  }

  // string conversation_id = 5;
  if (this->conversation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.conversation_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_conversation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.PacketId)
  return target;
}

size_t PacketId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.PacketId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packet_id = 1;
  if (this->packet_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packet_id());
  }

  // string utterance_id = 2;
  if (this->utterance_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utterance_id());
  }

  // string interaction_id = 3;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string correlation_id = 4;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  // string conversation_id = 5;
  if (this->conversation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.PacketId)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.PacketId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.PacketId)
    MergeFrom(*source);
  }
}

void PacketId::MergeFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.PacketId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packet_id().size() > 0) {
    _internal_set_packet_id(from._internal_packet_id());
  }
  if (from.utterance_id().size() > 0) {
    _internal_set_utterance_id(from._internal_utterance_id());
  }
  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
  if (from.correlation_id().size() > 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from.conversation_id().size() > 0) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
}

void PacketId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketId::CopyFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketId::IsInitialized() const {
  return true;
}

void PacketId::InternalSwap(PacketId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packet_id_.Swap(&other->packet_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  utterance_id_.Swap(&other->utterance_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  correlation_id_.Swap(&other->correlation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conversation_id_.Swap(&other->conversation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InworldPacket::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const InworldPacket* msg);
  static const ::ai::inworld::packets::Routing& routing(const InworldPacket* msg);
  static const ::ai::inworld::packets::PacketId& packet_id(const InworldPacket* msg);
  static const ::ai::inworld::packets::TextEvent& text(const InworldPacket* msg);
  static const ::ai::inworld::packets::ControlEvent& control(const InworldPacket* msg);
  static const ::ai::inworld::packets::AudioChunk& audio_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::CustomEvent& custom(const InworldPacket* msg);
  static const ::ai::inworld::packets::CancelResponsesEvent& cancelresponses(const InworldPacket* msg);
  static const ::ai::inworld::packets::EmotionEvent& emotion(const InworldPacket* msg);
  static const ::ai::inworld::packets::DataChunk& data_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::ActionEvent& action(const InworldPacket* msg);
  static const ::ai::inworld::packets::MutationEvent& mutation(const InworldPacket* msg);
  static const ::ai::inworld::packets::LoadSceneOutputEvent& load_scene_output(const InworldPacket* msg);
  static const ::ai::inworld::packets::DebugInfoEvent& debug_info(const InworldPacket* msg);
  static const ::ai::inworld::packets::SessionControlEvent& session_control(const InworldPacket* msg);
  static const ::ai::inworld::packets::SessionControlResponseEvent& session_control_response(const InworldPacket* msg);
  static const ::ai::inworld::packets::LatencyReportEvent& latency_report(const InworldPacket* msg);
  static const ::ai::inworld::packets::OperationStatusEvent& operation_status(const InworldPacket* msg);
  static const ::ai::inworld::packets::entities::ItemsOperationEvent& entities_items_operation(const InworldPacket* msg);
  static const ::ai::inworld::packets::LogsEvent& log(const InworldPacket* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
InworldPacket::_Internal::timestamp(const InworldPacket* msg) {
  return *msg->timestamp_;
}
const ::ai::inworld::packets::Routing&
InworldPacket::_Internal::routing(const InworldPacket* msg) {
  return *msg->routing_;
}
const ::ai::inworld::packets::PacketId&
InworldPacket::_Internal::packet_id(const InworldPacket* msg) {
  return *msg->packet_id_;
}
const ::ai::inworld::packets::TextEvent&
InworldPacket::_Internal::text(const InworldPacket* msg) {
  return *msg->packet_.text_;
}
const ::ai::inworld::packets::ControlEvent&
InworldPacket::_Internal::control(const InworldPacket* msg) {
  return *msg->packet_.control_;
}
const ::ai::inworld::packets::AudioChunk&
InworldPacket::_Internal::audio_chunk(const InworldPacket* msg) {
  return *msg->packet_.audio_chunk_;
}
const ::ai::inworld::packets::CustomEvent&
InworldPacket::_Internal::custom(const InworldPacket* msg) {
  return *msg->packet_.custom_;
}
const ::ai::inworld::packets::CancelResponsesEvent&
InworldPacket::_Internal::cancelresponses(const InworldPacket* msg) {
  return *msg->packet_.cancelresponses_;
}
const ::ai::inworld::packets::EmotionEvent&
InworldPacket::_Internal::emotion(const InworldPacket* msg) {
  return *msg->packet_.emotion_;
}
const ::ai::inworld::packets::DataChunk&
InworldPacket::_Internal::data_chunk(const InworldPacket* msg) {
  return *msg->packet_.data_chunk_;
}
const ::ai::inworld::packets::ActionEvent&
InworldPacket::_Internal::action(const InworldPacket* msg) {
  return *msg->packet_.action_;
}
const ::ai::inworld::packets::MutationEvent&
InworldPacket::_Internal::mutation(const InworldPacket* msg) {
  return *msg->packet_.mutation_;
}
const ::ai::inworld::packets::LoadSceneOutputEvent&
InworldPacket::_Internal::load_scene_output(const InworldPacket* msg) {
  return *msg->packet_.load_scene_output_;
}
const ::ai::inworld::packets::DebugInfoEvent&
InworldPacket::_Internal::debug_info(const InworldPacket* msg) {
  return *msg->packet_.debug_info_;
}
const ::ai::inworld::packets::SessionControlEvent&
InworldPacket::_Internal::session_control(const InworldPacket* msg) {
  return *msg->packet_.session_control_;
}
const ::ai::inworld::packets::SessionControlResponseEvent&
InworldPacket::_Internal::session_control_response(const InworldPacket* msg) {
  return *msg->packet_.session_control_response_;
}
const ::ai::inworld::packets::LatencyReportEvent&
InworldPacket::_Internal::latency_report(const InworldPacket* msg) {
  return *msg->packet_.latency_report_;
}
const ::ai::inworld::packets::OperationStatusEvent&
InworldPacket::_Internal::operation_status(const InworldPacket* msg) {
  return *msg->packet_.operation_status_;
}
const ::ai::inworld::packets::entities::ItemsOperationEvent&
InworldPacket::_Internal::entities_items_operation(const InworldPacket* msg) {
  return *msg->packet_.entities_items_operation_;
}
const ::ai::inworld::packets::LogsEvent&
InworldPacket::_Internal::log(const InworldPacket* msg) {
  return *msg->packet_.log_;
}
void InworldPacket::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void InworldPacket::set_allocated_text(::ai::inworld::packets::TextEvent* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    packet_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.text)
}
void InworldPacket::set_allocated_control(::ai::inworld::packets::ControlEvent* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    set_has_control();
    packet_.control_ = control;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.control)
}
void InworldPacket::set_allocated_audio_chunk(::ai::inworld::packets::AudioChunk* audio_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (audio_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_chunk);
    if (message_arena != submessage_arena) {
      audio_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_chunk, submessage_arena);
    }
    set_has_audio_chunk();
    packet_.audio_chunk_ = audio_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.audio_chunk)
}
void InworldPacket::set_allocated_custom(::ai::inworld::packets::CustomEvent* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    packet_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.custom)
}
void InworldPacket::set_allocated_cancelresponses(::ai::inworld::packets::CancelResponsesEvent* cancelresponses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (cancelresponses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancelresponses);
    if (message_arena != submessage_arena) {
      cancelresponses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelresponses, submessage_arena);
    }
    set_has_cancelresponses();
    packet_.cancelresponses_ = cancelresponses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.cancelResponses)
}
void InworldPacket::set_allocated_emotion(::ai::inworld::packets::EmotionEvent* emotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (emotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emotion);
    if (message_arena != submessage_arena) {
      emotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotion, submessage_arena);
    }
    set_has_emotion();
    packet_.emotion_ = emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.emotion)
}
void InworldPacket::set_allocated_data_chunk(::ai::inworld::packets::DataChunk* data_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (data_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_chunk);
    if (message_arena != submessage_arena) {
      data_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_chunk, submessage_arena);
    }
    set_has_data_chunk();
    packet_.data_chunk_ = data_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.data_chunk)
}
void InworldPacket::set_allocated_action(::ai::inworld::packets::ActionEvent* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    packet_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.action)
}
void InworldPacket::set_allocated_mutation(::ai::inworld::packets::MutationEvent* mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mutation);
    if (message_arena != submessage_arena) {
      mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation, submessage_arena);
    }
    set_has_mutation();
    packet_.mutation_ = mutation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.mutation)
}
void InworldPacket::set_allocated_load_scene_output(::ai::inworld::packets::LoadSceneOutputEvent* load_scene_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (load_scene_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_scene_output);
    if (message_arena != submessage_arena) {
      load_scene_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_scene_output, submessage_arena);
    }
    set_has_load_scene_output();
    packet_.load_scene_output_ = load_scene_output;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.load_scene_output)
}
void InworldPacket::set_allocated_debug_info(::ai::inworld::packets::DebugInfoEvent* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug_info);
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    set_has_debug_info();
    packet_.debug_info_ = debug_info;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.debug_info)
}
void InworldPacket::set_allocated_session_control(::ai::inworld::packets::SessionControlEvent* session_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (session_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_control);
    if (message_arena != submessage_arena) {
      session_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_control, submessage_arena);
    }
    set_has_session_control();
    packet_.session_control_ = session_control;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.session_control)
}
void InworldPacket::set_allocated_session_control_response(::ai::inworld::packets::SessionControlResponseEvent* session_control_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (session_control_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_control_response);
    if (message_arena != submessage_arena) {
      session_control_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_control_response, submessage_arena);
    }
    set_has_session_control_response();
    packet_.session_control_response_ = session_control_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.session_control_response)
}
void InworldPacket::set_allocated_latency_report(::ai::inworld::packets::LatencyReportEvent* latency_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (latency_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latency_report);
    if (message_arena != submessage_arena) {
      latency_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency_report, submessage_arena);
    }
    set_has_latency_report();
    packet_.latency_report_ = latency_report;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.latency_report)
}
void InworldPacket::set_allocated_operation_status(::ai::inworld::packets::OperationStatusEvent* operation_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (operation_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(operation_status);
    if (message_arena != submessage_arena) {
      operation_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_status, submessage_arena);
    }
    set_has_operation_status();
    packet_.operation_status_ = operation_status;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.operation_status)
}
void InworldPacket::set_allocated_entities_items_operation(::ai::inworld::packets::entities::ItemsOperationEvent* entities_items_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (entities_items_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entities_items_operation)->GetArena();
    if (message_arena != submessage_arena) {
      entities_items_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entities_items_operation, submessage_arena);
    }
    set_has_entities_items_operation();
    packet_.entities_items_operation_ = entities_items_operation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.entities_items_operation)
}
void InworldPacket::clear_entities_items_operation() {
  if (_internal_has_entities_items_operation()) {
    if (GetArena() == nullptr) {
      delete packet_.entities_items_operation_;
    }
    clear_has_packet();
  }
}
void InworldPacket::set_allocated_log(::ai::inworld::packets::LogsEvent* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    set_has_log();
    packet_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.log)
}
InworldPacket::InworldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.InworldPacket)
}
InworldPacket::InworldPacket(const InworldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_routing()) {
    routing_ = new ::ai::inworld::packets::Routing(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  if (from._internal_has_packet_id()) {
    packet_id_ = new ::ai::inworld::packets::PacketId(*from.packet_id_);
  } else {
    packet_id_ = nullptr;
  }
  clear_has_packet();
  switch (from.packet_case()) {
    case kText: {
      _internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(from._internal_text());
      break;
    }
    case kControl: {
      _internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(from._internal_control());
      break;
    }
    case kAudioChunk: {
      _internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(from._internal_audio_chunk());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(from._internal_data_chunk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::ai::inworld::packets::ActionEvent::MergeFrom(from._internal_action());
      break;
    }
    case kMutation: {
      _internal_mutable_mutation()->::ai::inworld::packets::MutationEvent::MergeFrom(from._internal_mutation());
      break;
    }
    case kLoadSceneOutput: {
      _internal_mutable_load_scene_output()->::ai::inworld::packets::LoadSceneOutputEvent::MergeFrom(from._internal_load_scene_output());
      break;
    }
    case kDebugInfo: {
      _internal_mutable_debug_info()->::ai::inworld::packets::DebugInfoEvent::MergeFrom(from._internal_debug_info());
      break;
    }
    case kSessionControl: {
      _internal_mutable_session_control()->::ai::inworld::packets::SessionControlEvent::MergeFrom(from._internal_session_control());
      break;
    }
    case kSessionControlResponse: {
      _internal_mutable_session_control_response()->::ai::inworld::packets::SessionControlResponseEvent::MergeFrom(from._internal_session_control_response());
      break;
    }
    case kLatencyReport: {
      _internal_mutable_latency_report()->::ai::inworld::packets::LatencyReportEvent::MergeFrom(from._internal_latency_report());
      break;
    }
    case kOperationStatus: {
      _internal_mutable_operation_status()->::ai::inworld::packets::OperationStatusEvent::MergeFrom(from._internal_operation_status());
      break;
    }
    case kEntitiesItemsOperation: {
      _internal_mutable_entities_items_operation()->::ai::inworld::packets::entities::ItemsOperationEvent::MergeFrom(from._internal_entities_items_operation());
      break;
    }
    case kLog: {
      _internal_mutable_log()->::ai::inworld::packets::LogsEvent::MergeFrom(from._internal_log());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.InworldPacket)
}

void InworldPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&packet_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(packet_id_));
  clear_has_packet();
}

InworldPacket::~InworldPacket() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.InworldPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InworldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete routing_;
  if (this != internal_default_instance()) delete packet_id_;
  if (has_packet()) {
    clear_packet();
  }
}

void InworldPacket::ArenaDtor(void* object) {
  InworldPacket* _this = reinterpret_cast< InworldPacket* >(object);
  (void)_this;
}
void InworldPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InworldPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InworldPacket& InworldPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void InworldPacket::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.InworldPacket)
  switch (packet_case()) {
    case kText: {
      if (GetArena() == nullptr) {
        delete packet_.text_;
      }
      break;
    }
    case kControl: {
      if (GetArena() == nullptr) {
        delete packet_.control_;
      }
      break;
    }
    case kAudioChunk: {
      if (GetArena() == nullptr) {
        delete packet_.audio_chunk_;
      }
      break;
    }
    case kCustom: {
      if (GetArena() == nullptr) {
        delete packet_.custom_;
      }
      break;
    }
    case kCancelResponses: {
      if (GetArena() == nullptr) {
        delete packet_.cancelresponses_;
      }
      break;
    }
    case kEmotion: {
      if (GetArena() == nullptr) {
        delete packet_.emotion_;
      }
      break;
    }
    case kDataChunk: {
      if (GetArena() == nullptr) {
        delete packet_.data_chunk_;
      }
      break;
    }
    case kAction: {
      if (GetArena() == nullptr) {
        delete packet_.action_;
      }
      break;
    }
    case kMutation: {
      if (GetArena() == nullptr) {
        delete packet_.mutation_;
      }
      break;
    }
    case kLoadSceneOutput: {
      if (GetArena() == nullptr) {
        delete packet_.load_scene_output_;
      }
      break;
    }
    case kDebugInfo: {
      if (GetArena() == nullptr) {
        delete packet_.debug_info_;
      }
      break;
    }
    case kSessionControl: {
      if (GetArena() == nullptr) {
        delete packet_.session_control_;
      }
      break;
    }
    case kSessionControlResponse: {
      if (GetArena() == nullptr) {
        delete packet_.session_control_response_;
      }
      break;
    }
    case kLatencyReport: {
      if (GetArena() == nullptr) {
        delete packet_.latency_report_;
      }
      break;
    }
    case kOperationStatus: {
      if (GetArena() == nullptr) {
        delete packet_.operation_status_;
      }
      break;
    }
    case kEntitiesItemsOperation: {
      if (GetArena() == nullptr) {
        delete packet_.entities_items_operation_;
      }
      break;
    }
    case kLog: {
      if (GetArena() == nullptr) {
        delete packet_.log_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void InworldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.InworldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && routing_ != nullptr) {
    delete routing_;
  }
  routing_ = nullptr;
  if (GetArena() == nullptr && packet_id_ != nullptr) {
    delete packet_id_;
  }
  packet_id_ = nullptr;
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InworldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ControlEvent control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Routing routing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.CustomEvent custom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.PacketId packet_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelresponses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent emotion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk data_chunk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ActionEvent action = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.MutationEvent mutation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_scene_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.SessionControlEvent session_control = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.SessionControlResponseEvent session_control_response = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_control_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LatencyReportEvent latency_report = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.OperationStatusEvent operation_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.entities.ItemsOperationEvent entities_items_operation = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_entities_items_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LogsEvent log = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InworldPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.InworldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .ai.inworld.packets.TextEvent text = 2;
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text(this), target, stream);
  }

  // .ai.inworld.packets.ControlEvent control = 3;
  if (_internal_has_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::control(this), target, stream);
  }

  // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
  if (_internal_has_audio_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::audio_chunk(this), target, stream);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->has_routing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::routing(this), target, stream);
  }

  // .ai.inworld.packets.CustomEvent custom = 8;
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::custom(this), target, stream);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->has_packet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::packet_id(this), target, stream);
  }

  // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
  if (_internal_has_cancelresponses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cancelresponses(this), target, stream);
  }

  // .ai.inworld.packets.EmotionEvent emotion = 11;
  if (_internal_has_emotion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::emotion(this), target, stream);
  }

  // .ai.inworld.packets.DataChunk data_chunk = 12;
  if (_internal_has_data_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::data_chunk(this), target, stream);
  }

  // .ai.inworld.packets.ActionEvent action = 13;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::action(this), target, stream);
  }

  // .ai.inworld.packets.MutationEvent mutation = 15;
  if (_internal_has_mutation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::mutation(this), target, stream);
  }

  // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16 [deprecated = true];
  if (_internal_has_load_scene_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::load_scene_output(this), target, stream);
  }

  // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
  if (_internal_has_debug_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::debug_info(this), target, stream);
  }

  // .ai.inworld.packets.SessionControlEvent session_control = 19;
  if (_internal_has_session_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::session_control(this), target, stream);
  }

  // .ai.inworld.packets.SessionControlResponseEvent session_control_response = 20;
  if (_internal_has_session_control_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::session_control_response(this), target, stream);
  }

  // .ai.inworld.packets.LatencyReportEvent latency_report = 22;
  if (_internal_has_latency_report()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::latency_report(this), target, stream);
  }

  // .ai.inworld.packets.OperationStatusEvent operation_status = 23;
  if (_internal_has_operation_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::operation_status(this), target, stream);
  }

  // .ai.inworld.packets.entities.ItemsOperationEvent entities_items_operation = 24;
  if (_internal_has_entities_items_operation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::entities_items_operation(this), target, stream);
  }

  // .ai.inworld.packets.LogsEvent log = 25;
  if (_internal_has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::log(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.InworldPacket)
  return target;
}

size_t InworldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.InworldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->has_routing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_id_);
  }

  switch (packet_case()) {
    // .ai.inworld.packets.TextEvent text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.text_);
      break;
    }
    // .ai.inworld.packets.ControlEvent control = 3;
    case kControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.control_);
      break;
    }
    // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
    case kAudioChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.audio_chunk_);
      break;
    }
    // .ai.inworld.packets.CustomEvent custom = 8;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.custom_);
      break;
    }
    // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.cancelresponses_);
      break;
    }
    // .ai.inworld.packets.EmotionEvent emotion = 11;
    case kEmotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.emotion_);
      break;
    }
    // .ai.inworld.packets.DataChunk data_chunk = 12;
    case kDataChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.data_chunk_);
      break;
    }
    // .ai.inworld.packets.ActionEvent action = 13;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.action_);
      break;
    }
    // .ai.inworld.packets.MutationEvent mutation = 15;
    case kMutation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.mutation_);
      break;
    }
    // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16 [deprecated = true];
    case kLoadSceneOutput: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.load_scene_output_);
      break;
    }
    // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
    case kDebugInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.debug_info_);
      break;
    }
    // .ai.inworld.packets.SessionControlEvent session_control = 19;
    case kSessionControl: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.session_control_);
      break;
    }
    // .ai.inworld.packets.SessionControlResponseEvent session_control_response = 20;
    case kSessionControlResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.session_control_response_);
      break;
    }
    // .ai.inworld.packets.LatencyReportEvent latency_report = 22;
    case kLatencyReport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.latency_report_);
      break;
    }
    // .ai.inworld.packets.OperationStatusEvent operation_status = 23;
    case kOperationStatus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.operation_status_);
      break;
    }
    // .ai.inworld.packets.entities.ItemsOperationEvent entities_items_operation = 24;
    case kEntitiesItemsOperation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.entities_items_operation_);
      break;
    }
    // .ai.inworld.packets.LogsEvent log = 25;
    case kLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.log_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InworldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.InworldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const InworldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InworldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.InworldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.InworldPacket)
    MergeFrom(*source);
  }
}

void InworldPacket::MergeFrom(const InworldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.InworldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_routing()) {
    _internal_mutable_routing()->::ai::inworld::packets::Routing::MergeFrom(from._internal_routing());
  }
  if (from.has_packet_id()) {
    _internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(from._internal_packet_id());
  }
  switch (from.packet_case()) {
    case kText: {
      _internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(from._internal_text());
      break;
    }
    case kControl: {
      _internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(from._internal_control());
      break;
    }
    case kAudioChunk: {
      _internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(from._internal_audio_chunk());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(from._internal_data_chunk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::ai::inworld::packets::ActionEvent::MergeFrom(from._internal_action());
      break;
    }
    case kMutation: {
      _internal_mutable_mutation()->::ai::inworld::packets::MutationEvent::MergeFrom(from._internal_mutation());
      break;
    }
    case kLoadSceneOutput: {
      _internal_mutable_load_scene_output()->::ai::inworld::packets::LoadSceneOutputEvent::MergeFrom(from._internal_load_scene_output());
      break;
    }
    case kDebugInfo: {
      _internal_mutable_debug_info()->::ai::inworld::packets::DebugInfoEvent::MergeFrom(from._internal_debug_info());
      break;
    }
    case kSessionControl: {
      _internal_mutable_session_control()->::ai::inworld::packets::SessionControlEvent::MergeFrom(from._internal_session_control());
      break;
    }
    case kSessionControlResponse: {
      _internal_mutable_session_control_response()->::ai::inworld::packets::SessionControlResponseEvent::MergeFrom(from._internal_session_control_response());
      break;
    }
    case kLatencyReport: {
      _internal_mutable_latency_report()->::ai::inworld::packets::LatencyReportEvent::MergeFrom(from._internal_latency_report());
      break;
    }
    case kOperationStatus: {
      _internal_mutable_operation_status()->::ai::inworld::packets::OperationStatusEvent::MergeFrom(from._internal_operation_status());
      break;
    }
    case kEntitiesItemsOperation: {
      _internal_mutable_entities_items_operation()->::ai::inworld::packets::entities::ItemsOperationEvent::MergeFrom(from._internal_entities_items_operation());
      break;
    }
    case kLog: {
      _internal_mutable_log()->::ai::inworld::packets::LogsEvent::MergeFrom(from._internal_log());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void InworldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.InworldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InworldPacket::CopyFrom(const InworldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.InworldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InworldPacket::IsInitialized() const {
  return true;
}

void InworldPacket::InternalSwap(InworldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InworldPacket, packet_id_)
      + sizeof(InworldPacket::packet_id_)
      - PROTOBUF_FIELD_OFFSET(InworldPacket, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InworldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextEvent_ModelInfo::_Internal {
 public:
};

TextEvent_ModelInfo::TextEvent_ModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.TextEvent.ModelInfo)
}
TextEvent_ModelInfo::TextEvent_ModelInfo(const TextEvent_ModelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service().empty()) {
    service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service(), 
      GetArena());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.TextEvent.ModelInfo)
}

void TextEvent_ModelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextEvent_ModelInfo::~TextEvent_ModelInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.TextEvent.ModelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextEvent_ModelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextEvent_ModelInfo::ArenaDtor(void* object) {
  TextEvent_ModelInfo* _this = reinterpret_cast< TextEvent_ModelInfo* >(object);
  (void)_this;
}
void TextEvent_ModelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEvent_ModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextEvent_ModelInfo& TextEvent_ModelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextEvent_ModelInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void TextEvent_ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.TextEvent.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmpty();
  model_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEvent_ModelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.TextEvent.ModelInfo.service"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.TextEvent.ModelInfo.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextEvent_ModelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.TextEvent.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.ModelInfo.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.ModelInfo.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.TextEvent.ModelInfo)
  return target;
}

size_t TextEvent_ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.TextEvent.ModelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextEvent_ModelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TextEvent_ModelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextEvent_ModelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.TextEvent.ModelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.TextEvent.ModelInfo)
    MergeFrom(*source);
  }
}

void TextEvent_ModelInfo::MergeFrom(const TextEvent_ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {
    _internal_set_service(from._internal_service());
  }
  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
}

void TextEvent_ModelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextEvent_ModelInfo::CopyFrom(const TextEvent_ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent_ModelInfo::IsInitialized() const {
  return true;
}

void TextEvent_ModelInfo::InternalSwap(TextEvent_ModelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEvent_ModelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextEvent::_Internal {
 public:
  static const ::ai::inworld::packets::TextEvent_ModelInfo& model_info(const TextEvent* msg);
};

const ::ai::inworld::packets::TextEvent_ModelInfo&
TextEvent::_Internal::model_info(const TextEvent* msg) {
  return *msg->model_info_;
}
TextEvent::TextEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.TextEvent)
}
TextEvent::TextEvent(const TextEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_model_info()) {
    model_info_ = new ::ai::inworld::packets::TextEvent_ModelInfo(*from.model_info_);
  } else {
    model_info_ = nullptr;
  }
  ::memcpy(&source_type_, &from.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(final_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.TextEvent)
}

void TextEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&model_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&model_info_)) + sizeof(final_));
}

TextEvent::~TextEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.TextEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_info_;
}

void TextEvent::ArenaDtor(void* object) {
  TextEvent* _this = reinterpret_cast< TextEvent* >(object);
  (void)_this;
}
void TextEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextEvent& TextEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void TextEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.TextEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && model_info_ != nullptr) {
    delete model_info_;
  }
  model_info_ = nullptr;
  ::memset(&source_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&source_type_)) + sizeof(final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.TextEvent.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::ai::inworld::packets::TextEvent_SourceType>(val));
        } else goto handle_unusual;
        continue;
      // bool final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent.ModelInfo model_info = 4 [(.ai.inworld.options.field_mode) = HIDDEN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.TextEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source_type(), target);
  }

  // bool final = 3;
  if (this->final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_final(), target);
  }

  // .ai.inworld.packets.TextEvent.ModelInfo model_info = 4 [(.ai.inworld.options.field_mode) = HIDDEN];
  if (this->has_model_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.TextEvent)
  return target;
}

size_t TextEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.TextEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.TextEvent.ModelInfo model_info = 4 [(.ai.inworld.options.field_mode) = HIDDEN];
  if (this->has_model_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_info_);
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  // bool final = 3;
  if (this->final() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.TextEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TextEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.TextEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.TextEvent)
    MergeFrom(*source);
  }
}

void TextEvent::MergeFrom(const TextEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.TextEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_model_info()) {
    _internal_mutable_model_info()->::ai::inworld::packets::TextEvent_ModelInfo::MergeFrom(from._internal_model_info());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (from.final() != 0) {
    _internal_set_final(from._internal_final());
  }
}

void TextEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.TextEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextEvent::CopyFrom(const TextEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.TextEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent::IsInitialized() const {
  return true;
}

void TextEvent::InternalSwap(TextEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextEvent, final_)
      + sizeof(TextEvent::final_)
      - PROTOBUF_FIELD_OFFSET(TextEvent, model_info_)>(
          reinterpret_cast<char*>(&model_info_),
          reinterpret_cast<char*>(&other->model_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& payload(const ControlEvent* msg);
  static const ::ai::inworld::packets::ConversationUpdatePayload& conversation_update(const ControlEvent* msg);
  static const ::ai::inworld::packets::ConversationEventPayload& conversation_event(const ControlEvent* msg);
  static const ::ai::inworld::packets::AudioSessionStartPayload& audio_session_start(const ControlEvent* msg);
  static const ::ai::inworld::packets::CurrentSceneStatus& current_scene_status(const ControlEvent* msg);
  static const ::ai::inworld::packets::SessionConfigurationPayload& session_configuration(const ControlEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ControlEvent::_Internal::payload(const ControlEvent* msg) {
  return *msg->payload_;
}
const ::ai::inworld::packets::ConversationUpdatePayload&
ControlEvent::_Internal::conversation_update(const ControlEvent* msg) {
  return *msg->payload_structured_.conversation_update_;
}
const ::ai::inworld::packets::ConversationEventPayload&
ControlEvent::_Internal::conversation_event(const ControlEvent* msg) {
  return *msg->payload_structured_.conversation_event_;
}
const ::ai::inworld::packets::AudioSessionStartPayload&
ControlEvent::_Internal::audio_session_start(const ControlEvent* msg) {
  return *msg->payload_structured_.audio_session_start_;
}
const ::ai::inworld::packets::CurrentSceneStatus&
ControlEvent::_Internal::current_scene_status(const ControlEvent* msg) {
  return *msg->payload_structured_.current_scene_status_;
}
const ::ai::inworld::packets::SessionConfigurationPayload&
ControlEvent::_Internal::session_configuration(const ControlEvent* msg) {
  return *msg->payload_structured_.session_configuration_;
}
void ControlEvent::clear_payload() {
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void ControlEvent::set_allocated_conversation_update(::ai::inworld::packets::ConversationUpdatePayload* conversation_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload_structured();
  if (conversation_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conversation_update);
    if (message_arena != submessage_arena) {
      conversation_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_update, submessage_arena);
    }
    set_has_conversation_update();
    payload_structured_.conversation_update_ = conversation_update;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ControlEvent.conversation_update)
}
void ControlEvent::set_allocated_conversation_event(::ai::inworld::packets::ConversationEventPayload* conversation_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload_structured();
  if (conversation_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conversation_event);
    if (message_arena != submessage_arena) {
      conversation_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_event, submessage_arena);
    }
    set_has_conversation_event();
    payload_structured_.conversation_event_ = conversation_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ControlEvent.conversation_event)
}
void ControlEvent::set_allocated_audio_session_start(::ai::inworld::packets::AudioSessionStartPayload* audio_session_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload_structured();
  if (audio_session_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_session_start);
    if (message_arena != submessage_arena) {
      audio_session_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_session_start, submessage_arena);
    }
    set_has_audio_session_start();
    payload_structured_.audio_session_start_ = audio_session_start;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ControlEvent.audio_session_start)
}
void ControlEvent::set_allocated_current_scene_status(::ai::inworld::packets::CurrentSceneStatus* current_scene_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload_structured();
  if (current_scene_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_scene_status);
    if (message_arena != submessage_arena) {
      current_scene_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_scene_status, submessage_arena);
    }
    set_has_current_scene_status();
    payload_structured_.current_scene_status_ = current_scene_status;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ControlEvent.current_scene_status)
}
void ControlEvent::set_allocated_session_configuration(::ai::inworld::packets::SessionConfigurationPayload* session_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload_structured();
  if (session_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_configuration);
    if (message_arena != submessage_arena) {
      session_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_configuration, submessage_arena);
    }
    set_has_session_configuration();
    payload_structured_.session_configuration_ = session_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ControlEvent.session_configuration)
}
ControlEvent::ControlEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ControlEvent)
}
ControlEvent::ControlEvent(const ControlEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  action_ = from.action_;
  clear_has_payload_structured();
  switch (from.payload_structured_case()) {
    case kConversationUpdate: {
      _internal_mutable_conversation_update()->::ai::inworld::packets::ConversationUpdatePayload::MergeFrom(from._internal_conversation_update());
      break;
    }
    case kConversationEvent: {
      _internal_mutable_conversation_event()->::ai::inworld::packets::ConversationEventPayload::MergeFrom(from._internal_conversation_event());
      break;
    }
    case kAudioSessionStart: {
      _internal_mutable_audio_session_start()->::ai::inworld::packets::AudioSessionStartPayload::MergeFrom(from._internal_audio_session_start());
      break;
    }
    case kCurrentSceneStatus: {
      _internal_mutable_current_scene_status()->::ai::inworld::packets::CurrentSceneStatus::MergeFrom(from._internal_current_scene_status());
      break;
    }
    case kSessionConfiguration: {
      _internal_mutable_session_configuration()->::ai::inworld::packets::SessionConfigurationPayload::MergeFrom(from._internal_session_configuration());
      break;
    }
    case PAYLOAD_STRUCTURED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ControlEvent)
}

void ControlEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&payload_)) + sizeof(action_));
  clear_has_payload_structured();
}

ControlEvent::~ControlEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ControlEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
  if (has_payload_structured()) {
    clear_payload_structured();
  }
}

void ControlEvent::ArenaDtor(void* object) {
  ControlEvent* _this = reinterpret_cast< ControlEvent* >(object);
  (void)_this;
}
void ControlEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlEvent& ControlEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void ControlEvent::clear_payload_structured() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.ControlEvent)
  switch (payload_structured_case()) {
    case kConversationUpdate: {
      if (GetArena() == nullptr) {
        delete payload_structured_.conversation_update_;
      }
      break;
    }
    case kConversationEvent: {
      if (GetArena() == nullptr) {
        delete payload_structured_.conversation_event_;
      }
      break;
    }
    case kAudioSessionStart: {
      if (GetArena() == nullptr) {
        delete payload_structured_.audio_session_start_;
      }
      break;
    }
    case kCurrentSceneStatus: {
      if (GetArena() == nullptr) {
        delete payload_structured_.current_scene_status_;
      }
      break;
    }
    case kSessionConfiguration: {
      if (GetArena() == nullptr) {
        delete payload_structured_.session_configuration_;
      }
      break;
    }
    case PAYLOAD_STRUCTURED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_STRUCTURED_NOT_SET;
}


void ControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ControlEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  action_ = 0;
  clear_payload_structured();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.ControlEvent.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::ai::inworld::packets::ControlEvent_Action>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.ControlEvent.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ConversationUpdatePayload conversation_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ConversationEventPayload conversation_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.AudioSessionStartPayload audio_session_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_session_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.CurrentSceneStatus current_scene_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_scene_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.SessionConfigurationPayload session_configuration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ControlEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ControlEvent.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Struct payload = 3;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payload(this), target, stream);
  }

  // .ai.inworld.packets.ConversationUpdatePayload conversation_update = 4;
  if (_internal_has_conversation_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::conversation_update(this), target, stream);
  }

  // .ai.inworld.packets.ConversationEventPayload conversation_event = 5;
  if (_internal_has_conversation_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::conversation_event(this), target, stream);
  }

  // .ai.inworld.packets.AudioSessionStartPayload audio_session_start = 6;
  if (_internal_has_audio_session_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio_session_start(this), target, stream);
  }

  // .ai.inworld.packets.CurrentSceneStatus current_scene_status = 7;
  if (_internal_has_current_scene_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::current_scene_status(this), target, stream);
  }

  // .ai.inworld.packets.SessionConfigurationPayload session_configuration = 8;
  if (_internal_has_session_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::session_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ControlEvent)
  return target;
}

size_t ControlEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ControlEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Struct payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  switch (payload_structured_case()) {
    // .ai.inworld.packets.ConversationUpdatePayload conversation_update = 4;
    case kConversationUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_structured_.conversation_update_);
      break;
    }
    // .ai.inworld.packets.ConversationEventPayload conversation_event = 5;
    case kConversationEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_structured_.conversation_event_);
      break;
    }
    // .ai.inworld.packets.AudioSessionStartPayload audio_session_start = 6;
    case kAudioSessionStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_structured_.audio_session_start_);
      break;
    }
    // .ai.inworld.packets.CurrentSceneStatus current_scene_status = 7;
    case kCurrentSceneStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_structured_.current_scene_status_);
      break;
    }
    // .ai.inworld.packets.SessionConfigurationPayload session_configuration = 8;
    case kSessionConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_structured_.session_configuration_);
      break;
    }
    case PAYLOAD_STRUCTURED_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ControlEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ControlEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ControlEvent)
    MergeFrom(*source);
  }
}

void ControlEvent::MergeFrom(const ControlEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ControlEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_payload());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  switch (from.payload_structured_case()) {
    case kConversationUpdate: {
      _internal_mutable_conversation_update()->::ai::inworld::packets::ConversationUpdatePayload::MergeFrom(from._internal_conversation_update());
      break;
    }
    case kConversationEvent: {
      _internal_mutable_conversation_event()->::ai::inworld::packets::ConversationEventPayload::MergeFrom(from._internal_conversation_event());
      break;
    }
    case kAudioSessionStart: {
      _internal_mutable_audio_session_start()->::ai::inworld::packets::AudioSessionStartPayload::MergeFrom(from._internal_audio_session_start());
      break;
    }
    case kCurrentSceneStatus: {
      _internal_mutable_current_scene_status()->::ai::inworld::packets::CurrentSceneStatus::MergeFrom(from._internal_current_scene_status());
      break;
    }
    case kSessionConfiguration: {
      _internal_mutable_session_configuration()->::ai::inworld::packets::SessionConfigurationPayload::MergeFrom(from._internal_session_configuration());
      break;
    }
    case PAYLOAD_STRUCTURED_NOT_SET: {
      break;
    }
  }
}

void ControlEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlEvent::CopyFrom(const ControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlEvent::IsInitialized() const {
  return true;
}

void ControlEvent::InternalSwap(ControlEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlEvent, action_)
      + sizeof(ControlEvent::action_)
      - PROTOBUF_FIELD_OFFSET(ControlEvent, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
  swap(payload_structured_, other->payload_structured_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioSessionStartPayload::_Internal {
 public:
};

AudioSessionStartPayload::AudioSessionStartPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AudioSessionStartPayload)
}
AudioSessionStartPayload::AudioSessionStartPayload(const AudioSessionStartPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&understanding_mode_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(understanding_mode_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AudioSessionStartPayload)
}

void AudioSessionStartPayload::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&understanding_mode_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(understanding_mode_));
}

AudioSessionStartPayload::~AudioSessionStartPayload() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AudioSessionStartPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioSessionStartPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioSessionStartPayload::ArenaDtor(void* object) {
  AudioSessionStartPayload* _this = reinterpret_cast< AudioSessionStartPayload* >(object);
  (void)_this;
}
void AudioSessionStartPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioSessionStartPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioSessionStartPayload& AudioSessionStartPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioSessionStartPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void AudioSessionStartPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AudioSessionStartPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&understanding_mode_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(understanding_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioSessionStartPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.AudioSessionStartPayload.MicrophoneMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::ai::inworld::packets::AudioSessionStartPayload_MicrophoneMode>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.AudioSessionStartPayload.UnderstandingMode understanding_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_understanding_mode(static_cast<::ai::inworld::packets::AudioSessionStartPayload_UnderstandingMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioSessionStartPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AudioSessionStartPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.AudioSessionStartPayload.MicrophoneMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // .ai.inworld.packets.AudioSessionStartPayload.UnderstandingMode understanding_mode = 2;
  if (this->understanding_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_understanding_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AudioSessionStartPayload)
  return target;
}

size_t AudioSessionStartPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AudioSessionStartPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.AudioSessionStartPayload.MicrophoneMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .ai.inworld.packets.AudioSessionStartPayload.UnderstandingMode understanding_mode = 2;
  if (this->understanding_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_understanding_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioSessionStartPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.AudioSessionStartPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioSessionStartPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioSessionStartPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.AudioSessionStartPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.AudioSessionStartPayload)
    MergeFrom(*source);
  }
}

void AudioSessionStartPayload::MergeFrom(const AudioSessionStartPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AudioSessionStartPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.understanding_mode() != 0) {
    _internal_set_understanding_mode(from._internal_understanding_mode());
  }
}

void AudioSessionStartPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.AudioSessionStartPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioSessionStartPayload::CopyFrom(const AudioSessionStartPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AudioSessionStartPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSessionStartPayload::IsInitialized() const {
  return true;
}

void AudioSessionStartPayload::InternalSwap(AudioSessionStartPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioSessionStartPayload, understanding_mode_)
      + sizeof(AudioSessionStartPayload::understanding_mode_)
      - PROTOBUF_FIELD_OFFSET(AudioSessionStartPayload, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioSessionStartPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk().empty()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AudioChunk)
}

void AudioChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AudioChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioChunk::ArenaDtor(void* object) {
  AudioChunk* _this = reinterpret_cast< AudioChunk* >(object);
  (void)_this;
}
void AudioChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioChunk& AudioChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AudioChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AudioChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AudioChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.AudioChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.AudioChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.AudioChunk)
    MergeFrom(*source);
  }
}

void AudioChunk::MergeFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AudioChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk().size() > 0) {
    _internal_set_chunk(from._internal_chunk());
  }
}

void AudioChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunk_.Swap(&other->chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomEvent_Parameter::_Internal {
 public:
};

CustomEvent_Parameter::CustomEvent_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent.Parameter)
}
CustomEvent_Parameter::CustomEvent_Parameter(const CustomEvent_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent.Parameter)
}

void CustomEvent_Parameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomEvent_Parameter::~CustomEvent_Parameter() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent.Parameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomEvent_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomEvent_Parameter::ArenaDtor(void* object) {
  CustomEvent_Parameter* _this = reinterpret_cast< CustomEvent_Parameter* >(object);
  (void)_this;
}
void CustomEvent_Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomEvent_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomEvent_Parameter& CustomEvent_Parameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomEvent_Parameter_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void CustomEvent_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent_Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.Parameter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.Parameter.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomEvent_Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.Parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.Parameter.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent.Parameter)
  return target;
}

size_t CustomEvent_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomEvent_Parameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CustomEvent.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomEvent_Parameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomEvent_Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CustomEvent.Parameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CustomEvent.Parameter)
    MergeFrom(*source);
  }
}

void CustomEvent_Parameter::MergeFrom(const CustomEvent_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void CustomEvent_Parameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CustomEvent.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomEvent_Parameter::CopyFrom(const CustomEvent_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent_Parameter::IsInitialized() const {
  return true;
}

void CustomEvent_Parameter::InternalSwap(CustomEvent_Parameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent_Parameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomEvent::_Internal {
 public:
};

CustomEvent::CustomEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent)
}
CustomEvent::CustomEvent(const CustomEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&playback_, &from.playback_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&playback_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent)
}

void CustomEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playback_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&playback_)) + sizeof(type_));
}

CustomEvent::~CustomEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomEvent::ArenaDtor(void* object) {
  CustomEvent* _this = reinterpret_cast< CustomEvent* >(object);
  (void)_this;
}
void CustomEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomEvent& CustomEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void CustomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  name_.ClearToEmpty();
  ::memset(&playback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&playback_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.CustomEvent.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::CustomEvent_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_parameters(i), target, stream);
  }

  // .ai.inworld.packets.CustomEvent.Type type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent)
  return target;
}

size_t CustomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playback());
  }

  // .ai.inworld.packets.CustomEvent.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CustomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CustomEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CustomEvent)
    MergeFrom(*source);
  }
}

void CustomEvent::MergeFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.playback() != 0) {
    _internal_set_playback(from._internal_playback());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CustomEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomEvent::CopyFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent::IsInitialized() const {
  return true;
}

void CustomEvent::InternalSwap(CustomEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomEvent, type_)
      + sizeof(CustomEvent::type_)
      - PROTOBUF_FIELD_OFFSET(CustomEvent, playback_)>(
          reinterpret_cast<char*>(&playback_),
          reinterpret_cast<char*>(&other->playback_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelResponsesEvent::_Internal {
 public:
};

CancelResponsesEvent::CancelResponsesEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  utterance_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponsesEvent)
}
CancelResponsesEvent::CancelResponsesEvent(const CancelResponsesEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utterance_id_(from.utterance_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponsesEvent)
}

void CancelResponsesEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelResponsesEvent::~CancelResponsesEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponsesEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelResponsesEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelResponsesEvent::ArenaDtor(void* object) {
  CancelResponsesEvent* _this = reinterpret_cast< CancelResponsesEvent* >(object);
  (void)_this;
}
void CancelResponsesEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponsesEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponsesEvent& CancelResponsesEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelResponsesEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void CancelResponsesEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponsesEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterance_id_.Clear();
  interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponsesEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.utterance_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponsesEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponsesEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponsesEvent)
  return target;
}

size_t CancelResponsesEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponsesEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(utterance_id_.size());
  for (int i = 0, n = utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponsesEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CancelResponsesEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponsesEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelResponsesEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CancelResponsesEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CancelResponsesEvent)
    MergeFrom(*source);
  }
}

void CancelResponsesEvent::MergeFrom(const CancelResponsesEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponsesEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utterance_id_.MergeFrom(from.utterance_id_);
  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
}

void CancelResponsesEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CancelResponsesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponsesEvent::CopyFrom(const CancelResponsesEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponsesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponsesEvent::IsInitialized() const {
  return true;
}

void CancelResponsesEvent::InternalSwap(CancelResponsesEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  utterance_id_.InternalSwap(&other->utterance_id_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponsesEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EmotionEvent::_Internal {
 public:
};

EmotionEvent::EmotionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.EmotionEvent)
}
EmotionEvent::EmotionEvent(const EmotionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&joy_, &from.joy_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&joy_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.EmotionEvent)
}

void EmotionEvent::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&joy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&joy_)) + sizeof(strength_));
}

EmotionEvent::~EmotionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.EmotionEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmotionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmotionEvent::ArenaDtor(void* object) {
  EmotionEvent* _this = reinterpret_cast< EmotionEvent* >(object);
  (void)_this;
}
void EmotionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmotionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmotionEvent& EmotionEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void EmotionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.EmotionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&joy_)) + sizeof(strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmotionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float joy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          joy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float trust = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          trust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float surprise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          surprise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::ai::inworld::packets::EmotionEvent_SpaffCode>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strength(static_cast<::ai::inworld::packets::EmotionEvent_Strength>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmotionEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.EmotionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float joy = 1;
  if (!(this->joy() <= 0 && this->joy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_joy(), target);
  }

  // float fear = 2;
  if (!(this->fear() <= 0 && this->fear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fear(), target);
  }

  // float trust = 3;
  if (!(this->trust() <= 0 && this->trust() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_trust(), target);
  }

  // float surprise = 4;
  if (!(this->surprise() <= 0 && this->surprise() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_surprise(), target);
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_behavior(), target);
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.EmotionEvent)
  return target;
}

size_t EmotionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.EmotionEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float joy = 1;
  if (!(this->joy() <= 0 && this->joy() >= 0)) {
    total_size += 1 + 4;
  }

  // float fear = 2;
  if (!(this->fear() <= 0 && this->fear() >= 0)) {
    total_size += 1 + 4;
  }

  // float trust = 3;
  if (!(this->trust() <= 0 && this->trust() >= 0)) {
    total_size += 1 + 4;
  }

  // float surprise = 4;
  if (!(this->surprise() <= 0 && this->surprise() >= 0)) {
    total_size += 1 + 4;
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmotionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.EmotionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmotionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.EmotionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.EmotionEvent)
    MergeFrom(*source);
  }
}

void EmotionEvent::MergeFrom(const EmotionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.EmotionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.joy() <= 0 && from.joy() >= 0)) {
    _internal_set_joy(from._internal_joy());
  }
  if (!(from.fear() <= 0 && from.fear() >= 0)) {
    _internal_set_fear(from._internal_fear());
  }
  if (!(from.trust() <= 0 && from.trust() >= 0)) {
    _internal_set_trust(from._internal_trust());
  }
  if (!(from.surprise() <= 0 && from.surprise() >= 0)) {
    _internal_set_surprise(from._internal_surprise());
  }
  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  if (from.strength() != 0) {
    _internal_set_strength(from._internal_strength());
  }
}

void EmotionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.EmotionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionEvent::CopyFrom(const EmotionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.EmotionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionEvent::IsInitialized() const {
  return true;
}

void EmotionEvent::InternalSwap(EmotionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmotionEvent, strength_)
      + sizeof(EmotionEvent::strength_)
      - PROTOBUF_FIELD_OFFSET(EmotionEvent, joy_)>(
          reinterpret_cast<char*>(&joy_),
          reinterpret_cast<char*>(&other->joy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmotionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataChunk::_Internal {
 public:
};

DataChunk::DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_phoneme_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DataChunk)
}
DataChunk::DataChunk(const DataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_phoneme_info_(from.additional_phoneme_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&audioformat_) -
    reinterpret_cast<char*>(&type_)) + sizeof(audioformat_));
  clear_has_data();
  switch (from.data_case()) {
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DataChunk)
}

void DataChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&audioformat_) -
      reinterpret_cast<char*>(&type_)) + sizeof(audioformat_));
  clear_has_data();
}

DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DataChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void DataChunk::ArenaDtor(void* object) {
  DataChunk* _this = reinterpret_cast< DataChunk* >(object);
  (void)_this;
}
void DataChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataChunk& DataChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataChunk_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void DataChunk::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DataChunk)
  switch (data_case()) {
    case kChunk: {
      data_.chunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kDurationMs: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DataChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_phoneme_info_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audioformat_) -
      reinterpret_cast<char*>(&type_)) + sizeof(audioformat_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::DataChunk_DataType>(val));
        } else goto handle_unusual;
        continue;
      // int64 duration_ms = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_phoneme_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk.AudioFormat audioFormat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audioformat(static_cast<::ai::inworld::packets::DataChunk_AudioFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DataChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int64 duration_ms = 3 [deprecated = true];
  if (_internal_has_duration_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_phoneme_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_additional_phoneme_info(i), target, stream);
  }

  // .ai.inworld.packets.DataChunk.AudioFormat audioFormat = 5;
  if (this->audioformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_audioformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DataChunk)
  return target;
}

size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DataChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  total_size += 1UL * this->_internal_additional_phoneme_info_size();
  for (const auto& msg : this->additional_phoneme_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .ai.inworld.packets.DataChunk.AudioFormat audioFormat = 5;
  if (this->audioformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audioformat());
  }

  switch (data_case()) {
    // bytes chunk = 1;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    // int64 duration_ms = 3 [deprecated = true];
    case kDurationMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.DataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const DataChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.DataChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.DataChunk)
    MergeFrom(*source);
  }
}

void DataChunk::MergeFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_phoneme_info_.MergeFrom(from.additional_phoneme_info_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.audioformat() != 0) {
    _internal_set_audioformat(from._internal_audioformat());
  }
  switch (from.data_case()) {
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void DataChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunk::IsInitialized() const {
  return true;
}

void DataChunk::InternalSwap(DataChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additional_phoneme_info_.InternalSwap(&other->additional_phoneme_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChunk, audioformat_)
      + sizeof(DataChunk::audioformat_)
      - PROTOBUF_FIELD_OFFSET(DataChunk, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdditionalPhonemeInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& start_offset(const AdditionalPhonemeInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
AdditionalPhonemeInfo::_Internal::start_offset(const AdditionalPhonemeInfo* msg) {
  return *msg->start_offset_;
}
void AdditionalPhonemeInfo::clear_start_offset() {
  if (GetArena() == nullptr && start_offset_ != nullptr) {
    delete start_offset_;
  }
  start_offset_ = nullptr;
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(const AdditionalPhonemeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phoneme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phoneme().empty()) {
    phoneme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phoneme(), 
      GetArena());
  }
  if (from._internal_has_start_offset()) {
    start_offset_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.start_offset_);
  } else {
    start_offset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}

void AdditionalPhonemeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  phoneme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_offset_ = nullptr;
}

AdditionalPhonemeInfo::~AdditionalPhonemeInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AdditionalPhonemeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalPhonemeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phoneme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_offset_;
}

void AdditionalPhonemeInfo::ArenaDtor(void* object) {
  AdditionalPhonemeInfo* _this = reinterpret_cast< AdditionalPhonemeInfo* >(object);
  (void)_this;
}
void AdditionalPhonemeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalPhonemeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalPhonemeInfo& AdditionalPhonemeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalPhonemeInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void AdditionalPhonemeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AdditionalPhonemeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phoneme_.ClearToEmpty();
  if (GetArena() == nullptr && start_offset_ != nullptr) {
    delete start_offset_;
  }
  start_offset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalPhonemeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string phoneme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_phoneme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.AdditionalPhonemeInfo.phoneme"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalPhonemeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AdditionalPhonemeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phoneme = 1;
  if (this->phoneme().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phoneme().data(), static_cast<int>(this->_internal_phoneme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.AdditionalPhonemeInfo.phoneme");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phoneme(), target);
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->has_start_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AdditionalPhonemeInfo)
  return target;
}

size_t AdditionalPhonemeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AdditionalPhonemeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phoneme = 1;
  if (this->phoneme().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phoneme());
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->has_start_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_offset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalPhonemeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalPhonemeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalPhonemeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.AdditionalPhonemeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.AdditionalPhonemeInfo)
    MergeFrom(*source);
  }
}

void AdditionalPhonemeInfo::MergeFrom(const AdditionalPhonemeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phoneme().size() > 0) {
    _internal_set_phoneme(from._internal_phoneme());
  }
  if (from.has_start_offset()) {
    _internal_mutable_start_offset()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_start_offset());
  }
}

void AdditionalPhonemeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalPhonemeInfo::CopyFrom(const AdditionalPhonemeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalPhonemeInfo::IsInitialized() const {
  return true;
}

void AdditionalPhonemeInfo::InternalSwap(AdditionalPhonemeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phoneme_.Swap(&other->phoneme_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(start_offset_, other->start_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalPhonemeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActionEvent::_Internal {
 public:
  static const ::ai::inworld::packets::NarratedAction& narrated_action(const ActionEvent* msg);
};

const ::ai::inworld::packets::NarratedAction&
ActionEvent::_Internal::narrated_action(const ActionEvent* msg) {
  return *msg->action_.narrated_action_;
}
void ActionEvent::set_allocated_narrated_action(::ai::inworld::packets::NarratedAction* narrated_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (narrated_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(narrated_action);
    if (message_arena != submessage_arena) {
      narrated_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, narrated_action, submessage_arena);
    }
    set_has_narrated_action();
    action_.narrated_action_ = narrated_action;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ActionEvent.narrated_action)
}
ActionEvent::ActionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ActionEvent)
}
ActionEvent::ActionEvent(const ActionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playback_ = from.playback_;
  clear_has_action();
  switch (from.action_case()) {
    case kNarratedAction: {
      _internal_mutable_narrated_action()->::ai::inworld::packets::NarratedAction::MergeFrom(from._internal_narrated_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ActionEvent)
}

void ActionEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  playback_ = 0;
  clear_has_action();
}

ActionEvent::~ActionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ActionEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ActionEvent::ArenaDtor(void* object) {
  ActionEvent* _this = reinterpret_cast< ActionEvent* >(object);
  (void)_this;
}
void ActionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionEvent& ActionEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void ActionEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.ActionEvent)
  switch (action_case()) {
    case kNarratedAction: {
      if (GetArena() == nullptr) {
        delete action_.narrated_action_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ActionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playback_ = 0;
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.NarratedAction narrated_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_narrated_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ActionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.NarratedAction narrated_action = 1;
  if (_internal_has_narrated_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::narrated_action(this), target, stream);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ActionEvent)
  return target;
}

size_t ActionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ActionEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playback());
  }

  switch (action_case()) {
    // .ai.inworld.packets.NarratedAction narrated_action = 1;
    case kNarratedAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.narrated_action_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ActionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ActionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ActionEvent)
    MergeFrom(*source);
  }
}

void ActionEvent::MergeFrom(const ActionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ActionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playback() != 0) {
    _internal_set_playback(from._internal_playback());
  }
  switch (from.action_case()) {
    case kNarratedAction: {
      _internal_mutable_narrated_action()->::ai::inworld::packets::NarratedAction::MergeFrom(from._internal_narrated_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ActionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ActionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionEvent::CopyFrom(const ActionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ActionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionEvent::IsInitialized() const {
  return true;
}

void ActionEvent::InternalSwap(ActionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playback_, other->playback_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NarratedAction::_Internal {
 public:
};

NarratedAction::NarratedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.NarratedAction)
}
NarratedAction::NarratedAction(const NarratedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.NarratedAction)
}

void NarratedAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NarratedAction::~NarratedAction() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.NarratedAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NarratedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NarratedAction::ArenaDtor(void* object) {
  NarratedAction* _this = reinterpret_cast< NarratedAction* >(object);
  (void)_this;
}
void NarratedAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NarratedAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NarratedAction& NarratedAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NarratedAction_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void NarratedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.NarratedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NarratedAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.NarratedAction.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NarratedAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.NarratedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.NarratedAction.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.NarratedAction)
  return target;
}

size_t NarratedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.NarratedAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NarratedAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.NarratedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NarratedAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NarratedAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.NarratedAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.NarratedAction)
    MergeFrom(*source);
  }
}

void NarratedAction::MergeFrom(const NarratedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.NarratedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void NarratedAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.NarratedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NarratedAction::CopyFrom(const NarratedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.NarratedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NarratedAction::IsInitialized() const {
  return true;
}

void NarratedAction::InternalSwap(NarratedAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NarratedAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelationInfo_RelationAttributes::_Internal {
 public:
};

RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RelationInfo.RelationAttributes)
}
RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(const RelationInfo_RelationAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trust_, &from.trust_,
    static_cast<size_t>(reinterpret_cast<char*>(&attraction_) -
    reinterpret_cast<char*>(&trust_)) + sizeof(attraction_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RelationInfo.RelationAttributes)
}

void RelationInfo_RelationAttributes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&trust_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&attraction_) -
      reinterpret_cast<char*>(&trust_)) + sizeof(attraction_));
}

RelationInfo_RelationAttributes::~RelationInfo_RelationAttributes() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RelationInfo.RelationAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationInfo_RelationAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelationInfo_RelationAttributes::ArenaDtor(void* object) {
  RelationInfo_RelationAttributes* _this = reinterpret_cast< RelationInfo_RelationAttributes* >(object);
  (void)_this;
}
void RelationInfo_RelationAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationInfo_RelationAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationInfo_RelationAttributes& RelationInfo_RelationAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationInfo_RelationAttributes_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void RelationInfo_RelationAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attraction_) -
      reinterpret_cast<char*>(&trust_)) + sizeof(attraction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfo_RelationAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trust = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trust_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 respect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          respect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 familiar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          familiar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flirtatious = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flirtatious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationInfo_RelationAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trust = 1;
  if (this->trust() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trust(), target);
  }

  // int32 respect = 2;
  if (this->respect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_respect(), target);
  }

  // int32 familiar = 3;
  if (this->familiar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_familiar(), target);
  }

  // int32 flirtatious = 4;
  if (this->flirtatious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flirtatious(), target);
  }

  // int32 attraction = 5;
  if (this->attraction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RelationInfo.RelationAttributes)
  return target;
}

size_t RelationInfo_RelationAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trust = 1;
  if (this->trust() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trust());
  }

  // int32 respect = 2;
  if (this->respect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_respect());
  }

  // int32 familiar = 3;
  if (this->familiar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_familiar());
  }

  // int32 flirtatious = 4;
  if (this->flirtatious() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flirtatious());
  }

  // int32 attraction = 5;
  if (this->attraction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attraction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationInfo_RelationAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationInfo_RelationAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationInfo_RelationAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.RelationInfo.RelationAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.RelationInfo.RelationAttributes)
    MergeFrom(*source);
  }
}

void RelationInfo_RelationAttributes::MergeFrom(const RelationInfo_RelationAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trust() != 0) {
    _internal_set_trust(from._internal_trust());
  }
  if (from.respect() != 0) {
    _internal_set_respect(from._internal_respect());
  }
  if (from.familiar() != 0) {
    _internal_set_familiar(from._internal_familiar());
  }
  if (from.flirtatious() != 0) {
    _internal_set_flirtatious(from._internal_flirtatious());
  }
  if (from.attraction() != 0) {
    _internal_set_attraction(from._internal_attraction());
  }
}

void RelationInfo_RelationAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationInfo_RelationAttributes::CopyFrom(const RelationInfo_RelationAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo_RelationAttributes::IsInitialized() const {
  return true;
}

void RelationInfo_RelationAttributes::InternalSwap(RelationInfo_RelationAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfo_RelationAttributes, attraction_)
      + sizeof(RelationInfo_RelationAttributes::attraction_)
      - PROTOBUF_FIELD_OFFSET(RelationInfo_RelationAttributes, trust_)>(
          reinterpret_cast<char*>(&trust_),
          reinterpret_cast<char*>(&other->trust_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfo_RelationAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelationInfo::_Internal {
 public:
  static const ::ai::inworld::packets::RelationInfo_RelationAttributes& relation_state(const RelationInfo* msg);
  static const ::ai::inworld::packets::RelationInfo_RelationAttributes& relation_update(const RelationInfo* msg);
};

const ::ai::inworld::packets::RelationInfo_RelationAttributes&
RelationInfo::_Internal::relation_state(const RelationInfo* msg) {
  return *msg->relation_state_;
}
const ::ai::inworld::packets::RelationInfo_RelationAttributes&
RelationInfo::_Internal::relation_update(const RelationInfo* msg) {
  return *msg->relation_update_;
}
RelationInfo::RelationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RelationInfo)
}
RelationInfo::RelationInfo(const RelationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relation_state()) {
    relation_state_ = new ::ai::inworld::packets::RelationInfo_RelationAttributes(*from.relation_state_);
  } else {
    relation_state_ = nullptr;
  }
  if (from._internal_has_relation_update()) {
    relation_update_ = new ::ai::inworld::packets::RelationInfo_RelationAttributes(*from.relation_update_);
  } else {
    relation_update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RelationInfo)
}

void RelationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&relation_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&relation_update_) -
      reinterpret_cast<char*>(&relation_state_)) + sizeof(relation_update_));
}

RelationInfo::~RelationInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RelationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete relation_state_;
  if (this != internal_default_instance()) delete relation_update_;
}

void RelationInfo::ArenaDtor(void* object) {
  RelationInfo* _this = reinterpret_cast< RelationInfo* >(object);
  (void)_this;
}
void RelationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationInfo& RelationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void RelationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RelationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && relation_state_ != nullptr) {
    delete relation_state_;
  }
  relation_state_ = nullptr;
  if (GetArena() == nullptr && relation_update_ != nullptr) {
    delete relation_update_;
  }
  relation_update_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RelationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
  if (this->has_relation_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relation_state(this), target, stream);
  }

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
  if (this->has_relation_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relation_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RelationInfo)
  return target;
}

size_t RelationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RelationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
  if (this->has_relation_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_state_);
  }

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
  if (this->has_relation_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_update_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.RelationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.RelationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.RelationInfo)
    MergeFrom(*source);
  }
}

void RelationInfo::MergeFrom(const RelationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RelationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relation_state()) {
    _internal_mutable_relation_state()->::ai::inworld::packets::RelationInfo_RelationAttributes::MergeFrom(from._internal_relation_state());
  }
  if (from.has_relation_update()) {
    _internal_mutable_relation_update()->::ai::inworld::packets::RelationInfo_RelationAttributes::MergeFrom(from._internal_relation_update());
  }
}

void RelationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.RelationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationInfo::CopyFrom(const RelationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RelationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo::IsInitialized() const {
  return true;
}

void RelationInfo::InternalSwap(RelationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfo, relation_update_)
      + sizeof(RelationInfo::relation_update_)
      - PROTOBUF_FIELD_OFFSET(RelationInfo, relation_state_)>(
          reinterpret_cast<char*>(&relation_state_),
          reinterpret_cast<char*>(&other->relation_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LatencyReportEvent::_Internal {
 public:
  static const ::ai::inworld::packets::PingPongReport& ping_pong(const LatencyReportEvent* msg);
  static const ::ai::inworld::packets::PerceivedLatencyReport& perceived_latency(const LatencyReportEvent* msg);
};

const ::ai::inworld::packets::PingPongReport&
LatencyReportEvent::_Internal::ping_pong(const LatencyReportEvent* msg) {
  return *msg->report_.ping_pong_;
}
const ::ai::inworld::packets::PerceivedLatencyReport&
LatencyReportEvent::_Internal::perceived_latency(const LatencyReportEvent* msg) {
  return *msg->report_.perceived_latency_;
}
void LatencyReportEvent::set_allocated_ping_pong(::ai::inworld::packets::PingPongReport* ping_pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (ping_pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping_pong);
    if (message_arena != submessage_arena) {
      ping_pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_pong, submessage_arena);
    }
    set_has_ping_pong();
    report_.ping_pong_ = ping_pong;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.LatencyReportEvent.ping_pong)
}
void LatencyReportEvent::set_allocated_perceived_latency(::ai::inworld::packets::PerceivedLatencyReport* perceived_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (perceived_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(perceived_latency);
    if (message_arena != submessage_arena) {
      perceived_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perceived_latency, submessage_arena);
    }
    set_has_perceived_latency();
    report_.perceived_latency_ = perceived_latency;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.LatencyReportEvent.perceived_latency)
}
LatencyReportEvent::LatencyReportEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LatencyReportEvent)
}
LatencyReportEvent::LatencyReportEvent(const LatencyReportEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_report();
  switch (from.report_case()) {
    case kPingPong: {
      _internal_mutable_ping_pong()->::ai::inworld::packets::PingPongReport::MergeFrom(from._internal_ping_pong());
      break;
    }
    case kPerceivedLatency: {
      _internal_mutable_perceived_latency()->::ai::inworld::packets::PerceivedLatencyReport::MergeFrom(from._internal_perceived_latency());
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LatencyReportEvent)
}

void LatencyReportEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  clear_has_report();
}

LatencyReportEvent::~LatencyReportEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LatencyReportEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatencyReportEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_report()) {
    clear_report();
  }
}

void LatencyReportEvent::ArenaDtor(void* object) {
  LatencyReportEvent* _this = reinterpret_cast< LatencyReportEvent* >(object);
  (void)_this;
}
void LatencyReportEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyReportEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyReportEvent& LatencyReportEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyReportEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LatencyReportEvent::clear_report() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.LatencyReportEvent)
  switch (report_case()) {
    case kPingPong: {
      if (GetArena() == nullptr) {
        delete report_.ping_pong_;
      }
      break;
    }
    case kPerceivedLatency: {
      if (GetArena() == nullptr) {
        delete report_.perceived_latency_;
      }
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPORT_NOT_SET;
}


void LatencyReportEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LatencyReportEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_report();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyReportEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.PingPongReport ping_pong = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_pong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.PerceivedLatencyReport perceived_latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perceived_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyReportEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LatencyReportEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.PingPongReport ping_pong = 1;
  if (_internal_has_ping_pong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ping_pong(this), target, stream);
  }

  // .ai.inworld.packets.PerceivedLatencyReport perceived_latency = 2;
  if (_internal_has_perceived_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::perceived_latency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LatencyReportEvent)
  return target;
}

size_t LatencyReportEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LatencyReportEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (report_case()) {
    // .ai.inworld.packets.PingPongReport ping_pong = 1;
    case kPingPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.ping_pong_);
      break;
    }
    // .ai.inworld.packets.PerceivedLatencyReport perceived_latency = 2;
    case kPerceivedLatency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.perceived_latency_);
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyReportEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LatencyReportEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyReportEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyReportEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LatencyReportEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LatencyReportEvent)
    MergeFrom(*source);
  }
}

void LatencyReportEvent::MergeFrom(const LatencyReportEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LatencyReportEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.report_case()) {
    case kPingPong: {
      _internal_mutable_ping_pong()->::ai::inworld::packets::PingPongReport::MergeFrom(from._internal_ping_pong());
      break;
    }
    case kPerceivedLatency: {
      _internal_mutable_perceived_latency()->::ai::inworld::packets::PerceivedLatencyReport::MergeFrom(from._internal_perceived_latency());
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
}

void LatencyReportEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LatencyReportEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyReportEvent::CopyFrom(const LatencyReportEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LatencyReportEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyReportEvent::IsInitialized() const {
  return true;
}

void LatencyReportEvent::InternalSwap(LatencyReportEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(report_, other->report_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyReportEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PingPongReport::_Internal {
 public:
  static const ::ai::inworld::packets::PacketId& ping_packet_id(const PingPongReport* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& ping_timestamp(const PingPongReport* msg);
};

const ::ai::inworld::packets::PacketId&
PingPongReport::_Internal::ping_packet_id(const PingPongReport* msg) {
  return *msg->ping_packet_id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PingPongReport::_Internal::ping_timestamp(const PingPongReport* msg) {
  return *msg->ping_timestamp_;
}
void PingPongReport::clear_ping_timestamp() {
  if (GetArena() == nullptr && ping_timestamp_ != nullptr) {
    delete ping_timestamp_;
  }
  ping_timestamp_ = nullptr;
}
PingPongReport::PingPongReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.PingPongReport)
}
PingPongReport::PingPongReport(const PingPongReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_packet_id()) {
    ping_packet_id_ = new ::ai::inworld::packets::PacketId(*from.ping_packet_id_);
  } else {
    ping_packet_id_ = nullptr;
  }
  if (from._internal_has_ping_timestamp()) {
    ping_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.ping_timestamp_);
  } else {
    ping_timestamp_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.PingPongReport)
}

void PingPongReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ping_packet_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ping_packet_id_)) + sizeof(type_));
}

PingPongReport::~PingPongReport() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.PingPongReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingPongReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ping_packet_id_;
  if (this != internal_default_instance()) delete ping_timestamp_;
}

void PingPongReport::ArenaDtor(void* object) {
  PingPongReport* _this = reinterpret_cast< PingPongReport* >(object);
  (void)_this;
}
void PingPongReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingPongReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingPongReport& PingPongReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingPongReport_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void PingPongReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.PingPongReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ping_packet_id_ != nullptr) {
    delete ping_packet_id_;
  }
  ping_packet_id_ = nullptr;
  if (GetArena() == nullptr && ping_timestamp_ != nullptr) {
    delete ping_timestamp_;
  }
  ping_timestamp_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingPongReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.PingPongReport.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::PingPongReport_Type>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.PacketId ping_packet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_packet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ping_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingPongReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.PingPongReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.PingPongReport.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .ai.inworld.packets.PacketId ping_packet_id = 2;
  if (this->has_ping_packet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ping_packet_id(this), target, stream);
  }

  // .google.protobuf.Timestamp ping_timestamp = 3;
  if (this->has_ping_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ping_timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.PingPongReport)
  return target;
}

size_t PingPongReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.PingPongReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId ping_packet_id = 2;
  if (this->has_ping_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_packet_id_);
  }

  // .google.protobuf.Timestamp ping_timestamp = 3;
  if (this->has_ping_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_timestamp_);
  }

  // .ai.inworld.packets.PingPongReport.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingPongReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.PingPongReport)
  GOOGLE_DCHECK_NE(&from, this);
  const PingPongReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingPongReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.PingPongReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.PingPongReport)
    MergeFrom(*source);
  }
}

void PingPongReport::MergeFrom(const PingPongReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.PingPongReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ping_packet_id()) {
    _internal_mutable_ping_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(from._internal_ping_packet_id());
  }
  if (from.has_ping_timestamp()) {
    _internal_mutable_ping_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_ping_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PingPongReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.PingPongReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingPongReport::CopyFrom(const PingPongReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.PingPongReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPongReport::IsInitialized() const {
  return true;
}

void PingPongReport::InternalSwap(PingPongReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingPongReport, type_)
      + sizeof(PingPongReport::type_)
      - PROTOBUF_FIELD_OFFSET(PingPongReport, ping_packet_id_)>(
          reinterpret_cast<char*>(&ping_packet_id_),
          reinterpret_cast<char*>(&other->ping_packet_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingPongReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerceivedLatencyReport::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& latency(const PerceivedLatencyReport* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
PerceivedLatencyReport::_Internal::latency(const PerceivedLatencyReport* msg) {
  return *msg->latency_;
}
void PerceivedLatencyReport::clear_latency() {
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
PerceivedLatencyReport::PerceivedLatencyReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.PerceivedLatencyReport)
}
PerceivedLatencyReport::PerceivedLatencyReport(const PerceivedLatencyReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latency()) {
    latency_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  precision_ = from.precision_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.PerceivedLatencyReport)
}

void PerceivedLatencyReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(precision_));
}

PerceivedLatencyReport::~PerceivedLatencyReport() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.PerceivedLatencyReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerceivedLatencyReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete latency_;
}

void PerceivedLatencyReport::ArenaDtor(void* object) {
  PerceivedLatencyReport* _this = reinterpret_cast< PerceivedLatencyReport* >(object);
  (void)_this;
}
void PerceivedLatencyReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceivedLatencyReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceivedLatencyReport& PerceivedLatencyReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceivedLatencyReport_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void PerceivedLatencyReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.PerceivedLatencyReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  precision_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceivedLatencyReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.PerceivedLatencyReport.Precision precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_precision(static_cast<::ai::inworld::packets::PerceivedLatencyReport_Precision>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceivedLatencyReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.PerceivedLatencyReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.PerceivedLatencyReport.Precision precision = 1;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_precision(), target);
  }

  // .google.protobuf.Duration latency = 2;
  if (this->has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::latency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.PerceivedLatencyReport)
  return target;
}

size_t PerceivedLatencyReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.PerceivedLatencyReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration latency = 2;
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // .ai.inworld.packets.PerceivedLatencyReport.Precision precision = 1;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceivedLatencyReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.PerceivedLatencyReport)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceivedLatencyReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceivedLatencyReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.PerceivedLatencyReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.PerceivedLatencyReport)
    MergeFrom(*source);
  }
}

void PerceivedLatencyReport::MergeFrom(const PerceivedLatencyReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.PerceivedLatencyReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_latency()) {
    _internal_mutable_latency()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_latency());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void PerceivedLatencyReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.PerceivedLatencyReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceivedLatencyReport::CopyFrom(const PerceivedLatencyReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.PerceivedLatencyReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceivedLatencyReport::IsInitialized() const {
  return true;
}

void PerceivedLatencyReport::InternalSwap(PerceivedLatencyReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceivedLatencyReport, precision_)
      + sizeof(PerceivedLatencyReport::precision_)
      - PROTOBUF_FIELD_OFFSET(PerceivedLatencyReport, latency_)>(
          reinterpret_cast<char*>(&latency_),
          reinterpret_cast<char*>(&other->latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceivedLatencyReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogsEvent_LogDetail::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Value& detail(const LogsEvent_LogDetail* msg);
};

const PROTOBUF_NAMESPACE_ID::Value&
LogsEvent_LogDetail::_Internal::detail(const LogsEvent_LogDetail* msg) {
  return *msg->detail_;
}
void LogsEvent_LogDetail::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
LogsEvent_LogDetail::LogsEvent_LogDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LogsEvent.LogDetail)
}
LogsEvent_LogDetail::LogsEvent_LogDetail(const LogsEvent_LogDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_detail()) {
    detail_ = new PROTOBUF_NAMESPACE_ID::Value(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LogsEvent.LogDetail)
}

void LogsEvent_LogDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_ = nullptr;
}

LogsEvent_LogDetail::~LogsEvent_LogDetail() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LogsEvent.LogDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogsEvent_LogDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detail_;
}

void LogsEvent_LogDetail::ArenaDtor(void* object) {
  LogsEvent_LogDetail* _this = reinterpret_cast< LogsEvent_LogDetail* >(object);
  (void)_this;
}
void LogsEvent_LogDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogsEvent_LogDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogsEvent_LogDetail& LogsEvent_LogDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogsEvent_LogDetail_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LogsEvent_LogDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LogsEvent.LogDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsEvent_LogDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LogsEvent.LogDetail.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogsEvent_LogDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LogsEvent.LogDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LogsEvent.LogDetail.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .google.protobuf.Value detail = 2;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LogsEvent.LogDetail)
  return target;
}

size_t LogsEvent_LogDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LogsEvent.LogDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .google.protobuf.Value detail = 2;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogsEvent_LogDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LogsEvent.LogDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const LogsEvent_LogDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogsEvent_LogDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LogsEvent.LogDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LogsEvent.LogDetail)
    MergeFrom(*source);
  }
}

void LogsEvent_LogDetail::MergeFrom(const LogsEvent_LogDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LogsEvent.LogDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_detail()) {
    _internal_mutable_detail()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_detail());
  }
}

void LogsEvent_LogDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LogsEvent.LogDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogsEvent_LogDetail::CopyFrom(const LogsEvent_LogDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LogsEvent.LogDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsEvent_LogDetail::IsInitialized() const {
  return true;
}

void LogsEvent_LogDetail::InternalSwap(LogsEvent_LogDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(detail_, other->detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsEvent_LogDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LogsEvent_MetadataEntry_DoNotUse::LogsEvent_MetadataEntry_DoNotUse() {}
LogsEvent_MetadataEntry_DoNotUse::LogsEvent_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogsEvent_MetadataEntry_DoNotUse::MergeFrom(const LogsEvent_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogsEvent_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LogsEvent_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class LogsEvent::_Internal {
 public:
};

LogsEvent::LogsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena),
  details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LogsEvent)
}
LogsEvent::LogsEvent(const LogsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      details_(from.details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LogsEvent)
}

void LogsEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

LogsEvent::~LogsEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LogsEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogsEvent::ArenaDtor(void* object) {
  LogsEvent* _this = reinterpret_cast< LogsEvent* >(object);
  (void)_this;
}
void LogsEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogsEvent& LogsEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogsEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LogsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LogsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  details_.Clear();
  text_.ClearToEmpty();
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LogsEvent.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LogsEvent.LogLevel level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::ai::inworld::packets::LogsEvent_LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.LogsEvent.LogDetail details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogsEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LogsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LogsEvent.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ai.inworld.packets.LogsEvent.LogLevel level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // map<string, string> metadata = 3 [deprecated = true];
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ai.inworld.packets.LogsEvent.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ai.inworld.packets.LogsEvent.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LogsEvent_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = LogsEvent_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .ai.inworld.packets.LogsEvent.LogDetail details = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LogsEvent)
  return target;
}

size_t LogsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LogsEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 3 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += LogsEvent_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .ai.inworld.packets.LogsEvent.LogDetail details = 4;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.LogsEvent.LogLevel level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogsEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LogsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const LogsEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogsEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LogsEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LogsEvent)
    MergeFrom(*source);
  }
}

void LogsEvent::MergeFrom(const LogsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LogsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  details_.MergeFrom(from.details_);
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LogsEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LogsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogsEvent::CopyFrom(const LogsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LogsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsEvent::IsInitialized() const {
  return true;
}

void LogsEvent::InternalSwap(LogsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  details_.InternalSwap(&other->details_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MutationEvent::_Internal {
 public:
  static const ::ai::inworld::packets::CancelResponses& cancel_responses(const MutationEvent* msg);
  static const ::ai::inworld::packets::RegenerateResponse& regenerate_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::ApplyResponse& apply_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::LoadScene& load_scene(const MutationEvent* msg);
  static const ::ai::inworld::packets::ModifyExactResponse& modify_exact_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::LoadCharacters& load_characters(const MutationEvent* msg);
  static const ::ai::inworld::packets::UnloadCharacters& unload_characters(const MutationEvent* msg);
};

const ::ai::inworld::packets::CancelResponses&
MutationEvent::_Internal::cancel_responses(const MutationEvent* msg) {
  return *msg->mutation_.cancel_responses_;
}
const ::ai::inworld::packets::RegenerateResponse&
MutationEvent::_Internal::regenerate_response(const MutationEvent* msg) {
  return *msg->mutation_.regenerate_response_;
}
const ::ai::inworld::packets::ApplyResponse&
MutationEvent::_Internal::apply_response(const MutationEvent* msg) {
  return *msg->mutation_.apply_response_;
}
const ::ai::inworld::packets::LoadScene&
MutationEvent::_Internal::load_scene(const MutationEvent* msg) {
  return *msg->mutation_.load_scene_;
}
const ::ai::inworld::packets::ModifyExactResponse&
MutationEvent::_Internal::modify_exact_response(const MutationEvent* msg) {
  return *msg->mutation_.modify_exact_response_;
}
const ::ai::inworld::packets::LoadCharacters&
MutationEvent::_Internal::load_characters(const MutationEvent* msg) {
  return *msg->mutation_.load_characters_;
}
const ::ai::inworld::packets::UnloadCharacters&
MutationEvent::_Internal::unload_characters(const MutationEvent* msg) {
  return *msg->mutation_.unload_characters_;
}
void MutationEvent::set_allocated_cancel_responses(::ai::inworld::packets::CancelResponses* cancel_responses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (cancel_responses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_responses);
    if (message_arena != submessage_arena) {
      cancel_responses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_responses, submessage_arena);
    }
    set_has_cancel_responses();
    mutation_.cancel_responses_ = cancel_responses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.cancel_responses)
}
void MutationEvent::set_allocated_regenerate_response(::ai::inworld::packets::RegenerateResponse* regenerate_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (regenerate_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regenerate_response);
    if (message_arena != submessage_arena) {
      regenerate_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regenerate_response, submessage_arena);
    }
    set_has_regenerate_response();
    mutation_.regenerate_response_ = regenerate_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.regenerate_response)
}
void MutationEvent::set_allocated_apply_response(::ai::inworld::packets::ApplyResponse* apply_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (apply_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apply_response);
    if (message_arena != submessage_arena) {
      apply_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_response, submessage_arena);
    }
    set_has_apply_response();
    mutation_.apply_response_ = apply_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.apply_response)
}
void MutationEvent::set_allocated_load_scene(::ai::inworld::packets::LoadScene* load_scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (load_scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_scene);
    if (message_arena != submessage_arena) {
      load_scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_scene, submessage_arena);
    }
    set_has_load_scene();
    mutation_.load_scene_ = load_scene;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.load_scene)
}
void MutationEvent::set_allocated_modify_exact_response(::ai::inworld::packets::ModifyExactResponse* modify_exact_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (modify_exact_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modify_exact_response);
    if (message_arena != submessage_arena) {
      modify_exact_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify_exact_response, submessage_arena);
    }
    set_has_modify_exact_response();
    mutation_.modify_exact_response_ = modify_exact_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.modify_exact_response)
}
void MutationEvent::set_allocated_load_characters(::ai::inworld::packets::LoadCharacters* load_characters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (load_characters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_characters);
    if (message_arena != submessage_arena) {
      load_characters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_characters, submessage_arena);
    }
    set_has_load_characters();
    mutation_.load_characters_ = load_characters;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.load_characters)
}
void MutationEvent::set_allocated_unload_characters(::ai::inworld::packets::UnloadCharacters* unload_characters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (unload_characters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unload_characters);
    if (message_arena != submessage_arena) {
      unload_characters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unload_characters, submessage_arena);
    }
    set_has_unload_characters();
    mutation_.unload_characters_ = unload_characters;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.unload_characters)
}
MutationEvent::MutationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.MutationEvent)
}
MutationEvent::MutationEvent(const MutationEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mutation();
  switch (from.mutation_case()) {
    case kCancelResponses: {
      _internal_mutable_cancel_responses()->::ai::inworld::packets::CancelResponses::MergeFrom(from._internal_cancel_responses());
      break;
    }
    case kRegenerateResponse: {
      _internal_mutable_regenerate_response()->::ai::inworld::packets::RegenerateResponse::MergeFrom(from._internal_regenerate_response());
      break;
    }
    case kApplyResponse: {
      _internal_mutable_apply_response()->::ai::inworld::packets::ApplyResponse::MergeFrom(from._internal_apply_response());
      break;
    }
    case kLoadScene: {
      _internal_mutable_load_scene()->::ai::inworld::packets::LoadScene::MergeFrom(from._internal_load_scene());
      break;
    }
    case kModifyExactResponse: {
      _internal_mutable_modify_exact_response()->::ai::inworld::packets::ModifyExactResponse::MergeFrom(from._internal_modify_exact_response());
      break;
    }
    case kLoadCharacters: {
      _internal_mutable_load_characters()->::ai::inworld::packets::LoadCharacters::MergeFrom(from._internal_load_characters());
      break;
    }
    case kUnloadCharacters: {
      _internal_mutable_unload_characters()->::ai::inworld::packets::UnloadCharacters::MergeFrom(from._internal_unload_characters());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.MutationEvent)
}

void MutationEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  clear_has_mutation();
}

MutationEvent::~MutationEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.MutationEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_mutation()) {
    clear_mutation();
  }
}

void MutationEvent::ArenaDtor(void* object) {
  MutationEvent* _this = reinterpret_cast< MutationEvent* >(object);
  (void)_this;
}
void MutationEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutationEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationEvent& MutationEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutationEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void MutationEvent::clear_mutation() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.MutationEvent)
  switch (mutation_case()) {
    case kCancelResponses: {
      if (GetArena() == nullptr) {
        delete mutation_.cancel_responses_;
      }
      break;
    }
    case kRegenerateResponse: {
      if (GetArena() == nullptr) {
        delete mutation_.regenerate_response_;
      }
      break;
    }
    case kApplyResponse: {
      if (GetArena() == nullptr) {
        delete mutation_.apply_response_;
      }
      break;
    }
    case kLoadScene: {
      if (GetArena() == nullptr) {
        delete mutation_.load_scene_;
      }
      break;
    }
    case kModifyExactResponse: {
      if (GetArena() == nullptr) {
        delete mutation_.modify_exact_response_;
      }
      break;
    }
    case kLoadCharacters: {
      if (GetArena() == nullptr) {
        delete mutation_.load_characters_;
      }
      break;
    }
    case kUnloadCharacters: {
      if (GetArena() == nullptr) {
        delete mutation_.unload_characters_;
      }
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MUTATION_NOT_SET;
}


void MutationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.MutationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mutation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutationEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.CancelResponses cancel_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_responses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regenerate_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ApplyResponse apply_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadScene load_scene = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_scene(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modify_exact_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadCharacters load_characters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_characters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.UnloadCharacters unload_characters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unload_characters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.MutationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.CancelResponses cancel_responses = 1;
  if (_internal_has_cancel_responses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cancel_responses(this), target, stream);
  }

  // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
  if (_internal_has_regenerate_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::regenerate_response(this), target, stream);
  }

  // .ai.inworld.packets.ApplyResponse apply_response = 3;
  if (_internal_has_apply_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::apply_response(this), target, stream);
  }

  // .ai.inworld.packets.LoadScene load_scene = 4;
  if (_internal_has_load_scene()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::load_scene(this), target, stream);
  }

  // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
  if (_internal_has_modify_exact_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::modify_exact_response(this), target, stream);
  }

  // .ai.inworld.packets.LoadCharacters load_characters = 6;
  if (_internal_has_load_characters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::load_characters(this), target, stream);
  }

  // .ai.inworld.packets.UnloadCharacters unload_characters = 7;
  if (_internal_has_unload_characters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::unload_characters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.MutationEvent)
  return target;
}

size_t MutationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.MutationEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mutation_case()) {
    // .ai.inworld.packets.CancelResponses cancel_responses = 1;
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.cancel_responses_);
      break;
    }
    // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
    case kRegenerateResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.regenerate_response_);
      break;
    }
    // .ai.inworld.packets.ApplyResponse apply_response = 3;
    case kApplyResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.apply_response_);
      break;
    }
    // .ai.inworld.packets.LoadScene load_scene = 4;
    case kLoadScene: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.load_scene_);
      break;
    }
    // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
    case kModifyExactResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.modify_exact_response_);
      break;
    }
    // .ai.inworld.packets.LoadCharacters load_characters = 6;
    case kLoadCharacters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.load_characters_);
      break;
    }
    // .ai.inworld.packets.UnloadCharacters unload_characters = 7;
    case kUnloadCharacters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.unload_characters_);
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.MutationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.MutationEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.MutationEvent)
    MergeFrom(*source);
  }
}

void MutationEvent::MergeFrom(const MutationEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.MutationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mutation_case()) {
    case kCancelResponses: {
      _internal_mutable_cancel_responses()->::ai::inworld::packets::CancelResponses::MergeFrom(from._internal_cancel_responses());
      break;
    }
    case kRegenerateResponse: {
      _internal_mutable_regenerate_response()->::ai::inworld::packets::RegenerateResponse::MergeFrom(from._internal_regenerate_response());
      break;
    }
    case kApplyResponse: {
      _internal_mutable_apply_response()->::ai::inworld::packets::ApplyResponse::MergeFrom(from._internal_apply_response());
      break;
    }
    case kLoadScene: {
      _internal_mutable_load_scene()->::ai::inworld::packets::LoadScene::MergeFrom(from._internal_load_scene());
      break;
    }
    case kModifyExactResponse: {
      _internal_mutable_modify_exact_response()->::ai::inworld::packets::ModifyExactResponse::MergeFrom(from._internal_modify_exact_response());
      break;
    }
    case kLoadCharacters: {
      _internal_mutable_load_characters()->::ai::inworld::packets::LoadCharacters::MergeFrom(from._internal_load_characters());
      break;
    }
    case kUnloadCharacters: {
      _internal_mutable_unload_characters()->::ai::inworld::packets::UnloadCharacters::MergeFrom(from._internal_unload_characters());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
}

void MutationEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.MutationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationEvent::CopyFrom(const MutationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.MutationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationEvent::IsInitialized() const {
  return true;
}

void MutationEvent::InternalSwap(MutationEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mutation_, other->mutation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionControlResponseEvent::_Internal {
 public:
  static const ::ai::inworld::packets::LoadedScene& loaded_scene(const SessionControlResponseEvent* msg);
  static const ::ai::inworld::packets::LoadedCharacters& loaded_characters(const SessionControlResponseEvent* msg);
  static const ::ai::inworld::packets::SessionHistoryResponse& session_history(const SessionControlResponseEvent* msg);
};

const ::ai::inworld::packets::LoadedScene&
SessionControlResponseEvent::_Internal::loaded_scene(const SessionControlResponseEvent* msg) {
  return *msg->response_.loaded_scene_;
}
const ::ai::inworld::packets::LoadedCharacters&
SessionControlResponseEvent::_Internal::loaded_characters(const SessionControlResponseEvent* msg) {
  return *msg->response_.loaded_characters_;
}
const ::ai::inworld::packets::SessionHistoryResponse&
SessionControlResponseEvent::_Internal::session_history(const SessionControlResponseEvent* msg) {
  return *msg->response_.session_history_;
}
void SessionControlResponseEvent::set_allocated_loaded_scene(::ai::inworld::packets::LoadedScene* loaded_scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (loaded_scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loaded_scene);
    if (message_arena != submessage_arena) {
      loaded_scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loaded_scene, submessage_arena);
    }
    set_has_loaded_scene();
    response_.loaded_scene_ = loaded_scene;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlResponseEvent.loaded_scene)
}
void SessionControlResponseEvent::set_allocated_loaded_characters(::ai::inworld::packets::LoadedCharacters* loaded_characters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (loaded_characters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loaded_characters);
    if (message_arena != submessage_arena) {
      loaded_characters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loaded_characters, submessage_arena);
    }
    set_has_loaded_characters();
    response_.loaded_characters_ = loaded_characters;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlResponseEvent.loaded_characters)
}
void SessionControlResponseEvent::set_allocated_session_history(::ai::inworld::packets::SessionHistoryResponse* session_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (session_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_history);
    if (message_arena != submessage_arena) {
      session_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_history, submessage_arena);
    }
    set_has_session_history();
    response_.session_history_ = session_history;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlResponseEvent.session_history)
}
SessionControlResponseEvent::SessionControlResponseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.SessionControlResponseEvent)
}
SessionControlResponseEvent::SessionControlResponseEvent(const SessionControlResponseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kLoadedScene: {
      _internal_mutable_loaded_scene()->::ai::inworld::packets::LoadedScene::MergeFrom(from._internal_loaded_scene());
      break;
    }
    case kLoadedCharacters: {
      _internal_mutable_loaded_characters()->::ai::inworld::packets::LoadedCharacters::MergeFrom(from._internal_loaded_characters());
      break;
    }
    case kSessionHistory: {
      _internal_mutable_session_history()->::ai::inworld::packets::SessionHistoryResponse::MergeFrom(from._internal_session_history());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.SessionControlResponseEvent)
}

void SessionControlResponseEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  clear_has_response();
}

SessionControlResponseEvent::~SessionControlResponseEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.SessionControlResponseEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionControlResponseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void SessionControlResponseEvent::ArenaDtor(void* object) {
  SessionControlResponseEvent* _this = reinterpret_cast< SessionControlResponseEvent* >(object);
  (void)_this;
}
void SessionControlResponseEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionControlResponseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionControlResponseEvent& SessionControlResponseEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void SessionControlResponseEvent::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.SessionControlResponseEvent)
  switch (response_case()) {
    case kLoadedScene: {
      if (GetArena() == nullptr) {
        delete response_.loaded_scene_;
      }
      break;
    }
    case kLoadedCharacters: {
      if (GetArena() == nullptr) {
        delete response_.loaded_characters_;
      }
      break;
    }
    case kSessionHistory: {
      if (GetArena() == nullptr) {
        delete response_.session_history_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void SessionControlResponseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.SessionControlResponseEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionControlResponseEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.LoadedScene loaded_scene = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_loaded_scene(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadedCharacters loaded_characters = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loaded_characters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.SessionHistoryResponse session_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionControlResponseEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.SessionControlResponseEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.LoadedScene loaded_scene = 1 [deprecated = true];
  if (_internal_has_loaded_scene()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::loaded_scene(this), target, stream);
  }

  // .ai.inworld.packets.LoadedCharacters loaded_characters = 2 [deprecated = true];
  if (_internal_has_loaded_characters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::loaded_characters(this), target, stream);
  }

  // .ai.inworld.packets.SessionHistoryResponse session_history = 3;
  if (_internal_has_session_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::session_history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.SessionControlResponseEvent)
  return target;
}

size_t SessionControlResponseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.SessionControlResponseEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .ai.inworld.packets.LoadedScene loaded_scene = 1 [deprecated = true];
    case kLoadedScene: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.loaded_scene_);
      break;
    }
    // .ai.inworld.packets.LoadedCharacters loaded_characters = 2 [deprecated = true];
    case kLoadedCharacters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.loaded_characters_);
      break;
    }
    // .ai.inworld.packets.SessionHistoryResponse session_history = 3;
    case kSessionHistory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.session_history_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionControlResponseEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.SessionControlResponseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionControlResponseEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionControlResponseEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.SessionControlResponseEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.SessionControlResponseEvent)
    MergeFrom(*source);
  }
}

void SessionControlResponseEvent::MergeFrom(const SessionControlResponseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.SessionControlResponseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kLoadedScene: {
      _internal_mutable_loaded_scene()->::ai::inworld::packets::LoadedScene::MergeFrom(from._internal_loaded_scene());
      break;
    }
    case kLoadedCharacters: {
      _internal_mutable_loaded_characters()->::ai::inworld::packets::LoadedCharacters::MergeFrom(from._internal_loaded_characters());
      break;
    }
    case kSessionHistory: {
      _internal_mutable_session_history()->::ai::inworld::packets::SessionHistoryResponse::MergeFrom(from._internal_session_history());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void SessionControlResponseEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.SessionControlResponseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionControlResponseEvent::CopyFrom(const SessionControlResponseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.SessionControlResponseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionControlResponseEvent::IsInitialized() const {
  return true;
}

void SessionControlResponseEvent::InternalSwap(SessionControlResponseEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionControlResponseEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelResponses::_Internal {
 public:
};

CancelResponses::CancelResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  utterance_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponses)
}
CancelResponses::CancelResponses(const CancelResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utterance_id_(from.utterance_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponses)
}

void CancelResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelResponses::~CancelResponses() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelResponses::ArenaDtor(void* object) {
  CancelResponses* _this = reinterpret_cast< CancelResponses* >(object);
  (void)_this;
}
void CancelResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponses& CancelResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelResponses_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void CancelResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterance_id_.Clear();
  interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponses.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponses.utterance_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponses.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponses.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponses)
  return target;
}

size_t CancelResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(utterance_id_.size());
  for (int i = 0, n = utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CancelResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CancelResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CancelResponses)
    MergeFrom(*source);
  }
}

void CancelResponses::MergeFrom(const CancelResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utterance_id_.MergeFrom(from.utterance_id_);
  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
}

void CancelResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CancelResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponses::CopyFrom(const CancelResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponses::IsInitialized() const {
  return true;
}

void CancelResponses::InternalSwap(CancelResponses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  utterance_id_.InternalSwap(&other->utterance_id_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegenerateResponse::_Internal {
 public:
};

RegenerateResponse::RegenerateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RegenerateResponse)
}
RegenerateResponse::RegenerateResponse(const RegenerateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RegenerateResponse)
}

void RegenerateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegenerateResponse::~RegenerateResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RegenerateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegenerateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegenerateResponse::ArenaDtor(void* object) {
  RegenerateResponse* _this = reinterpret_cast< RegenerateResponse* >(object);
  (void)_this;
}
void RegenerateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegenerateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegenerateResponse& RegenerateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegenerateResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void RegenerateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RegenerateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegenerateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.RegenerateResponse.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegenerateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RegenerateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.RegenerateResponse.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RegenerateResponse)
  return target;
}

size_t RegenerateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RegenerateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegenerateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.RegenerateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegenerateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegenerateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.RegenerateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.RegenerateResponse)
    MergeFrom(*source);
  }
}

void RegenerateResponse::MergeFrom(const RegenerateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RegenerateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
}

void RegenerateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.RegenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegenerateResponse::CopyFrom(const RegenerateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RegenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegenerateResponse::IsInitialized() const {
  return true;
}

void RegenerateResponse::InternalSwap(RegenerateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegenerateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ApplyResponse::_Internal {
 public:
  static const ::ai::inworld::packets::PacketId& packet_id(const ApplyResponse* msg);
};

const ::ai::inworld::packets::PacketId&
ApplyResponse::_Internal::packet_id(const ApplyResponse* msg) {
  return *msg->packet_id_;
}
ApplyResponse::ApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ApplyResponse)
}
ApplyResponse::ApplyResponse(const ApplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_id()) {
    packet_id_ = new ::ai::inworld::packets::PacketId(*from.packet_id_);
  } else {
    packet_id_ = nullptr;
  }
  apply_response_type_ = from.apply_response_type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ApplyResponse)
}

void ApplyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&packet_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&apply_response_type_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(apply_response_type_));
}

ApplyResponse::~ApplyResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ApplyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete packet_id_;
}

void ApplyResponse::ArenaDtor(void* object) {
  ApplyResponse* _this = reinterpret_cast< ApplyResponse* >(object);
  (void)_this;
}
void ApplyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyResponse& ApplyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void ApplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ApplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && packet_id_ != nullptr) {
    delete packet_id_;
  }
  packet_id_ = nullptr;
  apply_response_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.PacketId packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ApplyResponse.ApplyResponseType apply_response_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_apply_response_type(static_cast<::ai::inworld::packets::ApplyResponse_ApplyResponseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ApplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId packet_id = 1;
  if (this->has_packet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::packet_id(this), target, stream);
  }

  // .ai.inworld.packets.ApplyResponse.ApplyResponseType apply_response_type = 2;
  if (this->apply_response_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_apply_response_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ApplyResponse)
  return target;
}

size_t ApplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ApplyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId packet_id = 1;
  if (this->has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_id_);
  }

  // .ai.inworld.packets.ApplyResponse.ApplyResponseType apply_response_type = 2;
  if (this->apply_response_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apply_response_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ApplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ApplyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ApplyResponse)
    MergeFrom(*source);
  }
}

void ApplyResponse::MergeFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ApplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packet_id()) {
    _internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(from._internal_packet_id());
  }
  if (from.apply_response_type() != 0) {
    _internal_set_apply_response_type(from._internal_apply_response_type());
  }
}

void ApplyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ApplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyResponse::CopyFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ApplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyResponse::IsInitialized() const {
  return true;
}

void ApplyResponse::InternalSwap(ApplyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyResponse, apply_response_type_)
      + sizeof(ApplyResponse::apply_response_type_)
      - PROTOBUF_FIELD_OFFSET(ApplyResponse, packet_id_)>(
          reinterpret_cast<char*>(&packet_id_),
          reinterpret_cast<char*>(&other->packet_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadScene::_Internal {
 public:
};

LoadScene::LoadScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadScene)
}
LoadScene::LoadScene(const LoadScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  is_reset_scene_ = from.is_reset_scene_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadScene)
}

void LoadScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_reset_scene_ = false;
}

LoadScene::~LoadScene() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadScene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadScene::ArenaDtor(void* object) {
  LoadScene* _this = reinterpret_cast< LoadScene* >(object);
  (void)_this;
}
void LoadScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadScene& LoadScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadScene_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadScene::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  is_reset_scene_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadScene.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_reset_scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_reset_scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadScene.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool is_reset_scene = 2;
  if (this->is_reset_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_reset_scene(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadScene)
  return target;
}

size_t LoadScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_reset_scene = 2;
  if (this->is_reset_scene() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadScene)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadScene)
    MergeFrom(*source);
  }
}

void LoadScene::MergeFrom(const LoadScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.is_reset_scene() != 0) {
    _internal_set_is_reset_scene(from._internal_is_reset_scene());
  }
}

void LoadScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadScene::CopyFrom(const LoadScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadScene::IsInitialized() const {
  return true;
}

void LoadScene::InternalSwap(LoadScene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_reset_scene_, other->is_reset_scene_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadedScene::_Internal {
 public:
};

LoadedScene::LoadedScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadedScene)
}
LoadedScene::LoadedScene(const LoadedScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_name().empty()) {
    scene_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_name(), 
      GetArena());
  }
  scene_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_description().empty()) {
    scene_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_description(), 
      GetArena());
  }
  scene_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_display_name().empty()) {
    scene_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_display_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadedScene)
}

void LoadedScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadedScene::~LoadedScene() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadedScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadedScene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scene_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadedScene::ArenaDtor(void* object) {
  LoadedScene* _this = reinterpret_cast< LoadedScene* >(object);
  (void)_this;
}
void LoadedScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadedScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadedScene& LoadedScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadedScene_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadedScene::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadedScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  scene_name_.ClearToEmpty();
  scene_description_.ClearToEmpty();
  scene_display_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadedScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string scene_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scene_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadedScene.scene_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scene_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadedScene.scene_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scene_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadedScene.scene_display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadedScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadedScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // string scene_name = 2;
  if (this->scene_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_name().data(), static_cast<int>(this->_internal_scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadedScene.scene_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scene_name(), target);
  }

  // string scene_description = 3;
  if (this->scene_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_description().data(), static_cast<int>(this->_internal_scene_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadedScene.scene_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scene_description(), target);
  }

  // string scene_display_name = 4;
  if (this->scene_display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_display_name().data(), static_cast<int>(this->_internal_scene_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadedScene.scene_display_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scene_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadedScene)
  return target;
}

size_t LoadedScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadedScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string scene_name = 2;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_name());
  }

  // string scene_description = 3;
  if (this->scene_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_description());
  }

  // string scene_display_name = 4;
  if (this->scene_display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_display_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadedScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadedScene)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadedScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadedScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadedScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadedScene)
    MergeFrom(*source);
  }
}

void LoadedScene::MergeFrom(const LoadedScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadedScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.scene_name().size() > 0) {
    _internal_set_scene_name(from._internal_scene_name());
  }
  if (from.scene_description().size() > 0) {
    _internal_set_scene_description(from._internal_scene_description());
  }
  if (from.scene_display_name().size() > 0) {
    _internal_set_scene_display_name(from._internal_scene_display_name());
  }
}

void LoadedScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadedScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadedScene::CopyFrom(const LoadedScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadedScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadedScene::IsInitialized() const {
  return true;
}

void LoadedScene::InternalSwap(LoadedScene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  scene_name_.Swap(&other->scene_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_description_.Swap(&other->scene_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_display_name_.Swap(&other->scene_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadedScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadCharacters_CharacterName::_Internal {
 public:
};

LoadCharacters_CharacterName::LoadCharacters_CharacterName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadCharacters.CharacterName)
}
LoadCharacters_CharacterName::LoadCharacters_CharacterName(const LoadCharacters_CharacterName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  language_code_ = from.language_code_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadCharacters.CharacterName)
}

void LoadCharacters_CharacterName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_ = 0;
}

LoadCharacters_CharacterName::~LoadCharacters_CharacterName() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadCharacters.CharacterName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadCharacters_CharacterName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadCharacters_CharacterName::ArenaDtor(void* object) {
  LoadCharacters_CharacterName* _this = reinterpret_cast< LoadCharacters_CharacterName* >(object);
  (void)_this;
}
void LoadCharacters_CharacterName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadCharacters_CharacterName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCharacters_CharacterName& LoadCharacters_CharacterName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCharacters_CharacterName_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadCharacters_CharacterName::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadCharacters.CharacterName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  language_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadCharacters_CharacterName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadCharacters.CharacterName.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.language_codes.LanguageCode language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::ai::inworld::language_codes::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCharacters_CharacterName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadCharacters.CharacterName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadCharacters.CharacterName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.language_codes.LanguageCode language_code = 2;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadCharacters.CharacterName)
  return target;
}

size_t LoadCharacters_CharacterName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadCharacters.CharacterName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.language_codes.LanguageCode language_code = 2;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCharacters_CharacterName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadCharacters.CharacterName)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCharacters_CharacterName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCharacters_CharacterName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadCharacters.CharacterName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadCharacters.CharacterName)
    MergeFrom(*source);
  }
}

void LoadCharacters_CharacterName::MergeFrom(const LoadCharacters_CharacterName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadCharacters.CharacterName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
}

void LoadCharacters_CharacterName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadCharacters.CharacterName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCharacters_CharacterName::CopyFrom(const LoadCharacters_CharacterName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadCharacters.CharacterName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCharacters_CharacterName::IsInitialized() const {
  return true;
}

void LoadCharacters_CharacterName::InternalSwap(LoadCharacters_CharacterName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(language_code_, other->language_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCharacters_CharacterName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadCharacters::_Internal {
 public:
};

LoadCharacters::LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadCharacters)
}
LoadCharacters::LoadCharacters(const LoadCharacters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      name_(from.name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadCharacters)
}

void LoadCharacters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base);
}

LoadCharacters::~LoadCharacters() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadCharacters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadCharacters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadCharacters::ArenaDtor(void* object) {
  LoadCharacters* _this = reinterpret_cast< LoadCharacters* >(object);
  (void)_this;
}
void LoadCharacters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadCharacters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCharacters& LoadCharacters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadCharacters::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadCharacters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadCharacters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.LoadCharacters.CharacterName name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCharacters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadCharacters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadCharacters.CharacterName name = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_name(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadCharacters)
  return target;
}

size_t LoadCharacters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadCharacters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadCharacters.CharacterName name = 1;
  total_size += 1UL * this->_internal_name_size();
  for (const auto& msg : this->name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCharacters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadCharacters)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCharacters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCharacters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadCharacters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadCharacters)
    MergeFrom(*source);
  }
}

void LoadCharacters::MergeFrom(const LoadCharacters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadCharacters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
}

void LoadCharacters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadCharacters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCharacters::CopyFrom(const LoadCharacters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadCharacters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCharacters::IsInitialized() const {
  return true;
}

void LoadCharacters::InternalSwap(LoadCharacters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.InternalSwap(&other->name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCharacters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadedCharacters::_Internal {
 public:
};

LoadedCharacters::LoadedCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadedCharacters)
}
LoadedCharacters::LoadedCharacters(const LoadedCharacters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_name().empty()) {
    scene_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_name(), 
      GetArena());
  }
  scene_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_description().empty()) {
    scene_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_description(), 
      GetArena());
  }
  scene_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_display_name().empty()) {
    scene_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_display_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadedCharacters)
}

void LoadedCharacters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadedCharacters::~LoadedCharacters() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadedCharacters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadedCharacters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scene_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadedCharacters::ArenaDtor(void* object) {
  LoadedCharacters* _this = reinterpret_cast< LoadedCharacters* >(object);
  (void)_this;
}
void LoadedCharacters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadedCharacters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadedCharacters& LoadedCharacters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadedCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadedCharacters::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadedCharacters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  scene_name_.ClearToEmpty();
  scene_description_.ClearToEmpty();
  scene_display_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadedCharacters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string scene_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scene_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadedCharacters.scene_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scene_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadedCharacters.scene_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scene_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadedCharacters.scene_display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadedCharacters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadedCharacters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // string scene_name = 2;
  if (this->scene_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_name().data(), static_cast<int>(this->_internal_scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadedCharacters.scene_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scene_name(), target);
  }

  // string scene_description = 3;
  if (this->scene_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_description().data(), static_cast<int>(this->_internal_scene_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadedCharacters.scene_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scene_description(), target);
  }

  // string scene_display_name = 4;
  if (this->scene_display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_display_name().data(), static_cast<int>(this->_internal_scene_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadedCharacters.scene_display_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scene_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadedCharacters)
  return target;
}

size_t LoadedCharacters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadedCharacters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string scene_name = 2;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_name());
  }

  // string scene_description = 3;
  if (this->scene_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_description());
  }

  // string scene_display_name = 4;
  if (this->scene_display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_display_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadedCharacters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadedCharacters)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadedCharacters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadedCharacters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadedCharacters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadedCharacters)
    MergeFrom(*source);
  }
}

void LoadedCharacters::MergeFrom(const LoadedCharacters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadedCharacters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.scene_name().size() > 0) {
    _internal_set_scene_name(from._internal_scene_name());
  }
  if (from.scene_description().size() > 0) {
    _internal_set_scene_description(from._internal_scene_description());
  }
  if (from.scene_display_name().size() > 0) {
    _internal_set_scene_display_name(from._internal_scene_display_name());
  }
}

void LoadedCharacters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadedCharacters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadedCharacters::CopyFrom(const LoadedCharacters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadedCharacters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadedCharacters::IsInitialized() const {
  return true;
}

void LoadedCharacters::InternalSwap(LoadedCharacters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  scene_name_.Swap(&other->scene_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_description_.Swap(&other->scene_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_display_name_.Swap(&other->scene_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadedCharacters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnloadCharacters::_Internal {
 public:
};

UnloadCharacters::UnloadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.UnloadCharacters)
}
UnloadCharacters::UnloadCharacters(const UnloadCharacters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.UnloadCharacters)
}

void UnloadCharacters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base);
}

UnloadCharacters::~UnloadCharacters() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.UnloadCharacters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnloadCharacters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnloadCharacters::ArenaDtor(void* object) {
  UnloadCharacters* _this = reinterpret_cast< UnloadCharacters* >(object);
  (void)_this;
}
void UnloadCharacters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnloadCharacters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnloadCharacters& UnloadCharacters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnloadCharacters_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void UnloadCharacters::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.UnloadCharacters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloadCharacters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnloadCharacters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.UnloadCharacters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.UnloadCharacters)
  return target;
}

size_t UnloadCharacters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.UnloadCharacters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnloadCharacters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.UnloadCharacters)
  GOOGLE_DCHECK_NE(&from, this);
  const UnloadCharacters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnloadCharacters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.UnloadCharacters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.UnloadCharacters)
    MergeFrom(*source);
  }
}

void UnloadCharacters::MergeFrom(const UnloadCharacters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.UnloadCharacters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
}

void UnloadCharacters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.UnloadCharacters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloadCharacters::CopyFrom(const UnloadCharacters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.UnloadCharacters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadCharacters::IsInitialized() const {
  return true;
}

void UnloadCharacters::InternalSwap(UnloadCharacters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloadCharacters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CurrentSceneStatus::_Internal {
 public:
};

CurrentSceneStatus::CurrentSceneStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CurrentSceneStatus)
}
CurrentSceneStatus::CurrentSceneStatus(const CurrentSceneStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_name().empty()) {
    scene_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_name(), 
      GetArena());
  }
  scene_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_description().empty()) {
    scene_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_description(), 
      GetArena());
  }
  scene_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_display_name().empty()) {
    scene_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_display_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CurrentSceneStatus)
}

void CurrentSceneStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurrentSceneStatus::~CurrentSceneStatus() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CurrentSceneStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrentSceneStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scene_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrentSceneStatus::ArenaDtor(void* object) {
  CurrentSceneStatus* _this = reinterpret_cast< CurrentSceneStatus* >(object);
  (void)_this;
}
void CurrentSceneStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentSceneStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentSceneStatus& CurrentSceneStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentSceneStatus_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void CurrentSceneStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CurrentSceneStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  scene_name_.ClearToEmpty();
  scene_description_.ClearToEmpty();
  scene_display_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentSceneStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string scene_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scene_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CurrentSceneStatus.scene_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scene_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CurrentSceneStatus.scene_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scene_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CurrentSceneStatus.scene_display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentSceneStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CurrentSceneStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // string scene_name = 2;
  if (this->scene_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_name().data(), static_cast<int>(this->_internal_scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CurrentSceneStatus.scene_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scene_name(), target);
  }

  // string scene_description = 3;
  if (this->scene_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_description().data(), static_cast<int>(this->_internal_scene_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CurrentSceneStatus.scene_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scene_description(), target);
  }

  // string scene_display_name = 4;
  if (this->scene_display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_display_name().data(), static_cast<int>(this->_internal_scene_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CurrentSceneStatus.scene_display_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scene_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CurrentSceneStatus)
  return target;
}

size_t CurrentSceneStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CurrentSceneStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string scene_name = 2;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_name());
  }

  // string scene_description = 3;
  if (this->scene_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_description());
  }

  // string scene_display_name = 4;
  if (this->scene_display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_display_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentSceneStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CurrentSceneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentSceneStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentSceneStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CurrentSceneStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CurrentSceneStatus)
    MergeFrom(*source);
  }
}

void CurrentSceneStatus::MergeFrom(const CurrentSceneStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CurrentSceneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.scene_name().size() > 0) {
    _internal_set_scene_name(from._internal_scene_name());
  }
  if (from.scene_description().size() > 0) {
    _internal_set_scene_description(from._internal_scene_description());
  }
  if (from.scene_display_name().size() > 0) {
    _internal_set_scene_display_name(from._internal_scene_display_name());
  }
}

void CurrentSceneStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CurrentSceneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentSceneStatus::CopyFrom(const CurrentSceneStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CurrentSceneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentSceneStatus::IsInitialized() const {
  return true;
}

void CurrentSceneStatus::InternalSwap(CurrentSceneStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  scene_name_.Swap(&other->scene_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_description_.Swap(&other->scene_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_display_name_.Swap(&other->scene_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentSceneStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModifyExactResponse::_Internal {
 public:
};

ModifyExactResponse::ModifyExactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ModifyExactResponse)
}
ModifyExactResponse::ModifyExactResponse(const ModifyExactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  exact_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exact_text().empty()) {
    exact_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exact_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ModifyExactResponse)
}

void ModifyExactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exact_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModifyExactResponse::~ModifyExactResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ModifyExactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyExactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exact_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModifyExactResponse::ArenaDtor(void* object) {
  ModifyExactResponse* _this = reinterpret_cast< ModifyExactResponse* >(object);
  (void)_this;
}
void ModifyExactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyExactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyExactResponse& ModifyExactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyExactResponse_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void ModifyExactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ModifyExactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interaction_id_.ClearToEmpty();
  exact_text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyExactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.ModifyExactResponse.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exact_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exact_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.ModifyExactResponse.exact_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyExactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ModifyExactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ModifyExactResponse.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // string exact_text = 2;
  if (this->exact_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exact_text().data(), static_cast<int>(this->_internal_exact_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ModifyExactResponse.exact_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exact_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ModifyExactResponse)
  return target;
}

size_t ModifyExactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ModifyExactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string exact_text = 2;
  if (this->exact_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exact_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyExactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ModifyExactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyExactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyExactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ModifyExactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ModifyExactResponse)
    MergeFrom(*source);
  }
}

void ModifyExactResponse::MergeFrom(const ModifyExactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ModifyExactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
  if (from.exact_text().size() > 0) {
    _internal_set_exact_text(from._internal_exact_text());
  }
}

void ModifyExactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ModifyExactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyExactResponse::CopyFrom(const ModifyExactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ModifyExactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyExactResponse::IsInitialized() const {
  return true;
}

void ModifyExactResponse::InternalSwap(ModifyExactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exact_text_.Swap(&other->exact_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyExactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneOutputEvent_Agent::_Internal {
 public:
};

LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
}
LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(const LoadSceneOutputEvent_Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent_id(), 
      GetArena());
  }
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brain_name().empty()) {
    brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brain_name(), 
      GetArena());
  }
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_given_name().empty()) {
    given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_given_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
}

void LoadSceneOutputEvent_Agent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadSceneOutputEvent_Agent::~LoadSceneOutputEvent_Agent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneOutputEvent_Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadSceneOutputEvent_Agent::ArenaDtor(void* object) {
  LoadSceneOutputEvent_Agent* _this = reinterpret_cast< LoadSceneOutputEvent_Agent* >(object);
  (void)_this;
}
void LoadSceneOutputEvent_Agent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneOutputEvent_Agent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneOutputEvent_Agent& LoadSceneOutputEvent_Agent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneOutputEvent_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneOutputEvent_Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_id_.ClearToEmpty();
  brain_name_.ClearToEmpty();
  given_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneOutputEvent_Agent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brain_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brain_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.brain_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string given_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_given_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.given_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneOutputEvent_Agent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brain_name().data(), static_cast<int>(this->_internal_brain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.brain_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brain_name(), target);
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_given_name().data(), static_cast<int>(this->_internal_given_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.given_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_given_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  return target;
}

size_t LoadSceneOutputEvent_Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brain_name());
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_given_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneOutputEvent_Agent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneOutputEvent_Agent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneOutputEvent_Agent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadSceneOutputEvent.Agent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadSceneOutputEvent.Agent)
    MergeFrom(*source);
  }
}

void LoadSceneOutputEvent_Agent::MergeFrom(const LoadSceneOutputEvent_Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.brain_name().size() > 0) {
    _internal_set_brain_name(from._internal_brain_name());
  }
  if (from.given_name().size() > 0) {
    _internal_set_given_name(from._internal_given_name());
  }
}

void LoadSceneOutputEvent_Agent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneOutputEvent_Agent::CopyFrom(const LoadSceneOutputEvent_Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneOutputEvent_Agent::IsInitialized() const {
  return true;
}

void LoadSceneOutputEvent_Agent::InternalSwap(LoadSceneOutputEvent_Agent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  brain_name_.Swap(&other->brain_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  given_name_.Swap(&other->given_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneOutputEvent_Agent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneOutputEvent::_Internal {
 public:
};

LoadSceneOutputEvent::LoadSceneOutputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadSceneOutputEvent)
}
LoadSceneOutputEvent::LoadSceneOutputEvent(const LoadSceneOutputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadSceneOutputEvent)
}

void LoadSceneOutputEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
}

LoadSceneOutputEvent::~LoadSceneOutputEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadSceneOutputEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneOutputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadSceneOutputEvent::ArenaDtor(void* object) {
  LoadSceneOutputEvent* _this = reinterpret_cast< LoadSceneOutputEvent* >(object);
  (void)_this;
}
void LoadSceneOutputEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneOutputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneOutputEvent& LoadSceneOutputEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneOutputEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneOutputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadSceneOutputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneOutputEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneOutputEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadSceneOutputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadSceneOutputEvent)
  return target;
}

size_t LoadSceneOutputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadSceneOutputEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneOutputEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneOutputEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneOutputEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadSceneOutputEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadSceneOutputEvent)
    MergeFrom(*source);
  }
}

void LoadSceneOutputEvent::MergeFrom(const LoadSceneOutputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
}

void LoadSceneOutputEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneOutputEvent::CopyFrom(const LoadSceneOutputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneOutputEvent::IsInitialized() const {
  return true;
}

void LoadSceneOutputEvent::InternalSwap(LoadSceneOutputEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneOutputEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Agent_CharacterAssets::_Internal {
 public:
};

Agent_CharacterAssets::Agent_CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Agent.CharacterAssets)
}
Agent_CharacterAssets::Agent_CharacterAssets(const Agent_CharacterAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpm_model_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpm_model_uri().empty()) {
    rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpm_model_uri(), 
      GetArena());
  }
  rpm_image_uri_portrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpm_image_uri_portrait().empty()) {
    rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpm_image_uri_portrait(), 
      GetArena());
  }
  rpm_image_uri_posture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpm_image_uri_posture().empty()) {
    rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpm_image_uri_posture(), 
      GetArena());
  }
  avatar_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_img().empty()) {
    avatar_img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_img(), 
      GetArena());
  }
  avatar_img_original_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_img_original().empty()) {
    avatar_img_original_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_img_original(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Agent.CharacterAssets)
}

void Agent_CharacterAssets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  rpm_model_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_portrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_posture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_original_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Agent_CharacterAssets::~Agent_CharacterAssets() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Agent.CharacterAssets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Agent_CharacterAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rpm_model_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_portrait_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_posture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_original_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Agent_CharacterAssets::ArenaDtor(void* object) {
  Agent_CharacterAssets* _this = reinterpret_cast< Agent_CharacterAssets* >(object);
  (void)_this;
}
void Agent_CharacterAssets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Agent_CharacterAssets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Agent_CharacterAssets& Agent_CharacterAssets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Agent_CharacterAssets_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Agent_CharacterAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Agent.CharacterAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpm_model_uri_.ClearToEmpty();
  rpm_image_uri_portrait_.ClearToEmpty();
  rpm_image_uri_posture_.ClearToEmpty();
  avatar_img_.ClearToEmpty();
  avatar_img_original_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Agent_CharacterAssets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rpm_model_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpm_model_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.CharacterAssets.rpm_model_uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rpm_image_uri_portrait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rpm_image_uri_portrait();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.CharacterAssets.rpm_image_uri_portrait"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rpm_image_uri_posture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rpm_image_uri_posture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.CharacterAssets.rpm_image_uri_posture"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_img = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_img();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.CharacterAssets.avatar_img"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_img_original = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_avatar_img_original();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.CharacterAssets.avatar_img_original"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Agent_CharacterAssets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Agent.CharacterAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rpm_model_uri = 1;
  if (this->rpm_model_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpm_model_uri().data(), static_cast<int>(this->_internal_rpm_model_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.CharacterAssets.rpm_model_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rpm_model_uri(), target);
  }

  // string rpm_image_uri_portrait = 2;
  if (this->rpm_image_uri_portrait().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpm_image_uri_portrait().data(), static_cast<int>(this->_internal_rpm_image_uri_portrait().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.CharacterAssets.rpm_image_uri_portrait");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rpm_image_uri_portrait(), target);
  }

  // string rpm_image_uri_posture = 3;
  if (this->rpm_image_uri_posture().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpm_image_uri_posture().data(), static_cast<int>(this->_internal_rpm_image_uri_posture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.CharacterAssets.rpm_image_uri_posture");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rpm_image_uri_posture(), target);
  }

  // string avatar_img = 4;
  if (this->avatar_img().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_img().data(), static_cast<int>(this->_internal_avatar_img().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.CharacterAssets.avatar_img");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_img(), target);
  }

  // string avatar_img_original = 5;
  if (this->avatar_img_original().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_img_original().data(), static_cast<int>(this->_internal_avatar_img_original().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.CharacterAssets.avatar_img_original");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_avatar_img_original(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Agent.CharacterAssets)
  return target;
}

size_t Agent_CharacterAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Agent.CharacterAssets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rpm_model_uri = 1;
  if (this->rpm_model_uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpm_model_uri());
  }

  // string rpm_image_uri_portrait = 2;
  if (this->rpm_image_uri_portrait().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpm_image_uri_portrait());
  }

  // string rpm_image_uri_posture = 3;
  if (this->rpm_image_uri_posture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpm_image_uri_posture());
  }

  // string avatar_img = 4;
  if (this->avatar_img().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_img());
  }

  // string avatar_img_original = 5;
  if (this->avatar_img_original().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_img_original());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Agent_CharacterAssets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Agent.CharacterAssets)
  GOOGLE_DCHECK_NE(&from, this);
  const Agent_CharacterAssets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Agent_CharacterAssets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Agent.CharacterAssets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Agent.CharacterAssets)
    MergeFrom(*source);
  }
}

void Agent_CharacterAssets::MergeFrom(const Agent_CharacterAssets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Agent.CharacterAssets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rpm_model_uri().size() > 0) {
    _internal_set_rpm_model_uri(from._internal_rpm_model_uri());
  }
  if (from.rpm_image_uri_portrait().size() > 0) {
    _internal_set_rpm_image_uri_portrait(from._internal_rpm_image_uri_portrait());
  }
  if (from.rpm_image_uri_posture().size() > 0) {
    _internal_set_rpm_image_uri_posture(from._internal_rpm_image_uri_posture());
  }
  if (from.avatar_img().size() > 0) {
    _internal_set_avatar_img(from._internal_avatar_img());
  }
  if (from.avatar_img_original().size() > 0) {
    _internal_set_avatar_img_original(from._internal_avatar_img_original());
  }
}

void Agent_CharacterAssets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Agent.CharacterAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent_CharacterAssets::CopyFrom(const Agent_CharacterAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Agent.CharacterAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent_CharacterAssets::IsInitialized() const {
  return true;
}

void Agent_CharacterAssets::InternalSwap(Agent_CharacterAssets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpm_model_uri_.Swap(&other->rpm_model_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rpm_image_uri_portrait_.Swap(&other->rpm_image_uri_portrait_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rpm_image_uri_posture_.Swap(&other->rpm_image_uri_posture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_img_.Swap(&other->avatar_img_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_img_original_.Swap(&other->avatar_img_original_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Agent_CharacterAssets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Agent::_Internal {
 public:
  static const ::ai::inworld::packets::Agent_CharacterAssets& character_assets(const Agent* msg);
};

const ::ai::inworld::packets::Agent_CharacterAssets&
Agent::_Internal::character_assets(const Agent* msg) {
  return *msg->character_assets_;
}
Agent::Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Agent)
}
Agent::Agent(const Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent_id(), 
      GetArena());
  }
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brain_name().empty()) {
    brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brain_name(), 
      GetArena());
  }
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_given_name().empty()) {
    given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_given_name(), 
      GetArena());
  }
  if (from._internal_has_character_assets()) {
    character_assets_ = new ::ai::inworld::packets::Agent_CharacterAssets(*from.character_assets_);
  } else {
    character_assets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Agent)
}

void Agent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_assets_ = nullptr;
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Agent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_assets_;
}

void Agent::ArenaDtor(void* object) {
  Agent* _this = reinterpret_cast< Agent* >(object);
  (void)_this;
}
void Agent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Agent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Agent& Agent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Agent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_id_.ClearToEmpty();
  brain_name_.ClearToEmpty();
  given_name_.ClearToEmpty();
  if (GetArena() == nullptr && character_assets_ != nullptr) {
    delete character_assets_;
  }
  character_assets_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Agent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brain_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brain_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.brain_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string given_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_given_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Agent.given_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Agent.CharacterAssets character_assets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_assets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Agent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brain_name().data(), static_cast<int>(this->_internal_brain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.brain_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brain_name(), target);
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_given_name().data(), static_cast<int>(this->_internal_given_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Agent.given_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_given_name(), target);
  }

  // .ai.inworld.packets.Agent.CharacterAssets character_assets = 4;
  if (this->has_character_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::character_assets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Agent)
  return target;
}

size_t Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Agent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brain_name());
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_given_name());
  }

  // .ai.inworld.packets.Agent.CharacterAssets character_assets = 4;
  if (this->has_character_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_assets_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Agent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const Agent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Agent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Agent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Agent)
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.brain_name().size() > 0) {
    _internal_set_brain_name(from._internal_brain_name());
  }
  if (from.given_name().size() > 0) {
    _internal_set_given_name(from._internal_given_name());
  }
  if (from.has_character_assets()) {
    _internal_mutable_character_assets()->::ai::inworld::packets::Agent_CharacterAssets::MergeFrom(from._internal_character_assets());
  }
}

void Agent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  return true;
}

void Agent::InternalSwap(Agent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  brain_name_.Swap(&other->brain_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  given_name_.Swap(&other->given_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(character_assets_, other->character_assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Agent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DebugInfoEvent::_Internal {
 public:
  static const ::ai::inworld::packets::RelationInfo& relation(const DebugInfoEvent* msg);
};

const ::ai::inworld::packets::RelationInfo&
DebugInfoEvent::_Internal::relation(const DebugInfoEvent* msg) {
  return *msg->info_.relation_;
}
void DebugInfoEvent::set_allocated_relation(::ai::inworld::packets::RelationInfo* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_info();
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relation);
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    set_has_relation();
    info_.relation_ = relation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.DebugInfoEvent.relation)
}
DebugInfoEvent::DebugInfoEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DebugInfoEvent)
}
DebugInfoEvent::DebugInfoEvent(const DebugInfoEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_info();
  switch (from.info_case()) {
    case kRelation: {
      _internal_mutable_relation()->::ai::inworld::packets::RelationInfo::MergeFrom(from._internal_relation());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DebugInfoEvent)
}

void DebugInfoEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  clear_has_info();
}

DebugInfoEvent::~DebugInfoEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DebugInfoEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugInfoEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_info()) {
    clear_info();
  }
}

void DebugInfoEvent::ArenaDtor(void* object) {
  DebugInfoEvent* _this = reinterpret_cast< DebugInfoEvent* >(object);
  (void)_this;
}
void DebugInfoEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugInfoEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugInfoEvent& DebugInfoEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugInfoEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void DebugInfoEvent::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DebugInfoEvent)
  switch (info_case()) {
    case kRelation: {
      if (GetArena() == nullptr) {
        delete info_.relation_;
      }
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void DebugInfoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DebugInfoEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugInfoEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.RelationInfo relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugInfoEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DebugInfoEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo relation = 1;
  if (_internal_has_relation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DebugInfoEvent)
  return target;
}

size_t DebugInfoEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DebugInfoEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (info_case()) {
    // .ai.inworld.packets.RelationInfo relation = 1;
    case kRelation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_.relation_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugInfoEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.DebugInfoEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugInfoEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugInfoEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.DebugInfoEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.DebugInfoEvent)
    MergeFrom(*source);
  }
}

void DebugInfoEvent::MergeFrom(const DebugInfoEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DebugInfoEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.info_case()) {
    case kRelation: {
      _internal_mutable_relation()->::ai::inworld::packets::RelationInfo::MergeFrom(from._internal_relation());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
}

void DebugInfoEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.DebugInfoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfoEvent::CopyFrom(const DebugInfoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DebugInfoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfoEvent::IsInitialized() const {
  return true;
}

void DebugInfoEvent::InternalSwap(DebugInfoEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugInfoEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionControlEvent::_Internal {
 public:
  static const ::ai::inworld::engine::configuration::SessionConfiguration& session_configuration(const SessionControlEvent* msg);
  static const ::ai::inworld::engine::configuration::UserConfiguration& user_configuration(const SessionControlEvent* msg);
  static const ::ai::inworld::engine::configuration::ClientConfiguration& client_configuration(const SessionControlEvent* msg);
  static const ::ai::inworld::engine::configuration::CapabilitiesConfiguration& capabilities_configuration(const SessionControlEvent* msg);
  static const ::ai::inworld::packets::Continuation& continuation(const SessionControlEvent* msg);
  static const ::ai::inworld::packets::SessionHistoryRequest& session_history_request(const SessionControlEvent* msg);
  static const ::ai::inworld::packets::SessionConfigurationPayload& session_configuration_payload(const SessionControlEvent* msg);
};

const ::ai::inworld::engine::configuration::SessionConfiguration&
SessionControlEvent::_Internal::session_configuration(const SessionControlEvent* msg) {
  return *msg->session_control_.session_configuration_;
}
const ::ai::inworld::engine::configuration::UserConfiguration&
SessionControlEvent::_Internal::user_configuration(const SessionControlEvent* msg) {
  return *msg->session_control_.user_configuration_;
}
const ::ai::inworld::engine::configuration::ClientConfiguration&
SessionControlEvent::_Internal::client_configuration(const SessionControlEvent* msg) {
  return *msg->session_control_.client_configuration_;
}
const ::ai::inworld::engine::configuration::CapabilitiesConfiguration&
SessionControlEvent::_Internal::capabilities_configuration(const SessionControlEvent* msg) {
  return *msg->session_control_.capabilities_configuration_;
}
const ::ai::inworld::packets::Continuation&
SessionControlEvent::_Internal::continuation(const SessionControlEvent* msg) {
  return *msg->session_control_.continuation_;
}
const ::ai::inworld::packets::SessionHistoryRequest&
SessionControlEvent::_Internal::session_history_request(const SessionControlEvent* msg) {
  return *msg->session_control_.session_history_request_;
}
const ::ai::inworld::packets::SessionConfigurationPayload&
SessionControlEvent::_Internal::session_configuration_payload(const SessionControlEvent* msg) {
  return *msg->session_control_.session_configuration_payload_;
}
void SessionControlEvent::set_allocated_session_configuration(::ai::inworld::engine::configuration::SessionConfiguration* session_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (session_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_configuration)->GetArena();
    if (message_arena != submessage_arena) {
      session_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_configuration, submessage_arena);
    }
    set_has_session_configuration();
    session_control_.session_configuration_ = session_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.session_configuration)
}
void SessionControlEvent::clear_session_configuration() {
  if (_internal_has_session_configuration()) {
    if (GetArena() == nullptr) {
      delete session_control_.session_configuration_;
    }
    clear_has_session_control();
  }
}
void SessionControlEvent::set_allocated_user_configuration(::ai::inworld::engine::configuration::UserConfiguration* user_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (user_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_configuration)->GetArena();
    if (message_arena != submessage_arena) {
      user_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_configuration, submessage_arena);
    }
    set_has_user_configuration();
    session_control_.user_configuration_ = user_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.user_configuration)
}
void SessionControlEvent::clear_user_configuration() {
  if (_internal_has_user_configuration()) {
    if (GetArena() == nullptr) {
      delete session_control_.user_configuration_;
    }
    clear_has_session_control();
  }
}
void SessionControlEvent::set_allocated_client_configuration(::ai::inworld::engine::configuration::ClientConfiguration* client_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (client_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_configuration)->GetArena();
    if (message_arena != submessage_arena) {
      client_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_configuration, submessage_arena);
    }
    set_has_client_configuration();
    session_control_.client_configuration_ = client_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.client_configuration)
}
void SessionControlEvent::clear_client_configuration() {
  if (_internal_has_client_configuration()) {
    if (GetArena() == nullptr) {
      delete session_control_.client_configuration_;
    }
    clear_has_session_control();
  }
}
void SessionControlEvent::set_allocated_capabilities_configuration(::ai::inworld::engine::configuration::CapabilitiesConfiguration* capabilities_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (capabilities_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_configuration)->GetArena();
    if (message_arena != submessage_arena) {
      capabilities_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities_configuration, submessage_arena);
    }
    set_has_capabilities_configuration();
    session_control_.capabilities_configuration_ = capabilities_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.capabilities_configuration)
}
void SessionControlEvent::clear_capabilities_configuration() {
  if (_internal_has_capabilities_configuration()) {
    if (GetArena() == nullptr) {
      delete session_control_.capabilities_configuration_;
    }
    clear_has_session_control();
  }
}
void SessionControlEvent::set_allocated_continuation(::ai::inworld::packets::Continuation* continuation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (continuation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(continuation);
    if (message_arena != submessage_arena) {
      continuation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuation, submessage_arena);
    }
    set_has_continuation();
    session_control_.continuation_ = continuation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.continuation)
}
void SessionControlEvent::set_allocated_session_history_request(::ai::inworld::packets::SessionHistoryRequest* session_history_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (session_history_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_history_request);
    if (message_arena != submessage_arena) {
      session_history_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_history_request, submessage_arena);
    }
    set_has_session_history_request();
    session_control_.session_history_request_ = session_history_request;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.session_history_request)
}
void SessionControlEvent::set_allocated_session_configuration_payload(::ai::inworld::packets::SessionConfigurationPayload* session_configuration_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_session_control();
  if (session_configuration_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_configuration_payload);
    if (message_arena != submessage_arena) {
      session_configuration_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_configuration_payload, submessage_arena);
    }
    set_has_session_configuration_payload();
    session_control_.session_configuration_payload_ = session_configuration_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.SessionControlEvent.session_configuration_payload)
}
SessionControlEvent::SessionControlEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.SessionControlEvent)
}
SessionControlEvent::SessionControlEvent(const SessionControlEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_session_control();
  switch (from.session_control_case()) {
    case kSessionConfiguration: {
      _internal_mutable_session_configuration()->::ai::inworld::engine::configuration::SessionConfiguration::MergeFrom(from._internal_session_configuration());
      break;
    }
    case kUserConfiguration: {
      _internal_mutable_user_configuration()->::ai::inworld::engine::configuration::UserConfiguration::MergeFrom(from._internal_user_configuration());
      break;
    }
    case kClientConfiguration: {
      _internal_mutable_client_configuration()->::ai::inworld::engine::configuration::ClientConfiguration::MergeFrom(from._internal_client_configuration());
      break;
    }
    case kCapabilitiesConfiguration: {
      _internal_mutable_capabilities_configuration()->::ai::inworld::engine::configuration::CapabilitiesConfiguration::MergeFrom(from._internal_capabilities_configuration());
      break;
    }
    case kContinuation: {
      _internal_mutable_continuation()->::ai::inworld::packets::Continuation::MergeFrom(from._internal_continuation());
      break;
    }
    case kSessionHistoryRequest: {
      _internal_mutable_session_history_request()->::ai::inworld::packets::SessionHistoryRequest::MergeFrom(from._internal_session_history_request());
      break;
    }
    case kSessionConfigurationPayload: {
      _internal_mutable_session_configuration_payload()->::ai::inworld::packets::SessionConfigurationPayload::MergeFrom(from._internal_session_configuration_payload());
      break;
    }
    case SESSION_CONTROL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.SessionControlEvent)
}

void SessionControlEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  clear_has_session_control();
}

SessionControlEvent::~SessionControlEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.SessionControlEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionControlEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_session_control()) {
    clear_session_control();
  }
}

void SessionControlEvent::ArenaDtor(void* object) {
  SessionControlEvent* _this = reinterpret_cast< SessionControlEvent* >(object);
  (void)_this;
}
void SessionControlEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionControlEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionControlEvent& SessionControlEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionControlEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void SessionControlEvent::clear_session_control() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.SessionControlEvent)
  switch (session_control_case()) {
    case kSessionConfiguration: {
      if (GetArena() == nullptr) {
        delete session_control_.session_configuration_;
      }
      break;
    }
    case kUserConfiguration: {
      if (GetArena() == nullptr) {
        delete session_control_.user_configuration_;
      }
      break;
    }
    case kClientConfiguration: {
      if (GetArena() == nullptr) {
        delete session_control_.client_configuration_;
      }
      break;
    }
    case kCapabilitiesConfiguration: {
      if (GetArena() == nullptr) {
        delete session_control_.capabilities_configuration_;
      }
      break;
    }
    case kContinuation: {
      if (GetArena() == nullptr) {
        delete session_control_.continuation_;
      }
      break;
    }
    case kSessionHistoryRequest: {
      if (GetArena() == nullptr) {
        delete session_control_.session_history_request_;
      }
      break;
    }
    case kSessionConfigurationPayload: {
      if (GetArena() == nullptr) {
        delete session_control_.session_configuration_payload_;
      }
      break;
    }
    case SESSION_CONTROL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SESSION_CONTROL_NOT_SET;
}


void SessionControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.SessionControlEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_session_control();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionControlEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.engine.configuration.SessionConfiguration session_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.configuration.UserConfiguration user_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.configuration.ClientConfiguration client_configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.configuration.CapabilitiesConfiguration capabilities_configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Continuation continuation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.SessionHistoryRequest session_history_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_history_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.SessionConfigurationPayload session_configuration_payload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_configuration_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionControlEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.SessionControlEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.engine.configuration.SessionConfiguration session_configuration = 1;
  if (_internal_has_session_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session_configuration(this), target, stream);
  }

  // .ai.inworld.engine.configuration.UserConfiguration user_configuration = 2;
  if (_internal_has_user_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_configuration(this), target, stream);
  }

  // .ai.inworld.engine.configuration.ClientConfiguration client_configuration = 3;
  if (_internal_has_client_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_configuration(this), target, stream);
  }

  // .ai.inworld.engine.configuration.CapabilitiesConfiguration capabilities_configuration = 4;
  if (_internal_has_capabilities_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::capabilities_configuration(this), target, stream);
  }

  // .ai.inworld.packets.Continuation continuation = 5;
  if (_internal_has_continuation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::continuation(this), target, stream);
  }

  // .ai.inworld.packets.SessionHistoryRequest session_history_request = 6;
  if (_internal_has_session_history_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::session_history_request(this), target, stream);
  }

  // .ai.inworld.packets.SessionConfigurationPayload session_configuration_payload = 7;
  if (_internal_has_session_configuration_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::session_configuration_payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.SessionControlEvent)
  return target;
}

size_t SessionControlEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.SessionControlEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (session_control_case()) {
    // .ai.inworld.engine.configuration.SessionConfiguration session_configuration = 1;
    case kSessionConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.session_configuration_);
      break;
    }
    // .ai.inworld.engine.configuration.UserConfiguration user_configuration = 2;
    case kUserConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.user_configuration_);
      break;
    }
    // .ai.inworld.engine.configuration.ClientConfiguration client_configuration = 3;
    case kClientConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.client_configuration_);
      break;
    }
    // .ai.inworld.engine.configuration.CapabilitiesConfiguration capabilities_configuration = 4;
    case kCapabilitiesConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.capabilities_configuration_);
      break;
    }
    // .ai.inworld.packets.Continuation continuation = 5;
    case kContinuation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.continuation_);
      break;
    }
    // .ai.inworld.packets.SessionHistoryRequest session_history_request = 6;
    case kSessionHistoryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.session_history_request_);
      break;
    }
    // .ai.inworld.packets.SessionConfigurationPayload session_configuration_payload = 7;
    case kSessionConfigurationPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_control_.session_configuration_payload_);
      break;
    }
    case SESSION_CONTROL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionControlEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.SessionControlEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionControlEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionControlEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.SessionControlEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.SessionControlEvent)
    MergeFrom(*source);
  }
}

void SessionControlEvent::MergeFrom(const SessionControlEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.SessionControlEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.session_control_case()) {
    case kSessionConfiguration: {
      _internal_mutable_session_configuration()->::ai::inworld::engine::configuration::SessionConfiguration::MergeFrom(from._internal_session_configuration());
      break;
    }
    case kUserConfiguration: {
      _internal_mutable_user_configuration()->::ai::inworld::engine::configuration::UserConfiguration::MergeFrom(from._internal_user_configuration());
      break;
    }
    case kClientConfiguration: {
      _internal_mutable_client_configuration()->::ai::inworld::engine::configuration::ClientConfiguration::MergeFrom(from._internal_client_configuration());
      break;
    }
    case kCapabilitiesConfiguration: {
      _internal_mutable_capabilities_configuration()->::ai::inworld::engine::configuration::CapabilitiesConfiguration::MergeFrom(from._internal_capabilities_configuration());
      break;
    }
    case kContinuation: {
      _internal_mutable_continuation()->::ai::inworld::packets::Continuation::MergeFrom(from._internal_continuation());
      break;
    }
    case kSessionHistoryRequest: {
      _internal_mutable_session_history_request()->::ai::inworld::packets::SessionHistoryRequest::MergeFrom(from._internal_session_history_request());
      break;
    }
    case kSessionConfigurationPayload: {
      _internal_mutable_session_configuration_payload()->::ai::inworld::packets::SessionConfigurationPayload::MergeFrom(from._internal_session_configuration_payload());
      break;
    }
    case SESSION_CONTROL_NOT_SET: {
      break;
    }
  }
}

void SessionControlEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.SessionControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionControlEvent::CopyFrom(const SessionControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.SessionControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionControlEvent::IsInitialized() const {
  return true;
}

void SessionControlEvent::InternalSwap(SessionControlEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(session_control_, other->session_control_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionControlEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionConfigurationPayload::_Internal {
 public:
  static const ::ai::inworld::engine::configuration::SessionConfiguration& session_configuration(const SessionConfigurationPayload* msg);
  static const ::ai::inworld::engine::configuration::UserConfiguration& user_configuration(const SessionConfigurationPayload* msg);
  static const ::ai::inworld::engine::configuration::ClientConfiguration& client_configuration(const SessionConfigurationPayload* msg);
  static const ::ai::inworld::engine::configuration::CapabilitiesConfiguration& capabilities_configuration(const SessionConfigurationPayload* msg);
  static const ::ai::inworld::packets::Continuation& continuation(const SessionConfigurationPayload* msg);
};

const ::ai::inworld::engine::configuration::SessionConfiguration&
SessionConfigurationPayload::_Internal::session_configuration(const SessionConfigurationPayload* msg) {
  return *msg->session_configuration_;
}
const ::ai::inworld::engine::configuration::UserConfiguration&
SessionConfigurationPayload::_Internal::user_configuration(const SessionConfigurationPayload* msg) {
  return *msg->user_configuration_;
}
const ::ai::inworld::engine::configuration::ClientConfiguration&
SessionConfigurationPayload::_Internal::client_configuration(const SessionConfigurationPayload* msg) {
  return *msg->client_configuration_;
}
const ::ai::inworld::engine::configuration::CapabilitiesConfiguration&
SessionConfigurationPayload::_Internal::capabilities_configuration(const SessionConfigurationPayload* msg) {
  return *msg->capabilities_configuration_;
}
const ::ai::inworld::packets::Continuation&
SessionConfigurationPayload::_Internal::continuation(const SessionConfigurationPayload* msg) {
  return *msg->continuation_;
}
void SessionConfigurationPayload::clear_session_configuration() {
  if (GetArena() == nullptr && session_configuration_ != nullptr) {
    delete session_configuration_;
  }
  session_configuration_ = nullptr;
}
void SessionConfigurationPayload::clear_user_configuration() {
  if (GetArena() == nullptr && user_configuration_ != nullptr) {
    delete user_configuration_;
  }
  user_configuration_ = nullptr;
}
void SessionConfigurationPayload::clear_client_configuration() {
  if (GetArena() == nullptr && client_configuration_ != nullptr) {
    delete client_configuration_;
  }
  client_configuration_ = nullptr;
}
void SessionConfigurationPayload::clear_capabilities_configuration() {
  if (GetArena() == nullptr && capabilities_configuration_ != nullptr) {
    delete capabilities_configuration_;
  }
  capabilities_configuration_ = nullptr;
}
SessionConfigurationPayload::SessionConfigurationPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.SessionConfigurationPayload)
}
SessionConfigurationPayload::SessionConfigurationPayload(const SessionConfigurationPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session_configuration()) {
    session_configuration_ = new ::ai::inworld::engine::configuration::SessionConfiguration(*from.session_configuration_);
  } else {
    session_configuration_ = nullptr;
  }
  if (from._internal_has_user_configuration()) {
    user_configuration_ = new ::ai::inworld::engine::configuration::UserConfiguration(*from.user_configuration_);
  } else {
    user_configuration_ = nullptr;
  }
  if (from._internal_has_client_configuration()) {
    client_configuration_ = new ::ai::inworld::engine::configuration::ClientConfiguration(*from.client_configuration_);
  } else {
    client_configuration_ = nullptr;
  }
  if (from._internal_has_capabilities_configuration()) {
    capabilities_configuration_ = new ::ai::inworld::engine::configuration::CapabilitiesConfiguration(*from.capabilities_configuration_);
  } else {
    capabilities_configuration_ = nullptr;
  }
  if (from._internal_has_continuation()) {
    continuation_ = new ::ai::inworld::packets::Continuation(*from.continuation_);
  } else {
    continuation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.SessionConfigurationPayload)
}

void SessionConfigurationPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&session_configuration_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&session_configuration_)) + sizeof(continuation_));
}

SessionConfigurationPayload::~SessionConfigurationPayload() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.SessionConfigurationPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionConfigurationPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete session_configuration_;
  if (this != internal_default_instance()) delete user_configuration_;
  if (this != internal_default_instance()) delete client_configuration_;
  if (this != internal_default_instance()) delete capabilities_configuration_;
  if (this != internal_default_instance()) delete continuation_;
}

void SessionConfigurationPayload::ArenaDtor(void* object) {
  SessionConfigurationPayload* _this = reinterpret_cast< SessionConfigurationPayload* >(object);
  (void)_this;
}
void SessionConfigurationPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionConfigurationPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionConfigurationPayload& SessionConfigurationPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionConfigurationPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void SessionConfigurationPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.SessionConfigurationPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && session_configuration_ != nullptr) {
    delete session_configuration_;
  }
  session_configuration_ = nullptr;
  if (GetArena() == nullptr && user_configuration_ != nullptr) {
    delete user_configuration_;
  }
  user_configuration_ = nullptr;
  if (GetArena() == nullptr && client_configuration_ != nullptr) {
    delete client_configuration_;
  }
  client_configuration_ = nullptr;
  if (GetArena() == nullptr && capabilities_configuration_ != nullptr) {
    delete capabilities_configuration_;
  }
  capabilities_configuration_ = nullptr;
  if (GetArena() == nullptr && continuation_ != nullptr) {
    delete continuation_;
  }
  continuation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionConfigurationPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.engine.configuration.SessionConfiguration session_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.configuration.UserConfiguration user_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.configuration.ClientConfiguration client_configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.configuration.CapabilitiesConfiguration capabilities_configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Continuation continuation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionConfigurationPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.SessionConfigurationPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.engine.configuration.SessionConfiguration session_configuration = 1;
  if (this->has_session_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session_configuration(this), target, stream);
  }

  // .ai.inworld.engine.configuration.UserConfiguration user_configuration = 2;
  if (this->has_user_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_configuration(this), target, stream);
  }

  // .ai.inworld.engine.configuration.ClientConfiguration client_configuration = 3;
  if (this->has_client_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_configuration(this), target, stream);
  }

  // .ai.inworld.engine.configuration.CapabilitiesConfiguration capabilities_configuration = 4;
  if (this->has_capabilities_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::capabilities_configuration(this), target, stream);
  }

  // .ai.inworld.packets.Continuation continuation = 5;
  if (this->has_continuation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::continuation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.SessionConfigurationPayload)
  return target;
}

size_t SessionConfigurationPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.SessionConfigurationPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.engine.configuration.SessionConfiguration session_configuration = 1;
  if (this->has_session_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_configuration_);
  }

  // .ai.inworld.engine.configuration.UserConfiguration user_configuration = 2;
  if (this->has_user_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_configuration_);
  }

  // .ai.inworld.engine.configuration.ClientConfiguration client_configuration = 3;
  if (this->has_client_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_configuration_);
  }

  // .ai.inworld.engine.configuration.CapabilitiesConfiguration capabilities_configuration = 4;
  if (this->has_capabilities_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_configuration_);
  }

  // .ai.inworld.packets.Continuation continuation = 5;
  if (this->has_continuation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *continuation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionConfigurationPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.SessionConfigurationPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionConfigurationPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionConfigurationPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.SessionConfigurationPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.SessionConfigurationPayload)
    MergeFrom(*source);
  }
}

void SessionConfigurationPayload::MergeFrom(const SessionConfigurationPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.SessionConfigurationPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session_configuration()) {
    _internal_mutable_session_configuration()->::ai::inworld::engine::configuration::SessionConfiguration::MergeFrom(from._internal_session_configuration());
  }
  if (from.has_user_configuration()) {
    _internal_mutable_user_configuration()->::ai::inworld::engine::configuration::UserConfiguration::MergeFrom(from._internal_user_configuration());
  }
  if (from.has_client_configuration()) {
    _internal_mutable_client_configuration()->::ai::inworld::engine::configuration::ClientConfiguration::MergeFrom(from._internal_client_configuration());
  }
  if (from.has_capabilities_configuration()) {
    _internal_mutable_capabilities_configuration()->::ai::inworld::engine::configuration::CapabilitiesConfiguration::MergeFrom(from._internal_capabilities_configuration());
  }
  if (from.has_continuation()) {
    _internal_mutable_continuation()->::ai::inworld::packets::Continuation::MergeFrom(from._internal_continuation());
  }
}

void SessionConfigurationPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.SessionConfigurationPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionConfigurationPayload::CopyFrom(const SessionConfigurationPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.SessionConfigurationPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionConfigurationPayload::IsInitialized() const {
  return true;
}

void SessionConfigurationPayload::InternalSwap(SessionConfigurationPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionConfigurationPayload, continuation_)
      + sizeof(SessionConfigurationPayload::continuation_)
      - PROTOBUF_FIELD_OFFSET(SessionConfigurationPayload, session_configuration_)>(
          reinterpret_cast<char*>(&session_configuration_),
          reinterpret_cast<char*>(&other->session_configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionConfigurationPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Continuation_ContinuationInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& passed_time(const Continuation_ContinuationInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Continuation_ContinuationInfo::_Internal::passed_time(const Continuation_ContinuationInfo* msg) {
  return *msg->passed_time_;
}
void Continuation_ContinuationInfo::clear_passed_time() {
  if (GetArena() == nullptr && passed_time_ != nullptr) {
    delete passed_time_;
  }
  passed_time_ = nullptr;
}
Continuation_ContinuationInfo::Continuation_ContinuationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Continuation.ContinuationInfo)
}
Continuation_ContinuationInfo::Continuation_ContinuationInfo(const Continuation_ContinuationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_passed_time()) {
    passed_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.passed_time_);
  } else {
    passed_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Continuation.ContinuationInfo)
}

void Continuation_ContinuationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  passed_time_ = nullptr;
}

Continuation_ContinuationInfo::~Continuation_ContinuationInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Continuation.ContinuationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Continuation_ContinuationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete passed_time_;
}

void Continuation_ContinuationInfo::ArenaDtor(void* object) {
  Continuation_ContinuationInfo* _this = reinterpret_cast< Continuation_ContinuationInfo* >(object);
  (void)_this;
}
void Continuation_ContinuationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Continuation_ContinuationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Continuation_ContinuationInfo& Continuation_ContinuationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Continuation_ContinuationInfo_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Continuation_ContinuationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Continuation.ContinuationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && passed_time_ != nullptr) {
    delete passed_time_;
  }
  passed_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Continuation_ContinuationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp passed_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_passed_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Continuation_ContinuationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Continuation.ContinuationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp passed_time = 1;
  if (this->has_passed_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::passed_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Continuation.ContinuationInfo)
  return target;
}

size_t Continuation_ContinuationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Continuation.ContinuationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp passed_time = 1;
  if (this->has_passed_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passed_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Continuation_ContinuationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Continuation.ContinuationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Continuation_ContinuationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Continuation_ContinuationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Continuation.ContinuationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Continuation.ContinuationInfo)
    MergeFrom(*source);
  }
}

void Continuation_ContinuationInfo::MergeFrom(const Continuation_ContinuationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Continuation.ContinuationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_passed_time()) {
    _internal_mutable_passed_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_passed_time());
  }
}

void Continuation_ContinuationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Continuation.ContinuationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Continuation_ContinuationInfo::CopyFrom(const Continuation_ContinuationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Continuation.ContinuationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Continuation_ContinuationInfo::IsInitialized() const {
  return true;
}

void Continuation_ContinuationInfo::InternalSwap(Continuation_ContinuationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(passed_time_, other->passed_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Continuation_ContinuationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Continuation::_Internal {
 public:
  static const ::ai::inworld::packets::Continuation_ContinuationInfo& continuation_info(const Continuation* msg);
  static const ::ai::inworld::packets::DialogHistory& dialog_history(const Continuation* msg);
};

const ::ai::inworld::packets::Continuation_ContinuationInfo&
Continuation::_Internal::continuation_info(const Continuation* msg) {
  return *msg->continuation_info_;
}
const ::ai::inworld::packets::DialogHistory&
Continuation::_Internal::dialog_history(const Continuation* msg) {
  return *msg->dialog_history_;
}
Continuation::Continuation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Continuation)
}
Continuation::Continuation(const Continuation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  externally_saved_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_externally_saved_state().empty()) {
    externally_saved_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_externally_saved_state(), 
      GetArena());
  }
  if (from._internal_has_continuation_info()) {
    continuation_info_ = new ::ai::inworld::packets::Continuation_ContinuationInfo(*from.continuation_info_);
  } else {
    continuation_info_ = nullptr;
  }
  if (from._internal_has_dialog_history()) {
    dialog_history_ = new ::ai::inworld::packets::DialogHistory(*from.dialog_history_);
  } else {
    dialog_history_ = nullptr;
  }
  continuation_type_ = from.continuation_type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Continuation)
}

void Continuation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  externally_saved_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&continuation_type_) -
      reinterpret_cast<char*>(&continuation_info_)) + sizeof(continuation_type_));
}

Continuation::~Continuation() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Continuation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Continuation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  externally_saved_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete continuation_info_;
  if (this != internal_default_instance()) delete dialog_history_;
}

void Continuation::ArenaDtor(void* object) {
  Continuation* _this = reinterpret_cast< Continuation* >(object);
  (void)_this;
}
void Continuation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Continuation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Continuation& Continuation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Continuation_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Continuation::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Continuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  externally_saved_state_.ClearToEmpty();
  if (GetArena() == nullptr && continuation_info_ != nullptr) {
    delete continuation_info_;
  }
  continuation_info_ = nullptr;
  if (GetArena() == nullptr && dialog_history_ != nullptr) {
    delete dialog_history_;
  }
  dialog_history_ = nullptr;
  continuation_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Continuation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Continuation.ContinuationInfo continuation_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuation_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Continuation.ContinuationType continuation_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuation_type(static_cast<::ai::inworld::packets::Continuation_ContinuationType>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DialogHistory dialog_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dialog_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes externally_saved_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_externally_saved_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Continuation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Continuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Continuation.ContinuationInfo continuation_info = 1;
  if (this->has_continuation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::continuation_info(this), target, stream);
  }

  // .ai.inworld.packets.Continuation.ContinuationType continuation_type = 2;
  if (this->continuation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_continuation_type(), target);
  }

  // .ai.inworld.packets.DialogHistory dialog_history = 3;
  if (this->has_dialog_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dialog_history(this), target, stream);
  }

  // bytes externally_saved_state = 4;
  if (this->externally_saved_state().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_externally_saved_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Continuation)
  return target;
}

size_t Continuation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Continuation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes externally_saved_state = 4;
  if (this->externally_saved_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_externally_saved_state());
  }

  // .ai.inworld.packets.Continuation.ContinuationInfo continuation_info = 1;
  if (this->has_continuation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *continuation_info_);
  }

  // .ai.inworld.packets.DialogHistory dialog_history = 3;
  if (this->has_dialog_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dialog_history_);
  }

  // .ai.inworld.packets.Continuation.ContinuationType continuation_type = 2;
  if (this->continuation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_continuation_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Continuation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Continuation)
  GOOGLE_DCHECK_NE(&from, this);
  const Continuation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Continuation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Continuation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Continuation)
    MergeFrom(*source);
  }
}

void Continuation::MergeFrom(const Continuation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Continuation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.externally_saved_state().size() > 0) {
    _internal_set_externally_saved_state(from._internal_externally_saved_state());
  }
  if (from.has_continuation_info()) {
    _internal_mutable_continuation_info()->::ai::inworld::packets::Continuation_ContinuationInfo::MergeFrom(from._internal_continuation_info());
  }
  if (from.has_dialog_history()) {
    _internal_mutable_dialog_history()->::ai::inworld::packets::DialogHistory::MergeFrom(from._internal_dialog_history());
  }
  if (from.continuation_type() != 0) {
    _internal_set_continuation_type(from._internal_continuation_type());
  }
}

void Continuation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Continuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Continuation::CopyFrom(const Continuation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Continuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Continuation::IsInitialized() const {
  return true;
}

void Continuation::InternalSwap(Continuation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  externally_saved_state_.Swap(&other->externally_saved_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Continuation, continuation_type_)
      + sizeof(Continuation::continuation_type_)
      - PROTOBUF_FIELD_OFFSET(Continuation, continuation_info_)>(
          reinterpret_cast<char*>(&continuation_info_),
          reinterpret_cast<char*>(&other->continuation_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Continuation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DialogHistory_HistoryItem::_Internal {
 public:
  static const ::ai::inworld::packets::Actor& actor(const DialogHistory_HistoryItem* msg);
};

const ::ai::inworld::packets::Actor&
DialogHistory_HistoryItem::_Internal::actor(const DialogHistory_HistoryItem* msg) {
  return *msg->actor_;
}
DialogHistory_HistoryItem::DialogHistory_HistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DialogHistory.HistoryItem)
}
DialogHistory_HistoryItem::DialogHistory_HistoryItem(const DialogHistory_HistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_actor()) {
    actor_ = new ::ai::inworld::packets::Actor(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DialogHistory.HistoryItem)
}

void DialogHistory_HistoryItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_ = nullptr;
}

DialogHistory_HistoryItem::~DialogHistory_HistoryItem() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DialogHistory.HistoryItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DialogHistory_HistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete actor_;
}

void DialogHistory_HistoryItem::ArenaDtor(void* object) {
  DialogHistory_HistoryItem* _this = reinterpret_cast< DialogHistory_HistoryItem* >(object);
  (void)_this;
}
void DialogHistory_HistoryItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DialogHistory_HistoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DialogHistory_HistoryItem& DialogHistory_HistoryItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DialogHistory_HistoryItem_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void DialogHistory_HistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DialogHistory.HistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DialogHistory_HistoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor actor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.DialogHistory.HistoryItem.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DialogHistory_HistoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DialogHistory.HistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor actor = 1;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actor(this), target, stream);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.DialogHistory.HistoryItem.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DialogHistory.HistoryItem)
  return target;
}

size_t DialogHistory_HistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DialogHistory.HistoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.Actor actor = 1;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DialogHistory_HistoryItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.DialogHistory.HistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DialogHistory_HistoryItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DialogHistory_HistoryItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.DialogHistory.HistoryItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.DialogHistory.HistoryItem)
    MergeFrom(*source);
  }
}

void DialogHistory_HistoryItem::MergeFrom(const DialogHistory_HistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DialogHistory.HistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_actor()) {
    _internal_mutable_actor()->::ai::inworld::packets::Actor::MergeFrom(from._internal_actor());
  }
}

void DialogHistory_HistoryItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.DialogHistory.HistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DialogHistory_HistoryItem::CopyFrom(const DialogHistory_HistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DialogHistory.HistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogHistory_HistoryItem::IsInitialized() const {
  return true;
}

void DialogHistory_HistoryItem::InternalSwap(DialogHistory_HistoryItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(actor_, other->actor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DialogHistory_HistoryItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DialogHistory::_Internal {
 public:
};

DialogHistory::DialogHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DialogHistory)
}
DialogHistory::DialogHistory(const DialogHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      history_(from.history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DialogHistory)
}

void DialogHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto.base);
}

DialogHistory::~DialogHistory() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DialogHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DialogHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DialogHistory::ArenaDtor(void* object) {
  DialogHistory* _this = reinterpret_cast< DialogHistory* >(object);
  (void)_this;
}
void DialogHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DialogHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DialogHistory& DialogHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DialogHistory_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void DialogHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DialogHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DialogHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.DialogHistory.HistoryItem history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DialogHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DialogHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.DialogHistory.HistoryItem history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DialogHistory)
  return target;
}

size_t DialogHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DialogHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.DialogHistory.HistoryItem history = 1;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DialogHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.DialogHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const DialogHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DialogHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.DialogHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.DialogHistory)
    MergeFrom(*source);
  }
}

void DialogHistory::MergeFrom(const DialogHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DialogHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
}

void DialogHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.DialogHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DialogHistory::CopyFrom(const DialogHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DialogHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogHistory::IsInitialized() const {
  return true;
}

void DialogHistory::InternalSwap(DialogHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DialogHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Relations_Relation::_Internal {
 public:
};

Relations_Relation::Relations_Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Relations.Relation)
}
Relations_Relation::Relations_Relation(const Relations_Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Relations.Relation)
}

void Relations_Relation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Relations_Relation::~Relations_Relation() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Relations.Relation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Relations_Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Relations_Relation::ArenaDtor(void* object) {
  Relations_Relation* _this = reinterpret_cast< Relations_Relation* >(object);
  (void)_this;
}
void Relations_Relation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Relations_Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Relations_Relation& Relations_Relation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Relations_Relation_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Relations_Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Relations.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  label_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relations_Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Relations.Relation.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Relations.Relation.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relations_Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Relations.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Relations.Relation.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Relations.Relation.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Relations.Relation)
  return target;
}

size_t Relations_Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Relations.Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relations_Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Relations.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Relations_Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relations_Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Relations.Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Relations.Relation)
    MergeFrom(*source);
  }
}

void Relations_Relation::MergeFrom(const Relations_Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Relations.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
}

void Relations_Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Relations.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relations_Relation::CopyFrom(const Relations_Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Relations.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relations_Relation::IsInitialized() const {
  return true;
}

void Relations_Relation::InternalSwap(Relations_Relation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Relations_Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Relations::_Internal {
 public:
  static const ::ai::inworld::packets::Actor& actor(const Relations* msg);
};

const ::ai::inworld::packets::Actor&
Relations::_Internal::actor(const Relations* msg) {
  return *msg->actor_;
}
Relations::Relations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Relations)
}
Relations::Relations(const Relations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      relations_(from.relations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actor()) {
    actor_ = new ::ai::inworld::packets::Actor(*from.actor_);
  } else {
    actor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Relations)
}

void Relations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Relations_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  actor_ = nullptr;
}

Relations::~Relations() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Relations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Relations::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actor_;
}

void Relations::ArenaDtor(void* object) {
  Relations* _this = reinterpret_cast< Relations* >(object);
  (void)_this;
}
void Relations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Relations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Relations& Relations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Relations_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void Relations::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Relations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relations_.Clear();
  if (GetArena() == nullptr && actor_ != nullptr) {
    delete actor_;
  }
  actor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor actor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.Relations.Relation relations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Relations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor actor = 1;
  if (this->has_actor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actor(this), target, stream);
  }

  // repeated .ai.inworld.packets.Relations.Relation relations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Relations)
  return target;
}

size_t Relations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Relations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Relations.Relation relations = 2;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.Actor actor = 1;
  if (this->has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Relations)
  GOOGLE_DCHECK_NE(&from, this);
  const Relations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Relations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Relations)
    MergeFrom(*source);
  }
}

void Relations::MergeFrom(const Relations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Relations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relations_.MergeFrom(from.relations_);
  if (from.has_actor()) {
    _internal_mutable_actor()->::ai::inworld::packets::Actor::MergeFrom(from._internal_actor());
  }
}

void Relations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Relations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relations::CopyFrom(const Relations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Relations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relations::IsInitialized() const {
  return true;
}

void Relations::InternalSwap(Relations* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relations_.InternalSwap(&other->relations_);
  swap(actor_, other->actor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Relations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionHistoryRequest::_Internal {
 public:
};

SessionHistoryRequest::SessionHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.SessionHistoryRequest)
}
SessionHistoryRequest::SessionHistoryRequest(const SessionHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.SessionHistoryRequest)
}

void SessionHistoryRequest::SharedCtor() {
}

SessionHistoryRequest::~SessionHistoryRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.SessionHistoryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionHistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionHistoryRequest::ArenaDtor(void* object) {
  SessionHistoryRequest* _this = reinterpret_cast< SessionHistoryRequest* >(object);
  (void)_this;
}
void SessionHistoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionHistoryRequest& SessionHistoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionHistoryRequest_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void SessionHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.SessionHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionHistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionHistoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.SessionHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.SessionHistoryRequest)
  return target;
}

size_t SessionHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.SessionHistoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionHistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.SessionHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionHistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionHistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.SessionHistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.SessionHistoryRequest)
    MergeFrom(*source);
  }
}

void SessionHistoryRequest::MergeFrom(const SessionHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.SessionHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SessionHistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.SessionHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionHistoryRequest::CopyFrom(const SessionHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.SessionHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHistoryRequest::IsInitialized() const {
  return true;
}

void SessionHistoryRequest::InternalSwap(SessionHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionHistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionHistoryResponse_SessionHistoryItem::_Internal {
 public:
  static const ::ai::inworld::packets::Agent& agent(const SessionHistoryResponse_SessionHistoryItem* msg);
};

const ::ai::inworld::packets::Agent&
SessionHistoryResponse_SessionHistoryItem::_Internal::agent(const SessionHistoryResponse_SessionHistoryItem* msg) {
  return *msg->agent_;
}
SessionHistoryResponse_SessionHistoryItem::SessionHistoryResponse_SessionHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
}
SessionHistoryResponse_SessionHistoryItem::SessionHistoryResponse_SessionHistoryItem(const SessionHistoryResponse_SessionHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packets_(from.packets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::ai::inworld::packets::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
}

void SessionHistoryResponse_SessionHistoryItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  agent_ = nullptr;
}

SessionHistoryResponse_SessionHistoryItem::~SessionHistoryResponse_SessionHistoryItem() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionHistoryResponse_SessionHistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
}

void SessionHistoryResponse_SessionHistoryItem::ArenaDtor(void* object) {
  SessionHistoryResponse_SessionHistoryItem* _this = reinterpret_cast< SessionHistoryResponse_SessionHistoryItem* >(object);
  (void)_this;
}
void SessionHistoryResponse_SessionHistoryItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionHistoryResponse_SessionHistoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionHistoryResponse_SessionHistoryItem& SessionHistoryResponse_SessionHistoryItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void SessionHistoryResponse_SessionHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packets_.Clear();
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionHistoryResponse_SessionHistoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Agent agent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.InworldPacket packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionHistoryResponse_SessionHistoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Agent agent = 1;
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  // repeated .ai.inworld.packets.InworldPacket packets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_packets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  return target;
}

size_t SessionHistoryResponse_SessionHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.InworldPacket packets = 2;
  total_size += 1UL * this->_internal_packets_size();
  for (const auto& msg : this->packets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.Agent agent = 1;
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionHistoryResponse_SessionHistoryItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionHistoryResponse_SessionHistoryItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionHistoryResponse_SessionHistoryItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
    MergeFrom(*source);
  }
}

void SessionHistoryResponse_SessionHistoryItem::MergeFrom(const SessionHistoryResponse_SessionHistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packets_.MergeFrom(from.packets_);
  if (from.has_agent()) {
    _internal_mutable_agent()->::ai::inworld::packets::Agent::MergeFrom(from._internal_agent());
  }
}

void SessionHistoryResponse_SessionHistoryItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionHistoryResponse_SessionHistoryItem::CopyFrom(const SessionHistoryResponse_SessionHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHistoryResponse_SessionHistoryItem::IsInitialized() const {
  return true;
}

void SessionHistoryResponse_SessionHistoryItem::InternalSwap(SessionHistoryResponse_SessionHistoryItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packets_.InternalSwap(&other->packets_);
  swap(agent_, other->agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionHistoryResponse_SessionHistoryItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionHistoryResponse::_Internal {
 public:
};

SessionHistoryResponse::SessionHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  session_history_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.SessionHistoryResponse)
}
SessionHistoryResponse::SessionHistoryResponse(const SessionHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_history_items_(from.session_history_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.SessionHistoryResponse)
}

void SessionHistoryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
}

SessionHistoryResponse::~SessionHistoryResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.SessionHistoryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionHistoryResponse::ArenaDtor(void* object) {
  SessionHistoryResponse* _this = reinterpret_cast< SessionHistoryResponse* >(object);
  (void)_this;
}
void SessionHistoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionHistoryResponse& SessionHistoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void SessionHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.SessionHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_history_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionHistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem session_history_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_history_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionHistoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.SessionHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem session_history_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_history_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_session_history_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.SessionHistoryResponse)
  return target;
}

size_t SessionHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.SessionHistoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.SessionHistoryResponse.SessionHistoryItem session_history_items = 1;
  total_size += 1UL * this->_internal_session_history_items_size();
  for (const auto& msg : this->session_history_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionHistoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.SessionHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionHistoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionHistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.SessionHistoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.SessionHistoryResponse)
    MergeFrom(*source);
  }
}

void SessionHistoryResponse::MergeFrom(const SessionHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.SessionHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_history_items_.MergeFrom(from.session_history_items_);
}

void SessionHistoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.SessionHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionHistoryResponse::CopyFrom(const SessionHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.SessionHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHistoryResponse::IsInitialized() const {
  return true;
}

void SessionHistoryResponse::InternalSwap(SessionHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_history_items_.InternalSwap(&other->session_history_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionHistoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConversationUpdatePayload::_Internal {
 public:
};

ConversationUpdatePayload::ConversationUpdatePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  participants_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ConversationUpdatePayload)
}
ConversationUpdatePayload::ConversationUpdatePayload(const ConversationUpdatePayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      participants_(from.participants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ConversationUpdatePayload)
}

void ConversationUpdatePayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
}

ConversationUpdatePayload::~ConversationUpdatePayload() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ConversationUpdatePayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConversationUpdatePayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConversationUpdatePayload::ArenaDtor(void* object) {
  ConversationUpdatePayload* _this = reinterpret_cast< ConversationUpdatePayload* >(object);
  (void)_this;
}
void ConversationUpdatePayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConversationUpdatePayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConversationUpdatePayload& ConversationUpdatePayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConversationUpdatePayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void ConversationUpdatePayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ConversationUpdatePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationUpdatePayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.Actor participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConversationUpdatePayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ConversationUpdatePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Actor participants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_participants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ConversationUpdatePayload)
  return target;
}

size_t ConversationUpdatePayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ConversationUpdatePayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Actor participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConversationUpdatePayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ConversationUpdatePayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationUpdatePayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConversationUpdatePayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ConversationUpdatePayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ConversationUpdatePayload)
    MergeFrom(*source);
  }
}

void ConversationUpdatePayload::MergeFrom(const ConversationUpdatePayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ConversationUpdatePayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
}

void ConversationUpdatePayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ConversationUpdatePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationUpdatePayload::CopyFrom(const ConversationUpdatePayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ConversationUpdatePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationUpdatePayload::IsInitialized() const {
  return true;
}

void ConversationUpdatePayload::InternalSwap(ConversationUpdatePayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  participants_.InternalSwap(&other->participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationUpdatePayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConversationEventPayload::_Internal {
 public:
};

ConversationEventPayload::ConversationEventPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  participants_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ConversationEventPayload)
}
ConversationEventPayload::ConversationEventPayload(const ConversationEventPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      participants_(from.participants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ConversationEventPayload)
}

void ConversationEventPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  event_type_ = 0;
}

ConversationEventPayload::~ConversationEventPayload() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ConversationEventPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConversationEventPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConversationEventPayload::ArenaDtor(void* object) {
  ConversationEventPayload* _this = reinterpret_cast< ConversationEventPayload* >(object);
  (void)_this;
}
void ConversationEventPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConversationEventPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConversationEventPayload& ConversationEventPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConversationEventPayload_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void ConversationEventPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ConversationEventPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  event_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationEventPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.Actor participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ConversationEventPayload.ConversationEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::ai::inworld::packets::ConversationEventPayload_ConversationEventType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConversationEventPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ConversationEventPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Actor participants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_participants(i), target, stream);
  }

  // .ai.inworld.packets.ConversationEventPayload.ConversationEventType event_type = 2;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ConversationEventPayload)
  return target;
}

size_t ConversationEventPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ConversationEventPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.Actor participants = 1;
  total_size += 1UL * this->_internal_participants_size();
  for (const auto& msg : this->participants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.ConversationEventPayload.ConversationEventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConversationEventPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ConversationEventPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationEventPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConversationEventPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ConversationEventPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ConversationEventPayload)
    MergeFrom(*source);
  }
}

void ConversationEventPayload::MergeFrom(const ConversationEventPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ConversationEventPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void ConversationEventPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ConversationEventPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationEventPayload::CopyFrom(const ConversationEventPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ConversationEventPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationEventPayload::IsInitialized() const {
  return true;
}

void ConversationEventPayload::InternalSwap(ConversationEventPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  participants_.InternalSwap(&other->participants_);
  swap(event_type_, other->event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationEventPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationStatusEvent::_Internal {
 public:
  static const ::google::rpc::Status& status(const OperationStatusEvent* msg);
};

const ::google::rpc::Status&
OperationStatusEvent::_Internal::status(const OperationStatusEvent* msg) {
  return *msg->status_;
}
void OperationStatusEvent::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
OperationStatusEvent::OperationStatusEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.OperationStatusEvent)
}
OperationStatusEvent::OperationStatusEvent(const OperationStatusEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.OperationStatusEvent)
}

void OperationStatusEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  status_ = nullptr;
}

OperationStatusEvent::~OperationStatusEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.OperationStatusEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationStatusEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void OperationStatusEvent::ArenaDtor(void* object) {
  OperationStatusEvent* _this = reinterpret_cast< OperationStatusEvent* >(object);
  (void)_this;
}
void OperationStatusEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStatusEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationStatusEvent& OperationStatusEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationStatusEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base);
  return *internal_default_instance();
}


void OperationStatusEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.OperationStatusEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStatusEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStatusEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.OperationStatusEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.OperationStatusEvent)
  return target;
}

size_t OperationStatusEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.OperationStatusEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationStatusEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.OperationStatusEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationStatusEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationStatusEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.OperationStatusEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.OperationStatusEvent)
    MergeFrom(*source);
  }
}

void OperationStatusEvent::MergeFrom(const OperationStatusEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.OperationStatusEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::google::rpc::Status::MergeFrom(from._internal_status());
  }
}

void OperationStatusEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.OperationStatusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatusEvent::CopyFrom(const OperationStatusEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.OperationStatusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatusEvent::IsInitialized() const {
  return true;
}

void OperationStatusEvent::InternalSwap(OperationStatusEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStatusEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packets
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Actor* Arena::CreateMaybeMessage< ::ai::inworld::packets::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Actor >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Routing* Arena::CreateMaybeMessage< ::ai::inworld::packets::Routing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Routing >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::PacketId* Arena::CreateMaybeMessage< ::ai::inworld::packets::PacketId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::PacketId >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::InworldPacket* Arena::CreateMaybeMessage< ::ai::inworld::packets::InworldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::InworldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::TextEvent_ModelInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::TextEvent_ModelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::TextEvent_ModelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::TextEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::TextEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::TextEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ControlEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::ControlEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ControlEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AudioSessionStartPayload* Arena::CreateMaybeMessage< ::ai::inworld::packets::AudioSessionStartPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AudioSessionStartPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AudioChunk* Arena::CreateMaybeMessage< ::ai::inworld::packets::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent_Parameter* Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponsesEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponsesEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponsesEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::EmotionEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::EmotionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::EmotionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DataChunk* Arena::CreateMaybeMessage< ::ai::inworld::packets::DataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AdditionalPhonemeInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::AdditionalPhonemeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AdditionalPhonemeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ActionEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::ActionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ActionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::NarratedAction* Arena::CreateMaybeMessage< ::ai::inworld::packets::NarratedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::NarratedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RelationInfo_RelationAttributes* Arena::CreateMaybeMessage< ::ai::inworld::packets::RelationInfo_RelationAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RelationInfo_RelationAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RelationInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::RelationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RelationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LatencyReportEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::LatencyReportEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LatencyReportEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::PingPongReport* Arena::CreateMaybeMessage< ::ai::inworld::packets::PingPongReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::PingPongReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::PerceivedLatencyReport* Arena::CreateMaybeMessage< ::ai::inworld::packets::PerceivedLatencyReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::PerceivedLatencyReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LogsEvent_LogDetail* Arena::CreateMaybeMessage< ::ai::inworld::packets::LogsEvent_LogDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LogsEvent_LogDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LogsEvent_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LogsEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::LogsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LogsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::MutationEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::MutationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::MutationEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::SessionControlResponseEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::SessionControlResponseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::SessionControlResponseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponses* Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RegenerateResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::RegenerateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RegenerateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ApplyResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::ApplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ApplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadScene* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadScene >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadedScene* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadedScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadedScene >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadCharacters_CharacterName* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadCharacters_CharacterName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadCharacters_CharacterName >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadCharacters* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadCharacters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadCharacters >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadedCharacters* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadedCharacters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadedCharacters >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::UnloadCharacters* Arena::CreateMaybeMessage< ::ai::inworld::packets::UnloadCharacters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::UnloadCharacters >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CurrentSceneStatus* Arena::CreateMaybeMessage< ::ai::inworld::packets::CurrentSceneStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CurrentSceneStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ModifyExactResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::ModifyExactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ModifyExactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadSceneOutputEvent_Agent* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadSceneOutputEvent_Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadSceneOutputEvent_Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadSceneOutputEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadSceneOutputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadSceneOutputEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Agent_CharacterAssets* Arena::CreateMaybeMessage< ::ai::inworld::packets::Agent_CharacterAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Agent_CharacterAssets >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Agent* Arena::CreateMaybeMessage< ::ai::inworld::packets::Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DebugInfoEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::DebugInfoEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DebugInfoEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::SessionControlEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::SessionControlEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::SessionControlEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::SessionConfigurationPayload* Arena::CreateMaybeMessage< ::ai::inworld::packets::SessionConfigurationPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::SessionConfigurationPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Continuation_ContinuationInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::Continuation_ContinuationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Continuation_ContinuationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Continuation* Arena::CreateMaybeMessage< ::ai::inworld::packets::Continuation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Continuation >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DialogHistory_HistoryItem* Arena::CreateMaybeMessage< ::ai::inworld::packets::DialogHistory_HistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DialogHistory_HistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DialogHistory* Arena::CreateMaybeMessage< ::ai::inworld::packets::DialogHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DialogHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Relations_Relation* Arena::CreateMaybeMessage< ::ai::inworld::packets::Relations_Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Relations_Relation >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Relations* Arena::CreateMaybeMessage< ::ai::inworld::packets::Relations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Relations >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::SessionHistoryRequest* Arena::CreateMaybeMessage< ::ai::inworld::packets::SessionHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::SessionHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem* Arena::CreateMaybeMessage< ::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::SessionHistoryResponse_SessionHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::SessionHistoryResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::SessionHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::SessionHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ConversationUpdatePayload* Arena::CreateMaybeMessage< ::ai::inworld::packets::ConversationUpdatePayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ConversationUpdatePayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ConversationEventPayload* Arena::CreateMaybeMessage< ::ai::inworld::packets::ConversationEventPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ConversationEventPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::OperationStatusEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::OperationStatusEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::OperationStatusEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
