#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/engine/world-engine.proto

#include "ai/inworld/engine/world-engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fworld_2dengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fpackets_2fpackets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fvoices_2fvoices_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Voice_ai_2finworld_2fvoices_2fvoices_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace ai {
namespace inworld {
namespace engine {
class CapabilitiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapabilitiesRequest> _instance;
} _CapabilitiesRequest_default_instance_;
class UserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserRequest> _instance;
} _UserRequest_default_instance_;
class ClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientRequest> _instance;
} _ClientRequest_default_instance_;
class LoadSceneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneRequest> _instance;
} _LoadSceneRequest_default_instance_;
class AudioSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioSettings> _instance;
} _AudioSettings_default_instance_;
class UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSettings_PlayerProfile_PlayerField> _instance;
} _UserSettings_PlayerProfile_PlayerField_default_instance_;
class UserSettings_PlayerProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSettings_PlayerProfile> _instance;
} _UserSettings_PlayerProfile_default_instance_;
class UserSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSettings> _instance;
} _UserSettings_default_instance_;
class SessionContinuation_ContinuationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionContinuation_ContinuationInfo> _instance;
} _SessionContinuation_ContinuationInfo_default_instance_;
class SessionContinuationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionContinuation> _instance;
} _SessionContinuation_default_instance_;
class PreviousDialog_PhraseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviousDialog_Phrase> _instance;
} _PreviousDialog_Phrase_default_instance_;
class PreviousDialogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviousDialog> _instance;
} _PreviousDialog_default_instance_;
class PreviousState_StateHolderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviousState_StateHolder> _instance;
} _PreviousState_StateHolder_default_instance_;
class PreviousStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviousState> _instance;
} _PreviousState_default_instance_;
class LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneResponse_Agent_CharacterAssets> _instance;
} _LoadSceneResponse_Agent_CharacterAssets_default_instance_;
class LoadSceneResponse_AgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneResponse_Agent> _instance;
} _LoadSceneResponse_Agent_default_instance_;
class LoadSceneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneResponse> _instance;
} _LoadSceneResponse_default_instance_;
class LogErrorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogErrorRequest> _instance;
} _LogErrorRequest_default_instance_;
class VoicePreviewRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoicePreviewRequest> _instance;
} _VoicePreviewRequest_default_instance_;
class VoicePreviewResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoicePreviewResponse> _instance;
} _VoicePreviewResponse_default_instance_;
class ListBaseVoicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBaseVoicesRequest> _instance;
} _ListBaseVoicesRequest_default_instance_;
class ListBaseVoicesResponceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListBaseVoicesResponce> _instance;
} _ListBaseVoicesResponce_default_instance_;
class AccessTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessToken> _instance;
} _AccessToken_default_instance_;
class GenerateTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateTokenRequest> _instance;
} _GenerateTokenRequest_default_instance_;
class ActorRelations_RelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorRelations_Relation> _instance;
} _ActorRelations_Relation_default_instance_;
class ActorRelationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorRelations> _instance;
} _ActorRelations_default_instance_;
class ConversationState_ConversationSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConversationState_ConversationSettings> _instance;
} _ConversationState_ConversationSettings_default_instance_;
class ConversationStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConversationState> _instance;
} _ConversationState_default_instance_;
}  // namespace engine
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_AccessToken_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_AccessToken_default_instance_;
    new (ptr) ::ai::inworld::engine::AccessToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessToken_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccessToken_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ActorRelations_default_instance_;
    new (ptr) ::ai::inworld::engine::ActorRelations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ActorRelations_Relation_default_instance_;
    new (ptr) ::ai::inworld::engine::ActorRelations_Relation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_AudioSettings_default_instance_;
    new (ptr) ::ai::inworld::engine::AudioSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_CapabilitiesRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::CapabilitiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ClientRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::ClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ConversationState_default_instance_;
    new (ptr) ::ai::inworld::engine::ConversationState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ConversationState_ConversationSettings_default_instance_;
    new (ptr) ::ai::inworld::engine::ConversationState_ConversationSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_GenerateTokenRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_GenerateTokenRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::GenerateTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateTokenRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateTokenRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_ListBaseVoicesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ListBaseVoicesRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::ListBaseVoicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListBaseVoicesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListBaseVoicesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_ListBaseVoicesResponce_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_ListBaseVoicesResponce_default_instance_;
    new (ptr) ::ai::inworld::engine::ListBaseVoicesResponce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListBaseVoicesResponce_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListBaseVoicesResponce_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_BaseVoice_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_LoadSceneRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::LoadSceneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LoadSceneRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_LoadSceneRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_LoadSceneResponse_default_instance_;
    new (ptr) ::ai::inworld::engine::LoadSceneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadSceneResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadSceneResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_LoadSceneResponse_Agent_default_instance_;
    new (ptr) ::ai::inworld::engine::LoadSceneResponse_Agent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_LoadSceneResponse_Agent_CharacterAssets_default_instance_;
    new (ptr) ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_LogErrorRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_LogErrorRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::LogErrorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogErrorRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogErrorRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_PreviousDialog_default_instance_;
    new (ptr) ::ai::inworld::engine::PreviousDialog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_PreviousDialog_Phrase_default_instance_;
    new (ptr) ::ai::inworld::engine::PreviousDialog_Phrase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_PreviousState_default_instance_;
    new (ptr) ::ai::inworld::engine::PreviousState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_PreviousState_StateHolder_default_instance_;
    new (ptr) ::ai::inworld::engine::PreviousState_StateHolder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_InworldPacket_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_SessionContinuation_default_instance_;
    new (ptr) ::ai::inworld::engine::SessionContinuation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
      &scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_SessionContinuation_ContinuationInfo_default_instance_;
    new (ptr) ::ai::inworld::engine::SessionContinuation_ContinuationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_UserRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::UserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_UserSettings_default_instance_;
    new (ptr) ::ai::inworld::engine::UserSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_UserSettings_PlayerProfile_default_instance_;
    new (ptr) ::ai::inworld::engine::UserSettings_PlayerProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,}};

static void InitDefaultsscc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_UserSettings_PlayerProfile_PlayerField_default_instance_;
    new (ptr) ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static void InitDefaultsscc_info_VoicePreviewRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_VoicePreviewRequest_default_instance_;
    new (ptr) ::ai::inworld::engine::VoicePreviewRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VoicePreviewRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VoicePreviewRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {
      &scc_info_EmotionEvent_ai_2finworld_2fpackets_2fpackets_2eproto.base,
      &scc_info_Voice_ai_2finworld_2fvoices_2fvoices_2eproto.base,}};

static void InitDefaultsscc_info_VoicePreviewResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::engine::_VoicePreviewResponse_default_instance_;
    new (ptr) ::ai::inworld::engine::VoicePreviewResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoicePreviewResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoicePreviewResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ai_2finworld_2fengine_2fworld_2dengine_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, audio_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, gestures_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, interruptions_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, triggers_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, emotions_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, turn_based_stt_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, emotion_streaming_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, silence_events_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, phoneme_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, continuation_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, session_cancellation_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, narrated_actions_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, regenerate_response_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, load_scene_in_session_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, relations_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, debug_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, tts_mp3_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, multi_agent_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::CapabilitiesRequest, audio_2_face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ClientRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ClientRequest, version_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ClientRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, capabilities_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, user_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, client_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, audio_settings_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, user_settings_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneRequest, session_continuation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AudioSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AudioSettings, stt_sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AudioSettings, tts_sample_rate_hertz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField, field_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField, field_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings_PlayerProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings_PlayerProfile, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings, view_transcript_consent_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::UserSettings, player_profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::SessionContinuation_ContinuationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::SessionContinuation_ContinuationInfo, millis_passed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::SessionContinuation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::SessionContinuation, continuation_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::SessionContinuation, previous_dialog_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::SessionContinuation, previous_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousDialog_Phrase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousDialog_Phrase, talker_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousDialog_Phrase, phrase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousDialog, phrases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, brain_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, state_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, previous_dialog_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, packets_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, relations_to_actors_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState_StateHolder, state_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState, state_holders_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState, game_session_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::PreviousState, conversation_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets, rpm_model_uri_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets, rpm_image_uri_portrait_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets, rpm_image_uri_posture_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets, avatar_img_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets, avatar_img_original_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent, agent_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent, brain_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent, given_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse_Agent, character_assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse, agents_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse, key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LoadSceneResponse, previous_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LogErrorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LogErrorRequest, key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::LogErrorRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::VoicePreviewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::VoicePreviewRequest, text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::VoicePreviewRequest, emotions_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::VoicePreviewRequest, voice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::VoicePreviewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::VoicePreviewResponse, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesRequest, tts_types_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesResponce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesResponce, google_voices_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesResponce, inworld_voices_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesResponce, eleven_labs_voices_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ListBaseVoicesResponce, inworld_v2_voices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AccessToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AccessToken, token_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AccessToken, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AccessToken, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::AccessToken, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::GenerateTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::GenerateTokenRequest, key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::GenerateTokenRequest, resources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ActorRelations_Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ActorRelations_Relation, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ActorRelations_Relation, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ActorRelations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ActorRelations, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ActorRelations, relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ConversationState_ConversationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ConversationState_ConversationSettings, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ConversationState_ConversationSettings, participants_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ConversationState_ConversationSettings, spectators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ConversationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::engine::ConversationState, conversationsettings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ai::inworld::engine::CapabilitiesRequest)},
  { 25, -1, sizeof(::ai::inworld::engine::UserRequest)},
  { 32, -1, sizeof(::ai::inworld::engine::ClientRequest)},
  { 40, -1, sizeof(::ai::inworld::engine::LoadSceneRequest)},
  { 52, -1, sizeof(::ai::inworld::engine::AudioSettings)},
  { 59, -1, sizeof(::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField)},
  { 66, -1, sizeof(::ai::inworld::engine::UserSettings_PlayerProfile)},
  { 72, -1, sizeof(::ai::inworld::engine::UserSettings)},
  { 79, -1, sizeof(::ai::inworld::engine::SessionContinuation_ContinuationInfo)},
  { 85, -1, sizeof(::ai::inworld::engine::SessionContinuation)},
  { 93, -1, sizeof(::ai::inworld::engine::PreviousDialog_Phrase)},
  { 100, -1, sizeof(::ai::inworld::engine::PreviousDialog)},
  { 106, -1, sizeof(::ai::inworld::engine::PreviousState_StateHolder)},
  { 117, -1, sizeof(::ai::inworld::engine::PreviousState)},
  { 125, -1, sizeof(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets)},
  { 135, -1, sizeof(::ai::inworld::engine::LoadSceneResponse_Agent)},
  { 144, -1, sizeof(::ai::inworld::engine::LoadSceneResponse)},
  { 152, -1, sizeof(::ai::inworld::engine::LogErrorRequest)},
  { 159, -1, sizeof(::ai::inworld::engine::VoicePreviewRequest)},
  { 167, -1, sizeof(::ai::inworld::engine::VoicePreviewResponse)},
  { 173, -1, sizeof(::ai::inworld::engine::ListBaseVoicesRequest)},
  { 181, -1, sizeof(::ai::inworld::engine::ListBaseVoicesResponce)},
  { 190, -1, sizeof(::ai::inworld::engine::AccessToken)},
  { 199, -1, sizeof(::ai::inworld::engine::GenerateTokenRequest)},
  { 206, -1, sizeof(::ai::inworld::engine::ActorRelations_Relation)},
  { 213, -1, sizeof(::ai::inworld::engine::ActorRelations)},
  { 220, -1, sizeof(::ai::inworld::engine::ConversationState_ConversationSettings)},
  { 228, -1, sizeof(::ai::inworld::engine::ConversationState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_CapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_UserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_LoadSceneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_AudioSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_UserSettings_PlayerProfile_PlayerField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_UserSettings_PlayerProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_UserSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_SessionContinuation_ContinuationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_SessionContinuation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_PreviousDialog_Phrase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_PreviousDialog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_PreviousState_StateHolder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_PreviousState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_LoadSceneResponse_Agent_CharacterAssets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_LoadSceneResponse_Agent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_LoadSceneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_LogErrorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_VoicePreviewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_VoicePreviewResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ListBaseVoicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ListBaseVoicesResponce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_AccessToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_GenerateTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ActorRelations_Relation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ActorRelations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ConversationState_ConversationSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::engine::_ConversationState_default_instance_),
};

const char descriptor_table_protodef_ai_2finworld_2fengine_2fworld_2dengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$ai/inworld/engine/world-engine.proto\022\021"
  "ai.inworld.engine\032\034google/api/annotation"
  "s.proto\032\033google/protobuf/empty.proto\032\037go"
  "ogle/protobuf/timestamp.proto\032 ai/inworl"
  "d/packets/packets.proto\032\036ai/inworld/voic"
  "es/voices.proto\032\"ai/inworld/voices/base_"
  "voice.proto\032.ai/inworld/language_codes/l"
  "anguage_codes.proto\"\333\003\n\023CapabilitiesRequ"
  "est\022\r\n\005audio\030\001 \001(\010\022\014\n\004text\030\002 \001(\010\022\024\n\010gest"
  "ures\030\003 \001(\010B\002\030\001\022\025\n\rinterruptions\030\004 \001(\010\022\024\n"
  "\010triggers\030\005 \001(\010B\002\030\001\022\020\n\010emotions\030\006 \001(\010\022\026\n"
  "\016turn_based_stt\030\010 \001(\010\022\031\n\021emotion_streami"
  "ng\030\t \001(\010\022\026\n\016silence_events\030\n \001(\010\022\024\n\014phon"
  "eme_info\030\013 \001(\010\022\024\n\014continuation\030\014 \001(\010\022\034\n\024"
  "session_cancellation\030\r \001(\010\022\030\n\020narrated_a"
  "ctions\030\016 \001(\010\022\033\n\023regenerate_response\030\017 \001("
  "\010\022\035\n\025load_scene_in_session\030\020 \001(\010\022\021\n\trela"
  "tions\030\021 \001(\010\022\022\n\ndebug_info\030\022 \001(\010\022\017\n\007tts_m"
  "p3\030\023 \001(\010\022\023\n\013multi_agent\030\024 \001(\010\022\024\n\014audio_2"
  "_face\030\025 \001(\010J\004\010\007\020\010\"\'\n\013UserRequest\022\014\n\004name"
  "\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\"A\n\rClientRequest\022\n\n\002i"
  "d\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\023\n\013description\030"
  "\003 \001(\t\"\366\002\n\020LoadSceneRequest\022\014\n\004name\030\001 \001(\t"
  "\022<\n\014capabilities\030\002 \001(\0132&.ai.inworld.engi"
  "ne.CapabilitiesRequest\022,\n\004user\030\003 \001(\0132\036.a"
  "i.inworld.engine.UserRequest\0220\n\006client\030\004"
  " \001(\0132 .ai.inworld.engine.ClientRequest\0228"
  "\n\016audio_settings\030\005 \001(\0132 .ai.inworld.engi"
  "ne.AudioSettings\0226\n\ruser_settings\030\006 \001(\0132"
  "\037.ai.inworld.engine.UserSettings\022D\n\024sess"
  "ion_continuation\030\007 \001(\0132&.ai.inworld.engi"
  "ne.SessionContinuation\"M\n\rAudioSettings\022"
  "\035\n\025stt_sample_rate_hertz\030\001 \001(\r\022\035\n\025tts_sa"
  "mple_rate_hertz\030\002 \001(\r\"\211\002\n\014UserSettings\022\037"
  "\n\027view_transcript_consent\030\001 \001(\010\022E\n\016playe"
  "r_profile\030\002 \001(\0132-.ai.inworld.engine.User"
  "Settings.PlayerProfile\032\220\001\n\rPlayerProfile"
  "\022I\n\006fields\030\003 \003(\01329.ai.inworld.engine.Use"
  "rSettings.PlayerProfile.PlayerField\0324\n\013P"
  "layerField\022\020\n\010field_id\030\001 \001(\t\022\023\n\013field_va"
  "lue\030\002 \001(\t\"\350\001\n\023SessionContinuation\022R\n\021con"
  "tinuation_info\030\001 \001(\01327.ai.inworld.engine"
  ".SessionContinuation.ContinuationInfo\022:\n"
  "\017previous_dialog\030\002 \001(\0132!.ai.inworld.engi"
  "ne.PreviousDialog\022\026\n\016previous_state\030\003 \001("
  "\014\032)\n\020ContinuationInfo\022\025\n\rmillis_passed\030\001"
  " \001(\003\"\347\001\n\016PreviousDialog\0229\n\007phrases\030\001 \003(\013"
  "2(.ai.inworld.engine.PreviousDialog.Phra"
  "se\032]\n\006Phrase\022C\n\006talker\030\001 \001(\01623.ai.inworl"
  "d.engine.PreviousDialog.DialogParticipan"
  "t\022\016\n\006phrase\030\002 \001(\t\";\n\021DialogParticipant\022\013"
  "\n\007UNKNOWN\020\000\022\n\n\006PLAYER\020\001\022\r\n\tCHARACTER\020\002\"\334"
  "\004\n\rPreviousState\022C\n\rstate_holders\030\001 \003(\0132"
  ",.ai.inworld.engine.PreviousState.StateH"
  "older\022\027\n\017game_session_id\030\002 \001(\t\022@\n\022conver"
  "sation_state\030\003 \001(\0132$.ai.inworld.engine.C"
  "onversationState\032\252\003\n\013StateHolder\022\022\n\nbrai"
  "n_name\030\001 \001(\t\022\r\n\005state\030\002 \001(\014\022>\n\017previous_"
  "dialog\030\003 \001(\0132!.ai.inworld.engine.Previou"
  "sDialogB\002\030\001\0222\n\007packets\030\004 \003(\0132!.ai.inworl"
  "d.packets.InworldPacket\022>\n\023relations_to_"
  "actors\030\005 \003(\0132!.ai.inworld.engine.ActorRe"
  "lations\022N\n\014state_format\030\006 \001(\01628.ai.inwor"
  "ld.engine.PreviousState.StateHolder.Stat"
  "eFormat\"t\n\013StateFormat\022\030\n\024STATE_FORMAT_U"
  "NKNOWN\020\000\022$\n STATE_FORMAT_SESSION_BRAIN_S"
  "TATE\020\001\022%\n!STATE_FORMAT_EXTERNAL_BRAIN_ST"
  "ATE\020\002\"\313\003\n\021LoadSceneResponse\022:\n\006agents\030\001 "
  "\003(\0132*.ai.inworld.engine.LoadSceneRespons"
  "e.Agent\022\013\n\003key\030\002 \001(\t\0228\n\016previous_state\030\003"
  " \001(\0132 .ai.inworld.engine.PreviousState\032\262"
  "\002\n\005Agent\022\020\n\010agent_id\030\001 \001(\t\022\022\n\nbrain_name"
  "\030\002 \001(\t\022\022\n\ngiven_name\030\003 \001(\t\022T\n\020character_"
  "assets\030\004 \001(\0132:.ai.inworld.engine.LoadSce"
  "neResponse.Agent.CharacterAssets\032\230\001\n\017Cha"
  "racterAssets\022\025\n\rrpm_model_uri\030\001 \001(\t\022\036\n\026r"
  "pm_image_uri_portrait\030\002 \001(\t\022\035\n\025rpm_image"
  "_uri_posture\030\003 \001(\t\022\022\n\navatar_img\030\004 \001(\t\022\033"
  "\n\023avatar_img_original\030\005 \001(\t\"/\n\017LogErrorR"
  "equest\022\013\n\003key\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\"\206\001\n"
  "\023VoicePreviewRequest\022\014\n\004text\030\001 \001(\t\0222\n\010em"
  "otions\030\002 \001(\0132 .ai.inworld.packets.Emotio"
  "nEvent\022\'\n\005voice\030\003 \001(\0132\030.ai.inworld.voice"
  "s.VoiceJ\004\010\004\020\005\"%\n\024VoicePreviewResponse\022\r\n"
  "\005audio\030\001 \001(\014\"\234\001\n\025ListBaseVoicesRequest\022\031"
  "\n\rlanguage_code\030\001 \001(\tB\002\030\001\022-\n\ttts_types\030\002"
  " \003(\0162\032.ai.inworld.voices.TTSType\0229\n\010lang"
  "uage\030\003 \001(\0162\'.ai.inworld.language_codes.L"
  "anguageCode\"\366\001\n\026ListBaseVoicesResponce\0223"
  "\n\rgoogle_voices\030\001 \003(\0132\034.ai.inworld.voice"
  "s.BaseVoice\0224\n\016inworld_voices\030\002 \003(\0132\034.ai"
  ".inworld.voices.BaseVoice\0228\n\022eleven_labs"
  "_voices\030\003 \003(\0132\034.ai.inworld.voices.BaseVo"
  "ice\0227\n\021inworld_v2_voices\030\004 \003(\0132\034.ai.inwo"
  "rld.voices.BaseVoice\"s\n\013AccessToken\022\r\n\005t"
  "oken\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\0223\n\017expiration_t"
  "ime\030\003 \001(\0132\032.google.protobuf.Timestamp\022\022\n"
  "\nsession_id\030\004 \001(\t\"6\n\024GenerateTokenReques"
  "t\022\013\n\003key\030\001 \001(\t\022\021\n\tresources\030\002 \003(\t\"\212\001\n\016Ac"
  "torRelations\022\020\n\010actor_id\030\001 \001(\t\022=\n\trelati"
  "ons\030\002 \003(\0132*.ai.inworld.engine.ActorRelat"
  "ions.Relation\032\'\n\010Relation\022\014\n\004type\030\001 \001(\t\022"
  "\r\n\005label\030\002 \001(\t\"\307\001\n\021ConversationState\022W\n\024"
  "conversationSettings\030\001 \003(\01329.ai.inworld."
  "engine.ConversationState.ConversationSet"
  "tings\032Y\n\024ConversationSettings\022\027\n\017convers"
  "ation_id\030\001 \001(\t\022\024\n\014participants\030\002 \003(\t\022\022\n\n"
  "spectators\030\003 \003(\t*\251\t\n\013VoicePreset\022\034\n\030VOIC"
  "E_PRESET_UNSPECIFIED\020\000\022\031\n\025VOICE_PRESET_F"
  "EMALE_1\020\001\022\031\n\025VOICE_PRESET_FEMALE_2\020\002\022\031\n\025"
  "VOICE_PRESET_FEMALE_3\020\003\022\031\n\025VOICE_PRESET_"
  "FEMALE_4\020\004\022\031\n\025VOICE_PRESET_FEMALE_5\020\005\022\027\n"
  "\023VOICE_PRESET_MALE_1\020\006\022\027\n\023VOICE_PRESET_M"
  "ALE_2\020\007\022\027\n\023VOICE_PRESET_MALE_3\020\010\022\027\n\023VOIC"
  "E_PRESET_MALE_4\020\t\022\027\n\023VOICE_PRESET_MALE_5"
  "\020\n\022\037\n\033INWORLD_VOICE_PRESET_MALE_1\020\013\022\037\n\033I"
  "NWORLD_VOICE_PRESET_MALE_2\020\014\022!\n\035INWORLD_"
  "VOICE_PRESET_FEMALE_1\020\r\022!\n\035INWORLD_VOICE"
  "_PRESET_FEMALE_2\020\016\022\037\n\033INWORLD_VOICE_PRES"
  "ET_MALE_3\020\017\022\037\n\033INWORLD_VOICE_PRESET_MALE"
  "_4\020\020\022\037\n\033INWORLD_VOICE_PRESET_MALE_5\020\021\022!\n"
  "\035INWORLD_VOICE_PRESET_FEMALE_3\020\022\022!\n\035INWO"
  "RLD_VOICE_PRESET_FEMALE_4\020\023\022%\n!INWORLD_V"
  "OICE_PRESET_ROBOT_MALE_1\020\024\022%\n!INWORLD_VO"
  "ICE_PRESET_ROBOT_MALE_2\020\025\022%\n!INWORLD_VOI"
  "CE_PRESET_ROBOT_MALE_3\020\026\022%\n!INWORLD_VOIC"
  "E_PRESET_ROBOT_MALE_4\020\027\022%\n!INWORLD_VOICE"
  "_PRESET_ROBOT_MALE_5\020\030\022\'\n#INWORLD_VOICE_"
  "PRESET_ROBOT_FEMALE_1\020\031\022\'\n#INWORLD_VOICE"
  "_PRESET_ROBOT_FEMALE_2\020\032\022\'\n#INWORLD_VOIC"
  "E_PRESET_ROBOT_FEMALE_3\020\033\022\'\n#INWORLD_VOI"
  "CE_PRESET_ROBOT_FEMALE_4\020\034\022\036\n\032INWORLD_VO"
  "ICE_PRESET_SPIKE\020\035\022!\n\035INWORLD_VOICE_PRES"
  "ET_TWILIGHT\020\036\022#\n\037INWORLD_VOICE_PRESET_FL"
  "UTTERSHY\020\037\022$\n INWORLD_VOICE_PRESET_ROBOT"
  "_SPIKE\020 \022\'\n#INWORLD_VOICE_PRESET_ROBOT_T"
  "WILIGHT\020!\022)\n%INWORLD_VOICE_PRESET_ROBOT_"
  "FLUTTERSHY\020\"2\242\007\n\013WorldEngine\022\177\n\007Session\022"
  "!.ai.inworld.packets.InworldPacket\032!.ai."
  "inworld.packets.InworldPacket\"*\202\323\344\223\002$\022\023/"
  "v1/session/defaultZ\r\022\013/v1/session(\0010\001\022q\n"
  "\013OpenSession\022!.ai.inworld.packets.Inworl"
  "dPacket\032!.ai.inworld.packets.InworldPack"
  "et\"\030\202\323\344\223\002\022\022\020/v1/session/open(\0010\001\022\270\001\n\tLoa"
  "dScene\022#.ai.inworld.engine.LoadSceneRequ"
  "est\032$.ai.inworld.engine.LoadSceneRespons"
  "e\"`\202\323\344\223\002Z\"%/v1/{name=workspaces/*/scenes"
  "/*}:load:\001*Z.\")/v1/{name=workspaces/*/ch"
  "aracters/*}:load:\001*\022`\n\010LogError\022\".ai.inw"
  "orld.engine.LogErrorRequest\032\026.google.pro"
  "tobuf.Empty\"\030\202\323\344\223\002\022\"\r/v1/log:error:\001*\022}\n"
  "\014VoicePreview\022&.ai.inworld.engine.VoiceP"
  "reviewRequest\032\'.ai.inworld.engine.VoiceP"
  "reviewResponse\"\034\202\323\344\223\002\026\"\021/v1/voice:previe"
  "w:\001*\022}\n\016ListBaseVoices\022(.ai.inworld.engi"
  "ne.ListBaseVoicesRequest\032).ai.inworld.en"
  "gine.ListBaseVoicesResponce\"\026\202\323\344\223\002\020\022\016/v1"
  "/voice:base\022\203\001\n\rGenerateToken\022\'.ai.inwor"
  "ld.engine.GenerateTokenRequest\032\036.ai.inwo"
  "rld.engine.AccessToken\")\202\323\344\223\002#\"\036/auth/v1"
  "/tokens/token:generate:\001*B\210\001\n\017ai.inworld"
  ".grpcB\027WorldEngineGrpcProtocolZMgithub.c"
  "om/inworld-ai/inworld/serving/grpc-gatew"
  "ay/build/proto/engine/v1alpha\252\002\014Inworld."
  "Grpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto_deps[7] = {
  &::descriptor_table_ai_2finworld_2flanguage_5fcodes_2flanguage_5fcodes_2eproto,
  &::descriptor_table_ai_2finworld_2fpackets_2fpackets_2eproto,
  &::descriptor_table_ai_2finworld_2fvoices_2fbase_5fvoice_2eproto,
  &::descriptor_table_ai_2finworld_2fvoices_2fvoices_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto_sccs[28] = {
  &scc_info_AccessToken_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_GenerateTokenRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ListBaseVoicesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_ListBaseVoicesResponce_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_LoadSceneRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_LoadSceneResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_LogErrorRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_VoicePreviewRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
  &scc_info_VoicePreviewResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto = {
  false, false, descriptor_table_protodef_ai_2finworld_2fengine_2fworld_2dengine_2eproto, "ai/inworld/engine/world-engine.proto", 6572,
  &descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto_once, descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto_sccs, descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto_deps, 28, 7,
  schemas, file_default_instances, TableStruct_ai_2finworld_2fengine_2fworld_2dengine_2eproto::offsets,
  file_level_metadata_ai_2finworld_2fengine_2fworld_2dengine_2eproto, 28, file_level_enum_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto, file_level_service_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ai_2finworld_2fengine_2fworld_2dengine_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto)), true);
namespace ai {
namespace inworld {
namespace engine {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreviousDialog_DialogParticipant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto[0];
}
bool PreviousDialog_DialogParticipant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PreviousDialog_DialogParticipant PreviousDialog::UNKNOWN;
constexpr PreviousDialog_DialogParticipant PreviousDialog::PLAYER;
constexpr PreviousDialog_DialogParticipant PreviousDialog::CHARACTER;
constexpr PreviousDialog_DialogParticipant PreviousDialog::DialogParticipant_MIN;
constexpr PreviousDialog_DialogParticipant PreviousDialog::DialogParticipant_MAX;
constexpr int PreviousDialog::DialogParticipant_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreviousState_StateHolder_StateFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto[1];
}
bool PreviousState_StateHolder_StateFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder::STATE_FORMAT_UNKNOWN;
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder::STATE_FORMAT_SESSION_BRAIN_STATE;
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder::STATE_FORMAT_EXTERNAL_BRAIN_STATE;
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder::StateFormat_MIN;
constexpr PreviousState_StateHolder_StateFormat PreviousState_StateHolder::StateFormat_MAX;
constexpr int PreviousState_StateHolder::StateFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoicePreset_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ai_2finworld_2fengine_2fworld_2dengine_2eproto);
  return file_level_enum_descriptors_ai_2finworld_2fengine_2fworld_2dengine_2eproto[2];
}
bool VoicePreset_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CapabilitiesRequest::_Internal {
 public:
};

CapabilitiesRequest::CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.CapabilitiesRequest)
}
CapabilitiesRequest::CapabilitiesRequest(const CapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audio_, &from.audio_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_2_face_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(audio_2_face_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.CapabilitiesRequest)
}

void CapabilitiesRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&audio_2_face_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(audio_2_face_));
}

CapabilitiesRequest::~CapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.CapabilitiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapabilitiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CapabilitiesRequest::ArenaDtor(void* object) {
  CapabilitiesRequest* _this = reinterpret_cast< CapabilitiesRequest* >(object);
  (void)_this;
}
void CapabilitiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapabilitiesRequest& CapabilitiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapabilitiesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void CapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.CapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_2_face_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(audio_2_face_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gestures = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gestures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool interruptions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          interruptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool triggers = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool emotions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          emotions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool turn_based_stt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          turn_based_stt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool emotion_streaming = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          emotion_streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool silence_events = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          silence_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool phoneme_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          phoneme_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool continuation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool session_cancellation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          session_cancellation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool narrated_actions = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          narrated_actions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool regenerate_response = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          regenerate_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool load_scene_in_session = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          load_scene_in_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool relations = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          relations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool debug_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tts_mp3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          tts_mp3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool multi_agent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          multi_agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool audio_2_face = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          audio_2_face_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.CapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool audio = 1;
  if (this->audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_audio(), target);
  }

  // bool text = 2;
  if (this->text() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_text(), target);
  }

  // bool gestures = 3 [deprecated = true];
  if (this->gestures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gestures(), target);
  }

  // bool interruptions = 4;
  if (this->interruptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_interruptions(), target);
  }

  // bool triggers = 5 [deprecated = true];
  if (this->triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_triggers(), target);
  }

  // bool emotions = 6;
  if (this->emotions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_emotions(), target);
  }

  // bool turn_based_stt = 8;
  if (this->turn_based_stt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_turn_based_stt(), target);
  }

  // bool emotion_streaming = 9;
  if (this->emotion_streaming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_emotion_streaming(), target);
  }

  // bool silence_events = 10;
  if (this->silence_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_silence_events(), target);
  }

  // bool phoneme_info = 11;
  if (this->phoneme_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_phoneme_info(), target);
  }

  // bool continuation = 12;
  if (this->continuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_continuation(), target);
  }

  // bool session_cancellation = 13;
  if (this->session_cancellation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_session_cancellation(), target);
  }

  // bool narrated_actions = 14;
  if (this->narrated_actions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_narrated_actions(), target);
  }

  // bool regenerate_response = 15;
  if (this->regenerate_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_regenerate_response(), target);
  }

  // bool load_scene_in_session = 16;
  if (this->load_scene_in_session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_load_scene_in_session(), target);
  }

  // bool relations = 17;
  if (this->relations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_relations(), target);
  }

  // bool debug_info = 18;
  if (this->debug_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_debug_info(), target);
  }

  // bool tts_mp3 = 19;
  if (this->tts_mp3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_tts_mp3(), target);
  }

  // bool multi_agent = 20;
  if (this->multi_agent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_multi_agent(), target);
  }

  // bool audio_2_face = 21;
  if (this->audio_2_face() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_audio_2_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.CapabilitiesRequest)
  return target;
}

size_t CapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.CapabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool audio = 1;
  if (this->audio() != 0) {
    total_size += 1 + 1;
  }

  // bool text = 2;
  if (this->text() != 0) {
    total_size += 1 + 1;
  }

  // bool gestures = 3 [deprecated = true];
  if (this->gestures() != 0) {
    total_size += 1 + 1;
  }

  // bool interruptions = 4;
  if (this->interruptions() != 0) {
    total_size += 1 + 1;
  }

  // bool triggers = 5 [deprecated = true];
  if (this->triggers() != 0) {
    total_size += 1 + 1;
  }

  // bool emotions = 6;
  if (this->emotions() != 0) {
    total_size += 1 + 1;
  }

  // bool turn_based_stt = 8;
  if (this->turn_based_stt() != 0) {
    total_size += 1 + 1;
  }

  // bool emotion_streaming = 9;
  if (this->emotion_streaming() != 0) {
    total_size += 1 + 1;
  }

  // bool silence_events = 10;
  if (this->silence_events() != 0) {
    total_size += 1 + 1;
  }

  // bool phoneme_info = 11;
  if (this->phoneme_info() != 0) {
    total_size += 1 + 1;
  }

  // bool continuation = 12;
  if (this->continuation() != 0) {
    total_size += 1 + 1;
  }

  // bool session_cancellation = 13;
  if (this->session_cancellation() != 0) {
    total_size += 1 + 1;
  }

  // bool narrated_actions = 14;
  if (this->narrated_actions() != 0) {
    total_size += 1 + 1;
  }

  // bool regenerate_response = 15;
  if (this->regenerate_response() != 0) {
    total_size += 1 + 1;
  }

  // bool load_scene_in_session = 16;
  if (this->load_scene_in_session() != 0) {
    total_size += 2 + 1;
  }

  // bool relations = 17;
  if (this->relations() != 0) {
    total_size += 2 + 1;
  }

  // bool debug_info = 18;
  if (this->debug_info() != 0) {
    total_size += 2 + 1;
  }

  // bool tts_mp3 = 19;
  if (this->tts_mp3() != 0) {
    total_size += 2 + 1;
  }

  // bool multi_agent = 20;
  if (this->multi_agent() != 0) {
    total_size += 2 + 1;
  }

  // bool audio_2_face = 21;
  if (this->audio_2_face() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.CapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.CapabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.CapabilitiesRequest)
    MergeFrom(*source);
  }
}

void CapabilitiesRequest::MergeFrom(const CapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.CapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio() != 0) {
    _internal_set_audio(from._internal_audio());
  }
  if (from.text() != 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.gestures() != 0) {
    _internal_set_gestures(from._internal_gestures());
  }
  if (from.interruptions() != 0) {
    _internal_set_interruptions(from._internal_interruptions());
  }
  if (from.triggers() != 0) {
    _internal_set_triggers(from._internal_triggers());
  }
  if (from.emotions() != 0) {
    _internal_set_emotions(from._internal_emotions());
  }
  if (from.turn_based_stt() != 0) {
    _internal_set_turn_based_stt(from._internal_turn_based_stt());
  }
  if (from.emotion_streaming() != 0) {
    _internal_set_emotion_streaming(from._internal_emotion_streaming());
  }
  if (from.silence_events() != 0) {
    _internal_set_silence_events(from._internal_silence_events());
  }
  if (from.phoneme_info() != 0) {
    _internal_set_phoneme_info(from._internal_phoneme_info());
  }
  if (from.continuation() != 0) {
    _internal_set_continuation(from._internal_continuation());
  }
  if (from.session_cancellation() != 0) {
    _internal_set_session_cancellation(from._internal_session_cancellation());
  }
  if (from.narrated_actions() != 0) {
    _internal_set_narrated_actions(from._internal_narrated_actions());
  }
  if (from.regenerate_response() != 0) {
    _internal_set_regenerate_response(from._internal_regenerate_response());
  }
  if (from.load_scene_in_session() != 0) {
    _internal_set_load_scene_in_session(from._internal_load_scene_in_session());
  }
  if (from.relations() != 0) {
    _internal_set_relations(from._internal_relations());
  }
  if (from.debug_info() != 0) {
    _internal_set_debug_info(from._internal_debug_info());
  }
  if (from.tts_mp3() != 0) {
    _internal_set_tts_mp3(from._internal_tts_mp3());
  }
  if (from.multi_agent() != 0) {
    _internal_set_multi_agent(from._internal_multi_agent());
  }
  if (from.audio_2_face() != 0) {
    _internal_set_audio_2_face(from._internal_audio_2_face());
  }
}

void CapabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.CapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesRequest::CopyFrom(const CapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.CapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesRequest::IsInitialized() const {
  return true;
}

void CapabilitiesRequest::InternalSwap(CapabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapabilitiesRequest, audio_2_face_)
      + sizeof(CapabilitiesRequest::audio_2_face_)
      - PROTOBUF_FIELD_OFFSET(CapabilitiesRequest, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserRequest::_Internal {
 public:
};

UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.UserRequest)
}

void UserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.UserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserRequest::ArenaDtor(void* object) {
  UserRequest* _this = reinterpret_cast< UserRequest* >(object);
  (void)_this;
}
void UserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserRequest& UserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.UserRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.UserRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.UserRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.UserRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.UserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.UserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.UserRequest)
    MergeFrom(*source);
  }
}

void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void UserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientRequest::_Internal {
 public:
};

ClientRequest::ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ClientRequest)
}
ClientRequest::ClientRequest(const ClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ClientRequest)
}

void ClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ClientRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientRequest::ArenaDtor(void* object) {
  ClientRequest* _this = reinterpret_cast< ClientRequest* >(object);
  (void)_this;
}
void ClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientRequest& ClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  version_.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ClientRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ClientRequest.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ClientRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ClientRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ClientRequest.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ClientRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ClientRequest)
  return target;
}

size_t ClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ClientRequest)
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
}

void ClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  return true;
}

void ClientRequest::InternalSwap(ClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneRequest::_Internal {
 public:
  static const ::ai::inworld::engine::CapabilitiesRequest& capabilities(const LoadSceneRequest* msg);
  static const ::ai::inworld::engine::UserRequest& user(const LoadSceneRequest* msg);
  static const ::ai::inworld::engine::ClientRequest& client(const LoadSceneRequest* msg);
  static const ::ai::inworld::engine::AudioSettings& audio_settings(const LoadSceneRequest* msg);
  static const ::ai::inworld::engine::UserSettings& user_settings(const LoadSceneRequest* msg);
  static const ::ai::inworld::engine::SessionContinuation& session_continuation(const LoadSceneRequest* msg);
};

const ::ai::inworld::engine::CapabilitiesRequest&
LoadSceneRequest::_Internal::capabilities(const LoadSceneRequest* msg) {
  return *msg->capabilities_;
}
const ::ai::inworld::engine::UserRequest&
LoadSceneRequest::_Internal::user(const LoadSceneRequest* msg) {
  return *msg->user_;
}
const ::ai::inworld::engine::ClientRequest&
LoadSceneRequest::_Internal::client(const LoadSceneRequest* msg) {
  return *msg->client_;
}
const ::ai::inworld::engine::AudioSettings&
LoadSceneRequest::_Internal::audio_settings(const LoadSceneRequest* msg) {
  return *msg->audio_settings_;
}
const ::ai::inworld::engine::UserSettings&
LoadSceneRequest::_Internal::user_settings(const LoadSceneRequest* msg) {
  return *msg->user_settings_;
}
const ::ai::inworld::engine::SessionContinuation&
LoadSceneRequest::_Internal::session_continuation(const LoadSceneRequest* msg) {
  return *msg->session_continuation_;
}
LoadSceneRequest::LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.LoadSceneRequest)
}
LoadSceneRequest::LoadSceneRequest(const LoadSceneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_capabilities()) {
    capabilities_ = new ::ai::inworld::engine::CapabilitiesRequest(*from.capabilities_);
  } else {
    capabilities_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::ai::inworld::engine::UserRequest(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_client()) {
    client_ = new ::ai::inworld::engine::ClientRequest(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_audio_settings()) {
    audio_settings_ = new ::ai::inworld::engine::AudioSettings(*from.audio_settings_);
  } else {
    audio_settings_ = nullptr;
  }
  if (from._internal_has_user_settings()) {
    user_settings_ = new ::ai::inworld::engine::UserSettings(*from.user_settings_);
  } else {
    user_settings_ = nullptr;
  }
  if (from._internal_has_session_continuation()) {
    session_continuation_ = new ::ai::inworld::engine::SessionContinuation(*from.session_continuation_);
  } else {
    session_continuation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.LoadSceneRequest)
}

void LoadSceneRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&capabilities_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&session_continuation_) -
      reinterpret_cast<char*>(&capabilities_)) + sizeof(session_continuation_));
}

LoadSceneRequest::~LoadSceneRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.LoadSceneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capabilities_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete audio_settings_;
  if (this != internal_default_instance()) delete user_settings_;
  if (this != internal_default_instance()) delete session_continuation_;
}

void LoadSceneRequest::ArenaDtor(void* object) {
  LoadSceneRequest* _this = reinterpret_cast< LoadSceneRequest* >(object);
  (void)_this;
}
void LoadSceneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneRequest& LoadSceneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.LoadSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArena() == nullptr && audio_settings_ != nullptr) {
    delete audio_settings_;
  }
  audio_settings_ = nullptr;
  if (GetArena() == nullptr && user_settings_ != nullptr) {
    delete user_settings_;
  }
  user_settings_ = nullptr;
  if (GetArena() == nullptr && session_continuation_ != nullptr) {
    delete session_continuation_;
  }
  session_continuation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.UserRequest user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.ClientRequest client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.AudioSettings audio_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.UserSettings user_settings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.SessionContinuation session_continuation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_continuation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.LoadSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
  if (this->has_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::capabilities(this), target, stream);
  }

  // .ai.inworld.engine.UserRequest user = 3;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  // .ai.inworld.engine.ClientRequest client = 4;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client(this), target, stream);
  }

  // .ai.inworld.engine.AudioSettings audio_settings = 5;
  if (this->has_audio_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::audio_settings(this), target, stream);
  }

  // .ai.inworld.engine.UserSettings user_settings = 6;
  if (this->has_user_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::user_settings(this), target, stream);
  }

  // .ai.inworld.engine.SessionContinuation session_continuation = 7;
  if (this->has_session_continuation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::session_continuation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.LoadSceneRequest)
  return target;
}

size_t LoadSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.LoadSceneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
  if (this->has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_);
  }

  // .ai.inworld.engine.UserRequest user = 3;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .ai.inworld.engine.ClientRequest client = 4;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .ai.inworld.engine.AudioSettings audio_settings = 5;
  if (this->has_audio_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_settings_);
  }

  // .ai.inworld.engine.UserSettings user_settings = 6;
  if (this->has_user_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_settings_);
  }

  // .ai.inworld.engine.SessionContinuation session_continuation = 7;
  if (this->has_session_continuation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_continuation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.LoadSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.LoadSceneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.LoadSceneRequest)
    MergeFrom(*source);
  }
}

void LoadSceneRequest::MergeFrom(const LoadSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.LoadSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_capabilities()) {
    _internal_mutable_capabilities()->::ai::inworld::engine::CapabilitiesRequest::MergeFrom(from._internal_capabilities());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::ai::inworld::engine::UserRequest::MergeFrom(from._internal_user());
  }
  if (from.has_client()) {
    _internal_mutable_client()->::ai::inworld::engine::ClientRequest::MergeFrom(from._internal_client());
  }
  if (from.has_audio_settings()) {
    _internal_mutable_audio_settings()->::ai::inworld::engine::AudioSettings::MergeFrom(from._internal_audio_settings());
  }
  if (from.has_user_settings()) {
    _internal_mutable_user_settings()->::ai::inworld::engine::UserSettings::MergeFrom(from._internal_user_settings());
  }
  if (from.has_session_continuation()) {
    _internal_mutable_session_continuation()->::ai::inworld::engine::SessionContinuation::MergeFrom(from._internal_session_continuation());
  }
}

void LoadSceneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.LoadSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneRequest::CopyFrom(const LoadSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.LoadSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneRequest::IsInitialized() const {
  return true;
}

void LoadSceneRequest::InternalSwap(LoadSceneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadSceneRequest, session_continuation_)
      + sizeof(LoadSceneRequest::session_continuation_)
      - PROTOBUF_FIELD_OFFSET(LoadSceneRequest, capabilities_)>(
          reinterpret_cast<char*>(&capabilities_),
          reinterpret_cast<char*>(&other->capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioSettings::_Internal {
 public:
};

AudioSettings::AudioSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.AudioSettings)
}
AudioSettings::AudioSettings(const AudioSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stt_sample_rate_hertz_, &from.stt_sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&tts_sample_rate_hertz_) -
    reinterpret_cast<char*>(&stt_sample_rate_hertz_)) + sizeof(tts_sample_rate_hertz_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.AudioSettings)
}

void AudioSettings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stt_sample_rate_hertz_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tts_sample_rate_hertz_) -
      reinterpret_cast<char*>(&stt_sample_rate_hertz_)) + sizeof(tts_sample_rate_hertz_));
}

AudioSettings::~AudioSettings() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.AudioSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioSettings::ArenaDtor(void* object) {
  AudioSettings* _this = reinterpret_cast< AudioSettings* >(object);
  (void)_this;
}
void AudioSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioSettings& AudioSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void AudioSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.AudioSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stt_sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tts_sample_rate_hertz_) -
      reinterpret_cast<char*>(&stt_sample_rate_hertz_)) + sizeof(tts_sample_rate_hertz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 stt_sample_rate_hertz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stt_sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tts_sample_rate_hertz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tts_sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.AudioSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stt_sample_rate_hertz = 1;
  if (this->stt_sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stt_sample_rate_hertz(), target);
  }

  // uint32 tts_sample_rate_hertz = 2;
  if (this->tts_sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tts_sample_rate_hertz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.AudioSettings)
  return target;
}

size_t AudioSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.AudioSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stt_sample_rate_hertz = 1;
  if (this->stt_sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stt_sample_rate_hertz());
  }

  // uint32 tts_sample_rate_hertz = 2;
  if (this->tts_sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tts_sample_rate_hertz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.AudioSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.AudioSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.AudioSettings)
    MergeFrom(*source);
  }
}

void AudioSettings::MergeFrom(const AudioSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.AudioSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stt_sample_rate_hertz() != 0) {
    _internal_set_stt_sample_rate_hertz(from._internal_stt_sample_rate_hertz());
  }
  if (from.tts_sample_rate_hertz() != 0) {
    _internal_set_tts_sample_rate_hertz(from._internal_tts_sample_rate_hertz());
  }
}

void AudioSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.AudioSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioSettings::CopyFrom(const AudioSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.AudioSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSettings::IsInitialized() const {
  return true;
}

void AudioSettings::InternalSwap(AudioSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioSettings, tts_sample_rate_hertz_)
      + sizeof(AudioSettings::tts_sample_rate_hertz_)
      - PROTOBUF_FIELD_OFFSET(AudioSettings, stt_sample_rate_hertz_)>(
          reinterpret_cast<char*>(&stt_sample_rate_hertz_),
          reinterpret_cast<char*>(&other->stt_sample_rate_hertz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserSettings_PlayerProfile_PlayerField::_Internal {
 public:
};

UserSettings_PlayerProfile_PlayerField::UserSettings_PlayerProfile_PlayerField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
}
UserSettings_PlayerProfile_PlayerField::UserSettings_PlayerProfile_PlayerField(const UserSettings_PlayerProfile_PlayerField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_id().empty()) {
    field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_id(), 
      GetArena());
  }
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_value().empty()) {
    field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
}

void UserSettings_PlayerProfile_PlayerField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  field_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserSettings_PlayerProfile_PlayerField::~UserSettings_PlayerProfile_PlayerField() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSettings_PlayerProfile_PlayerField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSettings_PlayerProfile_PlayerField::ArenaDtor(void* object) {
  UserSettings_PlayerProfile_PlayerField* _this = reinterpret_cast< UserSettings_PlayerProfile_PlayerField* >(object);
  (void)_this;
}
void UserSettings_PlayerProfile_PlayerField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSettings_PlayerProfile_PlayerField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSettings_PlayerProfile_PlayerField& UserSettings_PlayerProfile_PlayerField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSettings_PlayerProfile_PlayerField_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void UserSettings_PlayerProfile_PlayerField::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_id_.ClearToEmpty();
  field_value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettings_PlayerProfile_PlayerField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string field_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSettings_PlayerProfile_PlayerField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_id = 1;
  if (this->field_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_id().data(), static_cast<int>(this->_internal_field_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field_id(), target);
  }

  // string field_value = 2;
  if (this->field_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_value().data(), static_cast<int>(this->_internal_field_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  return target;
}

size_t UserSettings_PlayerProfile_PlayerField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field_id = 1;
  if (this->field_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_id());
  }

  // string field_value = 2;
  if (this->field_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSettings_PlayerProfile_PlayerField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSettings_PlayerProfile_PlayerField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSettings_PlayerProfile_PlayerField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
    MergeFrom(*source);
  }
}

void UserSettings_PlayerProfile_PlayerField::MergeFrom(const UserSettings_PlayerProfile_PlayerField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_id().size() > 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  if (from.field_value().size() > 0) {
    _internal_set_field_value(from._internal_field_value());
  }
}

void UserSettings_PlayerProfile_PlayerField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSettings_PlayerProfile_PlayerField::CopyFrom(const UserSettings_PlayerProfile_PlayerField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings_PlayerProfile_PlayerField::IsInitialized() const {
  return true;
}

void UserSettings_PlayerProfile_PlayerField::InternalSwap(UserSettings_PlayerProfile_PlayerField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_id_.Swap(&other->field_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_value_.Swap(&other->field_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettings_PlayerProfile_PlayerField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserSettings_PlayerProfile::_Internal {
 public:
};

UserSettings_PlayerProfile::UserSettings_PlayerProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.UserSettings.PlayerProfile)
}
UserSettings_PlayerProfile::UserSettings_PlayerProfile(const UserSettings_PlayerProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.UserSettings.PlayerProfile)
}

void UserSettings_PlayerProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
}

UserSettings_PlayerProfile::~UserSettings_PlayerProfile() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.UserSettings.PlayerProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSettings_PlayerProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserSettings_PlayerProfile::ArenaDtor(void* object) {
  UserSettings_PlayerProfile* _this = reinterpret_cast< UserSettings_PlayerProfile* >(object);
  (void)_this;
}
void UserSettings_PlayerProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSettings_PlayerProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSettings_PlayerProfile& UserSettings_PlayerProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSettings_PlayerProfile_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void UserSettings_PlayerProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.UserSettings.PlayerProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettings_PlayerProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSettings_PlayerProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.UserSettings.PlayerProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.UserSettings.PlayerProfile)
  return target;
}

size_t UserSettings_PlayerProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.UserSettings.PlayerProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSettings_PlayerProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.UserSettings.PlayerProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSettings_PlayerProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSettings_PlayerProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.UserSettings.PlayerProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.UserSettings.PlayerProfile)
    MergeFrom(*source);
  }
}

void UserSettings_PlayerProfile::MergeFrom(const UserSettings_PlayerProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.UserSettings.PlayerProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void UserSettings_PlayerProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.UserSettings.PlayerProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSettings_PlayerProfile::CopyFrom(const UserSettings_PlayerProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.UserSettings.PlayerProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings_PlayerProfile::IsInitialized() const {
  return true;
}

void UserSettings_PlayerProfile::InternalSwap(UserSettings_PlayerProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettings_PlayerProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserSettings::_Internal {
 public:
  static const ::ai::inworld::engine::UserSettings_PlayerProfile& player_profile(const UserSettings* msg);
};

const ::ai::inworld::engine::UserSettings_PlayerProfile&
UserSettings::_Internal::player_profile(const UserSettings* msg) {
  return *msg->player_profile_;
}
UserSettings::UserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.UserSettings)
}
UserSettings::UserSettings(const UserSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_profile()) {
    player_profile_ = new ::ai::inworld::engine::UserSettings_PlayerProfile(*from.player_profile_);
  } else {
    player_profile_ = nullptr;
  }
  view_transcript_consent_ = from.view_transcript_consent_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.UserSettings)
}

void UserSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_profile_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&view_transcript_consent_) -
      reinterpret_cast<char*>(&player_profile_)) + sizeof(view_transcript_consent_));
}

UserSettings::~UserSettings() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.UserSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_profile_;
}

void UserSettings::ArenaDtor(void* object) {
  UserSettings* _this = reinterpret_cast< UserSettings* >(object);
  (void)_this;
}
void UserSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSettings& UserSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void UserSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.UserSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_profile_ != nullptr) {
    delete player_profile_;
  }
  player_profile_ = nullptr;
  view_transcript_consent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool view_transcript_consent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_transcript_consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.UserSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool view_transcript_consent = 1;
  if (this->view_transcript_consent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_view_transcript_consent(), target);
  }

  // .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
  if (this->has_player_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_profile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.UserSettings)
  return target;
}

size_t UserSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.UserSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
  if (this->has_player_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_profile_);
  }

  // bool view_transcript_consent = 1;
  if (this->view_transcript_consent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.UserSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.UserSettings)
    MergeFrom(*source);
  }
}

void UserSettings::MergeFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_profile()) {
    _internal_mutable_player_profile()->::ai::inworld::engine::UserSettings_PlayerProfile::MergeFrom(from._internal_player_profile());
  }
  if (from.view_transcript_consent() != 0) {
    _internal_set_view_transcript_consent(from._internal_view_transcript_consent());
  }
}

void UserSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSettings::CopyFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings::IsInitialized() const {
  return true;
}

void UserSettings::InternalSwap(UserSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSettings, view_transcript_consent_)
      + sizeof(UserSettings::view_transcript_consent_)
      - PROTOBUF_FIELD_OFFSET(UserSettings, player_profile_)>(
          reinterpret_cast<char*>(&player_profile_),
          reinterpret_cast<char*>(&other->player_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionContinuation_ContinuationInfo::_Internal {
 public:
};

SessionContinuation_ContinuationInfo::SessionContinuation_ContinuationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.SessionContinuation.ContinuationInfo)
}
SessionContinuation_ContinuationInfo::SessionContinuation_ContinuationInfo(const SessionContinuation_ContinuationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  millis_passed_ = from.millis_passed_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.SessionContinuation.ContinuationInfo)
}

void SessionContinuation_ContinuationInfo::SharedCtor() {
  millis_passed_ = PROTOBUF_LONGLONG(0);
}

SessionContinuation_ContinuationInfo::~SessionContinuation_ContinuationInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionContinuation_ContinuationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionContinuation_ContinuationInfo::ArenaDtor(void* object) {
  SessionContinuation_ContinuationInfo* _this = reinterpret_cast< SessionContinuation_ContinuationInfo* >(object);
  (void)_this;
}
void SessionContinuation_ContinuationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContinuation_ContinuationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionContinuation_ContinuationInfo& SessionContinuation_ContinuationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionContinuation_ContinuationInfo_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void SessionContinuation_ContinuationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  millis_passed_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContinuation_ContinuationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 millis_passed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          millis_passed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionContinuation_ContinuationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 millis_passed = 1;
  if (this->millis_passed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_millis_passed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  return target;
}

size_t SessionContinuation_ContinuationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 millis_passed = 1;
  if (this->millis_passed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_millis_passed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionContinuation_ContinuationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionContinuation_ContinuationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionContinuation_ContinuationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.SessionContinuation.ContinuationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.SessionContinuation.ContinuationInfo)
    MergeFrom(*source);
  }
}

void SessionContinuation_ContinuationInfo::MergeFrom(const SessionContinuation_ContinuationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.millis_passed() != 0) {
    _internal_set_millis_passed(from._internal_millis_passed());
  }
}

void SessionContinuation_ContinuationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionContinuation_ContinuationInfo::CopyFrom(const SessionContinuation_ContinuationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.SessionContinuation.ContinuationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContinuation_ContinuationInfo::IsInitialized() const {
  return true;
}

void SessionContinuation_ContinuationInfo::InternalSwap(SessionContinuation_ContinuationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(millis_passed_, other->millis_passed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContinuation_ContinuationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionContinuation::_Internal {
 public:
  static const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& continuation_info(const SessionContinuation* msg);
  static const ::ai::inworld::engine::PreviousDialog& previous_dialog(const SessionContinuation* msg);
};

const ::ai::inworld::engine::SessionContinuation_ContinuationInfo&
SessionContinuation::_Internal::continuation_info(const SessionContinuation* msg) {
  return *msg->continuation_info_;
}
const ::ai::inworld::engine::PreviousDialog&
SessionContinuation::_Internal::previous_dialog(const SessionContinuation* msg) {
  return *msg->previous_dialog_;
}
SessionContinuation::SessionContinuation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.SessionContinuation)
}
SessionContinuation::SessionContinuation(const SessionContinuation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previous_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_state().empty()) {
    previous_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_state(), 
      GetArena());
  }
  if (from._internal_has_continuation_info()) {
    continuation_info_ = new ::ai::inworld::engine::SessionContinuation_ContinuationInfo(*from.continuation_info_);
  } else {
    continuation_info_ = nullptr;
  }
  if (from._internal_has_previous_dialog()) {
    previous_dialog_ = new ::ai::inworld::engine::PreviousDialog(*from.previous_dialog_);
  } else {
    previous_dialog_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.SessionContinuation)
}

void SessionContinuation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  previous_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&previous_dialog_) -
      reinterpret_cast<char*>(&continuation_info_)) + sizeof(previous_dialog_));
}

SessionContinuation::~SessionContinuation() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.SessionContinuation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionContinuation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  previous_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete continuation_info_;
  if (this != internal_default_instance()) delete previous_dialog_;
}

void SessionContinuation::ArenaDtor(void* object) {
  SessionContinuation* _this = reinterpret_cast< SessionContinuation* >(object);
  (void)_this;
}
void SessionContinuation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContinuation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionContinuation& SessionContinuation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionContinuation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void SessionContinuation::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.SessionContinuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_state_.ClearToEmpty();
  if (GetArena() == nullptr && continuation_info_ != nullptr) {
    delete continuation_info_;
  }
  continuation_info_ = nullptr;
  if (GetArena() == nullptr && previous_dialog_ != nullptr) {
    delete previous_dialog_;
  }
  previous_dialog_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContinuation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuation_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.PreviousDialog previous_dialog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_previous_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionContinuation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.SessionContinuation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
  if (this->has_continuation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::continuation_info(this), target, stream);
  }

  // .ai.inworld.engine.PreviousDialog previous_dialog = 2;
  if (this->has_previous_dialog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::previous_dialog(this), target, stream);
  }

  // bytes previous_state = 3;
  if (this->previous_state().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_previous_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.SessionContinuation)
  return target;
}

size_t SessionContinuation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.SessionContinuation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previous_state = 3;
  if (this->previous_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_state());
  }

  // .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
  if (this->has_continuation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *continuation_info_);
  }

  // .ai.inworld.engine.PreviousDialog previous_dialog = 2;
  if (this->has_previous_dialog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_dialog_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionContinuation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.SessionContinuation)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionContinuation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionContinuation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.SessionContinuation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.SessionContinuation)
    MergeFrom(*source);
  }
}

void SessionContinuation::MergeFrom(const SessionContinuation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.SessionContinuation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previous_state().size() > 0) {
    _internal_set_previous_state(from._internal_previous_state());
  }
  if (from.has_continuation_info()) {
    _internal_mutable_continuation_info()->::ai::inworld::engine::SessionContinuation_ContinuationInfo::MergeFrom(from._internal_continuation_info());
  }
  if (from.has_previous_dialog()) {
    _internal_mutable_previous_dialog()->::ai::inworld::engine::PreviousDialog::MergeFrom(from._internal_previous_dialog());
  }
}

void SessionContinuation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.SessionContinuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionContinuation::CopyFrom(const SessionContinuation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.SessionContinuation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContinuation::IsInitialized() const {
  return true;
}

void SessionContinuation::InternalSwap(SessionContinuation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  previous_state_.Swap(&other->previous_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionContinuation, previous_dialog_)
      + sizeof(SessionContinuation::previous_dialog_)
      - PROTOBUF_FIELD_OFFSET(SessionContinuation, continuation_info_)>(
          reinterpret_cast<char*>(&continuation_info_),
          reinterpret_cast<char*>(&other->continuation_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContinuation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PreviousDialog_Phrase::_Internal {
 public:
};

PreviousDialog_Phrase::PreviousDialog_Phrase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.PreviousDialog.Phrase)
}
PreviousDialog_Phrase::PreviousDialog_Phrase(const PreviousDialog_Phrase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phrase().empty()) {
    phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phrase(), 
      GetArena());
  }
  talker_ = from.talker_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.PreviousDialog.Phrase)
}

void PreviousDialog_Phrase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  phrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  talker_ = 0;
}

PreviousDialog_Phrase::~PreviousDialog_Phrase() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.PreviousDialog.Phrase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviousDialog_Phrase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreviousDialog_Phrase::ArenaDtor(void* object) {
  PreviousDialog_Phrase* _this = reinterpret_cast< PreviousDialog_Phrase* >(object);
  (void)_this;
}
void PreviousDialog_Phrase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviousDialog_Phrase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviousDialog_Phrase& PreviousDialog_Phrase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviousDialog_Phrase_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void PreviousDialog_Phrase::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.PreviousDialog.Phrase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrase_.ClearToEmpty();
  talker_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviousDialog_Phrase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_talker(static_cast<::ai::inworld::engine::PreviousDialog_DialogParticipant>(val));
        } else goto handle_unusual;
        continue;
      // string phrase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.PreviousDialog.Phrase.phrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviousDialog_Phrase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.PreviousDialog.Phrase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
  if (this->talker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_talker(), target);
  }

  // string phrase = 2;
  if (this->phrase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phrase().data(), static_cast<int>(this->_internal_phrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.PreviousDialog.Phrase.phrase");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phrase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.PreviousDialog.Phrase)
  return target;
}

size_t PreviousDialog_Phrase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.PreviousDialog.Phrase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phrase = 2;
  if (this->phrase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phrase());
  }

  // .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
  if (this->talker() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_talker());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviousDialog_Phrase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.PreviousDialog.Phrase)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviousDialog_Phrase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviousDialog_Phrase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.PreviousDialog.Phrase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.PreviousDialog.Phrase)
    MergeFrom(*source);
  }
}

void PreviousDialog_Phrase::MergeFrom(const PreviousDialog_Phrase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.PreviousDialog.Phrase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phrase().size() > 0) {
    _internal_set_phrase(from._internal_phrase());
  }
  if (from.talker() != 0) {
    _internal_set_talker(from._internal_talker());
  }
}

void PreviousDialog_Phrase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.PreviousDialog.Phrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviousDialog_Phrase::CopyFrom(const PreviousDialog_Phrase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.PreviousDialog.Phrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviousDialog_Phrase::IsInitialized() const {
  return true;
}

void PreviousDialog_Phrase::InternalSwap(PreviousDialog_Phrase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phrase_.Swap(&other->phrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(talker_, other->talker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviousDialog_Phrase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PreviousDialog::_Internal {
 public:
};

PreviousDialog::PreviousDialog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phrases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.PreviousDialog)
}
PreviousDialog::PreviousDialog(const PreviousDialog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      phrases_(from.phrases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.PreviousDialog)
}

void PreviousDialog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
}

PreviousDialog::~PreviousDialog() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.PreviousDialog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviousDialog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PreviousDialog::ArenaDtor(void* object) {
  PreviousDialog* _this = reinterpret_cast< PreviousDialog* >(object);
  (void)_this;
}
void PreviousDialog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviousDialog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviousDialog& PreviousDialog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviousDialog_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void PreviousDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.PreviousDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviousDialog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phrases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviousDialog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.PreviousDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phrases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_phrases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.PreviousDialog)
  return target;
}

size_t PreviousDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.PreviousDialog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
  total_size += 1UL * this->_internal_phrases_size();
  for (const auto& msg : this->phrases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviousDialog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.PreviousDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviousDialog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviousDialog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.PreviousDialog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.PreviousDialog)
    MergeFrom(*source);
  }
}

void PreviousDialog::MergeFrom(const PreviousDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.PreviousDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
}

void PreviousDialog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.PreviousDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviousDialog::CopyFrom(const PreviousDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.PreviousDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviousDialog::IsInitialized() const {
  return true;
}

void PreviousDialog::InternalSwap(PreviousDialog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phrases_.InternalSwap(&other->phrases_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviousDialog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PreviousState_StateHolder::_Internal {
 public:
  static const ::ai::inworld::engine::PreviousDialog& previous_dialog(const PreviousState_StateHolder* msg);
};

const ::ai::inworld::engine::PreviousDialog&
PreviousState_StateHolder::_Internal::previous_dialog(const PreviousState_StateHolder* msg) {
  return *msg->previous_dialog_;
}
void PreviousState_StateHolder::clear_packets() {
  packets_.Clear();
}
PreviousState_StateHolder::PreviousState_StateHolder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packets_(arena),
  relations_to_actors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.PreviousState.StateHolder)
}
PreviousState_StateHolder::PreviousState_StateHolder(const PreviousState_StateHolder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packets_(from.packets_),
      relations_to_actors_(from.relations_to_actors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brain_name().empty()) {
    brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brain_name(), 
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  if (from._internal_has_previous_dialog()) {
    previous_dialog_ = new ::ai::inworld::engine::PreviousDialog(*from.previous_dialog_);
  } else {
    previous_dialog_ = nullptr;
  }
  state_format_ = from.state_format_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.PreviousState.StateHolder)
}

void PreviousState_StateHolder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&previous_dialog_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_format_) -
      reinterpret_cast<char*>(&previous_dialog_)) + sizeof(state_format_));
}

PreviousState_StateHolder::~PreviousState_StateHolder() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.PreviousState.StateHolder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviousState_StateHolder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brain_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previous_dialog_;
}

void PreviousState_StateHolder::ArenaDtor(void* object) {
  PreviousState_StateHolder* _this = reinterpret_cast< PreviousState_StateHolder* >(object);
  (void)_this;
}
void PreviousState_StateHolder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviousState_StateHolder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviousState_StateHolder& PreviousState_StateHolder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviousState_StateHolder_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void PreviousState_StateHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.PreviousState.StateHolder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packets_.Clear();
  relations_to_actors_.Clear();
  brain_name_.ClearToEmpty();
  state_.ClearToEmpty();
  if (GetArena() == nullptr && previous_dialog_ != nullptr) {
    delete previous_dialog_;
  }
  previous_dialog_ = nullptr;
  state_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviousState_StateHolder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string brain_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brain_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.PreviousState.StateHolder.brain_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.InworldPacket packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations_to_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.PreviousState.StateHolder.StateFormat state_format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state_format(static_cast<::ai::inworld::engine::PreviousState_StateHolder_StateFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviousState_StateHolder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.PreviousState.StateHolder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string brain_name = 1;
  if (this->brain_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brain_name().data(), static_cast<int>(this->_internal_brain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.PreviousState.StateHolder.brain_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brain_name(), target);
  }

  // bytes state = 2;
  if (this->state().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_state(), target);
  }

  // .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
  if (this->has_previous_dialog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::previous_dialog(this), target, stream);
  }

  // repeated .ai.inworld.packets.InworldPacket packets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_packets(i), target, stream);
  }

  // repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relations_to_actors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_relations_to_actors(i), target, stream);
  }

  // .ai.inworld.engine.PreviousState.StateHolder.StateFormat state_format = 6;
  if (this->state_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.PreviousState.StateHolder)
  return target;
}

size_t PreviousState_StateHolder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.PreviousState.StateHolder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.InworldPacket packets = 4;
  total_size += 1UL * this->_internal_packets_size();
  for (const auto& msg : this->packets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
  total_size += 1UL * this->_internal_relations_to_actors_size();
  for (const auto& msg : this->relations_to_actors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string brain_name = 1;
  if (this->brain_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brain_name());
  }

  // bytes state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state());
  }

  // .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
  if (this->has_previous_dialog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_dialog_);
  }

  // .ai.inworld.engine.PreviousState.StateHolder.StateFormat state_format = 6;
  if (this->state_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviousState_StateHolder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.PreviousState.StateHolder)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviousState_StateHolder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviousState_StateHolder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.PreviousState.StateHolder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.PreviousState.StateHolder)
    MergeFrom(*source);
  }
}

void PreviousState_StateHolder::MergeFrom(const PreviousState_StateHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.PreviousState.StateHolder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packets_.MergeFrom(from.packets_);
  relations_to_actors_.MergeFrom(from.relations_to_actors_);
  if (from.brain_name().size() > 0) {
    _internal_set_brain_name(from._internal_brain_name());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.has_previous_dialog()) {
    _internal_mutable_previous_dialog()->::ai::inworld::engine::PreviousDialog::MergeFrom(from._internal_previous_dialog());
  }
  if (from.state_format() != 0) {
    _internal_set_state_format(from._internal_state_format());
  }
}

void PreviousState_StateHolder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.PreviousState.StateHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviousState_StateHolder::CopyFrom(const PreviousState_StateHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.PreviousState.StateHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviousState_StateHolder::IsInitialized() const {
  return true;
}

void PreviousState_StateHolder::InternalSwap(PreviousState_StateHolder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packets_.InternalSwap(&other->packets_);
  relations_to_actors_.InternalSwap(&other->relations_to_actors_);
  brain_name_.Swap(&other->brain_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreviousState_StateHolder, state_format_)
      + sizeof(PreviousState_StateHolder::state_format_)
      - PROTOBUF_FIELD_OFFSET(PreviousState_StateHolder, previous_dialog_)>(
          reinterpret_cast<char*>(&previous_dialog_),
          reinterpret_cast<char*>(&other->previous_dialog_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviousState_StateHolder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PreviousState::_Internal {
 public:
  static const ::ai::inworld::engine::ConversationState& conversation_state(const PreviousState* msg);
};

const ::ai::inworld::engine::ConversationState&
PreviousState::_Internal::conversation_state(const PreviousState* msg) {
  return *msg->conversation_state_;
}
PreviousState::PreviousState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  state_holders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.PreviousState)
}
PreviousState::PreviousState(const PreviousState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_holders_(from.state_holders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_session_id().empty()) {
    game_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_session_id(), 
      GetArena());
  }
  if (from._internal_has_conversation_state()) {
    conversation_state_ = new ::ai::inworld::engine::ConversationState(*from.conversation_state_);
  } else {
    conversation_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.PreviousState)
}

void PreviousState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  game_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversation_state_ = nullptr;
}

PreviousState::~PreviousState() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.PreviousState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviousState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conversation_state_;
}

void PreviousState::ArenaDtor(void* object) {
  PreviousState* _this = reinterpret_cast< PreviousState* >(object);
  (void)_this;
}
void PreviousState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviousState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviousState& PreviousState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviousState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void PreviousState::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.PreviousState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_holders_.Clear();
  game_session_id_.ClearToEmpty();
  if (GetArena() == nullptr && conversation_state_ != nullptr) {
    delete conversation_state_;
  }
  conversation_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviousState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state_holders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string game_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.PreviousState.game_session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.ConversationState conversation_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviousState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.PreviousState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_holders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state_holders(i), target, stream);
  }

  // string game_session_id = 2;
  if (this->game_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_session_id().data(), static_cast<int>(this->_internal_game_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.PreviousState.game_session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_session_id(), target);
  }

  // .ai.inworld.engine.ConversationState conversation_state = 3;
  if (this->has_conversation_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::conversation_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.PreviousState)
  return target;
}

size_t PreviousState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.PreviousState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
  total_size += 1UL * this->_internal_state_holders_size();
  for (const auto& msg : this->state_holders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string game_session_id = 2;
  if (this->game_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_session_id());
  }

  // .ai.inworld.engine.ConversationState conversation_state = 3;
  if (this->has_conversation_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conversation_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviousState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.PreviousState)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviousState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviousState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.PreviousState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.PreviousState)
    MergeFrom(*source);
  }
}

void PreviousState::MergeFrom(const PreviousState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.PreviousState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_holders_.MergeFrom(from.state_holders_);
  if (from.game_session_id().size() > 0) {
    _internal_set_game_session_id(from._internal_game_session_id());
  }
  if (from.has_conversation_state()) {
    _internal_mutable_conversation_state()->::ai::inworld::engine::ConversationState::MergeFrom(from._internal_conversation_state());
  }
}

void PreviousState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.PreviousState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviousState::CopyFrom(const PreviousState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.PreviousState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviousState::IsInitialized() const {
  return true;
}

void PreviousState::InternalSwap(PreviousState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_holders_.InternalSwap(&other->state_holders_);
  game_session_id_.Swap(&other->game_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(conversation_state_, other->conversation_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviousState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneResponse_Agent_CharacterAssets::_Internal {
 public:
};

LoadSceneResponse_Agent_CharacterAssets::LoadSceneResponse_Agent_CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
}
LoadSceneResponse_Agent_CharacterAssets::LoadSceneResponse_Agent_CharacterAssets(const LoadSceneResponse_Agent_CharacterAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpm_model_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpm_model_uri().empty()) {
    rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpm_model_uri(), 
      GetArena());
  }
  rpm_image_uri_portrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpm_image_uri_portrait().empty()) {
    rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpm_image_uri_portrait(), 
      GetArena());
  }
  rpm_image_uri_posture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpm_image_uri_posture().empty()) {
    rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpm_image_uri_posture(), 
      GetArena());
  }
  avatar_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_img().empty()) {
    avatar_img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_img(), 
      GetArena());
  }
  avatar_img_original_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_img_original().empty()) {
    avatar_img_original_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_img_original(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
}

void LoadSceneResponse_Agent_CharacterAssets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  rpm_model_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_portrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_posture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_original_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadSceneResponse_Agent_CharacterAssets::~LoadSceneResponse_Agent_CharacterAssets() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneResponse_Agent_CharacterAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rpm_model_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_portrait_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpm_image_uri_posture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_img_original_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadSceneResponse_Agent_CharacterAssets::ArenaDtor(void* object) {
  LoadSceneResponse_Agent_CharacterAssets* _this = reinterpret_cast< LoadSceneResponse_Agent_CharacterAssets* >(object);
  (void)_this;
}
void LoadSceneResponse_Agent_CharacterAssets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneResponse_Agent_CharacterAssets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent_CharacterAssets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneResponse_Agent_CharacterAssets_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneResponse_Agent_CharacterAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpm_model_uri_.ClearToEmpty();
  rpm_image_uri_portrait_.ClearToEmpty();
  rpm_image_uri_posture_.ClearToEmpty();
  avatar_img_.ClearToEmpty();
  avatar_img_original_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneResponse_Agent_CharacterAssets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rpm_model_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpm_model_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rpm_image_uri_portrait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rpm_image_uri_portrait();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rpm_image_uri_posture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rpm_image_uri_posture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_img = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_img();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_img_original = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_avatar_img_original();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneResponse_Agent_CharacterAssets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rpm_model_uri = 1;
  if (this->rpm_model_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpm_model_uri().data(), static_cast<int>(this->_internal_rpm_model_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rpm_model_uri(), target);
  }

  // string rpm_image_uri_portrait = 2;
  if (this->rpm_image_uri_portrait().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpm_image_uri_portrait().data(), static_cast<int>(this->_internal_rpm_image_uri_portrait().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rpm_image_uri_portrait(), target);
  }

  // string rpm_image_uri_posture = 3;
  if (this->rpm_image_uri_posture().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpm_image_uri_posture().data(), static_cast<int>(this->_internal_rpm_image_uri_posture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rpm_image_uri_posture(), target);
  }

  // string avatar_img = 4;
  if (this->avatar_img().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_img().data(), static_cast<int>(this->_internal_avatar_img().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_img(), target);
  }

  // string avatar_img_original = 5;
  if (this->avatar_img_original().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_img_original().data(), static_cast<int>(this->_internal_avatar_img_original().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_avatar_img_original(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  return target;
}

size_t LoadSceneResponse_Agent_CharacterAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rpm_model_uri = 1;
  if (this->rpm_model_uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpm_model_uri());
  }

  // string rpm_image_uri_portrait = 2;
  if (this->rpm_image_uri_portrait().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpm_image_uri_portrait());
  }

  // string rpm_image_uri_posture = 3;
  if (this->rpm_image_uri_posture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpm_image_uri_posture());
  }

  // string avatar_img = 4;
  if (this->avatar_img().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_img());
  }

  // string avatar_img_original = 5;
  if (this->avatar_img_original().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_img_original());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneResponse_Agent_CharacterAssets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneResponse_Agent_CharacterAssets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneResponse_Agent_CharacterAssets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
    MergeFrom(*source);
  }
}

void LoadSceneResponse_Agent_CharacterAssets::MergeFrom(const LoadSceneResponse_Agent_CharacterAssets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rpm_model_uri().size() > 0) {
    _internal_set_rpm_model_uri(from._internal_rpm_model_uri());
  }
  if (from.rpm_image_uri_portrait().size() > 0) {
    _internal_set_rpm_image_uri_portrait(from._internal_rpm_image_uri_portrait());
  }
  if (from.rpm_image_uri_posture().size() > 0) {
    _internal_set_rpm_image_uri_posture(from._internal_rpm_image_uri_posture());
  }
  if (from.avatar_img().size() > 0) {
    _internal_set_avatar_img(from._internal_avatar_img());
  }
  if (from.avatar_img_original().size() > 0) {
    _internal_set_avatar_img_original(from._internal_avatar_img_original());
  }
}

void LoadSceneResponse_Agent_CharacterAssets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneResponse_Agent_CharacterAssets::CopyFrom(const LoadSceneResponse_Agent_CharacterAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneResponse_Agent_CharacterAssets::IsInitialized() const {
  return true;
}

void LoadSceneResponse_Agent_CharacterAssets::InternalSwap(LoadSceneResponse_Agent_CharacterAssets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpm_model_uri_.Swap(&other->rpm_model_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rpm_image_uri_portrait_.Swap(&other->rpm_image_uri_portrait_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rpm_image_uri_posture_.Swap(&other->rpm_image_uri_posture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_img_.Swap(&other->avatar_img_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_img_original_.Swap(&other->avatar_img_original_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneResponse_Agent_CharacterAssets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneResponse_Agent::_Internal {
 public:
  static const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& character_assets(const LoadSceneResponse_Agent* msg);
};

const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets&
LoadSceneResponse_Agent::_Internal::character_assets(const LoadSceneResponse_Agent* msg) {
  return *msg->character_assets_;
}
LoadSceneResponse_Agent::LoadSceneResponse_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.LoadSceneResponse.Agent)
}
LoadSceneResponse_Agent::LoadSceneResponse_Agent(const LoadSceneResponse_Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent_id(), 
      GetArena());
  }
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brain_name().empty()) {
    brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brain_name(), 
      GetArena());
  }
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_given_name().empty()) {
    given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_given_name(), 
      GetArena());
  }
  if (from._internal_has_character_assets()) {
    character_assets_ = new ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets(*from.character_assets_);
  } else {
    character_assets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.LoadSceneResponse.Agent)
}

void LoadSceneResponse_Agent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_assets_ = nullptr;
}

LoadSceneResponse_Agent::~LoadSceneResponse_Agent() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.LoadSceneResponse.Agent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneResponse_Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_assets_;
}

void LoadSceneResponse_Agent::ArenaDtor(void* object) {
  LoadSceneResponse_Agent* _this = reinterpret_cast< LoadSceneResponse_Agent* >(object);
  (void)_this;
}
void LoadSceneResponse_Agent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneResponse_Agent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneResponse_Agent& LoadSceneResponse_Agent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneResponse_Agent_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneResponse_Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.LoadSceneResponse.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_id_.ClearToEmpty();
  brain_name_.ClearToEmpty();
  given_name_.ClearToEmpty();
  if (GetArena() == nullptr && character_assets_ != nullptr) {
    delete character_assets_;
  }
  character_assets_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneResponse_Agent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brain_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brain_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.brain_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string given_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_given_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.Agent.given_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_assets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneResponse_Agent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.LoadSceneResponse.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brain_name().data(), static_cast<int>(this->_internal_brain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.brain_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brain_name(), target);
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_given_name().data(), static_cast<int>(this->_internal_given_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.Agent.given_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_given_name(), target);
  }

  // .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
  if (this->has_character_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::character_assets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.LoadSceneResponse.Agent)
  return target;
}

size_t LoadSceneResponse_Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.LoadSceneResponse.Agent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brain_name());
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_given_name());
  }

  // .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
  if (this->has_character_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_assets_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneResponse_Agent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.LoadSceneResponse.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneResponse_Agent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneResponse_Agent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.LoadSceneResponse.Agent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.LoadSceneResponse.Agent)
    MergeFrom(*source);
  }
}

void LoadSceneResponse_Agent::MergeFrom(const LoadSceneResponse_Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.LoadSceneResponse.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.brain_name().size() > 0) {
    _internal_set_brain_name(from._internal_brain_name());
  }
  if (from.given_name().size() > 0) {
    _internal_set_given_name(from._internal_given_name());
  }
  if (from.has_character_assets()) {
    _internal_mutable_character_assets()->::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets::MergeFrom(from._internal_character_assets());
  }
}

void LoadSceneResponse_Agent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.LoadSceneResponse.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneResponse_Agent::CopyFrom(const LoadSceneResponse_Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.LoadSceneResponse.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneResponse_Agent::IsInitialized() const {
  return true;
}

void LoadSceneResponse_Agent::InternalSwap(LoadSceneResponse_Agent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  brain_name_.Swap(&other->brain_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  given_name_.Swap(&other->given_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(character_assets_, other->character_assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneResponse_Agent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneResponse::_Internal {
 public:
  static const ::ai::inworld::engine::PreviousState& previous_state(const LoadSceneResponse* msg);
};

const ::ai::inworld::engine::PreviousState&
LoadSceneResponse::_Internal::previous_state(const LoadSceneResponse* msg) {
  return *msg->previous_state_;
}
LoadSceneResponse::LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.LoadSceneResponse)
}
LoadSceneResponse::LoadSceneResponse(const LoadSceneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_previous_state()) {
    previous_state_ = new ::ai::inworld::engine::PreviousState(*from.previous_state_);
  } else {
    previous_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.LoadSceneResponse)
}

void LoadSceneResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_state_ = nullptr;
}

LoadSceneResponse::~LoadSceneResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.LoadSceneResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previous_state_;
}

void LoadSceneResponse::ArenaDtor(void* object) {
  LoadSceneResponse* _this = reinterpret_cast< LoadSceneResponse* >(object);
  (void)_this;
}
void LoadSceneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneResponse& LoadSceneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.LoadSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  key_.ClearToEmpty();
  if (GetArena() == nullptr && previous_state_ != nullptr) {
    delete previous_state_;
  }
  previous_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LoadSceneResponse.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.engine.PreviousState previous_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.LoadSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LoadSceneResponse.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .ai.inworld.engine.PreviousState previous_state = 3;
  if (this->has_previous_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::previous_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.LoadSceneResponse)
  return target;
}

size_t LoadSceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.LoadSceneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .ai.inworld.engine.PreviousState previous_state = 3;
  if (this->has_previous_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.LoadSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.LoadSceneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.LoadSceneResponse)
    MergeFrom(*source);
  }
}

void LoadSceneResponse::MergeFrom(const LoadSceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.LoadSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_previous_state()) {
    _internal_mutable_previous_state()->::ai::inworld::engine::PreviousState::MergeFrom(from._internal_previous_state());
  }
}

void LoadSceneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.LoadSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneResponse::CopyFrom(const LoadSceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.LoadSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneResponse::IsInitialized() const {
  return true;
}

void LoadSceneResponse::InternalSwap(LoadSceneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(previous_state_, other->previous_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogErrorRequest::_Internal {
 public:
};

LogErrorRequest::LogErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.LogErrorRequest)
}
LogErrorRequest::LogErrorRequest(const LogErrorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.LogErrorRequest)
}

void LogErrorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogErrorRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogErrorRequest::~LogErrorRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.LogErrorRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogErrorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogErrorRequest::ArenaDtor(void* object) {
  LogErrorRequest* _this = reinterpret_cast< LogErrorRequest* >(object);
  (void)_this;
}
void LogErrorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogErrorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogErrorRequest& LogErrorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogErrorRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void LogErrorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.LogErrorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogErrorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LogErrorRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.LogErrorRequest.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogErrorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.LogErrorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LogErrorRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.LogErrorRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.LogErrorRequest)
  return target;
}

size_t LogErrorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.LogErrorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogErrorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.LogErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogErrorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogErrorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.LogErrorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.LogErrorRequest)
    MergeFrom(*source);
  }
}

void LogErrorRequest::MergeFrom(const LogErrorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.LogErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void LogErrorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.LogErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogErrorRequest::CopyFrom(const LogErrorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.LogErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogErrorRequest::IsInitialized() const {
  return true;
}

void LogErrorRequest::InternalSwap(LogErrorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogErrorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoicePreviewRequest::_Internal {
 public:
  static const ::ai::inworld::packets::EmotionEvent& emotions(const VoicePreviewRequest* msg);
  static const ::ai::inworld::voices::Voice& voice(const VoicePreviewRequest* msg);
};

const ::ai::inworld::packets::EmotionEvent&
VoicePreviewRequest::_Internal::emotions(const VoicePreviewRequest* msg) {
  return *msg->emotions_;
}
const ::ai::inworld::voices::Voice&
VoicePreviewRequest::_Internal::voice(const VoicePreviewRequest* msg) {
  return *msg->voice_;
}
void VoicePreviewRequest::clear_emotions() {
  if (GetArena() == nullptr && emotions_ != nullptr) {
    delete emotions_;
  }
  emotions_ = nullptr;
}
void VoicePreviewRequest::clear_voice() {
  if (GetArena() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
}
VoicePreviewRequest::VoicePreviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.VoicePreviewRequest)
}
VoicePreviewRequest::VoicePreviewRequest(const VoicePreviewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_emotions()) {
    emotions_ = new ::ai::inworld::packets::EmotionEvent(*from.emotions_);
  } else {
    emotions_ = nullptr;
  }
  if (from._internal_has_voice()) {
    voice_ = new ::ai::inworld::voices::Voice(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.VoicePreviewRequest)
}

void VoicePreviewRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoicePreviewRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&emotions_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&voice_) -
      reinterpret_cast<char*>(&emotions_)) + sizeof(voice_));
}

VoicePreviewRequest::~VoicePreviewRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.VoicePreviewRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoicePreviewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete emotions_;
  if (this != internal_default_instance()) delete voice_;
}

void VoicePreviewRequest::ArenaDtor(void* object) {
  VoicePreviewRequest* _this = reinterpret_cast< VoicePreviewRequest* >(object);
  (void)_this;
}
void VoicePreviewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoicePreviewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoicePreviewRequest& VoicePreviewRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoicePreviewRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void VoicePreviewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.VoicePreviewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && emotions_ != nullptr) {
    delete emotions_;
  }
  emotions_ = nullptr;
  if (GetArena() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoicePreviewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.VoicePreviewRequest.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent emotions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Voice voice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoicePreviewRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.VoicePreviewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.VoicePreviewRequest.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ai.inworld.packets.EmotionEvent emotions = 2;
  if (this->has_emotions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::emotions(this), target, stream);
  }

  // .ai.inworld.voices.Voice voice = 3;
  if (this->has_voice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::voice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.VoicePreviewRequest)
  return target;
}

size_t VoicePreviewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.VoicePreviewRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.EmotionEvent emotions = 2;
  if (this->has_emotions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emotions_);
  }

  // .ai.inworld.voices.Voice voice = 3;
  if (this->has_voice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoicePreviewRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.VoicePreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoicePreviewRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoicePreviewRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.VoicePreviewRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.VoicePreviewRequest)
    MergeFrom(*source);
  }
}

void VoicePreviewRequest::MergeFrom(const VoicePreviewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.VoicePreviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_emotions()) {
    _internal_mutable_emotions()->::ai::inworld::packets::EmotionEvent::MergeFrom(from._internal_emotions());
  }
  if (from.has_voice()) {
    _internal_mutable_voice()->::ai::inworld::voices::Voice::MergeFrom(from._internal_voice());
  }
}

void VoicePreviewRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.VoicePreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoicePreviewRequest::CopyFrom(const VoicePreviewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.VoicePreviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoicePreviewRequest::IsInitialized() const {
  return true;
}

void VoicePreviewRequest::InternalSwap(VoicePreviewRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoicePreviewRequest, voice_)
      + sizeof(VoicePreviewRequest::voice_)
      - PROTOBUF_FIELD_OFFSET(VoicePreviewRequest, emotions_)>(
          reinterpret_cast<char*>(&emotions_),
          reinterpret_cast<char*>(&other->emotions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoicePreviewRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoicePreviewResponse::_Internal {
 public:
};

VoicePreviewResponse::VoicePreviewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.VoicePreviewResponse)
}
VoicePreviewResponse::VoicePreviewResponse(const VoicePreviewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio().empty()) {
    audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.VoicePreviewResponse)
}

void VoicePreviewResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoicePreviewResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VoicePreviewResponse::~VoicePreviewResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.VoicePreviewResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoicePreviewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoicePreviewResponse::ArenaDtor(void* object) {
  VoicePreviewResponse* _this = reinterpret_cast< VoicePreviewResponse* >(object);
  (void)_this;
}
void VoicePreviewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoicePreviewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoicePreviewResponse& VoicePreviewResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoicePreviewResponse_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void VoicePreviewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.VoicePreviewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoicePreviewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoicePreviewResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.VoicePreviewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.VoicePreviewResponse)
  return target;
}

size_t VoicePreviewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.VoicePreviewResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoicePreviewResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.VoicePreviewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoicePreviewResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoicePreviewResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.VoicePreviewResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.VoicePreviewResponse)
    MergeFrom(*source);
  }
}

void VoicePreviewResponse::MergeFrom(const VoicePreviewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.VoicePreviewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio().size() > 0) {
    _internal_set_audio(from._internal_audio());
  }
}

void VoicePreviewResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.VoicePreviewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoicePreviewResponse::CopyFrom(const VoicePreviewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.VoicePreviewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoicePreviewResponse::IsInitialized() const {
  return true;
}

void VoicePreviewResponse::InternalSwap(VoicePreviewResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  audio_.Swap(&other->audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VoicePreviewResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListBaseVoicesRequest::_Internal {
 public:
};

ListBaseVoicesRequest::ListBaseVoicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tts_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ListBaseVoicesRequest)
}
ListBaseVoicesRequest::ListBaseVoicesRequest(const ListBaseVoicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tts_types_(from.tts_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArena());
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ListBaseVoicesRequest)
}

void ListBaseVoicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListBaseVoicesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_ = 0;
}

ListBaseVoicesRequest::~ListBaseVoicesRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ListBaseVoicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBaseVoicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListBaseVoicesRequest::ArenaDtor(void* object) {
  ListBaseVoicesRequest* _this = reinterpret_cast< ListBaseVoicesRequest* >(object);
  (void)_this;
}
void ListBaseVoicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBaseVoicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBaseVoicesRequest& ListBaseVoicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBaseVoicesRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ListBaseVoicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ListBaseVoicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tts_types_.Clear();
  language_code_.ClearToEmpty();
  language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBaseVoicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language_code = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ListBaseVoicesRequest.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.voices.TTSType tts_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_tts_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_tts_types(static_cast<::ai::inworld::voices::TTSType>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.language_codes.LanguageCode language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::ai::inworld::language_codes::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBaseVoicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ListBaseVoicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1 [deprecated = true];
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ListBaseVoicesRequest.language_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_code(), target);
  }

  // repeated .ai.inworld.voices.TTSType tts_types = 2;
  {
    int byte_size = _tts_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, tts_types_, byte_size, target);
    }
  }

  // .ai.inworld.language_codes.LanguageCode language = 3;
  if (this->language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ListBaseVoicesRequest)
  return target;
}

size_t ListBaseVoicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ListBaseVoicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.voices.TTSType tts_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_tts_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_tts_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tts_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string language_code = 1 [deprecated = true];
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // .ai.inworld.language_codes.LanguageCode language = 3;
  if (this->language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBaseVoicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ListBaseVoicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBaseVoicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBaseVoicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ListBaseVoicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ListBaseVoicesRequest)
    MergeFrom(*source);
  }
}

void ListBaseVoicesRequest::MergeFrom(const ListBaseVoicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ListBaseVoicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tts_types_.MergeFrom(from.tts_types_);
  if (from.language_code().size() > 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.language() != 0) {
    _internal_set_language(from._internal_language());
  }
}

void ListBaseVoicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ListBaseVoicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBaseVoicesRequest::CopyFrom(const ListBaseVoicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ListBaseVoicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBaseVoicesRequest::IsInitialized() const {
  return true;
}

void ListBaseVoicesRequest::InternalSwap(ListBaseVoicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tts_types_.InternalSwap(&other->tts_types_);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBaseVoicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListBaseVoicesResponce::_Internal {
 public:
};

void ListBaseVoicesResponce::clear_google_voices() {
  google_voices_.Clear();
}
void ListBaseVoicesResponce::clear_inworld_voices() {
  inworld_voices_.Clear();
}
void ListBaseVoicesResponce::clear_eleven_labs_voices() {
  eleven_labs_voices_.Clear();
}
void ListBaseVoicesResponce::clear_inworld_v2_voices() {
  inworld_v2_voices_.Clear();
}
ListBaseVoicesResponce::ListBaseVoicesResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  google_voices_(arena),
  inworld_voices_(arena),
  eleven_labs_voices_(arena),
  inworld_v2_voices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ListBaseVoicesResponce)
}
ListBaseVoicesResponce::ListBaseVoicesResponce(const ListBaseVoicesResponce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      google_voices_(from.google_voices_),
      inworld_voices_(from.inworld_voices_),
      eleven_labs_voices_(from.eleven_labs_voices_),
      inworld_v2_voices_(from.inworld_v2_voices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ListBaseVoicesResponce)
}

void ListBaseVoicesResponce::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListBaseVoicesResponce_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
}

ListBaseVoicesResponce::~ListBaseVoicesResponce() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ListBaseVoicesResponce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListBaseVoicesResponce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListBaseVoicesResponce::ArenaDtor(void* object) {
  ListBaseVoicesResponce* _this = reinterpret_cast< ListBaseVoicesResponce* >(object);
  (void)_this;
}
void ListBaseVoicesResponce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBaseVoicesResponce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListBaseVoicesResponce& ListBaseVoicesResponce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListBaseVoicesResponce_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ListBaseVoicesResponce::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ListBaseVoicesResponce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  google_voices_.Clear();
  inworld_voices_.Clear();
  eleven_labs_voices_.Clear();
  inworld_v2_voices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBaseVoicesResponce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.voices.BaseVoice google_voices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_google_voices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.voices.BaseVoice inworld_voices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inworld_voices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.voices.BaseVoice eleven_labs_voices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eleven_labs_voices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.voices.BaseVoice inworld_v2_voices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inworld_v2_voices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListBaseVoicesResponce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ListBaseVoicesResponce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.voices.BaseVoice google_voices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_google_voices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_google_voices(i), target, stream);
  }

  // repeated .ai.inworld.voices.BaseVoice inworld_voices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inworld_voices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inworld_voices(i), target, stream);
  }

  // repeated .ai.inworld.voices.BaseVoice eleven_labs_voices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eleven_labs_voices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_eleven_labs_voices(i), target, stream);
  }

  // repeated .ai.inworld.voices.BaseVoice inworld_v2_voices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inworld_v2_voices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_inworld_v2_voices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ListBaseVoicesResponce)
  return target;
}

size_t ListBaseVoicesResponce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ListBaseVoicesResponce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.voices.BaseVoice google_voices = 1;
  total_size += 1UL * this->_internal_google_voices_size();
  for (const auto& msg : this->google_voices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ai.inworld.voices.BaseVoice inworld_voices = 2;
  total_size += 1UL * this->_internal_inworld_voices_size();
  for (const auto& msg : this->inworld_voices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ai.inworld.voices.BaseVoice eleven_labs_voices = 3;
  total_size += 1UL * this->_internal_eleven_labs_voices_size();
  for (const auto& msg : this->eleven_labs_voices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ai.inworld.voices.BaseVoice inworld_v2_voices = 4;
  total_size += 1UL * this->_internal_inworld_v2_voices_size();
  for (const auto& msg : this->inworld_v2_voices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListBaseVoicesResponce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ListBaseVoicesResponce)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBaseVoicesResponce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListBaseVoicesResponce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ListBaseVoicesResponce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ListBaseVoicesResponce)
    MergeFrom(*source);
  }
}

void ListBaseVoicesResponce::MergeFrom(const ListBaseVoicesResponce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ListBaseVoicesResponce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  google_voices_.MergeFrom(from.google_voices_);
  inworld_voices_.MergeFrom(from.inworld_voices_);
  eleven_labs_voices_.MergeFrom(from.eleven_labs_voices_);
  inworld_v2_voices_.MergeFrom(from.inworld_v2_voices_);
}

void ListBaseVoicesResponce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ListBaseVoicesResponce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBaseVoicesResponce::CopyFrom(const ListBaseVoicesResponce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ListBaseVoicesResponce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBaseVoicesResponce::IsInitialized() const {
  return true;
}

void ListBaseVoicesResponce::InternalSwap(ListBaseVoicesResponce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  google_voices_.InternalSwap(&other->google_voices_);
  inworld_voices_.InternalSwap(&other->inworld_voices_);
  eleven_labs_voices_.InternalSwap(&other->eleven_labs_voices_);
  inworld_v2_voices_.InternalSwap(&other->inworld_v2_voices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBaseVoicesResponce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccessToken::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time(const AccessToken* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
AccessToken::_Internal::expiration_time(const AccessToken* msg) {
  return *msg->expiration_time_;
}
void AccessToken::clear_expiration_time() {
  if (GetArena() == nullptr && expiration_time_ != nullptr) {
    delete expiration_time_;
  }
  expiration_time_ = nullptr;
}
AccessToken::AccessToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.AccessToken)
}
AccessToken::AccessToken(const AccessToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_expiration_time()) {
    expiration_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiration_time_);
  } else {
    expiration_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.AccessToken)
}

void AccessToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessToken_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiration_time_ = nullptr;
}

AccessToken::~AccessToken() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.AccessToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccessToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expiration_time_;
}

void AccessToken::ArenaDtor(void* object) {
  AccessToken* _this = reinterpret_cast< AccessToken* >(object);
  (void)_this;
}
void AccessToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessToken& AccessToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessToken_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void AccessToken::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.AccessToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  type_.ClearToEmpty();
  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && expiration_time_ != nullptr) {
    delete expiration_time_;
  }
  expiration_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.AccessToken.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.AccessToken.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.AccessToken.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.AccessToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.AccessToken.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.AccessToken.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp expiration_time = 3;
  if (this->has_expiration_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expiration_time(this), target, stream);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.AccessToken.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.AccessToken)
  return target;
}

size_t AccessToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.AccessToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .google.protobuf.Timestamp expiration_time = 3;
  if (this->has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.AccessToken)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.AccessToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.AccessToken)
    MergeFrom(*source);
  }
}

void AccessToken::MergeFrom(const AccessToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.AccessToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_expiration_time()) {
    _internal_mutable_expiration_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiration_time());
  }
}

void AccessToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.AccessToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessToken::CopyFrom(const AccessToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.AccessToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessToken::IsInitialized() const {
  return true;
}

void AccessToken::InternalSwap(AccessToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateTokenRequest::_Internal {
 public:
};

GenerateTokenRequest::GenerateTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.GenerateTokenRequest)
}
GenerateTokenRequest::GenerateTokenRequest(const GenerateTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resources_(from.resources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.GenerateTokenRequest)
}

void GenerateTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateTokenRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenerateTokenRequest::~GenerateTokenRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.GenerateTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateTokenRequest::ArenaDtor(void* object) {
  GenerateTokenRequest* _this = reinterpret_cast< GenerateTokenRequest* >(object);
  (void)_this;
}
void GenerateTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateTokenRequest& GenerateTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateTokenRequest_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void GenerateTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.GenerateTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.GenerateTokenRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resources();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.GenerateTokenRequest.resources"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.GenerateTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.GenerateTokenRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string resources = 2;
  for (int i = 0, n = this->_internal_resources_size(); i < n; i++) {
    const auto& s = this->_internal_resources(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.GenerateTokenRequest.resources");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.GenerateTokenRequest)
  return target;
}

size_t GenerateTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.GenerateTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resources = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resources_.size());
  for (int i = 0, n = resources_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resources_.Get(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.GenerateTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.GenerateTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.GenerateTokenRequest)
    MergeFrom(*source);
  }
}

void GenerateTokenRequest::MergeFrom(const GenerateTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.GenerateTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void GenerateTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.GenerateTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateTokenRequest::CopyFrom(const GenerateTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.GenerateTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateTokenRequest::IsInitialized() const {
  return true;
}

void GenerateTokenRequest::InternalSwap(GenerateTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resources_.InternalSwap(&other->resources_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActorRelations_Relation::_Internal {
 public:
};

ActorRelations_Relation::ActorRelations_Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ActorRelations.Relation)
}
ActorRelations_Relation::ActorRelations_Relation(const ActorRelations_Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ActorRelations.Relation)
}

void ActorRelations_Relation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActorRelations_Relation::~ActorRelations_Relation() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ActorRelations.Relation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorRelations_Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorRelations_Relation::ArenaDtor(void* object) {
  ActorRelations_Relation* _this = reinterpret_cast< ActorRelations_Relation* >(object);
  (void)_this;
}
void ActorRelations_Relation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorRelations_Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorRelations_Relation& ActorRelations_Relation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorRelations_Relation_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ActorRelations_Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ActorRelations.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  label_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorRelations_Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ActorRelations.Relation.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ActorRelations.Relation.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorRelations_Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ActorRelations.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ActorRelations.Relation.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ActorRelations.Relation.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ActorRelations.Relation)
  return target;
}

size_t ActorRelations_Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ActorRelations.Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorRelations_Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ActorRelations.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorRelations_Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorRelations_Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ActorRelations.Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ActorRelations.Relation)
    MergeFrom(*source);
  }
}

void ActorRelations_Relation::MergeFrom(const ActorRelations_Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ActorRelations.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
}

void ActorRelations_Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ActorRelations.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorRelations_Relation::CopyFrom(const ActorRelations_Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ActorRelations.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorRelations_Relation::IsInitialized() const {
  return true;
}

void ActorRelations_Relation::InternalSwap(ActorRelations_Relation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorRelations_Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActorRelations::_Internal {
 public:
};

ActorRelations::ActorRelations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ActorRelations)
}
ActorRelations::ActorRelations(const ActorRelations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      relations_(from.relations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_id().empty()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ActorRelations)
}

void ActorRelations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActorRelations::~ActorRelations() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ActorRelations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorRelations::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorRelations::ArenaDtor(void* object) {
  ActorRelations* _this = reinterpret_cast< ActorRelations* >(object);
  (void)_this;
}
void ActorRelations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorRelations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorRelations& ActorRelations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorRelations_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ActorRelations::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ActorRelations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relations_.Clear();
  actor_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorRelations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ActorRelations.actor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorRelations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ActorRelations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actor_id = 1;
  if (this->actor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor_id().data(), static_cast<int>(this->_internal_actor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ActorRelations.actor_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actor_id(), target);
  }

  // repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ActorRelations)
  return target;
}

size_t ActorRelations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ActorRelations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string actor_id = 1;
  if (this->actor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorRelations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ActorRelations)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorRelations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorRelations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ActorRelations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ActorRelations)
    MergeFrom(*source);
  }
}

void ActorRelations::MergeFrom(const ActorRelations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ActorRelations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relations_.MergeFrom(from.relations_);
  if (from.actor_id().size() > 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
}

void ActorRelations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ActorRelations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorRelations::CopyFrom(const ActorRelations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ActorRelations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorRelations::IsInitialized() const {
  return true;
}

void ActorRelations::InternalSwap(ActorRelations* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relations_.InternalSwap(&other->relations_);
  actor_id_.Swap(&other->actor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorRelations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConversationState_ConversationSettings::_Internal {
 public:
};

ConversationState_ConversationSettings::ConversationState_ConversationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  participants_(arena),
  spectators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ConversationState.ConversationSettings)
}
ConversationState_ConversationSettings::ConversationState_ConversationSettings(const ConversationState_ConversationSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      participants_(from.participants_),
      spectators_(from.spectators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conversation_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ConversationState.ConversationSettings)
}

void ConversationState_ConversationSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConversationState_ConversationSettings::~ConversationState_ConversationSettings() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ConversationState.ConversationSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConversationState_ConversationSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  conversation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConversationState_ConversationSettings::ArenaDtor(void* object) {
  ConversationState_ConversationSettings* _this = reinterpret_cast< ConversationState_ConversationSettings* >(object);
  (void)_this;
}
void ConversationState_ConversationSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConversationState_ConversationSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConversationState_ConversationSettings& ConversationState_ConversationSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConversationState_ConversationSettings_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ConversationState_ConversationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ConversationState.ConversationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  spectators_.Clear();
  conversation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationState_ConversationSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ConversationState.ConversationSettings.conversation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string participants = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_participants();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ConversationState.ConversationSettings.participants"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string spectators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spectators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.engine.ConversationState.ConversationSettings.spectators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConversationState_ConversationSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ConversationState.ConversationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (this->conversation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ConversationState.ConversationSettings.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // repeated string participants = 2;
  for (int i = 0, n = this->_internal_participants_size(); i < n; i++) {
    const auto& s = this->_internal_participants(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ConversationState.ConversationSettings.participants");
    target = stream->WriteString(2, s, target);
  }

  // repeated string spectators = 3;
  for (int i = 0, n = this->_internal_spectators_size(); i < n; i++) {
    const auto& s = this->_internal_spectators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.engine.ConversationState.ConversationSettings.spectators");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ConversationState.ConversationSettings)
  return target;
}

size_t ConversationState_ConversationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ConversationState.ConversationSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string participants = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(participants_.size());
  for (int i = 0, n = participants_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      participants_.Get(i));
  }

  // repeated string spectators = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(spectators_.size());
  for (int i = 0, n = spectators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      spectators_.Get(i));
  }

  // string conversation_id = 1;
  if (this->conversation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConversationState_ConversationSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ConversationState.ConversationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationState_ConversationSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConversationState_ConversationSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ConversationState.ConversationSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ConversationState.ConversationSettings)
    MergeFrom(*source);
  }
}

void ConversationState_ConversationSettings::MergeFrom(const ConversationState_ConversationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ConversationState.ConversationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
  spectators_.MergeFrom(from.spectators_);
  if (from.conversation_id().size() > 0) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
}

void ConversationState_ConversationSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ConversationState.ConversationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationState_ConversationSettings::CopyFrom(const ConversationState_ConversationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ConversationState.ConversationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationState_ConversationSettings::IsInitialized() const {
  return true;
}

void ConversationState_ConversationSettings::InternalSwap(ConversationState_ConversationSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  participants_.InternalSwap(&other->participants_);
  spectators_.InternalSwap(&other->spectators_);
  conversation_id_.Swap(&other->conversation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationState_ConversationSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConversationState::_Internal {
 public:
};

ConversationState::ConversationState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conversationsettings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.engine.ConversationState)
}
ConversationState::ConversationState(const ConversationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conversationsettings_(from.conversationsettings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.engine.ConversationState)
}

void ConversationState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
}

ConversationState::~ConversationState() {
  // @@protoc_insertion_point(destructor:ai.inworld.engine.ConversationState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConversationState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConversationState::ArenaDtor(void* object) {
  ConversationState* _this = reinterpret_cast< ConversationState* >(object);
  (void)_this;
}
void ConversationState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConversationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConversationState& ConversationState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConversationState_ai_2finworld_2fengine_2fworld_2dengine_2eproto.base);
  return *internal_default_instance();
}


void ConversationState::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.engine.ConversationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversationsettings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.engine.ConversationState.ConversationSettings conversationSettings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversationsettings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConversationState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.engine.ConversationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.ConversationState.ConversationSettings conversationSettings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conversationsettings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_conversationsettings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.engine.ConversationState)
  return target;
}

size_t ConversationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.engine.ConversationState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.engine.ConversationState.ConversationSettings conversationSettings = 1;
  total_size += 1UL * this->_internal_conversationsettings_size();
  for (const auto& msg : this->conversationsettings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConversationState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.engine.ConversationState)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConversationState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.engine.ConversationState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.engine.ConversationState)
    MergeFrom(*source);
  }
}

void ConversationState::MergeFrom(const ConversationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.engine.ConversationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conversationsettings_.MergeFrom(from.conversationsettings_);
}

void ConversationState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.engine.ConversationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationState::CopyFrom(const ConversationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.engine.ConversationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationState::IsInitialized() const {
  return true;
}

void ConversationState::InternalSwap(ConversationState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conversationsettings_.InternalSwap(&other->conversationsettings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace engine
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::CapabilitiesRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::CapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::CapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::UserRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ClientRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::ClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::LoadSceneRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::LoadSceneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::LoadSceneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::AudioSettings* Arena::CreateMaybeMessage< ::ai::inworld::engine::AudioSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::AudioSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* Arena::CreateMaybeMessage< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::UserSettings_PlayerProfile* Arena::CreateMaybeMessage< ::ai::inworld::engine::UserSettings_PlayerProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::UserSettings_PlayerProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::UserSettings* Arena::CreateMaybeMessage< ::ai::inworld::engine::UserSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::UserSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::SessionContinuation_ContinuationInfo* Arena::CreateMaybeMessage< ::ai::inworld::engine::SessionContinuation_ContinuationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::SessionContinuation_ContinuationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::SessionContinuation* Arena::CreateMaybeMessage< ::ai::inworld::engine::SessionContinuation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::SessionContinuation >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::PreviousDialog_Phrase* Arena::CreateMaybeMessage< ::ai::inworld::engine::PreviousDialog_Phrase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::PreviousDialog_Phrase >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::PreviousDialog* Arena::CreateMaybeMessage< ::ai::inworld::engine::PreviousDialog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::PreviousDialog >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::PreviousState_StateHolder* Arena::CreateMaybeMessage< ::ai::inworld::engine::PreviousState_StateHolder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::PreviousState_StateHolder >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::PreviousState* Arena::CreateMaybeMessage< ::ai::inworld::engine::PreviousState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::PreviousState >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* Arena::CreateMaybeMessage< ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::LoadSceneResponse_Agent* Arena::CreateMaybeMessage< ::ai::inworld::engine::LoadSceneResponse_Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::LoadSceneResponse_Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::LoadSceneResponse* Arena::CreateMaybeMessage< ::ai::inworld::engine::LoadSceneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::LoadSceneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::LogErrorRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::LogErrorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::LogErrorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::VoicePreviewRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::VoicePreviewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::VoicePreviewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::VoicePreviewResponse* Arena::CreateMaybeMessage< ::ai::inworld::engine::VoicePreviewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::VoicePreviewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ListBaseVoicesRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::ListBaseVoicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ListBaseVoicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ListBaseVoicesResponce* Arena::CreateMaybeMessage< ::ai::inworld::engine::ListBaseVoicesResponce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ListBaseVoicesResponce >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::AccessToken* Arena::CreateMaybeMessage< ::ai::inworld::engine::AccessToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::AccessToken >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::GenerateTokenRequest* Arena::CreateMaybeMessage< ::ai::inworld::engine::GenerateTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::GenerateTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ActorRelations_Relation* Arena::CreateMaybeMessage< ::ai::inworld::engine::ActorRelations_Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ActorRelations_Relation >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ActorRelations* Arena::CreateMaybeMessage< ::ai::inworld::engine::ActorRelations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ActorRelations >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ConversationState_ConversationSettings* Arena::CreateMaybeMessage< ::ai::inworld::engine::ConversationState_ConversationSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ConversationState_ConversationSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::engine::ConversationState* Arena::CreateMaybeMessage< ::ai::inworld::engine::ConversationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::engine::ConversationState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
