// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/engine/v1/feedback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto;
namespace ai {
namespace inworld {
namespace engine {
namespace v1 {
class CreateInteractionFeedbackRequest;
class CreateInteractionFeedbackRequestDefaultTypeInternal;
extern CreateInteractionFeedbackRequestDefaultTypeInternal _CreateInteractionFeedbackRequest_default_instance_;
class DeleteInteractionFeedbackRequest;
class DeleteInteractionFeedbackRequestDefaultTypeInternal;
extern DeleteInteractionFeedbackRequestDefaultTypeInternal _DeleteInteractionFeedbackRequest_default_instance_;
class InteractionFeedback;
class InteractionFeedbackDefaultTypeInternal;
extern InteractionFeedbackDefaultTypeInternal _InteractionFeedback_default_instance_;
}  // namespace v1
}  // namespace engine
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::engine::v1::CreateInteractionFeedbackRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::v1::CreateInteractionFeedbackRequest>(Arena*);
template<> ::ai::inworld::engine::v1::DeleteInteractionFeedbackRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::v1::DeleteInteractionFeedbackRequest>(Arena*);
template<> ::ai::inworld::engine::v1::InteractionFeedback* Arena::CreateMaybeMessage<::ai::inworld::engine::v1::InteractionFeedback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace engine {
namespace v1 {

enum InteractionDislikeType : int {
  INTERACTION_DISLIKE_TYPE_UNSPECIFIED = 0,
  INTERACTION_DISLIKE_TYPE_IRRELEVANT = 1,
  INTERACTION_DISLIKE_TYPE_UNSAFE = 2,
  INTERACTION_DISLIKE_TYPE_UNTRUE = 3,
  INTERACTION_DISLIKE_TYPE_INCORRECT_USE_KNOWLEDGE = 4,
  INTERACTION_DISLIKE_TYPE_UNEXPECTED_ACTION = 5,
  INTERACTION_DISLIKE_TYPE_UNEXPECTED_GOAL_BEHAVIOR = 6,
  INTERACTION_DISLIKE_TYPE_REPETITION = 7,
  INTERACTION_DISLIKE_TYPE_OUT_OF_CHARACTER = 8,
  INTERACTION_DISLIKE_TYPE_TOO_LONG = 9,
  InteractionDislikeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InteractionDislikeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InteractionDislikeType_IsValid(int value);
constexpr InteractionDislikeType InteractionDislikeType_MIN = INTERACTION_DISLIKE_TYPE_UNSPECIFIED;
constexpr InteractionDislikeType InteractionDislikeType_MAX = INTERACTION_DISLIKE_TYPE_TOO_LONG;
constexpr int InteractionDislikeType_ARRAYSIZE = InteractionDislikeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InteractionDislikeType_descriptor();
template<typename T>
inline const std::string& InteractionDislikeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InteractionDislikeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InteractionDislikeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InteractionDislikeType_descriptor(), enum_t_value);
}
inline bool InteractionDislikeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InteractionDislikeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InteractionDislikeType>(
    InteractionDislikeType_descriptor(), name, value);
}
// ===================================================================

class InteractionFeedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.v1.InteractionFeedback) */ {
 public:
  inline InteractionFeedback() : InteractionFeedback(nullptr) {}
  virtual ~InteractionFeedback();

  InteractionFeedback(const InteractionFeedback& from);
  InteractionFeedback(InteractionFeedback&& from) noexcept
    : InteractionFeedback() {
    *this = ::std::move(from);
  }

  inline InteractionFeedback& operator=(const InteractionFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionFeedback& operator=(InteractionFeedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractionFeedback& default_instance();

  static inline const InteractionFeedback* internal_default_instance() {
    return reinterpret_cast<const InteractionFeedback*>(
               &_InteractionFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InteractionFeedback& a, InteractionFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionFeedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractionFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractionFeedback* New() const final {
    return CreateMaybeMessage<InteractionFeedback>(nullptr);
  }

  InteractionFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractionFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractionFeedback& from);
  void MergeFrom(const InteractionFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractionFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.v1.InteractionFeedback";
  }
  protected:
  explicit InteractionFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto);
    return ::descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kCommentFieldNumber = 3,
    kNameFieldNumber = 5,
    kIsLikeFieldNumber = 1,
  };
  // repeated .ai.inworld.engine.v1.InteractionDislikeType type = 2;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::ai::inworld::engine::v1::InteractionDislikeType _internal_type(int index) const;
  void _internal_add_type(::ai::inworld::engine::v1::InteractionDislikeType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::ai::inworld::engine::v1::InteractionDislikeType type(int index) const;
  void set_type(int index, ::ai::inworld::engine::v1::InteractionDislikeType value);
  void add_type(::ai::inworld::engine::v1::InteractionDislikeType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // string comment = 3;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_like = 1;
  void clear_is_like();
  bool is_like() const;
  void set_is_like(bool value);
  private:
  bool _internal_is_like() const;
  void _internal_set_is_like(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.v1.InteractionFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_like_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto;
};
// -------------------------------------------------------------------

class CreateInteractionFeedbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.v1.CreateInteractionFeedbackRequest) */ {
 public:
  inline CreateInteractionFeedbackRequest() : CreateInteractionFeedbackRequest(nullptr) {}
  virtual ~CreateInteractionFeedbackRequest();

  CreateInteractionFeedbackRequest(const CreateInteractionFeedbackRequest& from);
  CreateInteractionFeedbackRequest(CreateInteractionFeedbackRequest&& from) noexcept
    : CreateInteractionFeedbackRequest() {
    *this = ::std::move(from);
  }

  inline CreateInteractionFeedbackRequest& operator=(const CreateInteractionFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInteractionFeedbackRequest& operator=(CreateInteractionFeedbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateInteractionFeedbackRequest& default_instance();

  static inline const CreateInteractionFeedbackRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInteractionFeedbackRequest*>(
               &_CreateInteractionFeedbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateInteractionFeedbackRequest& a, CreateInteractionFeedbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInteractionFeedbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInteractionFeedbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInteractionFeedbackRequest* New() const final {
    return CreateMaybeMessage<CreateInteractionFeedbackRequest>(nullptr);
  }

  CreateInteractionFeedbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInteractionFeedbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateInteractionFeedbackRequest& from);
  void MergeFrom(const CreateInteractionFeedbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInteractionFeedbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.v1.CreateInteractionFeedbackRequest";
  }
  protected:
  explicit CreateInteractionFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto);
    return ::descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kInteractionFeedbackFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .ai.inworld.engine.v1.InteractionFeedback interaction_feedback = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_interaction_feedback() const;
  private:
  bool _internal_has_interaction_feedback() const;
  public:
  void clear_interaction_feedback();
  const ::ai::inworld::engine::v1::InteractionFeedback& interaction_feedback() const;
  ::ai::inworld::engine::v1::InteractionFeedback* release_interaction_feedback();
  ::ai::inworld::engine::v1::InteractionFeedback* mutable_interaction_feedback();
  void set_allocated_interaction_feedback(::ai::inworld::engine::v1::InteractionFeedback* interaction_feedback);
  private:
  const ::ai::inworld::engine::v1::InteractionFeedback& _internal_interaction_feedback() const;
  ::ai::inworld::engine::v1::InteractionFeedback* _internal_mutable_interaction_feedback();
  public:
  void unsafe_arena_set_allocated_interaction_feedback(
      ::ai::inworld::engine::v1::InteractionFeedback* interaction_feedback);
  ::ai::inworld::engine::v1::InteractionFeedback* unsafe_arena_release_interaction_feedback();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.v1.CreateInteractionFeedbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::ai::inworld::engine::v1::InteractionFeedback* interaction_feedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto;
};
// -------------------------------------------------------------------

class DeleteInteractionFeedbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest) */ {
 public:
  inline DeleteInteractionFeedbackRequest() : DeleteInteractionFeedbackRequest(nullptr) {}
  virtual ~DeleteInteractionFeedbackRequest();

  DeleteInteractionFeedbackRequest(const DeleteInteractionFeedbackRequest& from);
  DeleteInteractionFeedbackRequest(DeleteInteractionFeedbackRequest&& from) noexcept
    : DeleteInteractionFeedbackRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInteractionFeedbackRequest& operator=(const DeleteInteractionFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInteractionFeedbackRequest& operator=(DeleteInteractionFeedbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteInteractionFeedbackRequest& default_instance();

  static inline const DeleteInteractionFeedbackRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInteractionFeedbackRequest*>(
               &_DeleteInteractionFeedbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteInteractionFeedbackRequest& a, DeleteInteractionFeedbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInteractionFeedbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInteractionFeedbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInteractionFeedbackRequest* New() const final {
    return CreateMaybeMessage<DeleteInteractionFeedbackRequest>(nullptr);
  }

  DeleteInteractionFeedbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInteractionFeedbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteInteractionFeedbackRequest& from);
  void MergeFrom(const DeleteInteractionFeedbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInteractionFeedbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.v1.DeleteInteractionFeedbackRequest";
  }
  protected:
  explicit DeleteInteractionFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto);
    return ::descriptor_table_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InteractionFeedback

// bool is_like = 1;
inline void InteractionFeedback::clear_is_like() {
  is_like_ = false;
}
inline bool InteractionFeedback::_internal_is_like() const {
  return is_like_;
}
inline bool InteractionFeedback::is_like() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.InteractionFeedback.is_like)
  return _internal_is_like();
}
inline void InteractionFeedback::_internal_set_is_like(bool value) {
  
  is_like_ = value;
}
inline void InteractionFeedback::set_is_like(bool value) {
  _internal_set_is_like(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.v1.InteractionFeedback.is_like)
}

// repeated .ai.inworld.engine.v1.InteractionDislikeType type = 2;
inline int InteractionFeedback::_internal_type_size() const {
  return type_.size();
}
inline int InteractionFeedback::type_size() const {
  return _internal_type_size();
}
inline void InteractionFeedback::clear_type() {
  type_.Clear();
}
inline ::ai::inworld::engine::v1::InteractionDislikeType InteractionFeedback::_internal_type(int index) const {
  return static_cast< ::ai::inworld::engine::v1::InteractionDislikeType >(type_.Get(index));
}
inline ::ai::inworld::engine::v1::InteractionDislikeType InteractionFeedback::type(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.InteractionFeedback.type)
  return _internal_type(index);
}
inline void InteractionFeedback::set_type(int index, ::ai::inworld::engine::v1::InteractionDislikeType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.v1.InteractionFeedback.type)
}
inline void InteractionFeedback::_internal_add_type(::ai::inworld::engine::v1::InteractionDislikeType value) {
  type_.Add(value);
}
inline void InteractionFeedback::add_type(::ai::inworld::engine::v1::InteractionDislikeType value) {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.v1.InteractionFeedback.type)
  _internal_add_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InteractionFeedback::type() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.v1.InteractionFeedback.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InteractionFeedback::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InteractionFeedback::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.v1.InteractionFeedback.type)
  return _internal_mutable_type();
}

// string comment = 3;
inline void InteractionFeedback::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& InteractionFeedback::comment() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.InteractionFeedback.comment)
  return _internal_comment();
}
inline void InteractionFeedback::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.v1.InteractionFeedback.comment)
}
inline std::string* InteractionFeedback::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.v1.InteractionFeedback.comment)
  return _internal_mutable_comment();
}
inline const std::string& InteractionFeedback::_internal_comment() const {
  return comment_.Get();
}
inline void InteractionFeedback::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractionFeedback::set_comment(std::string&& value) {
  
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.v1.InteractionFeedback.comment)
}
inline void InteractionFeedback::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.v1.InteractionFeedback.comment)
}
inline void InteractionFeedback::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.v1.InteractionFeedback.comment)
}
inline std::string* InteractionFeedback::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractionFeedback::release_comment() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.v1.InteractionFeedback.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractionFeedback::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.v1.InteractionFeedback.comment)
}

// string name = 5;
inline void InteractionFeedback::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InteractionFeedback::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.InteractionFeedback.name)
  return _internal_name();
}
inline void InteractionFeedback::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.v1.InteractionFeedback.name)
}
inline std::string* InteractionFeedback::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.v1.InteractionFeedback.name)
  return _internal_mutable_name();
}
inline const std::string& InteractionFeedback::_internal_name() const {
  return name_.Get();
}
inline void InteractionFeedback::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractionFeedback::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.v1.InteractionFeedback.name)
}
inline void InteractionFeedback::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.v1.InteractionFeedback.name)
}
inline void InteractionFeedback::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.v1.InteractionFeedback.name)
}
inline std::string* InteractionFeedback::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractionFeedback::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.v1.InteractionFeedback.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractionFeedback::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.v1.InteractionFeedback.name)
}

// -------------------------------------------------------------------

// CreateInteractionFeedbackRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateInteractionFeedbackRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateInteractionFeedbackRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
  return _internal_parent();
}
inline void CreateInteractionFeedbackRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
}
inline std::string* CreateInteractionFeedbackRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateInteractionFeedbackRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateInteractionFeedbackRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateInteractionFeedbackRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
}
inline void CreateInteractionFeedbackRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
}
inline void CreateInteractionFeedbackRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
}
inline std::string* CreateInteractionFeedbackRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateInteractionFeedbackRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInteractionFeedbackRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.parent)
}

// .ai.inworld.engine.v1.InteractionFeedback interaction_feedback = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateInteractionFeedbackRequest::_internal_has_interaction_feedback() const {
  return this != internal_default_instance() && interaction_feedback_ != nullptr;
}
inline bool CreateInteractionFeedbackRequest::has_interaction_feedback() const {
  return _internal_has_interaction_feedback();
}
inline void CreateInteractionFeedbackRequest::clear_interaction_feedback() {
  if (GetArena() == nullptr && interaction_feedback_ != nullptr) {
    delete interaction_feedback_;
  }
  interaction_feedback_ = nullptr;
}
inline const ::ai::inworld::engine::v1::InteractionFeedback& CreateInteractionFeedbackRequest::_internal_interaction_feedback() const {
  const ::ai::inworld::engine::v1::InteractionFeedback* p = interaction_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::v1::InteractionFeedback&>(
      ::ai::inworld::engine::v1::_InteractionFeedback_default_instance_);
}
inline const ::ai::inworld::engine::v1::InteractionFeedback& CreateInteractionFeedbackRequest::interaction_feedback() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.interaction_feedback)
  return _internal_interaction_feedback();
}
inline void CreateInteractionFeedbackRequest::unsafe_arena_set_allocated_interaction_feedback(
    ::ai::inworld::engine::v1::InteractionFeedback* interaction_feedback) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interaction_feedback_);
  }
  interaction_feedback_ = interaction_feedback;
  if (interaction_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.interaction_feedback)
}
inline ::ai::inworld::engine::v1::InteractionFeedback* CreateInteractionFeedbackRequest::release_interaction_feedback() {
  
  ::ai::inworld::engine::v1::InteractionFeedback* temp = interaction_feedback_;
  interaction_feedback_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::v1::InteractionFeedback* CreateInteractionFeedbackRequest::unsafe_arena_release_interaction_feedback() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.interaction_feedback)
  
  ::ai::inworld::engine::v1::InteractionFeedback* temp = interaction_feedback_;
  interaction_feedback_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::v1::InteractionFeedback* CreateInteractionFeedbackRequest::_internal_mutable_interaction_feedback() {
  
  if (interaction_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::v1::InteractionFeedback>(GetArena());
    interaction_feedback_ = p;
  }
  return interaction_feedback_;
}
inline ::ai::inworld::engine::v1::InteractionFeedback* CreateInteractionFeedbackRequest::mutable_interaction_feedback() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.interaction_feedback)
  return _internal_mutable_interaction_feedback();
}
inline void CreateInteractionFeedbackRequest::set_allocated_interaction_feedback(::ai::inworld::engine::v1::InteractionFeedback* interaction_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interaction_feedback_;
  }
  if (interaction_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interaction_feedback);
    if (message_arena != submessage_arena) {
      interaction_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interaction_feedback, submessage_arena);
    }
    
  } else {
    
  }
  interaction_feedback_ = interaction_feedback;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.v1.CreateInteractionFeedbackRequest.interaction_feedback)
}

// -------------------------------------------------------------------

// DeleteInteractionFeedbackRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteInteractionFeedbackRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteInteractionFeedbackRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
  return _internal_name();
}
inline void DeleteInteractionFeedbackRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
}
inline std::string* DeleteInteractionFeedbackRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteInteractionFeedbackRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteInteractionFeedbackRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteInteractionFeedbackRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
}
inline void DeleteInteractionFeedbackRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
}
inline void DeleteInteractionFeedbackRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
}
inline std::string* DeleteInteractionFeedbackRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteInteractionFeedbackRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteInteractionFeedbackRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.v1.DeleteInteractionFeedbackRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace engine
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::engine::v1::InteractionDislikeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::engine::v1::InteractionDislikeType>() {
  return ::ai::inworld::engine::v1::InteractionDislikeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fengine_2fv1_2ffeedback_2eproto
