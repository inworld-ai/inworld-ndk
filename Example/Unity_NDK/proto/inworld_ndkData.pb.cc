// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inworld_ndkData.proto

#include "inworld_ndkData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentInfo_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilitiesRequest_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterAssets_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientRequest_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fields_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InworldCharacterData_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerProfile_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRequest_inworld_5fndkData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_inworld_5fndkData_2eproto;
namespace inworld {
namespace ndkData {
class TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Token> _instance;
} _Token_default_instance_;
class LoadSceneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneRequest> _instance;
} _LoadSceneRequest_default_instance_;
class LoadSceneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneResponse> _instance;
} _LoadSceneResponse_default_instance_;
class UserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserRequest> _instance;
} _UserRequest_default_instance_;
class UserSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSettings> _instance;
} _UserSettings_default_instance_;
class PlayerProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerProfile> _instance;
} _PlayerProfile_default_instance_;
class FieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fields> _instance;
} _Fields_default_instance_;
class ClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientRequest> _instance;
} _ClientRequest_default_instance_;
class CapabilitiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapabilitiesRequest> _instance;
} _CapabilitiesRequest_default_instance_;
class InworldCharacterDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InworldCharacterData> _instance;
} _InworldCharacterData_default_instance_;
class CharacterAssetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterAssets> _instance;
} _CharacterAssets_default_instance_;
class ClientOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientOptions> _instance;
} _ClientOptions_default_instance_;
class AgentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentInfo> _instance;
} _AgentInfo_default_instance_;
class SessionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionInfo> _instance;
} _SessionInfo_default_instance_;
class AgentInfoArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentInfoArray> _instance;
} _AgentInfoArray_default_instance_;
}  // namespace ndkData
}  // namespace inworld
static void InitDefaultsscc_info_AgentInfo_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_AgentInfo_default_instance_;
    new (ptr) ::inworld::ndkData::AgentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentInfo_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentInfo_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_AgentInfoArray_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_AgentInfoArray_default_instance_;
    new (ptr) ::inworld::ndkData::AgentInfoArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentInfoArray_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgentInfoArray_inworld_5fndkData_2eproto}, {
      &scc_info_AgentInfo_inworld_5fndkData_2eproto.base,}};

static void InitDefaultsscc_info_CapabilitiesRequest_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_CapabilitiesRequest_default_instance_;
    new (ptr) ::inworld::ndkData::CapabilitiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilitiesRequest_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CapabilitiesRequest_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_CharacterAssets_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_CharacterAssets_default_instance_;
    new (ptr) ::inworld::ndkData::CharacterAssets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterAssets_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacterAssets_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_ClientOptions_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_ClientOptions_default_instance_;
    new (ptr) ::inworld::ndkData::ClientOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientOptions_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientOptions_inworld_5fndkData_2eproto}, {
      &scc_info_CapabilitiesRequest_inworld_5fndkData_2eproto.base,}};

static void InitDefaultsscc_info_ClientRequest_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_ClientRequest_default_instance_;
    new (ptr) ::inworld::ndkData::ClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientRequest_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientRequest_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_Fields_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_Fields_default_instance_;
    new (ptr) ::inworld::ndkData::Fields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fields_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fields_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_InworldCharacterData_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_InworldCharacterData_default_instance_;
    new (ptr) ::inworld::ndkData::InworldCharacterData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InworldCharacterData_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InworldCharacterData_inworld_5fndkData_2eproto}, {
      &scc_info_CharacterAssets_inworld_5fndkData_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneRequest_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_LoadSceneRequest_default_instance_;
    new (ptr) ::inworld::ndkData::LoadSceneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LoadSceneRequest_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LoadSceneRequest_inworld_5fndkData_2eproto}, {
      &scc_info_ClientRequest_inworld_5fndkData_2eproto.base,
      &scc_info_UserRequest_inworld_5fndkData_2eproto.base,
      &scc_info_CapabilitiesRequest_inworld_5fndkData_2eproto.base,
      &scc_info_UserSettings_inworld_5fndkData_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneResponse_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_LoadSceneResponse_default_instance_;
    new (ptr) ::inworld::ndkData::LoadSceneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadSceneResponse_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadSceneResponse_inworld_5fndkData_2eproto}, {
      &scc_info_InworldCharacterData_inworld_5fndkData_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_PlayerProfile_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_PlayerProfile_default_instance_;
    new (ptr) ::inworld::ndkData::PlayerProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerProfile_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerProfile_inworld_5fndkData_2eproto}, {
      &scc_info_Fields_inworld_5fndkData_2eproto.base,}};

static void InitDefaultsscc_info_SessionInfo_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_SessionInfo_default_instance_;
    new (ptr) ::inworld::ndkData::SessionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionInfo_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionInfo_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_Token_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_Token_default_instance_;
    new (ptr) ::inworld::ndkData::Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Token_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Token_inworld_5fndkData_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_UserRequest_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_UserRequest_default_instance_;
    new (ptr) ::inworld::ndkData::UserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRequest_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserRequest_inworld_5fndkData_2eproto}, {}};

static void InitDefaultsscc_info_UserSettings_inworld_5fndkData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inworld::ndkData::_UserSettings_default_instance_;
    new (ptr) ::inworld::ndkData::UserSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_inworld_5fndkData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSettings_inworld_5fndkData_2eproto}, {
      &scc_info_PlayerProfile_inworld_5fndkData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_inworld_5fndkData_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_inworld_5fndkData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_inworld_5fndkData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_inworld_5fndkData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Token, token_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Token, type_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Token, expirationtime_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Token, sessionid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Token, isvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneRequest, client_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneRequest, user_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneRequest, capabilities_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneRequest, usersetting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneResponse, agents_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneResponse, key_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::LoadSceneResponse, previousstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::UserRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::UserSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::UserSettings, viewtranscriptconsent_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::UserSettings, playerprofile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::PlayerProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::PlayerProfile, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Fields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Fields, fieldid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::Fields, fieldvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientRequest, id_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, audio_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, emotions_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, interruptions_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, narratedactions_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, silence_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, text_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, triggers_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, continuation_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, turnbasedstt_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, phonemeinfo_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, animations_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, gestures_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, emotionstreaming_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, silenceevents_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CapabilitiesRequest, loadsceneinsession_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::InworldCharacterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::InworldCharacterData, agentid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::InworldCharacterData, brainname_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::InworldCharacterData, givenname_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::InworldCharacterData, characterassets_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::InworldCharacterData, thumbnail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CharacterAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CharacterAssets, rpmmodeluri_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CharacterAssets, rpmimageuriportrait_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CharacterAssets, rpmimageuriposture_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CharacterAssets, avatarimg_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::CharacterAssets, avatarimgoriginal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, server_url_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, scene_name_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, api_key_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, api_secret_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, player_name_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, token_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, session_id_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, user_id_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, brainname_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, agentid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, givenname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, sessionid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, token_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, expirationtime_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, isvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfoArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfoArray, agent_info_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::inworld::ndkData::Token)},
  { 10, -1, sizeof(::inworld::ndkData::LoadSceneRequest)},
  { 19, -1, sizeof(::inworld::ndkData::LoadSceneResponse)},
  { 27, -1, sizeof(::inworld::ndkData::UserRequest)},
  { 33, -1, sizeof(::inworld::ndkData::UserSettings)},
  { 40, -1, sizeof(::inworld::ndkData::PlayerProfile)},
  { 46, -1, sizeof(::inworld::ndkData::Fields)},
  { 53, -1, sizeof(::inworld::ndkData::ClientRequest)},
  { 60, -1, sizeof(::inworld::ndkData::CapabilitiesRequest)},
  { 80, -1, sizeof(::inworld::ndkData::InworldCharacterData)},
  { 90, -1, sizeof(::inworld::ndkData::CharacterAssets)},
  { 100, -1, sizeof(::inworld::ndkData::ClientOptions)},
  { 114, -1, sizeof(::inworld::ndkData::AgentInfo)},
  { 122, -1, sizeof(::inworld::ndkData::SessionInfo)},
  { 131, -1, sizeof(::inworld::ndkData::AgentInfoArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_LoadSceneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_LoadSceneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_UserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_UserSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_PlayerProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_Fields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_ClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_CapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_InworldCharacterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_CharacterAssets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_ClientOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_AgentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_SessionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inworld::ndkData::_AgentInfoArray_default_instance_),
};

const char descriptor_table_protodef_inworld_5fndkData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025inworld_ndkData.proto\022\017inworld.ndkData"
  "\032\031google/protobuf/any.proto\032\037google/prot"
  "obuf/timestamp.proto\"|\n\005Token\022\r\n\005token\030\001"
  " \001(\t\022\014\n\004type\030\002 \001(\t\0222\n\016expirationTime\030\003 \001"
  "(\0132\032.google.protobuf.Timestamp\022\021\n\tsessio"
  "nId\030\004 \001(\t\022\017\n\007IsValid\030\005 \001(\010\"\336\001\n\020LoadScene"
  "Request\022.\n\006client\030\001 \001(\0132\036.inworld.ndkDat"
  "a.ClientRequest\022*\n\004user\030\002 \001(\0132\034.inworld."
  "ndkData.UserRequest\022:\n\014capabilities\030\003 \001("
  "\0132$.inworld.ndkData.CapabilitiesRequest\022"
  "2\n\013userSetting\030\004 \001(\0132\035.inworld.ndkData.U"
  "serSettings\"\204\001\n\021LoadSceneResponse\0225\n\006age"
  "nts\030\001 \003(\0132%.inworld.ndkData.InworldChara"
  "cterData\022\013\n\003key\030\002 \001(\t\022+\n\rpreviousState\030\003"
  " \001(\0132\024.google.protobuf.Any\"\033\n\013UserReques"
  "t\022\014\n\004name\030\001 \001(\t\"d\n\014UserSettings\022\035\n\025viewT"
  "ranscriptConsent\030\001 \001(\010\0225\n\rplayerProfile\030"
  "\002 \001(\0132\036.inworld.ndkData.PlayerProfile\"8\n"
  "\rPlayerProfile\022\'\n\006fields\030\001 \003(\0132\027.inworld"
  ".ndkData.Fields\"-\n\006Fields\022\017\n\007fieldId\030\001 \001"
  "(\t\022\022\n\nfieldValue\030\002 \001(\t\",\n\rClientRequest\022"
  "\n\n\002id\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\"\313\002\n\023Capabil"
  "itiesRequest\022\r\n\005audio\030\001 \001(\010\022\020\n\010emotions\030"
  "\002 \001(\010\022\025\n\rinterruptions\030\003 \001(\010\022\027\n\017narrated"
  "Actions\030\004 \001(\010\022\017\n\007silence\030\005 \001(\010\022\014\n\004text\030\006"
  " \001(\010\022\020\n\010triggers\030\007 \001(\010\022\024\n\014continuation\030\010"
  " \001(\010\022\024\n\014turnBasedStt\030\t \001(\010\022\023\n\013phonemeInf"
  "o\030\n \001(\010\022\022\n\nanimations\030\013 \001(\010\022\020\n\010gestures\030"
  "\014 \001(\010\022\030\n\020emotionstreaming\030\r \001(\010\022\025\n\rsilen"
  "ceevents\030\016 \001(\010\022\032\n\022loadsceneinsession\030\017 \001"
  "(\010\"\233\001\n\024InworldCharacterData\022\017\n\007agentId\030\001"
  " \001(\t\022\021\n\tbrainName\030\002 \001(\t\022\021\n\tgivenName\030\003 \001"
  "(\t\0229\n\017characterAssets\030\004 \001(\0132 .inworld.nd"
  "kData.CharacterAssets\022\021\n\tthumbnail\030\005 \001(\014"
  "\"\215\001\n\017CharacterAssets\022\023\n\013rpmModelUri\030\001 \001("
  "\t\022\033\n\023rpmImageUriPortrait\030\002 \001(\t\022\032\n\022rpmIma"
  "geUriPosture\030\003 \001(\t\022\021\n\tavatarImg\030\004 \001(\t\022\031\n"
  "\021avatarImgOriginal\030\005 \001(\t\"\341\001\n\rClientOptio"
  "ns\022\022\n\nserver_url\030\002 \001(\t\022\022\n\nscene_name\030\003 \001"
  "(\t\022\017\n\007api_key\030\004 \001(\t\022\022\n\napi_secret\030\005 \001(\t\022"
  "\023\n\013player_name\030\006 \001(\t\022\r\n\005token\030\007 \001(\t\022\022\n\ns"
  "ession_id\030\010 \001(\t\022\017\n\007user_id\030\t \001(\t\022:\n\014capa"
  "bilities\030\n \001(\0132$.inworld.ndkData.Capabil"
  "itiesRequest\"B\n\tAgentInfo\022\021\n\tBrainName\030\001"
  " \001(\t\022\017\n\007AgentId\030\002 \001(\t\022\021\n\tGivenName\030\003 \001(\t"
  "\"X\n\013SessionInfo\022\021\n\tSessionId\030\001 \001(\t\022\r\n\005To"
  "ken\030\002 \001(\t\022\026\n\016ExpirationTime\030\003 \001(\003\022\017\n\007IsV"
  "alid\030\004 \001(\010\"E\n\016AgentInfoArray\0223\n\017agent_in"
  "fo_list\030\001 \003(\0132\032.inworld.ndkData.AgentInf"
  "o*v\n\017ConnectionState\022\010\n\004Idle\020\000\022\016\n\nConnec"
  "ting\020\001\022\r\n\tConnected\020\002\022\n\n\006Failed\020\003\022\n\n\006Pau"
  "sed\020\004\022\020\n\014Disconnected\020\005\022\020\n\014Reconnecting\020"
  "\006B\016\252\002\013Inworld.NDKb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_inworld_5fndkData_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_inworld_5fndkData_2eproto_sccs[15] = {
  &scc_info_AgentInfo_inworld_5fndkData_2eproto.base,
  &scc_info_AgentInfoArray_inworld_5fndkData_2eproto.base,
  &scc_info_CapabilitiesRequest_inworld_5fndkData_2eproto.base,
  &scc_info_CharacterAssets_inworld_5fndkData_2eproto.base,
  &scc_info_ClientOptions_inworld_5fndkData_2eproto.base,
  &scc_info_ClientRequest_inworld_5fndkData_2eproto.base,
  &scc_info_Fields_inworld_5fndkData_2eproto.base,
  &scc_info_InworldCharacterData_inworld_5fndkData_2eproto.base,
  &scc_info_LoadSceneRequest_inworld_5fndkData_2eproto.base,
  &scc_info_LoadSceneResponse_inworld_5fndkData_2eproto.base,
  &scc_info_PlayerProfile_inworld_5fndkData_2eproto.base,
  &scc_info_SessionInfo_inworld_5fndkData_2eproto.base,
  &scc_info_Token_inworld_5fndkData_2eproto.base,
  &scc_info_UserRequest_inworld_5fndkData_2eproto.base,
  &scc_info_UserSettings_inworld_5fndkData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_inworld_5fndkData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inworld_5fndkData_2eproto = {
  false, false, descriptor_table_protodef_inworld_5fndkData_2eproto, "inworld_ndkData.proto", 2105,
  &descriptor_table_inworld_5fndkData_2eproto_once, descriptor_table_inworld_5fndkData_2eproto_sccs, descriptor_table_inworld_5fndkData_2eproto_deps, 15, 2,
  schemas, file_default_instances, TableStruct_inworld_5fndkData_2eproto::offsets,
  file_level_metadata_inworld_5fndkData_2eproto, 15, file_level_enum_descriptors_inworld_5fndkData_2eproto, file_level_service_descriptors_inworld_5fndkData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_inworld_5fndkData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_inworld_5fndkData_2eproto)), true);
namespace inworld {
namespace ndkData {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inworld_5fndkData_2eproto);
  return file_level_enum_descriptors_inworld_5fndkData_2eproto[0];
}
bool ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Token::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expirationtime(const Token* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Token::_Internal::expirationtime(const Token* msg) {
  return *msg->expirationtime_;
}
void Token::clear_expirationtime() {
  if (GetArena() == nullptr && expirationtime_ != nullptr) {
    delete expirationtime_;
  }
  expirationtime_ = nullptr;
}
Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  if (from._internal_has_expirationtime()) {
    expirationtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expirationtime_);
  } else {
    expirationtime_ = nullptr;
  }
  isvalid_ = from.isvalid_;
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.Token)
}

void Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Token_inworld_5fndkData_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&expirationtime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&expirationtime_)) + sizeof(isvalid_));
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expirationtime_;
}

void Token::ArenaDtor(void* object) {
  Token* _this = reinterpret_cast< Token* >(object);
  (void)_this;
}
void Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Token& Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Token_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  type_.ClearToEmpty();
  sessionid_.ClearToEmpty();
  if (GetArena() == nullptr && expirationtime_ != nullptr) {
    delete expirationtime_;
  }
  expirationtime_ = nullptr;
  isvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.Token.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.Token.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expirationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.Token.sessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsValid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.Token.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.Token.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp expirationTime = 3;
  if (this->has_expirationtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expirationtime(this), target, stream);
  }

  // string sessionId = 4;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.Token.sessionId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sessionid(), target);
  }

  // bool IsValid = 5;
  if (this->isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string sessionId = 4;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .google.protobuf.Timestamp expirationTime = 3;
  if (this->has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expirationtime_);
  }

  // bool IsValid = 5;
  if (this->isvalid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sessionid().size() > 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.has_expirationtime()) {
    _internal_mutable_expirationtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expirationtime());
  }
  if (from.isvalid() != 0) {
    _internal_set_isvalid(from._internal_isvalid());
  }
}

void Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, isvalid_)
      + sizeof(Token::isvalid_)
      - PROTOBUF_FIELD_OFFSET(Token, expirationtime_)>(
          reinterpret_cast<char*>(&expirationtime_),
          reinterpret_cast<char*>(&other->expirationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneRequest::_Internal {
 public:
  static const ::inworld::ndkData::ClientRequest& client(const LoadSceneRequest* msg);
  static const ::inworld::ndkData::UserRequest& user(const LoadSceneRequest* msg);
  static const ::inworld::ndkData::CapabilitiesRequest& capabilities(const LoadSceneRequest* msg);
  static const ::inworld::ndkData::UserSettings& usersetting(const LoadSceneRequest* msg);
};

const ::inworld::ndkData::ClientRequest&
LoadSceneRequest::_Internal::client(const LoadSceneRequest* msg) {
  return *msg->client_;
}
const ::inworld::ndkData::UserRequest&
LoadSceneRequest::_Internal::user(const LoadSceneRequest* msg) {
  return *msg->user_;
}
const ::inworld::ndkData::CapabilitiesRequest&
LoadSceneRequest::_Internal::capabilities(const LoadSceneRequest* msg) {
  return *msg->capabilities_;
}
const ::inworld::ndkData::UserSettings&
LoadSceneRequest::_Internal::usersetting(const LoadSceneRequest* msg) {
  return *msg->usersetting_;
}
LoadSceneRequest::LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.LoadSceneRequest)
}
LoadSceneRequest::LoadSceneRequest(const LoadSceneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client()) {
    client_ = new ::inworld::ndkData::ClientRequest(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::inworld::ndkData::UserRequest(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_capabilities()) {
    capabilities_ = new ::inworld::ndkData::CapabilitiesRequest(*from.capabilities_);
  } else {
    capabilities_ = nullptr;
  }
  if (from._internal_has_usersetting()) {
    usersetting_ = new ::inworld::ndkData::UserSettings(*from.usersetting_);
  } else {
    usersetting_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.LoadSceneRequest)
}

void LoadSceneRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneRequest_inworld_5fndkData_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&client_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&usersetting_) -
      reinterpret_cast<char*>(&client_)) + sizeof(usersetting_));
}

LoadSceneRequest::~LoadSceneRequest() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.LoadSceneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete capabilities_;
  if (this != internal_default_instance()) delete usersetting_;
}

void LoadSceneRequest::ArenaDtor(void* object) {
  LoadSceneRequest* _this = reinterpret_cast< LoadSceneRequest* >(object);
  (void)_this;
}
void LoadSceneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneRequest& LoadSceneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneRequest_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.LoadSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
  if (GetArena() == nullptr && usersetting_ != nullptr) {
    delete usersetting_;
  }
  usersetting_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inworld.ndkData.ClientRequest client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inworld.ndkData.UserRequest user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inworld.ndkData.CapabilitiesRequest capabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inworld.ndkData.UserSettings userSetting = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_usersetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.LoadSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inworld.ndkData.ClientRequest client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .inworld.ndkData.UserRequest user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  // .inworld.ndkData.CapabilitiesRequest capabilities = 3;
  if (this->has_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capabilities(this), target, stream);
  }

  // .inworld.ndkData.UserSettings userSetting = 4;
  if (this->has_usersetting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::usersetting(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.LoadSceneRequest)
  return target;
}

size_t LoadSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.LoadSceneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inworld.ndkData.ClientRequest client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .inworld.ndkData.UserRequest user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .inworld.ndkData.CapabilitiesRequest capabilities = 3;
  if (this->has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_);
  }

  // .inworld.ndkData.UserSettings userSetting = 4;
  if (this->has_usersetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usersetting_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.LoadSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.LoadSceneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.LoadSceneRequest)
    MergeFrom(*source);
  }
}

void LoadSceneRequest::MergeFrom(const LoadSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.LoadSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client()) {
    _internal_mutable_client()->::inworld::ndkData::ClientRequest::MergeFrom(from._internal_client());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::inworld::ndkData::UserRequest::MergeFrom(from._internal_user());
  }
  if (from.has_capabilities()) {
    _internal_mutable_capabilities()->::inworld::ndkData::CapabilitiesRequest::MergeFrom(from._internal_capabilities());
  }
  if (from.has_usersetting()) {
    _internal_mutable_usersetting()->::inworld::ndkData::UserSettings::MergeFrom(from._internal_usersetting());
  }
}

void LoadSceneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.LoadSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneRequest::CopyFrom(const LoadSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.LoadSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneRequest::IsInitialized() const {
  return true;
}

void LoadSceneRequest::InternalSwap(LoadSceneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadSceneRequest, usersetting_)
      + sizeof(LoadSceneRequest::usersetting_)
      - PROTOBUF_FIELD_OFFSET(LoadSceneRequest, client_)>(
          reinterpret_cast<char*>(&client_),
          reinterpret_cast<char*>(&other->client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& previousstate(const LoadSceneResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
LoadSceneResponse::_Internal::previousstate(const LoadSceneResponse* msg) {
  return *msg->previousstate_;
}
void LoadSceneResponse::clear_previousstate() {
  if (GetArena() == nullptr && previousstate_ != nullptr) {
    delete previousstate_;
  }
  previousstate_ = nullptr;
}
LoadSceneResponse::LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.LoadSceneResponse)
}
LoadSceneResponse::LoadSceneResponse(const LoadSceneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_previousstate()) {
    previousstate_ = new PROTOBUF_NAMESPACE_ID::Any(*from.previousstate_);
  } else {
    previousstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.LoadSceneResponse)
}

void LoadSceneResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneResponse_inworld_5fndkData_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previousstate_ = nullptr;
}

LoadSceneResponse::~LoadSceneResponse() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.LoadSceneResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previousstate_;
}

void LoadSceneResponse::ArenaDtor(void* object) {
  LoadSceneResponse* _this = reinterpret_cast< LoadSceneResponse* >(object);
  (void)_this;
}
void LoadSceneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneResponse& LoadSceneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneResponse_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.LoadSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  key_.ClearToEmpty();
  if (GetArena() == nullptr && previousstate_ != nullptr) {
    delete previousstate_;
  }
  previousstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .inworld.ndkData.InworldCharacterData agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.LoadSceneResponse.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any previousState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previousstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.LoadSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inworld.ndkData.InworldCharacterData agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.LoadSceneResponse.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .google.protobuf.Any previousState = 3;
  if (this->has_previousstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::previousstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.LoadSceneResponse)
  return target;
}

size_t LoadSceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.LoadSceneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inworld.ndkData.InworldCharacterData agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .google.protobuf.Any previousState = 3;
  if (this->has_previousstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previousstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.LoadSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.LoadSceneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.LoadSceneResponse)
    MergeFrom(*source);
  }
}

void LoadSceneResponse::MergeFrom(const LoadSceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.LoadSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_previousstate()) {
    _internal_mutable_previousstate()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_previousstate());
  }
}

void LoadSceneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.LoadSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneResponse::CopyFrom(const LoadSceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.LoadSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneResponse::IsInitialized() const {
  return true;
}

void LoadSceneResponse::InternalSwap(LoadSceneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(previousstate_, other->previousstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserRequest::_Internal {
 public:
};

UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.UserRequest)
}

void UserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserRequest_inworld_5fndkData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.UserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserRequest::ArenaDtor(void* object) {
  UserRequest* _this = reinterpret_cast< UserRequest* >(object);
  (void)_this;
}
void UserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserRequest& UserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserRequest_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.UserRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.UserRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.UserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.UserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.UserRequest)
    MergeFrom(*source);
  }
}

void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void UserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserSettings::_Internal {
 public:
  static const ::inworld::ndkData::PlayerProfile& playerprofile(const UserSettings* msg);
};

const ::inworld::ndkData::PlayerProfile&
UserSettings::_Internal::playerprofile(const UserSettings* msg) {
  return *msg->playerprofile_;
}
UserSettings::UserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.UserSettings)
}
UserSettings::UserSettings(const UserSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerprofile()) {
    playerprofile_ = new ::inworld::ndkData::PlayerProfile(*from.playerprofile_);
  } else {
    playerprofile_ = nullptr;
  }
  viewtranscriptconsent_ = from.viewtranscriptconsent_;
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.UserSettings)
}

void UserSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSettings_inworld_5fndkData_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerprofile_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&viewtranscriptconsent_) -
      reinterpret_cast<char*>(&playerprofile_)) + sizeof(viewtranscriptconsent_));
}

UserSettings::~UserSettings() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.UserSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerprofile_;
}

void UserSettings::ArenaDtor(void* object) {
  UserSettings* _this = reinterpret_cast< UserSettings* >(object);
  (void)_this;
}
void UserSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSettings& UserSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSettings_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void UserSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.UserSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && playerprofile_ != nullptr) {
    delete playerprofile_;
  }
  playerprofile_ = nullptr;
  viewtranscriptconsent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool viewTranscriptConsent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          viewtranscriptconsent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inworld.ndkData.PlayerProfile playerProfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerprofile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.UserSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool viewTranscriptConsent = 1;
  if (this->viewtranscriptconsent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_viewtranscriptconsent(), target);
  }

  // .inworld.ndkData.PlayerProfile playerProfile = 2;
  if (this->has_playerprofile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::playerprofile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.UserSettings)
  return target;
}

size_t UserSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.UserSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inworld.ndkData.PlayerProfile playerProfile = 2;
  if (this->has_playerprofile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerprofile_);
  }

  // bool viewTranscriptConsent = 1;
  if (this->viewtranscriptconsent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.UserSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.UserSettings)
    MergeFrom(*source);
  }
}

void UserSettings::MergeFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerprofile()) {
    _internal_mutable_playerprofile()->::inworld::ndkData::PlayerProfile::MergeFrom(from._internal_playerprofile());
  }
  if (from.viewtranscriptconsent() != 0) {
    _internal_set_viewtranscriptconsent(from._internal_viewtranscriptconsent());
  }
}

void UserSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSettings::CopyFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings::IsInitialized() const {
  return true;
}

void UserSettings::InternalSwap(UserSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSettings, viewtranscriptconsent_)
      + sizeof(UserSettings::viewtranscriptconsent_)
      - PROTOBUF_FIELD_OFFSET(UserSettings, playerprofile_)>(
          reinterpret_cast<char*>(&playerprofile_),
          reinterpret_cast<char*>(&other->playerprofile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerProfile::_Internal {
 public:
};

PlayerProfile::PlayerProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.PlayerProfile)
}
PlayerProfile::PlayerProfile(const PlayerProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.PlayerProfile)
}

void PlayerProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerProfile_inworld_5fndkData_2eproto.base);
}

PlayerProfile::~PlayerProfile() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.PlayerProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerProfile::ArenaDtor(void* object) {
  PlayerProfile* _this = reinterpret_cast< PlayerProfile* >(object);
  (void)_this;
}
void PlayerProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerProfile& PlayerProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerProfile_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void PlayerProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.PlayerProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .inworld.ndkData.Fields fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.PlayerProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inworld.ndkData.Fields fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.PlayerProfile)
  return target;
}

size_t PlayerProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.PlayerProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inworld.ndkData.Fields fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.PlayerProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.PlayerProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.PlayerProfile)
    MergeFrom(*source);
  }
}

void PlayerProfile::MergeFrom(const PlayerProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.PlayerProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void PlayerProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.PlayerProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerProfile::CopyFrom(const PlayerProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.PlayerProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProfile::IsInitialized() const {
  return true;
}

void PlayerProfile::InternalSwap(PlayerProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fields::_Internal {
 public:
};

Fields::Fields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.Fields)
}
Fields::Fields(const Fields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fieldid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fieldid().empty()) {
    fieldid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fieldid(), 
      GetArena());
  }
  fieldvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fieldvalue().empty()) {
    fieldvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fieldvalue(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.Fields)
}

void Fields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fields_inworld_5fndkData_2eproto.base);
  fieldid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Fields::~Fields() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.Fields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fieldid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fields::ArenaDtor(void* object) {
  Fields* _this = reinterpret_cast< Fields* >(object);
  (void)_this;
}
void Fields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fields& Fields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fields_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void Fields::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.Fields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldid_.ClearToEmpty();
  fieldvalue_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fieldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fieldid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.Fields.fieldId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fieldValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fieldvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.Fields.fieldValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.Fields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fieldId = 1;
  if (this->fieldid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fieldid().data(), static_cast<int>(this->_internal_fieldid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.Fields.fieldId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fieldid(), target);
  }

  // string fieldValue = 2;
  if (this->fieldvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fieldvalue().data(), static_cast<int>(this->_internal_fieldvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.Fields.fieldValue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fieldvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.Fields)
  return target;
}

size_t Fields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.Fields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fieldId = 1;
  if (this->fieldid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fieldid());
  }

  // string fieldValue = 2;
  if (this->fieldvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fieldvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.Fields)
  GOOGLE_DCHECK_NE(&from, this);
  const Fields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.Fields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.Fields)
    MergeFrom(*source);
  }
}

void Fields::MergeFrom(const Fields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.Fields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldid().size() > 0) {
    _internal_set_fieldid(from._internal_fieldid());
  }
  if (from.fieldvalue().size() > 0) {
    _internal_set_fieldvalue(from._internal_fieldvalue());
  }
}

void Fields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.Fields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fields::CopyFrom(const Fields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.Fields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fields::IsInitialized() const {
  return true;
}

void Fields::InternalSwap(Fields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fieldid_.Swap(&other->fieldid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fieldvalue_.Swap(&other->fieldvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Fields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientRequest::_Internal {
 public:
};

ClientRequest::ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.ClientRequest)
}
ClientRequest::ClientRequest(const ClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.ClientRequest)
}

void ClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientRequest_inworld_5fndkData_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.ClientRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientRequest::ArenaDtor(void* object) {
  ClientRequest* _this = reinterpret_cast< ClientRequest* >(object);
  (void)_this;
}
void ClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientRequest& ClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientRequest_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.ClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientRequest.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.ClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientRequest.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.ClientRequest)
  return target;
}

size_t ClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.ClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.ClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.ClientRequest)
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void ClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  return true;
}

void ClientRequest::InternalSwap(ClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CapabilitiesRequest::_Internal {
 public:
};

CapabilitiesRequest::CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.CapabilitiesRequest)
}
CapabilitiesRequest::CapabilitiesRequest(const CapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audio_, &from.audio_,
    static_cast<size_t>(reinterpret_cast<char*>(&loadsceneinsession_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(loadsceneinsession_));
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.CapabilitiesRequest)
}

void CapabilitiesRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&loadsceneinsession_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(loadsceneinsession_));
}

CapabilitiesRequest::~CapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.CapabilitiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapabilitiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CapabilitiesRequest::ArenaDtor(void* object) {
  CapabilitiesRequest* _this = reinterpret_cast< CapabilitiesRequest* >(object);
  (void)_this;
}
void CapabilitiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapabilitiesRequest& CapabilitiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapabilitiesRequest_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void CapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.CapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loadsceneinsession_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(loadsceneinsession_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool emotions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          emotions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool interruptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          interruptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool narratedActions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          narratedactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool silence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          silence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool triggers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          triggers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool continuation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool turnBasedStt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          turnbasedstt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool phonemeInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          phonemeinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool animations = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          animations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gestures = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          gestures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool emotionstreaming = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          emotionstreaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool silenceevents = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          silenceevents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool loadsceneinsession = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          loadsceneinsession_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.CapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool audio = 1;
  if (this->audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_audio(), target);
  }

  // bool emotions = 2;
  if (this->emotions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_emotions(), target);
  }

  // bool interruptions = 3;
  if (this->interruptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_interruptions(), target);
  }

  // bool narratedActions = 4;
  if (this->narratedactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_narratedactions(), target);
  }

  // bool silence = 5;
  if (this->silence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_silence(), target);
  }

  // bool text = 6;
  if (this->text() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_text(), target);
  }

  // bool triggers = 7;
  if (this->triggers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_triggers(), target);
  }

  // bool continuation = 8;
  if (this->continuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_continuation(), target);
  }

  // bool turnBasedStt = 9;
  if (this->turnbasedstt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_turnbasedstt(), target);
  }

  // bool phonemeInfo = 10;
  if (this->phonemeinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_phonemeinfo(), target);
  }

  // bool animations = 11;
  if (this->animations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_animations(), target);
  }

  // bool gestures = 12;
  if (this->gestures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_gestures(), target);
  }

  // bool emotionstreaming = 13;
  if (this->emotionstreaming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_emotionstreaming(), target);
  }

  // bool silenceevents = 14;
  if (this->silenceevents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_silenceevents(), target);
  }

  // bool loadsceneinsession = 15;
  if (this->loadsceneinsession() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_loadsceneinsession(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.CapabilitiesRequest)
  return target;
}

size_t CapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.CapabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool audio = 1;
  if (this->audio() != 0) {
    total_size += 1 + 1;
  }

  // bool emotions = 2;
  if (this->emotions() != 0) {
    total_size += 1 + 1;
  }

  // bool interruptions = 3;
  if (this->interruptions() != 0) {
    total_size += 1 + 1;
  }

  // bool narratedActions = 4;
  if (this->narratedactions() != 0) {
    total_size += 1 + 1;
  }

  // bool silence = 5;
  if (this->silence() != 0) {
    total_size += 1 + 1;
  }

  // bool text = 6;
  if (this->text() != 0) {
    total_size += 1 + 1;
  }

  // bool triggers = 7;
  if (this->triggers() != 0) {
    total_size += 1 + 1;
  }

  // bool continuation = 8;
  if (this->continuation() != 0) {
    total_size += 1 + 1;
  }

  // bool turnBasedStt = 9;
  if (this->turnbasedstt() != 0) {
    total_size += 1 + 1;
  }

  // bool phonemeInfo = 10;
  if (this->phonemeinfo() != 0) {
    total_size += 1 + 1;
  }

  // bool animations = 11;
  if (this->animations() != 0) {
    total_size += 1 + 1;
  }

  // bool gestures = 12;
  if (this->gestures() != 0) {
    total_size += 1 + 1;
  }

  // bool emotionstreaming = 13;
  if (this->emotionstreaming() != 0) {
    total_size += 1 + 1;
  }

  // bool silenceevents = 14;
  if (this->silenceevents() != 0) {
    total_size += 1 + 1;
  }

  // bool loadsceneinsession = 15;
  if (this->loadsceneinsession() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.CapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.CapabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.CapabilitiesRequest)
    MergeFrom(*source);
  }
}

void CapabilitiesRequest::MergeFrom(const CapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.CapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio() != 0) {
    _internal_set_audio(from._internal_audio());
  }
  if (from.emotions() != 0) {
    _internal_set_emotions(from._internal_emotions());
  }
  if (from.interruptions() != 0) {
    _internal_set_interruptions(from._internal_interruptions());
  }
  if (from.narratedactions() != 0) {
    _internal_set_narratedactions(from._internal_narratedactions());
  }
  if (from.silence() != 0) {
    _internal_set_silence(from._internal_silence());
  }
  if (from.text() != 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.triggers() != 0) {
    _internal_set_triggers(from._internal_triggers());
  }
  if (from.continuation() != 0) {
    _internal_set_continuation(from._internal_continuation());
  }
  if (from.turnbasedstt() != 0) {
    _internal_set_turnbasedstt(from._internal_turnbasedstt());
  }
  if (from.phonemeinfo() != 0) {
    _internal_set_phonemeinfo(from._internal_phonemeinfo());
  }
  if (from.animations() != 0) {
    _internal_set_animations(from._internal_animations());
  }
  if (from.gestures() != 0) {
    _internal_set_gestures(from._internal_gestures());
  }
  if (from.emotionstreaming() != 0) {
    _internal_set_emotionstreaming(from._internal_emotionstreaming());
  }
  if (from.silenceevents() != 0) {
    _internal_set_silenceevents(from._internal_silenceevents());
  }
  if (from.loadsceneinsession() != 0) {
    _internal_set_loadsceneinsession(from._internal_loadsceneinsession());
  }
}

void CapabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.CapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesRequest::CopyFrom(const CapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.CapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesRequest::IsInitialized() const {
  return true;
}

void CapabilitiesRequest::InternalSwap(CapabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapabilitiesRequest, loadsceneinsession_)
      + sizeof(CapabilitiesRequest::loadsceneinsession_)
      - PROTOBUF_FIELD_OFFSET(CapabilitiesRequest, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InworldCharacterData::_Internal {
 public:
  static const ::inworld::ndkData::CharacterAssets& characterassets(const InworldCharacterData* msg);
};

const ::inworld::ndkData::CharacterAssets&
InworldCharacterData::_Internal::characterassets(const InworldCharacterData* msg) {
  return *msg->characterassets_;
}
InworldCharacterData::InworldCharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.InworldCharacterData)
}
InworldCharacterData::InworldCharacterData(const InworldCharacterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agentid().empty()) {
    agentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agentid(), 
      GetArena());
  }
  brainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brainname().empty()) {
    brainname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brainname(), 
      GetArena());
  }
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_givenname().empty()) {
    givenname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_givenname(), 
      GetArena());
  }
  thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thumbnail().empty()) {
    thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail(), 
      GetArena());
  }
  if (from._internal_has_characterassets()) {
    characterassets_ = new ::inworld::ndkData::CharacterAssets(*from.characterassets_);
  } else {
    characterassets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.InworldCharacterData)
}

void InworldCharacterData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InworldCharacterData_inworld_5fndkData_2eproto.base);
  agentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterassets_ = nullptr;
}

InworldCharacterData::~InworldCharacterData() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.InworldCharacterData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InworldCharacterData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brainname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete characterassets_;
}

void InworldCharacterData::ArenaDtor(void* object) {
  InworldCharacterData* _this = reinterpret_cast< InworldCharacterData* >(object);
  (void)_this;
}
void InworldCharacterData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InworldCharacterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InworldCharacterData& InworldCharacterData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InworldCharacterData_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void InworldCharacterData::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.InworldCharacterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agentid_.ClearToEmpty();
  brainname_.ClearToEmpty();
  givenname_.ClearToEmpty();
  thumbnail_.ClearToEmpty();
  if (GetArena() == nullptr && characterassets_ != nullptr) {
    delete characterassets_;
  }
  characterassets_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InworldCharacterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.InworldCharacterData.agentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brainName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brainname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.InworldCharacterData.brainName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string givenName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_givenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.InworldCharacterData.givenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inworld.ndkData.CharacterAssets characterAssets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_characterassets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes thumbnail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InworldCharacterData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.InworldCharacterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agentId = 1;
  if (this->agentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agentid().data(), static_cast<int>(this->_internal_agentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.InworldCharacterData.agentId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agentid(), target);
  }

  // string brainName = 2;
  if (this->brainname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brainname().data(), static_cast<int>(this->_internal_brainname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.InworldCharacterData.brainName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brainname(), target);
  }

  // string givenName = 3;
  if (this->givenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_givenname().data(), static_cast<int>(this->_internal_givenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.InworldCharacterData.givenName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_givenname(), target);
  }

  // .inworld.ndkData.CharacterAssets characterAssets = 4;
  if (this->has_characterassets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::characterassets(this), target, stream);
  }

  // bytes thumbnail = 5;
  if (this->thumbnail().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_thumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.InworldCharacterData)
  return target;
}

size_t InworldCharacterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.InworldCharacterData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agentId = 1;
  if (this->agentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agentid());
  }

  // string brainName = 2;
  if (this->brainname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brainname());
  }

  // string givenName = 3;
  if (this->givenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_givenname());
  }

  // bytes thumbnail = 5;
  if (this->thumbnail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_thumbnail());
  }

  // .inworld.ndkData.CharacterAssets characterAssets = 4;
  if (this->has_characterassets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *characterassets_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InworldCharacterData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.InworldCharacterData)
  GOOGLE_DCHECK_NE(&from, this);
  const InworldCharacterData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InworldCharacterData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.InworldCharacterData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.InworldCharacterData)
    MergeFrom(*source);
  }
}

void InworldCharacterData::MergeFrom(const InworldCharacterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.InworldCharacterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agentid().size() > 0) {
    _internal_set_agentid(from._internal_agentid());
  }
  if (from.brainname().size() > 0) {
    _internal_set_brainname(from._internal_brainname());
  }
  if (from.givenname().size() > 0) {
    _internal_set_givenname(from._internal_givenname());
  }
  if (from.thumbnail().size() > 0) {
    _internal_set_thumbnail(from._internal_thumbnail());
  }
  if (from.has_characterassets()) {
    _internal_mutable_characterassets()->::inworld::ndkData::CharacterAssets::MergeFrom(from._internal_characterassets());
  }
}

void InworldCharacterData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.InworldCharacterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InworldCharacterData::CopyFrom(const InworldCharacterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.InworldCharacterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InworldCharacterData::IsInitialized() const {
  return true;
}

void InworldCharacterData::InternalSwap(InworldCharacterData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agentid_.Swap(&other->agentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  brainname_.Swap(&other->brainname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  givenname_.Swap(&other->givenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumbnail_.Swap(&other->thumbnail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(characterassets_, other->characterassets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InworldCharacterData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CharacterAssets::_Internal {
 public:
};

CharacterAssets::CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.CharacterAssets)
}
CharacterAssets::CharacterAssets(const CharacterAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpmmodeluri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpmmodeluri().empty()) {
    rpmmodeluri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpmmodeluri(), 
      GetArena());
  }
  rpmimageuriportrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpmimageuriportrait().empty()) {
    rpmimageuriportrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpmimageuriportrait(), 
      GetArena());
  }
  rpmimageuriposture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpmimageuriposture().empty()) {
    rpmimageuriposture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpmimageuriposture(), 
      GetArena());
  }
  avatarimg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarimg().empty()) {
    avatarimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatarimg(), 
      GetArena());
  }
  avatarimgoriginal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarimgoriginal().empty()) {
    avatarimgoriginal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatarimgoriginal(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.CharacterAssets)
}

void CharacterAssets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterAssets_inworld_5fndkData_2eproto.base);
  rpmmodeluri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpmimageuriportrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpmimageuriposture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarimg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarimgoriginal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CharacterAssets::~CharacterAssets() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.CharacterAssets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CharacterAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rpmmodeluri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpmimageuriportrait_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpmimageuriposture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarimg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarimgoriginal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CharacterAssets::ArenaDtor(void* object) {
  CharacterAssets* _this = reinterpret_cast< CharacterAssets* >(object);
  (void)_this;
}
void CharacterAssets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterAssets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterAssets& CharacterAssets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterAssets_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void CharacterAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.CharacterAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpmmodeluri_.ClearToEmpty();
  rpmimageuriportrait_.ClearToEmpty();
  rpmimageuriposture_.ClearToEmpty();
  avatarimg_.ClearToEmpty();
  avatarimgoriginal_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterAssets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rpmModelUri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpmmodeluri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.CharacterAssets.rpmModelUri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rpmImageUriPortrait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rpmimageuriportrait();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.CharacterAssets.rpmImageUriPortrait"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rpmImageUriPosture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rpmimageuriposture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.CharacterAssets.rpmImageUriPosture"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarImg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatarimg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.CharacterAssets.avatarImg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarImgOriginal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_avatarimgoriginal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.CharacterAssets.avatarImgOriginal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterAssets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.CharacterAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rpmModelUri = 1;
  if (this->rpmmodeluri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpmmodeluri().data(), static_cast<int>(this->_internal_rpmmodeluri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.CharacterAssets.rpmModelUri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rpmmodeluri(), target);
  }

  // string rpmImageUriPortrait = 2;
  if (this->rpmimageuriportrait().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpmimageuriportrait().data(), static_cast<int>(this->_internal_rpmimageuriportrait().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.CharacterAssets.rpmImageUriPortrait");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rpmimageuriportrait(), target);
  }

  // string rpmImageUriPosture = 3;
  if (this->rpmimageuriposture().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpmimageuriposture().data(), static_cast<int>(this->_internal_rpmimageuriposture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.CharacterAssets.rpmImageUriPosture");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rpmimageuriposture(), target);
  }

  // string avatarImg = 4;
  if (this->avatarimg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarimg().data(), static_cast<int>(this->_internal_avatarimg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.CharacterAssets.avatarImg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatarimg(), target);
  }

  // string avatarImgOriginal = 5;
  if (this->avatarimgoriginal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarimgoriginal().data(), static_cast<int>(this->_internal_avatarimgoriginal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.CharacterAssets.avatarImgOriginal");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_avatarimgoriginal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.CharacterAssets)
  return target;
}

size_t CharacterAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.CharacterAssets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rpmModelUri = 1;
  if (this->rpmmodeluri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpmmodeluri());
  }

  // string rpmImageUriPortrait = 2;
  if (this->rpmimageuriportrait().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpmimageuriportrait());
  }

  // string rpmImageUriPosture = 3;
  if (this->rpmimageuriposture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpmimageuriposture());
  }

  // string avatarImg = 4;
  if (this->avatarimg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarimg());
  }

  // string avatarImgOriginal = 5;
  if (this->avatarimgoriginal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarimgoriginal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterAssets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.CharacterAssets)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterAssets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterAssets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.CharacterAssets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.CharacterAssets)
    MergeFrom(*source);
  }
}

void CharacterAssets::MergeFrom(const CharacterAssets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.CharacterAssets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rpmmodeluri().size() > 0) {
    _internal_set_rpmmodeluri(from._internal_rpmmodeluri());
  }
  if (from.rpmimageuriportrait().size() > 0) {
    _internal_set_rpmimageuriportrait(from._internal_rpmimageuriportrait());
  }
  if (from.rpmimageuriposture().size() > 0) {
    _internal_set_rpmimageuriposture(from._internal_rpmimageuriposture());
  }
  if (from.avatarimg().size() > 0) {
    _internal_set_avatarimg(from._internal_avatarimg());
  }
  if (from.avatarimgoriginal().size() > 0) {
    _internal_set_avatarimgoriginal(from._internal_avatarimgoriginal());
  }
}

void CharacterAssets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.CharacterAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterAssets::CopyFrom(const CharacterAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.CharacterAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterAssets::IsInitialized() const {
  return true;
}

void CharacterAssets::InternalSwap(CharacterAssets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpmmodeluri_.Swap(&other->rpmmodeluri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rpmimageuriportrait_.Swap(&other->rpmimageuriportrait_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rpmimageuriposture_.Swap(&other->rpmimageuriposture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatarimg_.Swap(&other->avatarimg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatarimgoriginal_.Swap(&other->avatarimgoriginal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterAssets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientOptions::_Internal {
 public:
  static const ::inworld::ndkData::CapabilitiesRequest& capabilities(const ClientOptions* msg);
};

const ::inworld::ndkData::CapabilitiesRequest&
ClientOptions::_Internal::capabilities(const ClientOptions* msg) {
  return *msg->capabilities_;
}
ClientOptions::ClientOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.ClientOptions)
}
ClientOptions::ClientOptions(const ClientOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_url().empty()) {
    server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_url(), 
      GetArena());
  }
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_name().empty()) {
    scene_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_name(), 
      GetArena());
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key(), 
      GetArena());
  }
  api_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_secret().empty()) {
    api_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_secret(), 
      GetArena());
  }
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  if (from._internal_has_capabilities()) {
    capabilities_ = new ::inworld::ndkData::CapabilitiesRequest(*from.capabilities_);
  } else {
    capabilities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.ClientOptions)
}

void ClientOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientOptions_inworld_5fndkData_2eproto.base);
  server_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capabilities_ = nullptr;
}

ClientOptions::~ClientOptions() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.ClientOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scene_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capabilities_;
}

void ClientOptions::ArenaDtor(void* object) {
  ClientOptions* _this = reinterpret_cast< ClientOptions* >(object);
  (void)_this;
}
void ClientOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientOptions& ClientOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientOptions_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void ClientOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.ClientOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_url_.ClearToEmpty();
  scene_name_.ClearToEmpty();
  api_key_.ClearToEmpty();
  api_secret_.ClearToEmpty();
  player_name_.ClearToEmpty();
  token_.ClearToEmpty();
  session_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.server_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scene_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scene_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.scene_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_secret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_api_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.api_secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.player_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.ClientOptions.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inworld.ndkData.CapabilitiesRequest capabilities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.ClientOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_url = 2;
  if (this->server_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_url().data(), static_cast<int>(this->_internal_server_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.server_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_url(), target);
  }

  // string scene_name = 3;
  if (this->scene_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_name().data(), static_cast<int>(this->_internal_scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.scene_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scene_name(), target);
  }

  // string api_key = 4;
  if (this->api_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.api_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_api_key(), target);
  }

  // string api_secret = 5;
  if (this->api_secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_secret().data(), static_cast<int>(this->_internal_api_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.api_secret");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_api_secret(), target);
  }

  // string player_name = 6;
  if (this->player_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.player_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player_name(), target);
  }

  // string token = 7;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.token");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_token(), target);
  }

  // string session_id = 8;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.session_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_session_id(), target);
  }

  // string user_id = 9;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // .inworld.ndkData.CapabilitiesRequest capabilities = 10;
  if (this->has_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::capabilities(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.ClientOptions)
  return target;
}

size_t ClientOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.ClientOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_url = 2;
  if (this->server_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_url());
  }

  // string scene_name = 3;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_name());
  }

  // string api_key = 4;
  if (this->api_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string api_secret = 5;
  if (this->api_secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_secret());
  }

  // string player_name = 6;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // string token = 7;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string session_id = 8;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string user_id = 9;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .inworld.ndkData.CapabilitiesRequest capabilities = 10;
  if (this->has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.ClientOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.ClientOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.ClientOptions)
    MergeFrom(*source);
  }
}

void ClientOptions::MergeFrom(const ClientOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.ClientOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_url().size() > 0) {
    _internal_set_server_url(from._internal_server_url());
  }
  if (from.scene_name().size() > 0) {
    _internal_set_scene_name(from._internal_scene_name());
  }
  if (from.api_key().size() > 0) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (from.api_secret().size() > 0) {
    _internal_set_api_secret(from._internal_api_secret());
  }
  if (from.player_name().size() > 0) {
    _internal_set_player_name(from._internal_player_name());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.has_capabilities()) {
    _internal_mutable_capabilities()->::inworld::ndkData::CapabilitiesRequest::MergeFrom(from._internal_capabilities());
  }
}

void ClientOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.ClientOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientOptions::CopyFrom(const ClientOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.ClientOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOptions::IsInitialized() const {
  return true;
}

void ClientOptions::InternalSwap(ClientOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_url_.Swap(&other->server_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scene_name_.Swap(&other->scene_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  api_key_.Swap(&other->api_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  api_secret_.Swap(&other->api_secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(capabilities_, other->capabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgentInfo::_Internal {
 public:
};

AgentInfo::AgentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.AgentInfo)
}
AgentInfo::AgentInfo(const AgentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brainname().empty()) {
    brainname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brainname(), 
      GetArena());
  }
  agentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agentid().empty()) {
    agentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agentid(), 
      GetArena());
  }
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_givenname().empty()) {
    givenname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_givenname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.AgentInfo)
}

void AgentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentInfo_inworld_5fndkData_2eproto.base);
  brainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AgentInfo::~AgentInfo() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.AgentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brainname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentInfo::ArenaDtor(void* object) {
  AgentInfo* _this = reinterpret_cast< AgentInfo* >(object);
  (void)_this;
}
void AgentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentInfo& AgentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentInfo_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void AgentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.AgentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brainname_.ClearToEmpty();
  agentid_.ClearToEmpty();
  givenname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BrainName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brainname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.AgentInfo.BrainName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string AgentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_agentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.AgentInfo.AgentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string GivenName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_givenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.AgentInfo.GivenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.AgentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BrainName = 1;
  if (this->brainname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brainname().data(), static_cast<int>(this->_internal_brainname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.AgentInfo.BrainName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brainname(), target);
  }

  // string AgentId = 2;
  if (this->agentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agentid().data(), static_cast<int>(this->_internal_agentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.AgentInfo.AgentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agentid(), target);
  }

  // string GivenName = 3;
  if (this->givenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_givenname().data(), static_cast<int>(this->_internal_givenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.AgentInfo.GivenName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_givenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.AgentInfo)
  return target;
}

size_t AgentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.AgentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BrainName = 1;
  if (this->brainname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brainname());
  }

  // string AgentId = 2;
  if (this->agentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agentid());
  }

  // string GivenName = 3;
  if (this->givenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_givenname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.AgentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.AgentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.AgentInfo)
    MergeFrom(*source);
  }
}

void AgentInfo::MergeFrom(const AgentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.AgentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brainname().size() > 0) {
    _internal_set_brainname(from._internal_brainname());
  }
  if (from.agentid().size() > 0) {
    _internal_set_agentid(from._internal_agentid());
  }
  if (from.givenname().size() > 0) {
    _internal_set_givenname(from._internal_givenname());
  }
}

void AgentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.AgentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.AgentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  return true;
}

void AgentInfo::InternalSwap(AgentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brainname_.Swap(&other->brainname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agentid_.Swap(&other->agentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  givenname_.Swap(&other->givenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionInfo::_Internal {
 public:
};

SessionInfo::SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.SessionInfo)
}
SessionInfo::SessionInfo(const SessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&expirationtime_, &from.expirationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvalid_) -
    reinterpret_cast<char*>(&expirationtime_)) + sizeof(isvalid_));
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.SessionInfo)
}

void SessionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionInfo_inworld_5fndkData_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&expirationtime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&expirationtime_)) + sizeof(isvalid_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.SessionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionInfo::ArenaDtor(void* object) {
  SessionInfo* _this = reinterpret_cast< SessionInfo* >(object);
  (void)_this;
}
void SessionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionInfo& SessionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionInfo_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.SessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&expirationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&expirationtime_)) + sizeof(isvalid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string SessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.SessionInfo.SessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inworld.ndkData.SessionInfo.Token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ExpirationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expirationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsValid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.SessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.SessionInfo.SessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // string Token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.SessionInfo.Token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // int64 ExpirationTime = 3;
  if (this->expirationtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expirationtime(), target);
  }

  // bool IsValid = 4;
  if (this->isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.SessionInfo)
  return target;
}

size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.SessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string Token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 ExpirationTime = 3;
  if (this->expirationtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expirationtime());
  }

  // bool IsValid = 4;
  if (this->isvalid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.SessionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.SessionInfo)
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.expirationtime() != 0) {
    _internal_set_expirationtime(from._internal_expirationtime());
  }
  if (from.isvalid() != 0) {
    _internal_set_isvalid(from._internal_isvalid());
  }
}

void SessionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  return true;
}

void SessionInfo::InternalSwap(SessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionInfo, isvalid_)
      + sizeof(SessionInfo::isvalid_)
      - PROTOBUF_FIELD_OFFSET(SessionInfo, expirationtime_)>(
          reinterpret_cast<char*>(&expirationtime_),
          reinterpret_cast<char*>(&other->expirationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgentInfoArray::_Internal {
 public:
};

AgentInfoArray::AgentInfoArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.AgentInfoArray)
}
AgentInfoArray::AgentInfoArray(const AgentInfoArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_info_list_(from.agent_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.AgentInfoArray)
}

void AgentInfoArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentInfoArray_inworld_5fndkData_2eproto.base);
}

AgentInfoArray::~AgentInfoArray() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.AgentInfoArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentInfoArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgentInfoArray::ArenaDtor(void* object) {
  AgentInfoArray* _this = reinterpret_cast< AgentInfoArray* >(object);
  (void)_this;
}
void AgentInfoArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentInfoArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentInfoArray& AgentInfoArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentInfoArray_inworld_5fndkData_2eproto.base);
  return *internal_default_instance();
}


void AgentInfoArray::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.AgentInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_info_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfoArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agent_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentInfoArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.AgentInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agent_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agent_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.AgentInfoArray)
  return target;
}

size_t AgentInfoArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.AgentInfoArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
  total_size += 1UL * this->_internal_agent_info_list_size();
  for (const auto& msg : this->agent_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentInfoArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inworld.ndkData.AgentInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentInfoArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentInfoArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inworld.ndkData.AgentInfoArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inworld.ndkData.AgentInfoArray)
    MergeFrom(*source);
  }
}

void AgentInfoArray::MergeFrom(const AgentInfoArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.AgentInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_info_list_.MergeFrom(from.agent_info_list_);
}

void AgentInfoArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inworld.ndkData.AgentInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfoArray::CopyFrom(const AgentInfoArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.AgentInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfoArray::IsInitialized() const {
  return true;
}

void AgentInfoArray::InternalSwap(AgentInfoArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_info_list_.InternalSwap(&other->agent_info_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfoArray::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ndkData
}  // namespace inworld
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inworld::ndkData::Token* Arena::CreateMaybeMessage< ::inworld::ndkData::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::LoadSceneRequest* Arena::CreateMaybeMessage< ::inworld::ndkData::LoadSceneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::LoadSceneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::LoadSceneResponse* Arena::CreateMaybeMessage< ::inworld::ndkData::LoadSceneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::LoadSceneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::UserRequest* Arena::CreateMaybeMessage< ::inworld::ndkData::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::UserSettings* Arena::CreateMaybeMessage< ::inworld::ndkData::UserSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::UserSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::PlayerProfile* Arena::CreateMaybeMessage< ::inworld::ndkData::PlayerProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::PlayerProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::Fields* Arena::CreateMaybeMessage< ::inworld::ndkData::Fields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::Fields >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::ClientRequest* Arena::CreateMaybeMessage< ::inworld::ndkData::ClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::ClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::CapabilitiesRequest* Arena::CreateMaybeMessage< ::inworld::ndkData::CapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::CapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::InworldCharacterData* Arena::CreateMaybeMessage< ::inworld::ndkData::InworldCharacterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::InworldCharacterData >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::CharacterAssets* Arena::CreateMaybeMessage< ::inworld::ndkData::CharacterAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::CharacterAssets >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::ClientOptions* Arena::CreateMaybeMessage< ::inworld::ndkData::ClientOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::ClientOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::AgentInfo* Arena::CreateMaybeMessage< ::inworld::ndkData::AgentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::AgentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::SessionInfo* Arena::CreateMaybeMessage< ::inworld::ndkData::SessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::SessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::AgentInfoArray* Arena::CreateMaybeMessage< ::inworld::ndkData::AgentInfoArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::AgentInfoArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
